
LCD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091e0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  08009390  08009390  0000a390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098b0  080098b0  0000b060  2**0
                  CONTENTS
  4 .ARM          00000008  080098b0  080098b0  0000a8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098b8  080098b8  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098b8  080098b8  0000a8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098bc  080098bc  0000a8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080098c0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b060  2**0
                  CONTENTS
 10 .bss          00000888  20000060  20000060  0000b060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008e8  200008e8  0000b060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001511e  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003703  00000000  00000000  000201ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  000238b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6c  00000000  00000000  00024b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002643b  00000000  00000000  000259bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019e65  00000000  00000000  0004bdf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de2f6  00000000  00000000  00065c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00143f52  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005134  00000000  00000000  00143f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001490cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009378 	.word	0x08009378

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08009378 	.word	0x08009378

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <I2C_WritePage>:
uint8_t rbuff[EEPROM_WRITE_LEN] ={0};
uint8_t I2C_TxBuff[I2C_PageSize + 1] ={0};
uint8_t I2C_TEST1_EEPROM = STD_ON;

void I2C_WritePage(uint8_t* pBuffer, uint8_t WriteAddr, uint8_t len)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af02      	add	r7, sp, #8
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
 800058c:	4613      	mov	r3, r2
 800058e:	70bb      	strb	r3, [r7, #2]
    }
    while (EEPROM_TX_STA != STD_ON);
    EEPROM_TX_STA = STD_OFF;
    HAL_I2C_Master_Transmit_IT(&hi2c1, EEPROM_ADDRESS, I2C_TxBuff, len + 1);
#elif (I2C_EEPROM_COM == I2C_MEM_DMA)
    while (EEPROM_TX_STA != STD_ON);
 8000590:	bf00      	nop
 8000592:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <I2C_WritePage+0x58>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d1fb      	bne.n	8000592 <I2C_WritePage+0x12>
    EEPROM_TX_STA = STD_OFF;
 800059a:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <I2C_WritePage+0x58>)
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write_DMA(&hi2c1, EEPROM_ADDRESS, WriteAddr, I2C_MEMADD_SIZE_8BIT, pBuffer, len);
 80005a0:	78fb      	ldrb	r3, [r7, #3]
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	78bb      	ldrb	r3, [r7, #2]
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2301      	movs	r3, #1
 80005b0:	21a0      	movs	r1, #160	@ 0xa0
 80005b2:	480a      	ldr	r0, [pc, #40]	@ (80005dc <I2C_WritePage+0x5c>)
 80005b4:	f002 fdb0 	bl	8003118 <HAL_I2C_Mem_Write_DMA>
#else
    LOG_INFO("I2C_EEPROM_COM is not defined.\n");
#endif
    while (HAL_I2C_IsDeviceReady(&hi2c1, EEPROM_ADDRESS, EEPROM_TRIAL_TIMES, 100) != HAL_OK);
 80005b8:	bf00      	nop
 80005ba:	2364      	movs	r3, #100	@ 0x64
 80005bc:	220a      	movs	r2, #10
 80005be:	21a0      	movs	r1, #160	@ 0xa0
 80005c0:	4806      	ldr	r0, [pc, #24]	@ (80005dc <I2C_WritePage+0x5c>)
 80005c2:	f003 f897 	bl	80036f4 <HAL_I2C_IsDeviceReady>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1f6      	bne.n	80005ba <I2C_WritePage+0x3a>
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000
 80005dc:	200004ec 	.word	0x200004ec

080005e0 <I2C_ReadPage>:

void I2C_ReadPage(uint8_t* pBuffer, uint8_t ReadAddr, uint8_t len)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	70fb      	strb	r3, [r7, #3]
 80005ec:	4613      	mov	r3, r2
 80005ee:	70bb      	strb	r3, [r7, #2]
	}while(ret != 0);
    while (EEPROM_RX_STA != STD_ON);
    EEPROM_RX_STA = STD_OFF;
    HAL_I2C_Master_Receive_IT(&hi2c1, EEPROM_ADDRESS, pBuffer, len);
#elif (I2C_EEPROM_COM == I2C_MEM_DMA)
    while (EEPROM_RX_STA != STD_ON);
 80005f0:	bf00      	nop
 80005f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000620 <I2C_ReadPage+0x40>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d1fb      	bne.n	80005f2 <I2C_ReadPage+0x12>
    EEPROM_RX_STA = STD_OFF;
 80005fa:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <I2C_ReadPage+0x40>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read_DMA(&hi2c1, EEPROM_ADDRESS, ReadAddr, I2C_MEMADD_SIZE_8BIT, pBuffer, len);
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	b29a      	uxth	r2, r3
 8000604:	78bb      	ldrb	r3, [r7, #2]
 8000606:	b29b      	uxth	r3, r3
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2301      	movs	r3, #1
 8000610:	21a0      	movs	r1, #160	@ 0xa0
 8000612:	4804      	ldr	r0, [pc, #16]	@ (8000624 <I2C_ReadPage+0x44>)
 8000614:	f002 fede 	bl	80033d4 <HAL_I2C_Mem_Read_DMA>
#else
    LOG_INFO("I2C_EEPROM_COM is not defined.\n");
#endif
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000001 	.word	0x20000001
 8000624:	200004ec 	.word	0x200004ec

08000628 <I2C_EE_BufferWrite>:

void I2C_EE_BufferWrite(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t len)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	70fb      	strb	r3, [r7, #3]
 8000634:	4613      	mov	r3, r2
 8000636:	803b      	strh	r3, [r7, #0]
    uint8_t NumOfPage = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	73fb      	strb	r3, [r7, #15]
    uint8_t NumOfSingle = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	73bb      	strb	r3, [r7, #14]
    uint8_t count = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	737b      	strb	r3, [r7, #13]
    uint16_t Addr = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	817b      	strh	r3, [r7, #10]
    Addr = WriteAddr % I2C_PageSize;
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	b29b      	uxth	r3, r3
 800064c:	f003 0307 	and.w	r3, r3, #7
 8000650:	817b      	strh	r3, [r7, #10]
    count = I2C_PageSize - Addr;
 8000652:	897b      	ldrh	r3, [r7, #10]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	f1c3 0308 	rsb	r3, r3, #8
 800065a:	737b      	strb	r3, [r7, #13]
    NumOfPage = len / I2C_PageSize;
 800065c:	883b      	ldrh	r3, [r7, #0]
 800065e:	08db      	lsrs	r3, r3, #3
 8000660:	b29b      	uxth	r3, r3
 8000662:	73fb      	strb	r3, [r7, #15]
    NumOfSingle = len % I2C_PageSize;
 8000664:	883b      	ldrh	r3, [r7, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f003 0307 	and.w	r3, r3, #7
 800066c:	73bb      	strb	r3, [r7, #14]
    if(Addr == 0)
 800066e:	897b      	ldrh	r3, [r7, #10]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d125      	bne.n	80006c0 <I2C_EE_BufferWrite+0x98>
    {
        if(NumOfPage == 0)
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d113      	bne.n	80006a2 <I2C_EE_BufferWrite+0x7a>
        {
            I2C_WritePage(pBuffer, WriteAddr, len);
 800067a:	883b      	ldrh	r3, [r7, #0]
 800067c:	b2da      	uxtb	r2, r3
 800067e:	78fb      	ldrb	r3, [r7, #3]
 8000680:	4619      	mov	r1, r3
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff ff7c 	bl	8000580 <I2C_WritePage>
            {
                I2C_WritePage(pBuffer, WriteAddr, NumOfSingle);
            }
        }
    }
}
 8000688:	e078      	b.n	800077c <I2C_EE_BufferWrite+0x154>
                I2C_WritePage(pBuffer, WriteAddr, I2C_PageSize);
 800068a:	78fb      	ldrb	r3, [r7, #3]
 800068c:	2208      	movs	r2, #8
 800068e:	4619      	mov	r1, r3
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f7ff ff75 	bl	8000580 <I2C_WritePage>
                WriteAddr += I2C_PageSize;
 8000696:	78fb      	ldrb	r3, [r7, #3]
 8000698:	3308      	adds	r3, #8
 800069a:	70fb      	strb	r3, [r7, #3]
                pBuffer += I2C_PageSize;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3308      	adds	r3, #8
 80006a0:	607b      	str	r3, [r7, #4]
            while(NumOfPage--)
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	1e5a      	subs	r2, r3, #1
 80006a6:	73fa      	strb	r2, [r7, #15]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d1ee      	bne.n	800068a <I2C_EE_BufferWrite+0x62>
            if(NumOfSingle != 0)
 80006ac:	7bbb      	ldrb	r3, [r7, #14]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d064      	beq.n	800077c <I2C_EE_BufferWrite+0x154>
                I2C_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80006b2:	7bba      	ldrb	r2, [r7, #14]
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	4619      	mov	r1, r3
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff ff61 	bl	8000580 <I2C_WritePage>
}
 80006be:	e05d      	b.n	800077c <I2C_EE_BufferWrite+0x154>
        if(NumOfPage == 0)
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d123      	bne.n	800070e <I2C_EE_BufferWrite+0xe6>
            if(NumOfSingle > count)
 80006c6:	7bba      	ldrb	r2, [r7, #14]
 80006c8:	7b7b      	ldrb	r3, [r7, #13]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d917      	bls.n	80006fe <I2C_EE_BufferWrite+0xd6>
                I2C_WritePage(pBuffer, WriteAddr, count);
 80006ce:	7b7a      	ldrb	r2, [r7, #13]
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	4619      	mov	r1, r3
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ff53 	bl	8000580 <I2C_WritePage>
                WriteAddr += count;
 80006da:	78fa      	ldrb	r2, [r7, #3]
 80006dc:	7b7b      	ldrb	r3, [r7, #13]
 80006de:	4413      	add	r3, r2
 80006e0:	70fb      	strb	r3, [r7, #3]
                pBuffer += count;
 80006e2:	7b7b      	ldrb	r3, [r7, #13]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	4413      	add	r3, r2
 80006e8:	607b      	str	r3, [r7, #4]
                I2C_WritePage(pBuffer, WriteAddr, NumOfSingle - count);
 80006ea:	7bba      	ldrb	r2, [r7, #14]
 80006ec:	7b7b      	ldrb	r3, [r7, #13]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	78fb      	ldrb	r3, [r7, #3]
 80006f4:	4619      	mov	r1, r3
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff ff42 	bl	8000580 <I2C_WritePage>
}
 80006fc:	e03e      	b.n	800077c <I2C_EE_BufferWrite+0x154>
                I2C_WritePage(pBuffer, WriteAddr, len);
 80006fe:	883b      	ldrh	r3, [r7, #0]
 8000700:	b2da      	uxtb	r2, r3
 8000702:	78fb      	ldrb	r3, [r7, #3]
 8000704:	4619      	mov	r1, r3
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ff3a 	bl	8000580 <I2C_WritePage>
}
 800070c:	e036      	b.n	800077c <I2C_EE_BufferWrite+0x154>
            len -= count;
 800070e:	7b7b      	ldrb	r3, [r7, #13]
 8000710:	b29b      	uxth	r3, r3
 8000712:	883a      	ldrh	r2, [r7, #0]
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	803b      	strh	r3, [r7, #0]
            NumOfPage = len / I2C_PageSize;
 8000718:	883b      	ldrh	r3, [r7, #0]
 800071a:	08db      	lsrs	r3, r3, #3
 800071c:	b29b      	uxth	r3, r3
 800071e:	73fb      	strb	r3, [r7, #15]
            NumOfSingle = len % I2C_PageSize;
 8000720:	883b      	ldrh	r3, [r7, #0]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	f003 0307 	and.w	r3, r3, #7
 8000728:	73bb      	strb	r3, [r7, #14]
            I2C_WritePage(pBuffer, WriteAddr, count);
 800072a:	7b7a      	ldrb	r2, [r7, #13]
 800072c:	78fb      	ldrb	r3, [r7, #3]
 800072e:	4619      	mov	r1, r3
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff ff25 	bl	8000580 <I2C_WritePage>
            WriteAddr += count;
 8000736:	78fa      	ldrb	r2, [r7, #3]
 8000738:	7b7b      	ldrb	r3, [r7, #13]
 800073a:	4413      	add	r3, r2
 800073c:	70fb      	strb	r3, [r7, #3]
            pBuffer += count;
 800073e:	7b7b      	ldrb	r3, [r7, #13]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	4413      	add	r3, r2
 8000744:	607b      	str	r3, [r7, #4]
            while(NumOfPage--)
 8000746:	e00b      	b.n	8000760 <I2C_EE_BufferWrite+0x138>
                I2C_WritePage(pBuffer, WriteAddr, I2C_PageSize);
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	2208      	movs	r2, #8
 800074c:	4619      	mov	r1, r3
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff ff16 	bl	8000580 <I2C_WritePage>
                WriteAddr += I2C_PageSize;
 8000754:	78fb      	ldrb	r3, [r7, #3]
 8000756:	3308      	adds	r3, #8
 8000758:	70fb      	strb	r3, [r7, #3]
                pBuffer += I2C_PageSize;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	3308      	adds	r3, #8
 800075e:	607b      	str	r3, [r7, #4]
            while(NumOfPage--)
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	1e5a      	subs	r2, r3, #1
 8000764:	73fa      	strb	r2, [r7, #15]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1ee      	bne.n	8000748 <I2C_EE_BufferWrite+0x120>
            if(NumOfSingle != 0)
 800076a:	7bbb      	ldrb	r3, [r7, #14]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d005      	beq.n	800077c <I2C_EE_BufferWrite+0x154>
                I2C_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8000770:	7bba      	ldrb	r2, [r7, #14]
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	4619      	mov	r1, r3
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff ff02 	bl	8000580 <I2C_WritePage>
}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <I2C_EE_BufferRead>:

uint32_t I2C_EE_BufferRead(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	70fb      	strb	r3, [r7, #3]
 8000790:	4613      	mov	r3, r2
 8000792:	803b      	strh	r3, [r7, #0]
    uint8_t Frontsize = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	73bb      	strb	r3, [r7, #14]
    uint8_t Endsize = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	737b      	strb	r3, [r7, #13]
    uint8_t NumOfPage = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	73fb      	strb	r3, [r7, #15]
    Frontsize = I2C_PageSize - ReadAddr % I2C_PageSize;
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	f1c3 0308 	rsb	r3, r3, #8
 80007ac:	73bb      	strb	r3, [r7, #14]
    Endsize = (NumByteToRead - Frontsize) % I2C_PageSize;
 80007ae:	883a      	ldrh	r2, [r7, #0]
 80007b0:	7bbb      	ldrb	r3, [r7, #14]
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	425a      	negs	r2, r3
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	f002 0207 	and.w	r2, r2, #7
 80007be:	bf58      	it	pl
 80007c0:	4253      	negpl	r3, r2
 80007c2:	737b      	strb	r3, [r7, #13]
    NumOfPage = (NumByteToRead - Frontsize - Endsize) / I2C_PageSize;
 80007c4:	883a      	ldrh	r2, [r7, #0]
 80007c6:	7bbb      	ldrb	r3, [r7, #14]
 80007c8:	1ad2      	subs	r2, r2, r3
 80007ca:	7b7b      	ldrb	r3, [r7, #13]
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	da00      	bge.n	80007d4 <I2C_EE_BufferRead+0x50>
 80007d2:	3307      	adds	r3, #7
 80007d4:	10db      	asrs	r3, r3, #3
 80007d6:	73fb      	strb	r3, [r7, #15]
    if(Frontsize == 0)
 80007d8:	7bbb      	ldrb	r3, [r7, #14]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d134      	bne.n	8000848 <I2C_EE_BufferRead+0xc4>
    {
        if(NumOfPage == 0)
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d107      	bne.n	80007f4 <I2C_EE_BufferRead+0x70>
        {
            I2C_ReadPage(pBuffer, ReadAddr, NumByteToRead);
 80007e4:	883b      	ldrh	r3, [r7, #0]
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	78fb      	ldrb	r3, [r7, #3]
 80007ea:	4619      	mov	r1, r3
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff fef7 	bl	80005e0 <I2C_ReadPage>
 80007f2:	e07b      	b.n	80008ec <I2C_EE_BufferRead+0x168>
        }
        else
        {
            I2C_ReadPage(pBuffer, ReadAddr, Frontsize);
 80007f4:	7bba      	ldrb	r2, [r7, #14]
 80007f6:	78fb      	ldrb	r3, [r7, #3]
 80007f8:	4619      	mov	r1, r3
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff fef0 	bl	80005e0 <I2C_ReadPage>
            pBuffer += Frontsize;
 8000800:	7bbb      	ldrb	r3, [r7, #14]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	607b      	str	r3, [r7, #4]
            ReadAddr += Frontsize;
 8000808:	78fa      	ldrb	r2, [r7, #3]
 800080a:	7bbb      	ldrb	r3, [r7, #14]
 800080c:	4413      	add	r3, r2
 800080e:	70fb      	strb	r3, [r7, #3]
            while(NumOfPage--)
 8000810:	e00b      	b.n	800082a <I2C_EE_BufferRead+0xa6>
            {
                I2C_ReadPage(pBuffer, ReadAddr, I2C_PageSize);
 8000812:	78fb      	ldrb	r3, [r7, #3]
 8000814:	2208      	movs	r2, #8
 8000816:	4619      	mov	r1, r3
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff fee1 	bl	80005e0 <I2C_ReadPage>
                pBuffer += I2C_PageSize;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	3308      	adds	r3, #8
 8000822:	607b      	str	r3, [r7, #4]
                ReadAddr += I2C_PageSize;
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	3308      	adds	r3, #8
 8000828:	70fb      	strb	r3, [r7, #3]
            while(NumOfPage--)
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	1e5a      	subs	r2, r3, #1
 800082e:	73fa      	strb	r2, [r7, #15]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d1ee      	bne.n	8000812 <I2C_EE_BufferRead+0x8e>
            }
            if(Endsize != 0)
 8000834:	7b7b      	ldrb	r3, [r7, #13]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d058      	beq.n	80008ec <I2C_EE_BufferRead+0x168>
            {
                I2C_ReadPage(pBuffer, ReadAddr, Endsize);
 800083a:	7b7a      	ldrb	r2, [r7, #13]
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	4619      	mov	r1, r3
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff fecd 	bl	80005e0 <I2C_ReadPage>
 8000846:	e051      	b.n	80008ec <I2C_EE_BufferRead+0x168>
            }
        }
    }
    else
    {
        if(NumOfPage == 0)
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d125      	bne.n	800089a <I2C_EE_BufferRead+0x116>
        {
            if(NumByteToRead > Frontsize)
 800084e:	7bbb      	ldrb	r3, [r7, #14]
 8000850:	b29b      	uxth	r3, r3
 8000852:	883a      	ldrh	r2, [r7, #0]
 8000854:	429a      	cmp	r2, r3
 8000856:	d918      	bls.n	800088a <I2C_EE_BufferRead+0x106>
            {
                I2C_ReadPage(pBuffer, ReadAddr, Frontsize);
 8000858:	7bba      	ldrb	r2, [r7, #14]
 800085a:	78fb      	ldrb	r3, [r7, #3]
 800085c:	4619      	mov	r1, r3
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff febe 	bl	80005e0 <I2C_ReadPage>
                pBuffer += Frontsize;
 8000864:	7bbb      	ldrb	r3, [r7, #14]
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	607b      	str	r3, [r7, #4]
                ReadAddr += Frontsize;
 800086c:	78fa      	ldrb	r2, [r7, #3]
 800086e:	7bbb      	ldrb	r3, [r7, #14]
 8000870:	4413      	add	r3, r2
 8000872:	70fb      	strb	r3, [r7, #3]
                I2C_ReadPage(pBuffer, ReadAddr, NumByteToRead - Frontsize);
 8000874:	883b      	ldrh	r3, [r7, #0]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	7bbb      	ldrb	r3, [r7, #14]
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	b2da      	uxtb	r2, r3
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	4619      	mov	r1, r3
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff feac 	bl	80005e0 <I2C_ReadPage>
 8000888:	e030      	b.n	80008ec <I2C_EE_BufferRead+0x168>
            }
            else
            {
                I2C_ReadPage(pBuffer, ReadAddr, NumByteToRead);
 800088a:	883b      	ldrh	r3, [r7, #0]
 800088c:	b2da      	uxtb	r2, r3
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	4619      	mov	r1, r3
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff fea4 	bl	80005e0 <I2C_ReadPage>
 8000898:	e028      	b.n	80008ec <I2C_EE_BufferRead+0x168>
            }
        }
        else
        {
            I2C_ReadPage(pBuffer, ReadAddr, Frontsize);
 800089a:	7bba      	ldrb	r2, [r7, #14]
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	4619      	mov	r1, r3
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff fe9d 	bl	80005e0 <I2C_ReadPage>
            pBuffer += Frontsize;
 80008a6:	7bbb      	ldrb	r3, [r7, #14]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	4413      	add	r3, r2
 80008ac:	607b      	str	r3, [r7, #4]
            ReadAddr += Frontsize;
 80008ae:	78fa      	ldrb	r2, [r7, #3]
 80008b0:	7bbb      	ldrb	r3, [r7, #14]
 80008b2:	4413      	add	r3, r2
 80008b4:	70fb      	strb	r3, [r7, #3]
            while(NumOfPage--)
 80008b6:	e00b      	b.n	80008d0 <I2C_EE_BufferRead+0x14c>
            {
                I2C_ReadPage(pBuffer, ReadAddr, I2C_PageSize);
 80008b8:	78fb      	ldrb	r3, [r7, #3]
 80008ba:	2208      	movs	r2, #8
 80008bc:	4619      	mov	r1, r3
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff fe8e 	bl	80005e0 <I2C_ReadPage>
                pBuffer += I2C_PageSize;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3308      	adds	r3, #8
 80008c8:	607b      	str	r3, [r7, #4]
                ReadAddr += I2C_PageSize;
 80008ca:	78fb      	ldrb	r3, [r7, #3]
 80008cc:	3308      	adds	r3, #8
 80008ce:	70fb      	strb	r3, [r7, #3]
            while(NumOfPage--)
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	1e5a      	subs	r2, r3, #1
 80008d4:	73fa      	strb	r2, [r7, #15]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1ee      	bne.n	80008b8 <I2C_EE_BufferRead+0x134>
            }
            if(Endsize != 0)
 80008da:	7b7b      	ldrb	r3, [r7, #13]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d005      	beq.n	80008ec <I2C_EE_BufferRead+0x168>
            {
                I2C_ReadPage(pBuffer, ReadAddr, Endsize);
 80008e0:	7b7a      	ldrb	r2, [r7, #13]
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	4619      	mov	r1, r3
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff fe7a 	bl	80005e0 <I2C_ReadPage>
            }
        }
    }

}
 80008ec:	bf00      	nop
 80008ee:	4618      	mov	r0, r3
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <I2C_Test1>:
    EEPROM_INFO("Rx_Status: %d.\n", EEPROM_RX_STA);
    return 1;
}

void I2C_Test1(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
    uint8_t ret = 1;
 80008fe:	2301      	movs	r3, #1
 8000900:	71fb      	strb	r3, [r7, #7]
    uint16_t i;
    if(I2C_TEST1_EEPROM == STD_ON)
 8000902:	4b44      	ldr	r3, [pc, #272]	@ (8000a14 <I2C_Test1+0x11c>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d174      	bne.n	80009f4 <I2C_Test1+0xfc>
    {
        EEPROM_INFO("---------I2C_Test2_Begin----------\n");
 800090a:	4843      	ldr	r0, [pc, #268]	@ (8000a18 <I2C_Test1+0x120>)
 800090c:	f000 fb2a 	bl	8000f64 <DEBUG_PRINTF>
        for(i = 0; i < EEPROM_WRITE_LEN; i++)
 8000910:	2300      	movs	r3, #0
 8000912:	80bb      	strh	r3, [r7, #4]
 8000914:	e017      	b.n	8000946 <I2C_Test1+0x4e>
        {
            wbuff[i] = (uint8_t)i;
 8000916:	88bb      	ldrh	r3, [r7, #4]
 8000918:	88ba      	ldrh	r2, [r7, #4]
 800091a:	b2d1      	uxtb	r1, r2
 800091c:	4a3f      	ldr	r2, [pc, #252]	@ (8000a1c <I2C_Test1+0x124>)
 800091e:	54d1      	strb	r1, [r2, r3]
            LOG_INFO("0x%02X ", wbuff[i]);
 8000920:	88bb      	ldrh	r3, [r7, #4]
 8000922:	4a3e      	ldr	r2, [pc, #248]	@ (8000a1c <I2C_Test1+0x124>)
 8000924:	5cd3      	ldrb	r3, [r2, r3]
 8000926:	4619      	mov	r1, r3
 8000928:	483d      	ldr	r0, [pc, #244]	@ (8000a20 <I2C_Test1+0x128>)
 800092a:	f000 fb71 	bl	8001010 <SIMPLY_PRINTF>
            if(i%16 == 15)
 800092e:	88bb      	ldrh	r3, [r7, #4]
 8000930:	f003 030f 	and.w	r3, r3, #15
 8000934:	b29b      	uxth	r3, r3
 8000936:	2b0f      	cmp	r3, #15
 8000938:	d102      	bne.n	8000940 <I2C_Test1+0x48>
            {
                LOG_INFO("\n\r");
 800093a:	483a      	ldr	r0, [pc, #232]	@ (8000a24 <I2C_Test1+0x12c>)
 800093c:	f000 fb68 	bl	8001010 <SIMPLY_PRINTF>
        for(i = 0; i < EEPROM_WRITE_LEN; i++)
 8000940:	88bb      	ldrh	r3, [r7, #4]
 8000942:	3301      	adds	r3, #1
 8000944:	80bb      	strh	r3, [r7, #4]
 8000946:	88bb      	ldrh	r3, [r7, #4]
 8000948:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800094c:	d3e3      	bcc.n	8000916 <I2C_Test1+0x1e>
            }
        }
        LOG_INFO("\n\r");
 800094e:	4835      	ldr	r0, [pc, #212]	@ (8000a24 <I2C_Test1+0x12c>)
 8000950:	f000 fb5e 	bl	8001010 <SIMPLY_PRINTF>
        I2C_EE_BufferWrite(wbuff, 0x00, EEPROM_WRITE_LEN);
 8000954:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8000958:	2100      	movs	r1, #0
 800095a:	4830      	ldr	r0, [pc, #192]	@ (8000a1c <I2C_Test1+0x124>)
 800095c:	f7ff fe64 	bl	8000628 <I2C_EE_BufferWrite>
        EEPROM_INFO("Write Success\n");
 8000960:	4831      	ldr	r0, [pc, #196]	@ (8000a28 <I2C_Test1+0x130>)
 8000962:	f000 faff 	bl	8000f64 <DEBUG_PRINTF>
    
        EEPROM_INFO("Read Data.\n");
 8000966:	4831      	ldr	r0, [pc, #196]	@ (8000a2c <I2C_Test1+0x134>)
 8000968:	f000 fafc 	bl	8000f64 <DEBUG_PRINTF>
        I2C_EE_BufferRead(rbuff, 0x00, EEPROM_WRITE_LEN);
 800096c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8000970:	2100      	movs	r1, #0
 8000972:	482f      	ldr	r0, [pc, #188]	@ (8000a30 <I2C_Test1+0x138>)
 8000974:	f7ff ff06 	bl	8000784 <I2C_EE_BufferRead>
        //将I2c_Buf_Read中的数据通过串口打印
        for (i = 0; i < EEPROM_WRITE_LEN; i++)
 8000978:	2300      	movs	r3, #0
 800097a:	80bb      	strh	r3, [r7, #4]
 800097c:	e02a      	b.n	80009d4 <I2C_Test1+0xdc>
        {	
            if(wbuff[i] != rbuff[i])
 800097e:	88bb      	ldrh	r3, [r7, #4]
 8000980:	4a26      	ldr	r2, [pc, #152]	@ (8000a1c <I2C_Test1+0x124>)
 8000982:	5cd2      	ldrb	r2, [r2, r3]
 8000984:	88bb      	ldrh	r3, [r7, #4]
 8000986:	492a      	ldr	r1, [pc, #168]	@ (8000a30 <I2C_Test1+0x138>)
 8000988:	5ccb      	ldrb	r3, [r1, r3]
 800098a:	429a      	cmp	r2, r3
 800098c:	d00f      	beq.n	80009ae <I2C_Test1+0xb6>
            {
                LOG_INFO("0x%02X ", rbuff[i]);
 800098e:	88bb      	ldrh	r3, [r7, #4]
 8000990:	4a27      	ldr	r2, [pc, #156]	@ (8000a30 <I2C_Test1+0x138>)
 8000992:	5cd3      	ldrb	r3, [r2, r3]
 8000994:	4619      	mov	r1, r3
 8000996:	4822      	ldr	r0, [pc, #136]	@ (8000a20 <I2C_Test1+0x128>)
 8000998:	f000 fb3a 	bl	8001010 <SIMPLY_PRINTF>
                EEPROM_ERROR("Error: I2C EEPROM Read/Write Test Failed\n");
 800099c:	4825      	ldr	r0, [pc, #148]	@ (8000a34 <I2C_Test1+0x13c>)
 800099e:	f000 fae1 	bl	8000f64 <DEBUG_PRINTF>
                ret = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	71fb      	strb	r3, [r7, #7]
                EEPROM_INFO("---------I2C_Test1 End Fail-------------\n");
 80009a6:	4824      	ldr	r0, [pc, #144]	@ (8000a38 <I2C_Test1+0x140>)
 80009a8:	f000 fadc 	bl	8000f64 <DEBUG_PRINTF>
                goto I2C_Test1_Endlabel;
 80009ac:	e023      	b.n	80009f6 <I2C_Test1+0xfe>
            }
            LOG_INFO("0x%02X ", rbuff[i]);
 80009ae:	88bb      	ldrh	r3, [r7, #4]
 80009b0:	4a1f      	ldr	r2, [pc, #124]	@ (8000a30 <I2C_Test1+0x138>)
 80009b2:	5cd3      	ldrb	r3, [r2, r3]
 80009b4:	4619      	mov	r1, r3
 80009b6:	481a      	ldr	r0, [pc, #104]	@ (8000a20 <I2C_Test1+0x128>)
 80009b8:	f000 fb2a 	bl	8001010 <SIMPLY_PRINTF>
            if(i%16 == 15)
 80009bc:	88bb      	ldrh	r3, [r7, #4]
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d102      	bne.n	80009ce <I2C_Test1+0xd6>
            {
                LOG_INFO("\n\r");
 80009c8:	4816      	ldr	r0, [pc, #88]	@ (8000a24 <I2C_Test1+0x12c>)
 80009ca:	f000 fb21 	bl	8001010 <SIMPLY_PRINTF>
        for (i = 0; i < EEPROM_WRITE_LEN; i++)
 80009ce:	88bb      	ldrh	r3, [r7, #4]
 80009d0:	3301      	adds	r3, #1
 80009d2:	80bb      	strh	r3, [r7, #4]
 80009d4:	88bb      	ldrh	r3, [r7, #4]
 80009d6:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80009da:	d3d0      	bcc.n	800097e <I2C_Test1+0x86>
            }
        }
        LOG_INFO("\n\r");
 80009dc:	4811      	ldr	r0, [pc, #68]	@ (8000a24 <I2C_Test1+0x12c>)
 80009de:	f000 fb17 	bl	8001010 <SIMPLY_PRINTF>
        EEPROM_INFO("I2C(AT24C02) EEPROM Read/Write Test Success\n");
 80009e2:	4816      	ldr	r0, [pc, #88]	@ (8000a3c <I2C_Test1+0x144>)
 80009e4:	f000 fabe 	bl	8000f64 <DEBUG_PRINTF>
        ret = 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	71fb      	strb	r3, [r7, #7]
        EEPROM_INFO("---------I2C_Test1 End Success----------\n");
 80009ec:	4814      	ldr	r0, [pc, #80]	@ (8000a40 <I2C_Test1+0x148>)
 80009ee:	f000 fab9 	bl	8000f64 <DEBUG_PRINTF>
        goto I2C_Test1_Endlabel;
 80009f2:	e000      	b.n	80009f6 <I2C_Test1+0xfe>
    }
I2C_Test1_Endlabel:
 80009f4:	bf00      	nop
    if(ret == 1)
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d103      	bne.n	8000a04 <I2C_Test1+0x10c>
    {
        I2C_TEST1_EEPROM = STD_OFF;
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <I2C_Test1+0x11c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        I2C_TEST1_EEPROM = STD_ON;
    }
}
 8000a02:	e002      	b.n	8000a0a <I2C_Test1+0x112>
        I2C_TEST1_EEPROM = STD_ON;
 8000a04:	4b03      	ldr	r3, [pc, #12]	@ (8000a14 <I2C_Test1+0x11c>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000002 	.word	0x20000002
 8000a18:	08009448 	.word	0x08009448
 8000a1c:	2000007c 	.word	0x2000007c
 8000a20:	0800948c 	.word	0x0800948c
 8000a24:	08009494 	.word	0x08009494
 8000a28:	08009498 	.word	0x08009498
 8000a2c:	080094c8 	.word	0x080094c8
 8000a30:	20000180 	.word	0x20000180
 8000a34:	080094f4 	.word	0x080094f4
 8000a38:	08009540 	.word	0x08009540
 8000a3c:	08009588 	.word	0x08009588
 8000a40:	080095d4 	.word	0x080095d4

08000a44 <HAL_I2C_MasterTxCpltCallback>:


/************ Interrupt Function *****************/
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
    if(EEPROM_I2C == hi2c)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a06      	ldr	r2, [pc, #24]	@ (8000a68 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d102      	bne.n	8000a5a <HAL_I2C_MasterTxCpltCallback+0x16>
    {
        EEPROM_TX_STA = STD_ON;
 8000a54:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <HAL_I2C_MasterTxCpltCallback+0x28>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	701a      	strb	r2, [r3, #0]
    }
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	200004ec 	.word	0x200004ec
 8000a6c:	20000000 	.word	0x20000000

08000a70 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
    if(EEPROM_I2C == hi2c)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a06      	ldr	r2, [pc, #24]	@ (8000a94 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d102      	bne.n	8000a86 <HAL_I2C_MasterRxCpltCallback+0x16>
    {
        EEPROM_RX_STA = STD_ON;
 8000a80:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
    }
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	200004ec 	.word	0x200004ec
 8000a98:	20000001 	.word	0x20000001

08000a9c <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    if(EEPROM_I2C == hi2c)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a06      	ldr	r2, [pc, #24]	@ (8000ac0 <HAL_I2C_MemTxCpltCallback+0x24>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d102      	bne.n	8000ab2 <HAL_I2C_MemTxCpltCallback+0x16>
    {
        EEPROM_TX_STA = STD_ON;
 8000aac:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <HAL_I2C_MemTxCpltCallback+0x28>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
    }
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	200004ec 	.word	0x200004ec
 8000ac4:	20000000 	.word	0x20000000

08000ac8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
    if(EEPROM_I2C == hi2c)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a06      	ldr	r2, [pc, #24]	@ (8000aec <HAL_I2C_MemRxCpltCallback+0x24>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d102      	bne.n	8000ade <HAL_I2C_MemRxCpltCallback+0x16>
    {
        EEPROM_RX_STA = STD_ON;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <HAL_I2C_MemRxCpltCallback+0x28>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
    }
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	200004ec 	.word	0x200004ec
 8000af0:	20000001 	.word	0x20000001

08000af4 <SPI_WriteData>:
//     GPIO_Init(LCD_CTRLB, &GPIO_InitStructure);						//初始化
// }

//向SPI总线传输一个8位数据
void  SPI_WriteData(uint8_t Data)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
#if (VIRTUAL_SPI_LCD == STD_ON)
    unsigned char i=0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	73fb      	strb	r3, [r7, #15]
    for(i=8;i>0;i--)
 8000b02:	2308      	movs	r3, #8
 8000b04:	73fb      	strb	r3, [r7, #15]
 8000b06:	e01e      	b.n	8000b46 <SPI_WriteData+0x52>
    {
        if(Data&0x80)
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	da05      	bge.n	8000b1c <SPI_WriteData+0x28>
        {
            LCD_SDA_SET; //输出数据
 8000b10:	2201      	movs	r2, #1
 8000b12:	2108      	movs	r1, #8
 8000b14:	4810      	ldr	r0, [pc, #64]	@ (8000b58 <SPI_WriteData+0x64>)
 8000b16:	f002 f98b 	bl	8002e30 <HAL_GPIO_WritePin>
 8000b1a:	e004      	b.n	8000b26 <SPI_WriteData+0x32>
        }
        else
        {
            LCD_SDA_CLR;
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2108      	movs	r1, #8
 8000b20:	480d      	ldr	r0, [pc, #52]	@ (8000b58 <SPI_WriteData+0x64>)
 8000b22:	f002 f985 	bl	8002e30 <HAL_GPIO_WritePin>
        }
        LCD_SCL_CLR;       
 8000b26:	2200      	movs	r2, #0
 8000b28:	2104      	movs	r1, #4
 8000b2a:	480b      	ldr	r0, [pc, #44]	@ (8000b58 <SPI_WriteData+0x64>)
 8000b2c:	f002 f980 	bl	8002e30 <HAL_GPIO_WritePin>
        LCD_SCL_SET;
 8000b30:	2201      	movs	r2, #1
 8000b32:	2104      	movs	r1, #4
 8000b34:	4808      	ldr	r0, [pc, #32]	@ (8000b58 <SPI_WriteData+0x64>)
 8000b36:	f002 f97b 	bl	8002e30 <HAL_GPIO_WritePin>
        Data<<=1; 
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	71fb      	strb	r3, [r7, #7]
    for(i=8;i>0;i--)
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	73fb      	strb	r3, [r7, #15]
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1dd      	bne.n	8000b08 <SPI_WriteData+0x14>
    uint8_t *pData = &Data;
    while(LCD_Tx_Status != STD_ON);
    LCD_Tx_Status = STD_OFF;
    HAL_SPI_Transmit_DMA(&LCD_SPI, pData, 1);
#endif
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40020000 	.word	0x40020000

08000b5c <Lcd_WriteIndex>:
 
 //向液晶屏写一个8位指令
 void Lcd_WriteIndex(uint8_t Index)
 {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
    //SPI 写命令时序开始
    LCD_CS_CLR;
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b6c:	480a      	ldr	r0, [pc, #40]	@ (8000b98 <Lcd_WriteIndex+0x3c>)
 8000b6e:	f002 f95f 	bl	8002e30 <HAL_GPIO_WritePin>
    LCD_RS_CLR;
 8000b72:	2200      	movs	r2, #0
 8000b74:	2110      	movs	r1, #16
 8000b76:	4809      	ldr	r0, [pc, #36]	@ (8000b9c <Lcd_WriteIndex+0x40>)
 8000b78:	f002 f95a 	bl	8002e30 <HAL_GPIO_WritePin>
    SPI_WriteData(Index);
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ffb8 	bl	8000af4 <SPI_WriteData>
    LCD_CS_SET;
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b8a:	4803      	ldr	r0, [pc, #12]	@ (8000b98 <Lcd_WriteIndex+0x3c>)
 8000b8c:	f002 f950 	bl	8002e30 <HAL_GPIO_WritePin>
 }
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40020400 	.word	0x40020400
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <Lcd_WriteData>:
 
 //向液晶屏写一个8位数据
 void Lcd_WriteData(uint8_t Data)
 {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
    LCD_CS_CLR;
 8000baa:	2201      	movs	r2, #1
 8000bac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bb0:	480a      	ldr	r0, [pc, #40]	@ (8000bdc <Lcd_WriteData+0x3c>)
 8000bb2:	f002 f93d 	bl	8002e30 <HAL_GPIO_WritePin>
    LCD_RS_SET;
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2110      	movs	r1, #16
 8000bba:	4809      	ldr	r0, [pc, #36]	@ (8000be0 <Lcd_WriteData+0x40>)
 8000bbc:	f002 f938 	bl	8002e30 <HAL_GPIO_WritePin>
    SPI_WriteData(Data);
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ff96 	bl	8000af4 <SPI_WriteData>
    LCD_CS_SET; 
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bce:	4803      	ldr	r0, [pc, #12]	@ (8000bdc <Lcd_WriteData+0x3c>)
 8000bd0:	f002 f92e 	bl	8002e30 <HAL_GPIO_WritePin>
 }
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40020400 	.word	0x40020400
 8000be0:	40020000 	.word	0x40020000

08000be4 <LCD_WriteData_16Bit>:
 //向液晶屏写一个16位数据
 void LCD_WriteData_16Bit(uint16_t Data)
 {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	80fb      	strh	r3, [r7, #6]
    LCD_CS_CLR;
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bf4:	480e      	ldr	r0, [pc, #56]	@ (8000c30 <LCD_WriteData_16Bit+0x4c>)
 8000bf6:	f002 f91b 	bl	8002e30 <HAL_GPIO_WritePin>
    LCD_RS_SET;
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2110      	movs	r1, #16
 8000bfe:	480d      	ldr	r0, [pc, #52]	@ (8000c34 <LCD_WriteData_16Bit+0x50>)
 8000c00:	f002 f916 	bl	8002e30 <HAL_GPIO_WritePin>
    SPI_WriteData(Data>>8); 	//写入高8位数据
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	0a1b      	lsrs	r3, r3, #8
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff71 	bl	8000af4 <SPI_WriteData>
    SPI_WriteData(Data); 			//写入低8位数据
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff6c 	bl	8000af4 <SPI_WriteData>
    LCD_CS_SET; 
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c22:	4803      	ldr	r0, [pc, #12]	@ (8000c30 <LCD_WriteData_16Bit+0x4c>)
 8000c24:	f002 f904 	bl	8002e30 <HAL_GPIO_WritePin>
 }
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40020400 	.word	0x40020400
 8000c34:	40020000 	.word	0x40020000

08000c38 <Lcd_Reset>:
    Lcd_WriteIndex(Index);
    Lcd_WriteData(Data);
}
 
void Lcd_Reset(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
     LCD_RST_CLR;
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c42:	4808      	ldr	r0, [pc, #32]	@ (8000c64 <Lcd_Reset+0x2c>)
 8000c44:	f002 f8f4 	bl	8002e30 <HAL_GPIO_WritePin>
     HAL_Delay(100);
 8000c48:	2064      	movs	r0, #100	@ 0x64
 8000c4a:	f001 f9f3 	bl	8002034 <HAL_Delay>
     LCD_RST_SET;
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c54:	4803      	ldr	r0, [pc, #12]	@ (8000c64 <Lcd_Reset+0x2c>)
 8000c56:	f002 f8eb 	bl	8002e30 <HAL_GPIO_WritePin>
     HAL_Delay(100);
 8000c5a:	2064      	movs	r0, #100	@ 0x64
 8000c5c:	f001 f9ea 	bl	8002034 <HAL_Delay>
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40020400 	.word	0x40020400

08000c68 <Lcd_Init>:
 
 //LCD Init For 1.44Inch LCD Panel with ST7735R.
 void Lcd_Init(void)
 {	
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
//     LCD_GPIO_Init();
     Lcd_Reset(); //Reset before LCD Init.
 8000c6c:	f7ff ffe4 	bl	8000c38 <Lcd_Reset>
 
     //LCD Init For 1.44Inch LCD Panel with ST7735R.
     Lcd_WriteIndex(0x11);//Sleep exit 
 8000c70:	2011      	movs	r0, #17
 8000c72:	f7ff ff73 	bl	8000b5c <Lcd_WriteIndex>
     HAL_Delay (120);
 8000c76:	2078      	movs	r0, #120	@ 0x78
 8000c78:	f001 f9dc 	bl	8002034 <HAL_Delay>
     //ST7735R Frame Rate
     Lcd_WriteIndex(0xB1); 
 8000c7c:	20b1      	movs	r0, #177	@ 0xb1
 8000c7e:	f7ff ff6d 	bl	8000b5c <Lcd_WriteIndex>
     Lcd_WriteData(0x01); 
 8000c82:	2001      	movs	r0, #1
 8000c84:	f7ff ff8c 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x2C); 
 8000c88:	202c      	movs	r0, #44	@ 0x2c
 8000c8a:	f7ff ff89 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x2D); 
 8000c8e:	202d      	movs	r0, #45	@ 0x2d
 8000c90:	f7ff ff86 	bl	8000ba0 <Lcd_WriteData>
 
     Lcd_WriteIndex(0xB2); 
 8000c94:	20b2      	movs	r0, #178	@ 0xb2
 8000c96:	f7ff ff61 	bl	8000b5c <Lcd_WriteIndex>
     Lcd_WriteData(0x01); 
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff ff80 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x2C); 
 8000ca0:	202c      	movs	r0, #44	@ 0x2c
 8000ca2:	f7ff ff7d 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x2D); 
 8000ca6:	202d      	movs	r0, #45	@ 0x2d
 8000ca8:	f7ff ff7a 	bl	8000ba0 <Lcd_WriteData>
 
     Lcd_WriteIndex(0xB3); 
 8000cac:	20b3      	movs	r0, #179	@ 0xb3
 8000cae:	f7ff ff55 	bl	8000b5c <Lcd_WriteIndex>
     Lcd_WriteData(0x01); 
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f7ff ff74 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x2C); 
 8000cb8:	202c      	movs	r0, #44	@ 0x2c
 8000cba:	f7ff ff71 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x2D); 
 8000cbe:	202d      	movs	r0, #45	@ 0x2d
 8000cc0:	f7ff ff6e 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x01); 
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f7ff ff6b 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x2C); 
 8000cca:	202c      	movs	r0, #44	@ 0x2c
 8000ccc:	f7ff ff68 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x2D); 
 8000cd0:	202d      	movs	r0, #45	@ 0x2d
 8000cd2:	f7ff ff65 	bl	8000ba0 <Lcd_WriteData>
     
     Lcd_WriteIndex(0xB4); //Column inversion 
 8000cd6:	20b4      	movs	r0, #180	@ 0xb4
 8000cd8:	f7ff ff40 	bl	8000b5c <Lcd_WriteIndex>
     Lcd_WriteData(0x07); 
 8000cdc:	2007      	movs	r0, #7
 8000cde:	f7ff ff5f 	bl	8000ba0 <Lcd_WriteData>
     
     //ST7735R Power Sequence
     Lcd_WriteIndex(0xC0); 
 8000ce2:	20c0      	movs	r0, #192	@ 0xc0
 8000ce4:	f7ff ff3a 	bl	8000b5c <Lcd_WriteIndex>
     Lcd_WriteData(0xA2); 
 8000ce8:	20a2      	movs	r0, #162	@ 0xa2
 8000cea:	f7ff ff59 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x02); 
 8000cee:	2002      	movs	r0, #2
 8000cf0:	f7ff ff56 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x84); 
 8000cf4:	2084      	movs	r0, #132	@ 0x84
 8000cf6:	f7ff ff53 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteIndex(0xC1); 
 8000cfa:	20c1      	movs	r0, #193	@ 0xc1
 8000cfc:	f7ff ff2e 	bl	8000b5c <Lcd_WriteIndex>
     Lcd_WriteData(0xC5); 
 8000d00:	20c5      	movs	r0, #197	@ 0xc5
 8000d02:	f7ff ff4d 	bl	8000ba0 <Lcd_WriteData>
 
     Lcd_WriteIndex(0xC2); 
 8000d06:	20c2      	movs	r0, #194	@ 0xc2
 8000d08:	f7ff ff28 	bl	8000b5c <Lcd_WriteIndex>
     Lcd_WriteData(0x0A); 
 8000d0c:	200a      	movs	r0, #10
 8000d0e:	f7ff ff47 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x00); 
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff ff44 	bl	8000ba0 <Lcd_WriteData>
 
     Lcd_WriteIndex(0xC3); 
 8000d18:	20c3      	movs	r0, #195	@ 0xc3
 8000d1a:	f7ff ff1f 	bl	8000b5c <Lcd_WriteIndex>
     Lcd_WriteData(0x8A); 
 8000d1e:	208a      	movs	r0, #138	@ 0x8a
 8000d20:	f7ff ff3e 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x2A); 
 8000d24:	202a      	movs	r0, #42	@ 0x2a
 8000d26:	f7ff ff3b 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteIndex(0xC4); 
 8000d2a:	20c4      	movs	r0, #196	@ 0xc4
 8000d2c:	f7ff ff16 	bl	8000b5c <Lcd_WriteIndex>
     Lcd_WriteData(0x8A); 
 8000d30:	208a      	movs	r0, #138	@ 0x8a
 8000d32:	f7ff ff35 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0xEE); 
 8000d36:	20ee      	movs	r0, #238	@ 0xee
 8000d38:	f7ff ff32 	bl	8000ba0 <Lcd_WriteData>
     
     Lcd_WriteIndex(0xC5); //VCOM 
 8000d3c:	20c5      	movs	r0, #197	@ 0xc5
 8000d3e:	f7ff ff0d 	bl	8000b5c <Lcd_WriteIndex>
     Lcd_WriteData(0x0E); 
 8000d42:	200e      	movs	r0, #14
 8000d44:	f7ff ff2c 	bl	8000ba0 <Lcd_WriteData>
     
     Lcd_WriteIndex(0x36); //MX, MY, RGB mode 
 8000d48:	2036      	movs	r0, #54	@ 0x36
 8000d4a:	f7ff ff07 	bl	8000b5c <Lcd_WriteIndex>
     Lcd_WriteData(0xC8); 
 8000d4e:	20c8      	movs	r0, #200	@ 0xc8
 8000d50:	f7ff ff26 	bl	8000ba0 <Lcd_WriteData>
     
     //ST7735R Gamma Sequence
     Lcd_WriteIndex(0xe0); 
 8000d54:	20e0      	movs	r0, #224	@ 0xe0
 8000d56:	f7ff ff01 	bl	8000b5c <Lcd_WriteIndex>
     Lcd_WriteData(0x0f); 
 8000d5a:	200f      	movs	r0, #15
 8000d5c:	f7ff ff20 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x1a); 
 8000d60:	201a      	movs	r0, #26
 8000d62:	f7ff ff1d 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x0f); 
 8000d66:	200f      	movs	r0, #15
 8000d68:	f7ff ff1a 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x18); 
 8000d6c:	2018      	movs	r0, #24
 8000d6e:	f7ff ff17 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x2f); 
 8000d72:	202f      	movs	r0, #47	@ 0x2f
 8000d74:	f7ff ff14 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x28); 
 8000d78:	2028      	movs	r0, #40	@ 0x28
 8000d7a:	f7ff ff11 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x20); 
 8000d7e:	2020      	movs	r0, #32
 8000d80:	f7ff ff0e 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x22); 
 8000d84:	2022      	movs	r0, #34	@ 0x22
 8000d86:	f7ff ff0b 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x1f); 
 8000d8a:	201f      	movs	r0, #31
 8000d8c:	f7ff ff08 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x1b); 
 8000d90:	201b      	movs	r0, #27
 8000d92:	f7ff ff05 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x23); 
 8000d96:	2023      	movs	r0, #35	@ 0x23
 8000d98:	f7ff ff02 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x37); 
 8000d9c:	2037      	movs	r0, #55	@ 0x37
 8000d9e:	f7ff feff 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x00); 	
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff fefc 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x07); 
 8000da8:	2007      	movs	r0, #7
 8000daa:	f7ff fef9 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x02); 
 8000dae:	2002      	movs	r0, #2
 8000db0:	f7ff fef6 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x10); 
 8000db4:	2010      	movs	r0, #16
 8000db6:	f7ff fef3 	bl	8000ba0 <Lcd_WriteData>
 
     Lcd_WriteIndex(0xe1); 
 8000dba:	20e1      	movs	r0, #225	@ 0xe1
 8000dbc:	f7ff fece 	bl	8000b5c <Lcd_WriteIndex>
     Lcd_WriteData(0x0f); 
 8000dc0:	200f      	movs	r0, #15
 8000dc2:	f7ff feed 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x1b); 
 8000dc6:	201b      	movs	r0, #27
 8000dc8:	f7ff feea 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x0f); 
 8000dcc:	200f      	movs	r0, #15
 8000dce:	f7ff fee7 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x17); 
 8000dd2:	2017      	movs	r0, #23
 8000dd4:	f7ff fee4 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x33); 
 8000dd8:	2033      	movs	r0, #51	@ 0x33
 8000dda:	f7ff fee1 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x2c); 
 8000dde:	202c      	movs	r0, #44	@ 0x2c
 8000de0:	f7ff fede 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x29); 
 8000de4:	2029      	movs	r0, #41	@ 0x29
 8000de6:	f7ff fedb 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x2e); 
 8000dea:	202e      	movs	r0, #46	@ 0x2e
 8000dec:	f7ff fed8 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x30); 
 8000df0:	2030      	movs	r0, #48	@ 0x30
 8000df2:	f7ff fed5 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x30); 
 8000df6:	2030      	movs	r0, #48	@ 0x30
 8000df8:	f7ff fed2 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x39); 
 8000dfc:	2039      	movs	r0, #57	@ 0x39
 8000dfe:	f7ff fecf 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x3f); 
 8000e02:	203f      	movs	r0, #63	@ 0x3f
 8000e04:	f7ff fecc 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x00); 
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff fec9 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x07); 
 8000e0e:	2007      	movs	r0, #7
 8000e10:	f7ff fec6 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x03); 
 8000e14:	2003      	movs	r0, #3
 8000e16:	f7ff fec3 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x10);  
 8000e1a:	2010      	movs	r0, #16
 8000e1c:	f7ff fec0 	bl	8000ba0 <Lcd_WriteData>
     
     Lcd_WriteIndex(0x2a);
 8000e20:	202a      	movs	r0, #42	@ 0x2a
 8000e22:	f7ff fe9b 	bl	8000b5c <Lcd_WriteIndex>
     Lcd_WriteData(0x00);
 8000e26:	2000      	movs	r0, #0
 8000e28:	f7ff feba 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x00);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff feb7 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x00);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff feb4 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x7f);
 8000e38:	207f      	movs	r0, #127	@ 0x7f
 8000e3a:	f7ff feb1 	bl	8000ba0 <Lcd_WriteData>
 
     Lcd_WriteIndex(0x2b);
 8000e3e:	202b      	movs	r0, #43	@ 0x2b
 8000e40:	f7ff fe8c 	bl	8000b5c <Lcd_WriteIndex>
     Lcd_WriteData(0x00);
 8000e44:	2000      	movs	r0, #0
 8000e46:	f7ff feab 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x00);
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff fea8 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x00);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff fea5 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteData(0x9f);
 8000e56:	209f      	movs	r0, #159	@ 0x9f
 8000e58:	f7ff fea2 	bl	8000ba0 <Lcd_WriteData>
     
     Lcd_WriteIndex(0xF0); //Enable test command  
 8000e5c:	20f0      	movs	r0, #240	@ 0xf0
 8000e5e:	f7ff fe7d 	bl	8000b5c <Lcd_WriteIndex>
     Lcd_WriteData(0x01); 
 8000e62:	2001      	movs	r0, #1
 8000e64:	f7ff fe9c 	bl	8000ba0 <Lcd_WriteData>
     Lcd_WriteIndex(0xF6); //Disable ram power save mode 
 8000e68:	20f6      	movs	r0, #246	@ 0xf6
 8000e6a:	f7ff fe77 	bl	8000b5c <Lcd_WriteIndex>
     Lcd_WriteData(0x00); 
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff fe96 	bl	8000ba0 <Lcd_WriteData>
     
     Lcd_WriteIndex(0x3A); //65k mode 
 8000e74:	203a      	movs	r0, #58	@ 0x3a
 8000e76:	f7ff fe71 	bl	8000b5c <Lcd_WriteIndex>
     Lcd_WriteData(0x05); 
 8000e7a:	2005      	movs	r0, #5
 8000e7c:	f7ff fe90 	bl	8000ba0 <Lcd_WriteData>
     
     
     Lcd_WriteIndex(0x29);//Display on	 
 8000e80:	2029      	movs	r0, #41	@ 0x29
 8000e82:	f7ff fe6b 	bl	8000b5c <Lcd_WriteIndex>
 }
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <Lcd_SetRegion>:
 功能：设置lcd显示区域，在此区域写点数据自动换行
 入口参数：xy起点和终点
 返回值：无
 *************************************************/
void Lcd_SetRegion(uint16_t x_start,uint16_t y_start,uint16_t x_end,uint16_t y_end)
{		
 8000e8a:	b590      	push	{r4, r7, lr}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4604      	mov	r4, r0
 8000e92:	4608      	mov	r0, r1
 8000e94:	4611      	mov	r1, r2
 8000e96:	461a      	mov	r2, r3
 8000e98:	4623      	mov	r3, r4
 8000e9a:	80fb      	strh	r3, [r7, #6]
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	80bb      	strh	r3, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	807b      	strh	r3, [r7, #2]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	803b      	strh	r3, [r7, #0]
    Lcd_WriteIndex(0x2a);
 8000ea8:	202a      	movs	r0, #42	@ 0x2a
 8000eaa:	f7ff fe57 	bl	8000b5c <Lcd_WriteIndex>
    Lcd_WriteData(0x00);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff fe76 	bl	8000ba0 <Lcd_WriteData>
    Lcd_WriteData(x_start+2);
 8000eb4:	88fb      	ldrh	r3, [r7, #6]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	3302      	adds	r3, #2
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fe6f 	bl	8000ba0 <Lcd_WriteData>
    Lcd_WriteData(0x00);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff fe6c 	bl	8000ba0 <Lcd_WriteData>
    Lcd_WriteData(x_end+2);
 8000ec8:	887b      	ldrh	r3, [r7, #2]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	3302      	adds	r3, #2
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fe65 	bl	8000ba0 <Lcd_WriteData>

    Lcd_WriteIndex(0x2b);
 8000ed6:	202b      	movs	r0, #43	@ 0x2b
 8000ed8:	f7ff fe40 	bl	8000b5c <Lcd_WriteIndex>
    Lcd_WriteData(0x00);
 8000edc:	2000      	movs	r0, #0
 8000ede:	f7ff fe5f 	bl	8000ba0 <Lcd_WriteData>
    Lcd_WriteData(y_start+3);
 8000ee2:	88bb      	ldrh	r3, [r7, #4]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	3303      	adds	r3, #3
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fe58 	bl	8000ba0 <Lcd_WriteData>
    Lcd_WriteData(0x00);
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f7ff fe55 	bl	8000ba0 <Lcd_WriteData>
    Lcd_WriteData(y_end+3);
 8000ef6:	883b      	ldrh	r3, [r7, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	3303      	adds	r3, #3
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fe4e 	bl	8000ba0 <Lcd_WriteData>
    
    Lcd_WriteIndex(0x2c);
 8000f04:	202c      	movs	r0, #44	@ 0x2c
 8000f06:	f7ff fe29 	bl	8000b5c <Lcd_WriteIndex>

}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd90      	pop	{r4, r7, pc}

08000f12 <Lcd_Clear>:
功能：全屏清屏函数
入口参数：填充颜色COLOR
返回值：无
*************************************************/
void Lcd_Clear(uint16_t Color)               
{	
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	80fb      	strh	r3, [r7, #6]
    unsigned int i,m;
    Lcd_SetRegion(0,0,X_MAX_PIXEL-1,Y_MAX_PIXEL-1);
 8000f1c:	237f      	movs	r3, #127	@ 0x7f
 8000f1e:	227f      	movs	r2, #127	@ 0x7f
 8000f20:	2100      	movs	r1, #0
 8000f22:	2000      	movs	r0, #0
 8000f24:	f7ff ffb1 	bl	8000e8a <Lcd_SetRegion>
    Lcd_WriteIndex(0x2C);
 8000f28:	202c      	movs	r0, #44	@ 0x2c
 8000f2a:	f7ff fe17 	bl	8000b5c <Lcd_WriteIndex>
    for(i=0;i<X_MAX_PIXEL;i++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	e00f      	b.n	8000f54 <Lcd_Clear+0x42>
        for(m=0;m<Y_MAX_PIXEL;m++)
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	e006      	b.n	8000f48 <Lcd_Clear+0x36>
        {	
            LCD_WriteData_16Bit(Color);
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fe51 	bl	8000be4 <LCD_WriteData_16Bit>
        for(m=0;m<Y_MAX_PIXEL;m++)
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	3301      	adds	r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f4c:	d9f5      	bls.n	8000f3a <Lcd_Clear+0x28>
    for(i=0;i<X_MAX_PIXEL;i++)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3301      	adds	r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f58:	d9ec      	bls.n	8000f34 <Lcd_Clear+0x22>
        }   
}
 8000f5a:	bf00      	nop
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <DEBUG_PRINTF>:
	msg.msghead = 0;
	msg.msgtail = 0;
	msg.emptylen = MSGLOG_LEN;
}

uint32_t DEBUG_PRINTF(const char *format, ...) {
 8000f64:	b40f      	push	{r0, r1, r2, r3}
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, format);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f70:	603b      	str	r3, [r7, #0]

    uint8_t ret = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	74fb      	strb	r3, [r7, #19]
    uint32_t tsLen = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
    uint32_t msgLen = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
    uint32_t totalLen = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]

    uint32_t currentTime = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]

    while(TxStatus != STD_ON);
 8000f86:	bf00      	nop
 8000f88:	4b1d      	ldr	r3, [pc, #116]	@ (8001000 <DEBUG_PRINTF+0x9c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d1fb      	bne.n	8000f88 <DEBUG_PRINTF+0x24>
    TxStatus = STD_OFF;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <DEBUG_PRINTF+0x9c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
    currentTime = HAL_GetTick();
 8000f96:	f001 f841 	bl	800201c <HAL_GetTick>
 8000f9a:	6078      	str	r0, [r7, #4]
    tsLen = snprintf(TxMsg, sizeof(TxMsg), "%010u", currentTime);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a19      	ldr	r2, [pc, #100]	@ (8001004 <DEBUG_PRINTF+0xa0>)
 8000fa0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fa4:	4818      	ldr	r0, [pc, #96]	@ (8001008 <DEBUG_PRINTF+0xa4>)
 8000fa6:	f007 fcf9 	bl	800899c <sniprintf>
 8000faa:	4603      	mov	r3, r0
 8000fac:	60fb      	str	r3, [r7, #12]
    msgLen = vsnprintf(TxMsg+tsLen, sizeof(TxMsg), format, args);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4a15      	ldr	r2, [pc, #84]	@ (8001008 <DEBUG_PRINTF+0xa4>)
 8000fb2:	1898      	adds	r0, r3, r2
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	6a3a      	ldr	r2, [r7, #32]
 8000fb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fbc:	f007 fd4e 	bl	8008a5c <vsniprintf>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60bb      	str	r3, [r7, #8]
    totalLen = tsLen + msgLen;
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	4413      	add	r3, r2
 8000fca:	617b      	str	r3, [r7, #20]

    va_end(args);

    if (totalLen == sizeof(TxMsg))
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fd2:	d101      	bne.n	8000fd8 <DEBUG_PRINTF+0x74>
    {
        totalLen = sizeof(TxMsg) - 1;
 8000fd4:	23ff      	movs	r3, #255	@ 0xff
 8000fd6:	617b      	str	r3, [r7, #20]
    }
#if (MSG_PRINT_METHOD == PRINT_IMM)
#if (TRANSMIT_METHOD == POLLING)
    ret = HAL_UART_Transmit(TRANSMIT_COMPORT, (const uint8_t *)TxMsg, totalLen, TRANSMIT_TIMEOUT);
#elif (TRANSMIT_METHOD == DMA)
    ret = HAL_UART_Transmit_DMA(TRANSMIT_COMPORT, (const uint8_t *)TxMsg, totalLen);
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	461a      	mov	r2, r3
 8000fde:	490a      	ldr	r1, [pc, #40]	@ (8001008 <DEBUG_PRINTF+0xa4>)
 8000fe0:	480a      	ldr	r0, [pc, #40]	@ (800100c <DEBUG_PRINTF+0xa8>)
 8000fe2:	f006 fb25 	bl	8007630 <HAL_UART_Transmit_DMA>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	74fb      	strb	r3, [r7, #19]
    ret = HAL_UART_Transmit_IT(TRANSMIT_COMPORT, (const uint8_t *)TxMsg, totalLen);
#endif
#elif (MSG_PRINT_METHOD == PRINT_TASK)
    Msg_Copy(TxMsg, totalLen);
#endif
    return ((totalLen<< 2) | ret);
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	009a      	lsls	r2, r3, #2
 8000fee:	7cfb      	ldrb	r3, [r7, #19]
 8000ff0:	4313      	orrs	r3, r2
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ffc:	b004      	add	sp, #16
 8000ffe:	4770      	bx	lr
 8001000:	20000003 	.word	0x20000003
 8001004:	0800961c 	.word	0x0800961c
 8001008:	20000284 	.word	0x20000284
 800100c:	20000694 	.word	0x20000694

08001010 <SIMPLY_PRINTF>:

uint32_t SIMPLY_PRINTF(const char *format, ...) 
{
 8001010:	b40f      	push	{r0, r1, r2, r3}
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, format);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	603b      	str	r3, [r7, #0]

    uint8_t ret = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	72fb      	strb	r3, [r7, #11]
    uint32_t msgLen = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
    uint32_t totalLen = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]

    while(TxStatus != STD_ON);
 800102a:	bf00      	nop
 800102c:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <SIMPLY_PRINTF+0x74>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d1fb      	bne.n	800102c <SIMPLY_PRINTF+0x1c>
    TxStatus = STD_OFF;
 8001034:	4b13      	ldr	r3, [pc, #76]	@ (8001084 <SIMPLY_PRINTF+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
    msgLen = vsnprintf(TxMsg, sizeof(TxMsg), format, args);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001042:	4811      	ldr	r0, [pc, #68]	@ (8001088 <SIMPLY_PRINTF+0x78>)
 8001044:	f007 fd0a 	bl	8008a5c <vsniprintf>
 8001048:	4603      	mov	r3, r0
 800104a:	607b      	str	r3, [r7, #4]
    totalLen = msgLen;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	60fb      	str	r3, [r7, #12]

    va_end(args);

    if (totalLen == sizeof(TxMsg))
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001056:	d101      	bne.n	800105c <SIMPLY_PRINTF+0x4c>
    {
        totalLen = sizeof(TxMsg) - 1;
 8001058:	23ff      	movs	r3, #255	@ 0xff
 800105a:	60fb      	str	r3, [r7, #12]

#if (MSG_PRINT_METHOD == PRINT_IMM)
#if (TRANSMIT_METHOD == POLLING)
    ret = HAL_UART_Transmit(TRANSMIT_COMPORT, (const uint8_t *)TxMsg, totalLen, TRANSMIT_TIMEOUT);
#elif (TRANSMIT_METHOD == DMA)
    ret = HAL_UART_Transmit_DMA(TRANSMIT_COMPORT, (const uint8_t *)TxMsg, totalLen);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	b29b      	uxth	r3, r3
 8001060:	461a      	mov	r2, r3
 8001062:	4909      	ldr	r1, [pc, #36]	@ (8001088 <SIMPLY_PRINTF+0x78>)
 8001064:	4809      	ldr	r0, [pc, #36]	@ (800108c <SIMPLY_PRINTF+0x7c>)
 8001066:	f006 fae3 	bl	8007630 <HAL_UART_Transmit_DMA>
 800106a:	4603      	mov	r3, r0
 800106c:	72fb      	strb	r3, [r7, #11]
    ret = HAL_UART_Transmit_IT(TRANSMIT_COMPORT, (const uint8_t *)TxMsg, totalLen);
#endif
#elif (MSG_PRINT_METHOD == PRINT_TASK)
    Msg_Copy(TxMsg, totalLen);
#endif
    return ((totalLen<< 2) | ret);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	009a      	lsls	r2, r3, #2
 8001072:	7afb      	ldrb	r3, [r7, #11]
 8001074:	4313      	orrs	r3, r2
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001080:	b004      	add	sp, #16
 8001082:	4770      	bx	lr
 8001084:	20000003 	.word	0x20000003
 8001088:	20000284 	.word	0x20000284
 800108c:	20000694 	.word	0x20000694

08001090 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
    if(RECEIVE_COMPORT == huart)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a0d      	ldr	r2, [pc, #52]	@ (80010d4 <HAL_UARTEx_RxEventCallback+0x44>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d113      	bne.n	80010cc <HAL_UARTEx_RxEventCallback+0x3c>
    {
        HAL_UART_Transmit_DMA(TRANSMIT_COMPORT, (const uint8_t *)RxMsg, Size);
 80010a4:	887b      	ldrh	r3, [r7, #2]
 80010a6:	461a      	mov	r2, r3
 80010a8:	490b      	ldr	r1, [pc, #44]	@ (80010d8 <HAL_UARTEx_RxEventCallback+0x48>)
 80010aa:	480a      	ldr	r0, [pc, #40]	@ (80010d4 <HAL_UARTEx_RxEventCallback+0x44>)
 80010ac:	f006 fac0 	bl	8007630 <HAL_UART_Transmit_DMA>
        HAL_UARTEx_ReceiveToIdle_DMA(RECEIVE_COMPORT, RxMsg, RX_MESSAGE_LEN);
 80010b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010b4:	4908      	ldr	r1, [pc, #32]	@ (80010d8 <HAL_UARTEx_RxEventCallback+0x48>)
 80010b6:	4807      	ldr	r0, [pc, #28]	@ (80010d4 <HAL_UARTEx_RxEventCallback+0x44>)
 80010b8:	f006 fb2a 	bl	8007710 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(RECEIVE_DMA, DMA_IT_HT);
 80010bc:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <HAL_UARTEx_RxEventCallback+0x4c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_UARTEx_RxEventCallback+0x4c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0208 	bic.w	r2, r2, #8
 80010ca:	601a      	str	r2, [r3, #0]
    }
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000694 	.word	0x20000694
 80010d8:	20000384 	.word	0x20000384
 80010dc:	200006dc 	.word	0x200006dc

080010e0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
    if(RECEIVE_COMPORT == huart)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a06      	ldr	r2, [pc, #24]	@ (8001104 <HAL_UART_TxCpltCallback+0x24>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d102      	bne.n	80010f6 <HAL_UART_TxCpltCallback+0x16>
    {
        TxStatus = STD_ON;
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <HAL_UART_TxCpltCallback+0x28>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
    }
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000694 	.word	0x20000694
 8001108:	20000003 	.word	0x20000003

0800110c <Tower_Init>:
 *      Author: 18283
 */
#include "bsp_tower.h"

void Tower_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(TIM_TOWER_PORT, TIM_TOWER_CHANNEL);
 8001110:	2104      	movs	r1, #4
 8001112:	4802      	ldr	r0, [pc, #8]	@ (800111c <Tower_Init+0x10>)
 8001114:	f005 fb26 	bl	8006764 <HAL_TIM_PWM_Start>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	2000064c 	.word	0x2000064c

08001120 <GreenLed_Test>:
    }
    LOG_RELEASE("--------------Tower&Led around test End--------------\n");
}

void GreenLed_Test(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
    LOG_RELEASE("--------------Led around test Begin------------\n");
 8001126:	480f      	ldr	r0, [pc, #60]	@ (8001164 <GreenLed_Test+0x44>)
 8001128:	f7ff ff1c 	bl	8000f64 <DEBUG_PRINTF>
    for(int i = 0; i < LED_TEST_STEP; i++)
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	e00e      	b.n	8001150 <GreenLed_Test+0x30>
    {
        __HAL_TIM_SET_COMPARE(TIM_TOWER_PORT, TIM_TOWER_CHANNEL, i * LED_TEST_STEPLEN);
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	461a      	mov	r2, r3
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <GreenLed_Test+0x48>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	639a      	str	r2, [r3, #56]	@ 0x38
        HAL_Delay(LED_TEST_DELAY);
 8001144:	2032      	movs	r0, #50	@ 0x32
 8001146:	f000 ff75 	bl	8002034 <HAL_Delay>
    for(int i = 0; i < LED_TEST_STEP; i++)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3301      	adds	r3, #1
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2bc6      	cmp	r3, #198	@ 0xc6
 8001154:	dded      	ble.n	8001132 <GreenLed_Test+0x12>
    }
    LOG_RELEASE("--------------Led around test End--------------\n");
 8001156:	4805      	ldr	r0, [pc, #20]	@ (800116c <GreenLed_Test+0x4c>)
 8001158:	f7ff ff04 	bl	8000f64 <DEBUG_PRINTF>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	08009798 	.word	0x08009798
 8001168:	2000064c 	.word	0x2000064c
 800116c:	080097d4 	.word	0x080097d4

08001170 <HAL_TIM_PeriodElapsedCallback>:
{
    return OS_Tick1ms;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    if(OS_TICK_TIMER == htim)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a1a      	ldr	r2, [pc, #104]	@ (80011e4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d12a      	bne.n	80011d6 <HAL_TIM_PeriodElapsedCallback+0x66>
    {
        OS_Tick1ms++;
 8001180:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	4a18      	ldr	r2, [pc, #96]	@ (80011e8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001188:	6013      	str	r3, [r2, #0]
        if((OS_Tick1ms % 500) == 0)
 800118a:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001190:	fba3 1302 	umull	r1, r3, r3, r2
 8001194:	095b      	lsrs	r3, r3, #5
 8001196:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800119a:	fb01 f303 	mul.w	r3, r1, r3
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d105      	bne.n	80011b0 <HAL_TIM_PeriodElapsedCallback+0x40>
        {
            SET_500MS_TASK;
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f043 0320 	orr.w	r3, r3, #32
 80011ac:	4a10      	ldr	r2, [pc, #64]	@ (80011f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011ae:	6013      	str	r3, [r2, #0]
        }
        if((OS_Tick1ms % 1000) == 0)
 80011b0:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80011b6:	fba3 1302 	umull	r1, r3, r3, r2
 80011ba:	099b      	lsrs	r3, r3, #6
 80011bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011c0:	fb01 f303 	mul.w	r3, r1, r3
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d105      	bne.n	80011d6 <HAL_TIM_PeriodElapsedCallback+0x66>
        {
            SET_1000MS_TASK;
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011d2:	4a07      	ldr	r2, [pc, #28]	@ (80011f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011d4:	6013      	str	r3, [r2, #0]
        }
    }
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000604 	.word	0x20000604
 80011e8:	20000484 	.word	0x20000484
 80011ec:	10624dd3 	.word	0x10624dd3
 80011f0:	20000488 	.word	0x20000488

080011f4 <Lcd_Task>:
//#include "Lcd_bmp.h"

volatile uint32_t Task_Cmd;

void Lcd_Task(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
	// uint8_t *pData = &Data;
	// extern uint8_t TxStatus;
	// while(TxStatus != STD_ON);
    // TxStatus = STD_OFF;
	// HAL_UART_Transmit_DMA(TRANSMIT_COMPORT, pData, 1);
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <Task_1ms_Entry>:

void Task_1ms_Entry(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
	// LOG_RELEASE("This is a 1ms message\n");
	RESET_1MS_TASK;
 8001208:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <Task_1ms_Entry+0x1c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f023 0301 	bic.w	r3, r3, #1
 8001210:	4a03      	ldr	r2, [pc, #12]	@ (8001220 <Task_1ms_Entry+0x1c>)
 8001212:	6013      	str	r3, [r2, #0]
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000488 	.word	0x20000488

08001224 <Task_5ms_Entry>:

void Task_5ms_Entry(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
	// LOG_RELEASE("This is a 5ms message\n");
	RESET_5MS_TASK;
 8001228:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <Task_5ms_Entry+0x1c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f023 0302 	bic.w	r3, r3, #2
 8001230:	4a03      	ldr	r2, [pc, #12]	@ (8001240 <Task_5ms_Entry+0x1c>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000488 	.word	0x20000488

08001244 <Task_10ms_Entry>:

void Task_10ms_Entry(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
	// LOG_RELEASE("This is a 10ms message\n");
	RESET_10MS_TASK;
 8001248:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <Task_10ms_Entry+0x1c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f023 0304 	bic.w	r3, r3, #4
 8001250:	4a03      	ldr	r2, [pc, #12]	@ (8001260 <Task_10ms_Entry+0x1c>)
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000488 	.word	0x20000488

08001264 <Task_50ms_Entry>:

void Task_50ms_Entry(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
	// LOG_RELEASE("This is a 50ms message\n");
	RESET_50MS_TASK;
 8001268:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <Task_50ms_Entry+0x1c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f023 0308 	bic.w	r3, r3, #8
 8001270:	4a03      	ldr	r2, [pc, #12]	@ (8001280 <Task_50ms_Entry+0x1c>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000488 	.word	0x20000488

08001284 <Task_100ms_Entry>:

void Task_100ms_Entry(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
	// LOG_RELEASE("This is a 100ms message\n");
	RESET_100MS_TASK;
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <Task_100ms_Entry+0x1c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f023 0310 	bic.w	r3, r3, #16
 8001290:	4a03      	ldr	r2, [pc, #12]	@ (80012a0 <Task_100ms_Entry+0x1c>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000488 	.word	0x20000488

080012a4 <Task_500ms_Entry>:
extern volatile uint32_t OS_Tick1ms;
// uint8_t Tx500Msg[12];
// uint8_t Tx500MsgReal[12];
// extern uint8_t DMA2_Stream0_TxStatus;
void Task_500ms_Entry(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 500ms message\n");
 80012a8:	4806      	ldr	r0, [pc, #24]	@ (80012c4 <Task_500ms_Entry+0x20>)
 80012aa:	f7ff fe5b 	bl	8000f64 <DEBUG_PRINTF>
	// while(DMA2_Stream0_TxStatus != 1);
	// HAL_UART_Transmit_DMA(&LOG_COM, (const uint8_t *)Tx500MsgReal, 12);
	// LOG_RELEASE("SPI Tx Cpt: %d.\n", SPI_Tx_Cpt);
	// LOG_RELEASE("LCD Tx Cpt: %d.\n", LCD_Tx_Cpt);
	// OLED_task();
	Lcd_Task();
 80012ae:	f7ff ffa1 	bl	80011f4 <Lcd_Task>
	RESET_500MS_TASK;
 80012b2:	4b05      	ldr	r3, [pc, #20]	@ (80012c8 <Task_500ms_Entry+0x24>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 0320 	bic.w	r3, r3, #32
 80012ba:	4a03      	ldr	r2, [pc, #12]	@ (80012c8 <Task_500ms_Entry+0x24>)
 80012bc:	6013      	str	r3, [r2, #0]
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	08009810 	.word	0x08009810
 80012c8:	20000488 	.word	0x20000488

080012cc <Task_1000ms_Entry>:
uint8_t ret0 = 0;
void Task_1000ms_Entry(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 1000ms message\n");
 80012d0:	4807      	ldr	r0, [pc, #28]	@ (80012f0 <Task_1000ms_Entry+0x24>)
 80012d2:	f7ff fe47 	bl	8000f64 <DEBUG_PRINTF>
	// LOG_RELEASE("OS_Tick: %d.\n", OS_Tick1ms);
	I2C_Test1();
 80012d6:	f7ff fb0f 	bl	80008f8 <I2C_Test1>
	// Tower_Around_Test();
	// Tower_GreenLed_Test();
	GreenLed_Test();
 80012da:	f7ff ff21 	bl	8001120 <GreenLed_Test>
	// Led_task();
	// Bsp_AdcValuePrint();
	RESET_1000MS_TASK;
 80012de:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <Task_1000ms_Entry+0x28>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80012e6:	4a03      	ldr	r2, [pc, #12]	@ (80012f4 <Task_1000ms_Entry+0x28>)
 80012e8:	6013      	str	r3, [r2, #0]
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	08009834 	.word	0x08009834
 80012f4:	20000488 	.word	0x20000488

080012f8 <OS_Init>:

void OS_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(OS_TICK_TIMER);
 80012fc:	4810      	ldr	r0, [pc, #64]	@ (8001340 <OS_Init+0x48>)
 80012fe:	f005 f971 	bl	80065e4 <HAL_TIM_Base_Start_IT>
	HAL_UARTEx_ReceiveToIdle_DMA(RECEIVE_COMPORT, RxMsg, RX_MESSAGE_LEN);
 8001302:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001306:	490f      	ldr	r1, [pc, #60]	@ (8001344 <OS_Init+0x4c>)
 8001308:	480f      	ldr	r0, [pc, #60]	@ (8001348 <OS_Init+0x50>)
 800130a:	f006 fa01 	bl	8007710 <HAL_UARTEx_ReceiveToIdle_DMA>
	Tower_Init();
 800130e:	f7ff fefd 	bl	800110c <Tower_Init>
	// Bsp_AdcStart();
	// OLED_Init();
	Lcd_Init();
 8001312:	f7ff fca9 	bl	8000c68 <Lcd_Init>
	LCD_LED_SET;
 8001316:	2201      	movs	r2, #1
 8001318:	2102      	movs	r1, #2
 800131a:	480c      	ldr	r0, [pc, #48]	@ (800134c <OS_Init+0x54>)
 800131c:	f001 fd88 	bl	8002e30 <HAL_GPIO_WritePin>
	Lcd_Clear(BLACK);
 8001320:	2000      	movs	r0, #0
 8001322:	f7ff fdf6 	bl	8000f12 <Lcd_Clear>
	// Lcd_Clear(WHITE);
	HAL_Delay(500);
 8001326:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800132a:	f000 fe83 	bl	8002034 <HAL_Delay>
	SET_1000MS_TASK;
 800132e:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <OS_Init+0x58>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001336:	4a06      	ldr	r2, [pc, #24]	@ (8001350 <OS_Init+0x58>)
 8001338:	6013      	str	r3, [r2, #0]
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000604 	.word	0x20000604
 8001344:	20000384 	.word	0x20000384
 8001348:	20000694 	.word	0x20000694
 800134c:	40020000 	.word	0x40020000
 8001350:	20000488 	.word	0x20000488

08001354 <Start_OS>:

void Start_OS(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	while(1)
	{
		if(GET_1MS_TASK)
 8001358:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <Start_OS+0x78>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b01      	cmp	r3, #1
 8001362:	d101      	bne.n	8001368 <Start_OS+0x14>
		{
			Task_1ms_Entry();
 8001364:	f7ff ff4e 	bl	8001204 <Task_1ms_Entry>
		}
		if(GET_5MS_TASK)
 8001368:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <Start_OS+0x78>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b02      	cmp	r3, #2
 8001372:	d101      	bne.n	8001378 <Start_OS+0x24>
		{
			Task_5ms_Entry();
 8001374:	f7ff ff56 	bl	8001224 <Task_5ms_Entry>
		}
		if(GET_10MS_TASK)
 8001378:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <Start_OS+0x78>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b04      	cmp	r3, #4
 8001382:	d101      	bne.n	8001388 <Start_OS+0x34>
		{
			Task_10ms_Entry();
 8001384:	f7ff ff5e 	bl	8001244 <Task_10ms_Entry>
		}
		if(GET_50MS_TASK)
 8001388:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <Start_OS+0x78>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	2b08      	cmp	r3, #8
 8001392:	d101      	bne.n	8001398 <Start_OS+0x44>
		{
			Task_50ms_Entry();
 8001394:	f7ff ff66 	bl	8001264 <Task_50ms_Entry>
		}
		if(GET_100MS_TASK)
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <Start_OS+0x78>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0310 	and.w	r3, r3, #16
 80013a0:	2b10      	cmp	r3, #16
 80013a2:	d101      	bne.n	80013a8 <Start_OS+0x54>
		{
			Task_100ms_Entry();
 80013a4:	f7ff ff6e 	bl	8001284 <Task_100ms_Entry>
		}
		if(GET_500MS_TASK)
 80013a8:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <Start_OS+0x78>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0320 	and.w	r3, r3, #32
 80013b0:	2b20      	cmp	r3, #32
 80013b2:	d101      	bne.n	80013b8 <Start_OS+0x64>
		{
			Task_500ms_Entry();
 80013b4:	f7ff ff76 	bl	80012a4 <Task_500ms_Entry>
		}
		if(GET_1000MS_TASK)
 80013b8:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <Start_OS+0x78>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013c0:	2b40      	cmp	r3, #64	@ 0x40
 80013c2:	d1c9      	bne.n	8001358 <Start_OS+0x4>
		{
			Task_1000ms_Entry();
 80013c4:	f7ff ff82 	bl	80012cc <Task_1000ms_Entry>
		if(GET_1MS_TASK)
 80013c8:	e7c6      	b.n	8001358 <Start_OS+0x4>
 80013ca:	bf00      	nop
 80013cc:	20000488 	.word	0x20000488

080013d0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4b3b      	ldr	r3, [pc, #236]	@ (80014c8 <MX_DMA_Init+0xf8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a3a      	ldr	r2, [pc, #232]	@ (80014c8 <MX_DMA_Init+0xf8>)
 80013e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b38      	ldr	r3, [pc, #224]	@ (80014c8 <MX_DMA_Init+0xf8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	4b34      	ldr	r3, [pc, #208]	@ (80014c8 <MX_DMA_Init+0xf8>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a33      	ldr	r2, [pc, #204]	@ (80014c8 <MX_DMA_Init+0xf8>)
 80013fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b31      	ldr	r3, [pc, #196]	@ (80014c8 <MX_DMA_Init+0xf8>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800140e:	4b2f      	ldr	r3, [pc, #188]	@ (80014cc <MX_DMA_Init+0xfc>)
 8001410:	4a2f      	ldr	r2, [pc, #188]	@ (80014d0 <MX_DMA_Init+0x100>)
 8001412:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8001414:	4b2d      	ldr	r3, [pc, #180]	@ (80014cc <MX_DMA_Init+0xfc>)
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800141a:	4b2c      	ldr	r3, [pc, #176]	@ (80014cc <MX_DMA_Init+0xfc>)
 800141c:	2280      	movs	r2, #128	@ 0x80
 800141e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8001420:	4b2a      	ldr	r3, [pc, #168]	@ (80014cc <MX_DMA_Init+0xfc>)
 8001422:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001426:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8001428:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <MX_DMA_Init+0xfc>)
 800142a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800142e:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001430:	4b26      	ldr	r3, [pc, #152]	@ (80014cc <MX_DMA_Init+0xfc>)
 8001432:	2200      	movs	r2, #0
 8001434:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001436:	4b25      	ldr	r3, [pc, #148]	@ (80014cc <MX_DMA_Init+0xfc>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 800143c:	4b23      	ldr	r3, [pc, #140]	@ (80014cc <MX_DMA_Init+0xfc>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8001442:	4b22      	ldr	r3, [pc, #136]	@ (80014cc <MX_DMA_Init+0xfc>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001448:	4b20      	ldr	r3, [pc, #128]	@ (80014cc <MX_DMA_Init+0xfc>)
 800144a:	2204      	movs	r2, #4
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800144e:	4b1f      	ldr	r3, [pc, #124]	@ (80014cc <MX_DMA_Init+0xfc>)
 8001450:	2203      	movs	r2, #3
 8001452:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8001454:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <MX_DMA_Init+0xfc>)
 8001456:	2200      	movs	r2, #0
 8001458:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800145a:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <MX_DMA_Init+0xfc>)
 800145c:	2200      	movs	r2, #0
 800145e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8001460:	481a      	ldr	r0, [pc, #104]	@ (80014cc <MX_DMA_Init+0xfc>)
 8001462:	f000 ff1d 	bl	80022a0 <HAL_DMA_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_DMA_Init+0xa0>
  {
    Error_Handler();
 800146c:	f000 fa3a 	bl	80018e4 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2100      	movs	r1, #0
 8001474:	200b      	movs	r0, #11
 8001476:	f000 fedc 	bl	8002232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800147a:	200b      	movs	r0, #11
 800147c:	f000 fef5 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	2011      	movs	r0, #17
 8001486:	f000 fed4 	bl	8002232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800148a:	2011      	movs	r0, #17
 800148c:	f000 feed 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	2038      	movs	r0, #56	@ 0x38
 8001496:	f000 fecc 	bl	8002232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800149a:	2038      	movs	r0, #56	@ 0x38
 800149c:	f000 fee5 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2100      	movs	r1, #0
 80014a4:	203a      	movs	r0, #58	@ 0x3a
 80014a6:	f000 fec4 	bl	8002232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014aa:	203a      	movs	r0, #58	@ 0x3a
 80014ac:	f000 fedd 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2100      	movs	r1, #0
 80014b4:	2046      	movs	r0, #70	@ 0x46
 80014b6:	f000 febc 	bl	8002232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80014ba:	2046      	movs	r0, #70	@ 0x46
 80014bc:	f000 fed5 	bl	800226a <HAL_NVIC_EnableIRQ>

}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40023800 	.word	0x40023800
 80014cc:	2000048c 	.word	0x2000048c
 80014d0:	40026410 	.word	0x40026410

080014d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b37      	ldr	r3, [pc, #220]	@ (80015cc <MX_GPIO_Init+0xf8>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a36      	ldr	r2, [pc, #216]	@ (80015cc <MX_GPIO_Init+0xf8>)
 80014f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b34      	ldr	r3, [pc, #208]	@ (80015cc <MX_GPIO_Init+0xf8>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b30      	ldr	r3, [pc, #192]	@ (80015cc <MX_GPIO_Init+0xf8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a2f      	ldr	r2, [pc, #188]	@ (80015cc <MX_GPIO_Init+0xf8>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b2d      	ldr	r3, [pc, #180]	@ (80015cc <MX_GPIO_Init+0xf8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <MX_GPIO_Init+0xf8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a28      	ldr	r2, [pc, #160]	@ (80015cc <MX_GPIO_Init+0xf8>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b26      	ldr	r3, [pc, #152]	@ (80015cc <MX_GPIO_Init+0xf8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_LED_Pin|LCD_SDA_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	211a      	movs	r1, #26
 8001542:	4823      	ldr	r0, [pc, #140]	@ (80015d0 <MX_GPIO_Init+0xfc>)
 8001544:	f001 fc74 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SCL_GPIO_Port, LCD_SCL_Pin, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	2104      	movs	r1, #4
 800154c:	4820      	ldr	r0, [pc, #128]	@ (80015d0 <MX_GPIO_Init+0xfc>)
 800154e:	f001 fc6f 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_SET);
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8001558:	481e      	ldr	r0, [pc, #120]	@ (80015d4 <MX_GPIO_Init+0x100>)
 800155a:	f001 fc69 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800155e:	2201      	movs	r2, #1
 8001560:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001564:	481c      	ldr	r0, [pc, #112]	@ (80015d8 <MX_GPIO_Init+0x104>)
 8001566:	f001 fc63 	bl	8002e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_LED_Pin LCD_SCL_Pin LCD_SDA_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|LCD_SCL_Pin|LCD_SDA_Pin|LCD_RS_Pin;
 800156a:	231e      	movs	r3, #30
 800156c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156e:	2301      	movs	r3, #1
 8001570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001572:	2301      	movs	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	4619      	mov	r1, r3
 8001580:	4813      	ldr	r0, [pc, #76]	@ (80015d0 <MX_GPIO_Init+0xfc>)
 8001582:	f001 faa9 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CS_Pin;
 8001586:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800158a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158c:	2301      	movs	r3, #1
 800158e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001590:	2301      	movs	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	4619      	mov	r1, r3
 800159e:	480d      	ldr	r0, [pc, #52]	@ (80015d4 <MX_GPIO_Init+0x100>)
 80015a0:	f001 fa9a 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80015a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	4619      	mov	r1, r3
 80015bc:	4806      	ldr	r0, [pc, #24]	@ (80015d8 <MX_GPIO_Init+0x104>)
 80015be:	f001 fa8b 	bl	8002ad8 <HAL_GPIO_Init>

}
 80015c2:	bf00      	nop
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020400 	.word	0x40020400
 80015d8:	40021c00 	.word	0x40021c00

080015dc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <MX_I2C1_Init+0x74>)
 80015e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <MX_I2C1_Init+0x78>)
 80015e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001650 <MX_I2C1_Init+0x74>)
 80015e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001658 <MX_I2C1_Init+0x7c>)
 80015ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015ec:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <MX_I2C1_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015f2:	4b17      	ldr	r3, [pc, #92]	@ (8001650 <MX_I2C1_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f8:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <MX_I2C1_Init+0x74>)
 80015fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001600:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <MX_I2C1_Init+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001606:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <MX_I2C1_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800160c:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <MX_I2C1_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001612:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <MX_I2C1_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001618:	480d      	ldr	r0, [pc, #52]	@ (8001650 <MX_I2C1_Init+0x74>)
 800161a:	f001 fc23 	bl	8002e64 <HAL_I2C_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001624:	f000 f95e 	bl	80018e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001628:	2100      	movs	r1, #0
 800162a:	4809      	ldr	r0, [pc, #36]	@ (8001650 <MX_I2C1_Init+0x74>)
 800162c:	f004 fa66 	bl	8005afc <HAL_I2CEx_ConfigAnalogFilter>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001636:	f000 f955 	bl	80018e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800163a:	2100      	movs	r1, #0
 800163c:	4804      	ldr	r0, [pc, #16]	@ (8001650 <MX_I2C1_Init+0x74>)
 800163e:	f004 fa99 	bl	8005b74 <HAL_I2CEx_ConfigDigitalFilter>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001648:	f000 f94c 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200004ec 	.word	0x200004ec
 8001654:	40005400 	.word	0x40005400
 8001658:	00061a80 	.word	0x00061a80

0800165c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	@ 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a4f      	ldr	r2, [pc, #316]	@ (80017b8 <HAL_I2C_MspInit+0x15c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	f040 8098 	bne.w	80017b0 <HAL_I2C_MspInit+0x154>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	4b4d      	ldr	r3, [pc, #308]	@ (80017bc <HAL_I2C_MspInit+0x160>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001688:	4a4c      	ldr	r2, [pc, #304]	@ (80017bc <HAL_I2C_MspInit+0x160>)
 800168a:	f043 0302 	orr.w	r3, r3, #2
 800168e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001690:	4b4a      	ldr	r3, [pc, #296]	@ (80017bc <HAL_I2C_MspInit+0x160>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800169c:	23c0      	movs	r3, #192	@ 0xc0
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a0:	2312      	movs	r3, #18
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ac:	2304      	movs	r3, #4
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	4842      	ldr	r0, [pc, #264]	@ (80017c0 <HAL_I2C_MspInit+0x164>)
 80016b8:	f001 fa0e 	bl	8002ad8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	4b3e      	ldr	r3, [pc, #248]	@ (80017bc <HAL_I2C_MspInit+0x160>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c4:	4a3d      	ldr	r2, [pc, #244]	@ (80017bc <HAL_I2C_MspInit+0x160>)
 80016c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80016cc:	4b3b      	ldr	r3, [pc, #236]	@ (80017bc <HAL_I2C_MspInit+0x160>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80016d8:	4b3a      	ldr	r3, [pc, #232]	@ (80017c4 <HAL_I2C_MspInit+0x168>)
 80016da:	4a3b      	ldr	r2, [pc, #236]	@ (80017c8 <HAL_I2C_MspInit+0x16c>)
 80016dc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80016de:	4b39      	ldr	r3, [pc, #228]	@ (80017c4 <HAL_I2C_MspInit+0x168>)
 80016e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016e4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016e6:	4b37      	ldr	r3, [pc, #220]	@ (80017c4 <HAL_I2C_MspInit+0x168>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ec:	4b35      	ldr	r3, [pc, #212]	@ (80017c4 <HAL_I2C_MspInit+0x168>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016f2:	4b34      	ldr	r3, [pc, #208]	@ (80017c4 <HAL_I2C_MspInit+0x168>)
 80016f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016f8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016fa:	4b32      	ldr	r3, [pc, #200]	@ (80017c4 <HAL_I2C_MspInit+0x168>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001700:	4b30      	ldr	r3, [pc, #192]	@ (80017c4 <HAL_I2C_MspInit+0x168>)
 8001702:	2200      	movs	r2, #0
 8001704:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001706:	4b2f      	ldr	r3, [pc, #188]	@ (80017c4 <HAL_I2C_MspInit+0x168>)
 8001708:	2200      	movs	r2, #0
 800170a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800170c:	4b2d      	ldr	r3, [pc, #180]	@ (80017c4 <HAL_I2C_MspInit+0x168>)
 800170e:	2200      	movs	r2, #0
 8001710:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001712:	4b2c      	ldr	r3, [pc, #176]	@ (80017c4 <HAL_I2C_MspInit+0x168>)
 8001714:	2200      	movs	r2, #0
 8001716:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001718:	482a      	ldr	r0, [pc, #168]	@ (80017c4 <HAL_I2C_MspInit+0x168>)
 800171a:	f000 fdc1 	bl	80022a0 <HAL_DMA_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001724:	f000 f8de 	bl	80018e4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a26      	ldr	r2, [pc, #152]	@ (80017c4 <HAL_I2C_MspInit+0x168>)
 800172c:	639a      	str	r2, [r3, #56]	@ 0x38
 800172e:	4a25      	ldr	r2, [pc, #148]	@ (80017c4 <HAL_I2C_MspInit+0x168>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001734:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <HAL_I2C_MspInit+0x170>)
 8001736:	4a26      	ldr	r2, [pc, #152]	@ (80017d0 <HAL_I2C_MspInit+0x174>)
 8001738:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800173a:	4b24      	ldr	r3, [pc, #144]	@ (80017cc <HAL_I2C_MspInit+0x170>)
 800173c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001740:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001742:	4b22      	ldr	r3, [pc, #136]	@ (80017cc <HAL_I2C_MspInit+0x170>)
 8001744:	2240      	movs	r2, #64	@ 0x40
 8001746:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001748:	4b20      	ldr	r3, [pc, #128]	@ (80017cc <HAL_I2C_MspInit+0x170>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800174e:	4b1f      	ldr	r3, [pc, #124]	@ (80017cc <HAL_I2C_MspInit+0x170>)
 8001750:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001754:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001756:	4b1d      	ldr	r3, [pc, #116]	@ (80017cc <HAL_I2C_MspInit+0x170>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800175c:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <HAL_I2C_MspInit+0x170>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001762:	4b1a      	ldr	r3, [pc, #104]	@ (80017cc <HAL_I2C_MspInit+0x170>)
 8001764:	2200      	movs	r2, #0
 8001766:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001768:	4b18      	ldr	r3, [pc, #96]	@ (80017cc <HAL_I2C_MspInit+0x170>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800176e:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <HAL_I2C_MspInit+0x170>)
 8001770:	2200      	movs	r2, #0
 8001772:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001774:	4815      	ldr	r0, [pc, #84]	@ (80017cc <HAL_I2C_MspInit+0x170>)
 8001776:	f000 fd93 	bl	80022a0 <HAL_DMA_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8001780:	f000 f8b0 	bl	80018e4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a11      	ldr	r2, [pc, #68]	@ (80017cc <HAL_I2C_MspInit+0x170>)
 8001788:	635a      	str	r2, [r3, #52]	@ 0x34
 800178a:	4a10      	ldr	r2, [pc, #64]	@ (80017cc <HAL_I2C_MspInit+0x170>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	2100      	movs	r1, #0
 8001794:	201f      	movs	r0, #31
 8001796:	f000 fd4c 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800179a:	201f      	movs	r0, #31
 800179c:	f000 fd65 	bl	800226a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	2020      	movs	r0, #32
 80017a6:	f000 fd44 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80017aa:	2020      	movs	r0, #32
 80017ac:	f000 fd5d 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017b0:	bf00      	nop
 80017b2:	3728      	adds	r7, #40	@ 0x28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40005400 	.word	0x40005400
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020400 	.word	0x40020400
 80017c4:	20000540 	.word	0x20000540
 80017c8:	40026010 	.word	0x40026010
 80017cc:	200005a0 	.word	0x200005a0
 80017d0:	400260a0 	.word	0x400260a0

080017d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d8:	f000 fbba 	bl	8001f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017dc:	f000 f812 	bl	8001804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e0:	f7ff fe78 	bl	80014d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80017e4:	f7ff fdf4 	bl	80013d0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80017e8:	f000 faa8 	bl	8001d3c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80017ec:	f000 f97a 	bl	8001ae4 <MX_TIM3_Init>
  MX_I2C1_Init();
 80017f0:	f7ff fef4 	bl	80015dc <MX_I2C1_Init>
  MX_TIM5_Init();
 80017f4:	f000 f9c4 	bl	8001b80 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  OS_Init();
 80017f8:	f7ff fd7e 	bl	80012f8 <OS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Start_OS();
 80017fc:	f7ff fdaa 	bl	8001354 <Start_OS>
 8001800:	e7fc      	b.n	80017fc <main+0x28>
	...

08001804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b094      	sub	sp, #80	@ 0x50
 8001808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180a:	f107 0320 	add.w	r3, r7, #32
 800180e:	2230      	movs	r2, #48	@ 0x30
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f007 f930 	bl	8008a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	4b2b      	ldr	r3, [pc, #172]	@ (80018dc <SystemClock_Config+0xd8>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001830:	4a2a      	ldr	r2, [pc, #168]	@ (80018dc <SystemClock_Config+0xd8>)
 8001832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001836:	6413      	str	r3, [r2, #64]	@ 0x40
 8001838:	4b28      	ldr	r3, [pc, #160]	@ (80018dc <SystemClock_Config+0xd8>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001844:	2300      	movs	r3, #0
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	4b25      	ldr	r3, [pc, #148]	@ (80018e0 <SystemClock_Config+0xdc>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a24      	ldr	r2, [pc, #144]	@ (80018e0 <SystemClock_Config+0xdc>)
 800184e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	4b22      	ldr	r3, [pc, #136]	@ (80018e0 <SystemClock_Config+0xdc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001860:	2302      	movs	r3, #2
 8001862:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001864:	2301      	movs	r3, #1
 8001866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001868:	2310      	movs	r3, #16
 800186a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800186c:	2302      	movs	r3, #2
 800186e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001870:	2300      	movs	r3, #0
 8001872:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001874:	2308      	movs	r3, #8
 8001876:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001878:	23b4      	movs	r3, #180	@ 0xb4
 800187a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800187c:	2302      	movs	r3, #2
 800187e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001880:	2304      	movs	r3, #4
 8001882:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001884:	f107 0320 	add.w	r3, r7, #32
 8001888:	4618      	mov	r0, r3
 800188a:	f004 fa03 	bl	8005c94 <HAL_RCC_OscConfig>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001894:	f000 f826 	bl	80018e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001898:	f004 f9ac 	bl	8005bf4 <HAL_PWREx_EnableOverDrive>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80018a2:	f000 f81f 	bl	80018e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a6:	230f      	movs	r3, #15
 80018a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018aa:	2302      	movs	r3, #2
 80018ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018b2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	2105      	movs	r1, #5
 80018c4:	4618      	mov	r0, r3
 80018c6:	f004 fc5d 	bl	8006184 <HAL_RCC_ClockConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80018d0:	f000 f808 	bl	80018e4 <Error_Handler>
  }
}
 80018d4:	bf00      	nop
 80018d6:	3750      	adds	r7, #80	@ 0x50
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40007000 	.word	0x40007000

080018e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e8:	b672      	cpsid	i
}
 80018ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <Error_Handler+0x8>

080018f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	4b10      	ldr	r3, [pc, #64]	@ (800193c <HAL_MspInit+0x4c>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	4a0f      	ldr	r2, [pc, #60]	@ (800193c <HAL_MspInit+0x4c>)
 8001900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001904:	6453      	str	r3, [r2, #68]	@ 0x44
 8001906:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <HAL_MspInit+0x4c>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	4b09      	ldr	r3, [pc, #36]	@ (800193c <HAL_MspInit+0x4c>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	4a08      	ldr	r2, [pc, #32]	@ (800193c <HAL_MspInit+0x4c>)
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001920:	6413      	str	r3, [r2, #64]	@ 0x40
 8001922:	4b06      	ldr	r3, [pc, #24]	@ (800193c <HAL_MspInit+0x4c>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800

08001940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001944:	bf00      	nop
 8001946:	e7fd      	b.n	8001944 <NMI_Handler+0x4>

08001948 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <MemManage_Handler+0x4>

08001958 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <BusFault_Handler+0x4>

08001960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <UsageFault_Handler+0x4>

08001968 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001996:	f000 fb2d 	bl	8001ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80019a4:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <DMA1_Stream0_IRQHandler+0x10>)
 80019a6:	f000 fe13 	bl	80025d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000540 	.word	0x20000540

080019b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <DMA1_Stream6_IRQHandler+0x10>)
 80019ba:	f000 fe09 	bl	80025d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200005a0 	.word	0x200005a0

080019c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019cc:	4802      	ldr	r0, [pc, #8]	@ (80019d8 <TIM3_IRQHandler+0x10>)
 80019ce:	f004 ff91 	bl	80068f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000604 	.word	0x20000604

080019dc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019e0:	4802      	ldr	r0, [pc, #8]	@ (80019ec <I2C1_EV_IRQHandler+0x10>)
 80019e2:	f001 ffb5 	bl	8003950 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200004ec 	.word	0x200004ec

080019f0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80019f4:	4802      	ldr	r0, [pc, #8]	@ (8001a00 <I2C1_ER_IRQHandler+0x10>)
 80019f6:	f002 f8fe 	bl	8003bf6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200004ec 	.word	0x200004ec

08001a04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a08:	4802      	ldr	r0, [pc, #8]	@ (8001a14 <USART1_IRQHandler+0x10>)
 8001a0a:	f005 fedf 	bl	80077cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000694 	.word	0x20000694

08001a18 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8001a1c:	4802      	ldr	r0, [pc, #8]	@ (8001a28 <DMA2_Stream0_IRQHandler+0x10>)
 8001a1e:	f000 fdd7 	bl	80025d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2000048c 	.word	0x2000048c

08001a2c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a30:	4802      	ldr	r0, [pc, #8]	@ (8001a3c <DMA2_Stream2_IRQHandler+0x10>)
 8001a32:	f000 fdcd 	bl	80025d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200006dc 	.word	0x200006dc

08001a40 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a44:	4802      	ldr	r0, [pc, #8]	@ (8001a50 <DMA2_Stream7_IRQHandler+0x10>)
 8001a46:	f000 fdc3 	bl	80025d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	2000073c 	.word	0x2000073c

08001a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a5c:	4a14      	ldr	r2, [pc, #80]	@ (8001ab0 <_sbrk+0x5c>)
 8001a5e:	4b15      	ldr	r3, [pc, #84]	@ (8001ab4 <_sbrk+0x60>)
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a68:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d102      	bne.n	8001a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a70:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <_sbrk+0x64>)
 8001a72:	4a12      	ldr	r2, [pc, #72]	@ (8001abc <_sbrk+0x68>)
 8001a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a76:	4b10      	ldr	r3, [pc, #64]	@ (8001ab8 <_sbrk+0x64>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d207      	bcs.n	8001a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a84:	f007 f800 	bl	8008a88 <__errno>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a92:	e009      	b.n	8001aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a94:	4b08      	ldr	r3, [pc, #32]	@ (8001ab8 <_sbrk+0x64>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a9a:	4b07      	ldr	r3, [pc, #28]	@ (8001ab8 <_sbrk+0x64>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	4a05      	ldr	r2, [pc, #20]	@ (8001ab8 <_sbrk+0x64>)
 8001aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20030000 	.word	0x20030000
 8001ab4:	00000400 	.word	0x00000400
 8001ab8:	20000600 	.word	0x20000600
 8001abc:	200008e8 	.word	0x200008e8

08001ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac4:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <SystemInit+0x20>)
 8001ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aca:	4a05      	ldr	r2, [pc, #20]	@ (8001ae0 <SystemInit+0x20>)
 8001acc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ad0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af8:	463b      	mov	r3, r7
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b00:	4b1d      	ldr	r3, [pc, #116]	@ (8001b78 <MX_TIM3_Init+0x94>)
 8001b02:	4a1e      	ldr	r2, [pc, #120]	@ (8001b7c <MX_TIM3_Init+0x98>)
 8001b04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 900-1;
 8001b06:	4b1c      	ldr	r3, [pc, #112]	@ (8001b78 <MX_TIM3_Init+0x94>)
 8001b08:	f240 3283 	movw	r2, #899	@ 0x383
 8001b0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b78 <MX_TIM3_Init+0x94>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8001b14:	4b18      	ldr	r3, [pc, #96]	@ (8001b78 <MX_TIM3_Init+0x94>)
 8001b16:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001b1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1c:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <MX_TIM3_Init+0x94>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b22:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <MX_TIM3_Init+0x94>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b28:	4813      	ldr	r0, [pc, #76]	@ (8001b78 <MX_TIM3_Init+0x94>)
 8001b2a:	f004 fd0b 	bl	8006544 <HAL_TIM_Base_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b34:	f7ff fed6 	bl	80018e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	4619      	mov	r1, r3
 8001b44:	480c      	ldr	r0, [pc, #48]	@ (8001b78 <MX_TIM3_Init+0x94>)
 8001b46:	f005 f887 	bl	8006c58 <HAL_TIM_ConfigClockSource>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001b50:	f7ff fec8 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <MX_TIM3_Init+0x94>)
 8001b62:	f005 fc85 	bl	8007470 <HAL_TIMEx_MasterConfigSynchronization>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b6c:	f7ff feba 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b70:	bf00      	nop
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000604 	.word	0x20000604
 8001b7c:	40000400 	.word	0x40000400

08001b80 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	@ 0x28
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b86:	f107 0320 	add.w	r3, r7, #32
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	611a      	str	r2, [r3, #16]
 8001b9e:	615a      	str	r2, [r3, #20]
 8001ba0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ba2:	4b22      	ldr	r3, [pc, #136]	@ (8001c2c <MX_TIM5_Init+0xac>)
 8001ba4:	4a22      	ldr	r2, [pc, #136]	@ (8001c30 <MX_TIM5_Init+0xb0>)
 8001ba6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 900-1;
 8001ba8:	4b20      	ldr	r3, [pc, #128]	@ (8001c2c <MX_TIM5_Init+0xac>)
 8001baa:	f240 3283 	movw	r2, #899	@ 0x383
 8001bae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c2c <MX_TIM5_Init+0xac>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c2c <MX_TIM5_Init+0xac>)
 8001bb8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001bbc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <MX_TIM5_Init+0xac>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc4:	4b19      	ldr	r3, [pc, #100]	@ (8001c2c <MX_TIM5_Init+0xac>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001bca:	4818      	ldr	r0, [pc, #96]	@ (8001c2c <MX_TIM5_Init+0xac>)
 8001bcc:	f004 fd7a 	bl	80066c4 <HAL_TIM_PWM_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001bd6:	f7ff fe85 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001be2:	f107 0320 	add.w	r3, r7, #32
 8001be6:	4619      	mov	r1, r3
 8001be8:	4810      	ldr	r0, [pc, #64]	@ (8001c2c <MX_TIM5_Init+0xac>)
 8001bea:	f005 fc41 	bl	8007470 <HAL_TIMEx_MasterConfigSynchronization>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001bf4:	f7ff fe76 	bl	80018e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001bf8:	2370      	movs	r3, #112	@ 0x70
 8001bfa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8001bfc:	2332      	movs	r3, #50	@ 0x32
 8001bfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001c04:	2304      	movs	r3, #4
 8001c06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4807      	ldr	r0, [pc, #28]	@ (8001c2c <MX_TIM5_Init+0xac>)
 8001c10:	f004 ff60 	bl	8006ad4 <HAL_TIM_PWM_ConfigChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001c1a:	f7ff fe63 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c1e:	4803      	ldr	r0, [pc, #12]	@ (8001c2c <MX_TIM5_Init+0xac>)
 8001c20:	f000 f852 	bl	8001cc8 <HAL_TIM_MspPostInit>

}
 8001c24:	bf00      	nop
 8001c26:	3728      	adds	r7, #40	@ 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	2000064c 	.word	0x2000064c
 8001c30:	40000c00 	.word	0x40000c00

08001c34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0e      	ldr	r2, [pc, #56]	@ (8001c7c <HAL_TIM_Base_MspInit+0x48>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d115      	bne.n	8001c72 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c80 <HAL_TIM_Base_MspInit+0x4c>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c80 <HAL_TIM_Base_MspInit+0x4c>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c56:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <HAL_TIM_Base_MspInit+0x4c>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	201d      	movs	r0, #29
 8001c68:	f000 fae3 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c6c:	201d      	movs	r0, #29
 8001c6e:	f000 fafc 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40000400 	.word	0x40000400
 8001c80:	40023800 	.word	0x40023800

08001c84 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d10d      	bne.n	8001cb2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0x40>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	4a09      	ldr	r2, [pc, #36]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0x40>)
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca6:	4b07      	ldr	r3, [pc, #28]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0x40>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40000c00 	.word	0x40000c00
 8001cc4:	40023800 	.word	0x40023800

08001cc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a12      	ldr	r2, [pc, #72]	@ (8001d30 <HAL_TIM_MspPostInit+0x68>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d11e      	bne.n	8001d28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <HAL_TIM_MspPostInit+0x6c>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	4a10      	ldr	r2, [pc, #64]	@ (8001d34 <HAL_TIM_MspPostInit+0x6c>)
 8001cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <HAL_TIM_MspPostInit+0x6c>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PH11     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	4619      	mov	r1, r3
 8001d22:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <HAL_TIM_MspPostInit+0x70>)
 8001d24:	f000 fed8 	bl	8002ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001d28:	bf00      	nop
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40000c00 	.word	0x40000c00
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40021c00 	.word	0x40021c00

08001d3c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d40:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d42:	4a12      	ldr	r2, [pc, #72]	@ (8001d8c <MX_USART1_UART_Init+0x50>)
 8001d44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d46:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d54:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d60:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d62:	220c      	movs	r2, #12
 8001d64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d66:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d72:	4805      	ldr	r0, [pc, #20]	@ (8001d88 <MX_USART1_UART_Init+0x4c>)
 8001d74:	f005 fc0c 	bl	8007590 <HAL_UART_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d7e:	f7ff fdb1 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000694 	.word	0x20000694
 8001d8c:	40011000 	.word	0x40011000

08001d90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	@ 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a4c      	ldr	r2, [pc, #304]	@ (8001ee0 <HAL_UART_MspInit+0x150>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	f040 8091 	bne.w	8001ed6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db4:	2300      	movs	r3, #0
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	4b4a      	ldr	r3, [pc, #296]	@ (8001ee4 <HAL_UART_MspInit+0x154>)
 8001dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbc:	4a49      	ldr	r2, [pc, #292]	@ (8001ee4 <HAL_UART_MspInit+0x154>)
 8001dbe:	f043 0310 	orr.w	r3, r3, #16
 8001dc2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dc4:	4b47      	ldr	r3, [pc, #284]	@ (8001ee4 <HAL_UART_MspInit+0x154>)
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	4b43      	ldr	r3, [pc, #268]	@ (8001ee4 <HAL_UART_MspInit+0x154>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd8:	4a42      	ldr	r2, [pc, #264]	@ (8001ee4 <HAL_UART_MspInit+0x154>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de0:	4b40      	ldr	r3, [pc, #256]	@ (8001ee4 <HAL_UART_MspInit+0x154>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dec:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dfe:	2307      	movs	r3, #7
 8001e00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	4837      	ldr	r0, [pc, #220]	@ (8001ee8 <HAL_UART_MspInit+0x158>)
 8001e0a:	f000 fe65 	bl	8002ad8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001e0e:	4b37      	ldr	r3, [pc, #220]	@ (8001eec <HAL_UART_MspInit+0x15c>)
 8001e10:	4a37      	ldr	r2, [pc, #220]	@ (8001ef0 <HAL_UART_MspInit+0x160>)
 8001e12:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001e14:	4b35      	ldr	r3, [pc, #212]	@ (8001eec <HAL_UART_MspInit+0x15c>)
 8001e16:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e1a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e1c:	4b33      	ldr	r3, [pc, #204]	@ (8001eec <HAL_UART_MspInit+0x15c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e22:	4b32      	ldr	r3, [pc, #200]	@ (8001eec <HAL_UART_MspInit+0x15c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e28:	4b30      	ldr	r3, [pc, #192]	@ (8001eec <HAL_UART_MspInit+0x15c>)
 8001e2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e2e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e30:	4b2e      	ldr	r3, [pc, #184]	@ (8001eec <HAL_UART_MspInit+0x15c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e36:	4b2d      	ldr	r3, [pc, #180]	@ (8001eec <HAL_UART_MspInit+0x15c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001eec <HAL_UART_MspInit+0x15c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e42:	4b2a      	ldr	r3, [pc, #168]	@ (8001eec <HAL_UART_MspInit+0x15c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e48:	4b28      	ldr	r3, [pc, #160]	@ (8001eec <HAL_UART_MspInit+0x15c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e4e:	4827      	ldr	r0, [pc, #156]	@ (8001eec <HAL_UART_MspInit+0x15c>)
 8001e50:	f000 fa26 	bl	80022a0 <HAL_DMA_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001e5a:	f7ff fd43 	bl	80018e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a22      	ldr	r2, [pc, #136]	@ (8001eec <HAL_UART_MspInit+0x15c>)
 8001e62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e64:	4a21      	ldr	r2, [pc, #132]	@ (8001eec <HAL_UART_MspInit+0x15c>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001e6a:	4b22      	ldr	r3, [pc, #136]	@ (8001ef4 <HAL_UART_MspInit+0x164>)
 8001e6c:	4a22      	ldr	r2, [pc, #136]	@ (8001ef8 <HAL_UART_MspInit+0x168>)
 8001e6e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001e70:	4b20      	ldr	r3, [pc, #128]	@ (8001ef4 <HAL_UART_MspInit+0x164>)
 8001e72:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e76:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e78:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef4 <HAL_UART_MspInit+0x164>)
 8001e7a:	2240      	movs	r2, #64	@ 0x40
 8001e7c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef4 <HAL_UART_MspInit+0x164>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <HAL_UART_MspInit+0x164>)
 8001e86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e8a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ef4 <HAL_UART_MspInit+0x164>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e92:	4b18      	ldr	r3, [pc, #96]	@ (8001ef4 <HAL_UART_MspInit+0x164>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e98:	4b16      	ldr	r3, [pc, #88]	@ (8001ef4 <HAL_UART_MspInit+0x164>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <HAL_UART_MspInit+0x164>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ea4:	4b13      	ldr	r3, [pc, #76]	@ (8001ef4 <HAL_UART_MspInit+0x164>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001eaa:	4812      	ldr	r0, [pc, #72]	@ (8001ef4 <HAL_UART_MspInit+0x164>)
 8001eac:	f000 f9f8 	bl	80022a0 <HAL_DMA_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001eb6:	f7ff fd15 	bl	80018e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef4 <HAL_UART_MspInit+0x164>)
 8001ebe:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef4 <HAL_UART_MspInit+0x164>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2100      	movs	r1, #0
 8001eca:	2025      	movs	r0, #37	@ 0x25
 8001ecc:	f000 f9b1 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ed0:	2025      	movs	r0, #37	@ 0x25
 8001ed2:	f000 f9ca 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	3728      	adds	r7, #40	@ 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40011000 	.word	0x40011000
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020000 	.word	0x40020000
 8001eec:	200006dc 	.word	0x200006dc
 8001ef0:	40026440 	.word	0x40026440
 8001ef4:	2000073c 	.word	0x2000073c
 8001ef8:	400264b8 	.word	0x400264b8

08001efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001efc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f00:	f7ff fdde 	bl	8001ac0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f04:	480c      	ldr	r0, [pc, #48]	@ (8001f38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f06:	490d      	ldr	r1, [pc, #52]	@ (8001f3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f08:	4a0d      	ldr	r2, [pc, #52]	@ (8001f40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f0c:	e002      	b.n	8001f14 <LoopCopyDataInit>

08001f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f12:	3304      	adds	r3, #4

08001f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f18:	d3f9      	bcc.n	8001f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f20:	e001      	b.n	8001f26 <LoopFillZerobss>

08001f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f24:	3204      	adds	r2, #4

08001f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f28:	d3fb      	bcc.n	8001f22 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f2a:	f006 fdb3 	bl	8008a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f2e:	f7ff fc51 	bl	80017d4 <main>
  bx  lr    
 8001f32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f34:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f3c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001f40:	080098c0 	.word	0x080098c0
  ldr r2, =_sbss
 8001f44:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001f48:	200008e8 	.word	0x200008e8

08001f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f4c:	e7fe      	b.n	8001f4c <ADC_IRQHandler>
	...

08001f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f54:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <HAL_Init+0x40>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <HAL_Init+0x40>)
 8001f5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f60:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <HAL_Init+0x40>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0a      	ldr	r2, [pc, #40]	@ (8001f90 <HAL_Init+0x40>)
 8001f66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f6c:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <HAL_Init+0x40>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a07      	ldr	r2, [pc, #28]	@ (8001f90 <HAL_Init+0x40>)
 8001f72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f000 f94f 	bl	800221c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f000 f808 	bl	8001f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f84:	f7ff fcb4 	bl	80018f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40023c00 	.word	0x40023c00

08001f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f9c:	4b12      	ldr	r3, [pc, #72]	@ (8001fe8 <HAL_InitTick+0x54>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b12      	ldr	r3, [pc, #72]	@ (8001fec <HAL_InitTick+0x58>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f967 	bl	8002286 <HAL_SYSTICK_Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00e      	b.n	8001fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b0f      	cmp	r3, #15
 8001fc6:	d80a      	bhi.n	8001fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f000 f92f 	bl	8002232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd4:	4a06      	ldr	r2, [pc, #24]	@ (8001ff0 <HAL_InitTick+0x5c>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e000      	b.n	8001fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000004 	.word	0x20000004
 8001fec:	2000000c 	.word	0x2000000c
 8001ff0:	20000008 	.word	0x20000008

08001ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <HAL_IncTick+0x20>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <HAL_IncTick+0x24>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4413      	add	r3, r2
 8002004:	4a04      	ldr	r2, [pc, #16]	@ (8002018 <HAL_IncTick+0x24>)
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	2000000c 	.word	0x2000000c
 8002018:	2000079c 	.word	0x2000079c

0800201c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return uwTick;
 8002020:	4b03      	ldr	r3, [pc, #12]	@ (8002030 <HAL_GetTick+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	2000079c 	.word	0x2000079c

08002034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800203c:	f7ff ffee 	bl	800201c <HAL_GetTick>
 8002040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204c:	d005      	beq.n	800205a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800204e:	4b0a      	ldr	r3, [pc, #40]	@ (8002078 <HAL_Delay+0x44>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800205a:	bf00      	nop
 800205c:	f7ff ffde 	bl	800201c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	429a      	cmp	r2, r3
 800206a:	d8f7      	bhi.n	800205c <HAL_Delay+0x28>
  {
  }
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	2000000c 	.word	0x2000000c

0800207c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800208c:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <__NVIC_SetPriorityGrouping+0x44>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002098:	4013      	ands	r3, r2
 800209a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ae:	4a04      	ldr	r2, [pc, #16]	@ (80020c0 <__NVIC_SetPriorityGrouping+0x44>)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	60d3      	str	r3, [r2, #12]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c8:	4b04      	ldr	r3, [pc, #16]	@ (80020dc <__NVIC_GetPriorityGrouping+0x18>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	0a1b      	lsrs	r3, r3, #8
 80020ce:	f003 0307 	and.w	r3, r3, #7
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	db0b      	blt.n	800210a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	f003 021f 	and.w	r2, r3, #31
 80020f8:	4907      	ldr	r1, [pc, #28]	@ (8002118 <__NVIC_EnableIRQ+0x38>)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	2001      	movs	r0, #1
 8002102:	fa00 f202 	lsl.w	r2, r0, r2
 8002106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000e100 	.word	0xe000e100

0800211c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	2b00      	cmp	r3, #0
 800212e:	db0a      	blt.n	8002146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	490c      	ldr	r1, [pc, #48]	@ (8002168 <__NVIC_SetPriority+0x4c>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	440b      	add	r3, r1
 8002140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002144:	e00a      	b.n	800215c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4908      	ldr	r1, [pc, #32]	@ (800216c <__NVIC_SetPriority+0x50>)
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	3b04      	subs	r3, #4
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	440b      	add	r3, r1
 800215a:	761a      	strb	r2, [r3, #24]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000e100 	.word	0xe000e100
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	@ 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f1c3 0307 	rsb	r3, r3, #7
 800218a:	2b04      	cmp	r3, #4
 800218c:	bf28      	it	cs
 800218e:	2304      	movcs	r3, #4
 8002190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3304      	adds	r3, #4
 8002196:	2b06      	cmp	r3, #6
 8002198:	d902      	bls.n	80021a0 <NVIC_EncodePriority+0x30>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3b03      	subs	r3, #3
 800219e:	e000      	b.n	80021a2 <NVIC_EncodePriority+0x32>
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	401a      	ands	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	43d9      	mvns	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	4313      	orrs	r3, r2
         );
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3724      	adds	r7, #36	@ 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021e8:	d301      	bcc.n	80021ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00f      	b.n	800220e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002218 <SysTick_Config+0x40>)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f6:	210f      	movs	r1, #15
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f7ff ff8e 	bl	800211c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002200:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <SysTick_Config+0x40>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002206:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <SysTick_Config+0x40>)
 8002208:	2207      	movs	r2, #7
 800220a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	e000e010 	.word	0xe000e010

0800221c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff29 	bl	800207c <__NVIC_SetPriorityGrouping>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002244:	f7ff ff3e 	bl	80020c4 <__NVIC_GetPriorityGrouping>
 8002248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	6978      	ldr	r0, [r7, #20]
 8002250:	f7ff ff8e 	bl	8002170 <NVIC_EncodePriority>
 8002254:	4602      	mov	r2, r0
 8002256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff5d 	bl	800211c <__NVIC_SetPriority>
}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff31 	bl	80020e0 <__NVIC_EnableIRQ>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ffa2 	bl	80021d8 <SysTick_Config>
 8002294:	4603      	mov	r3, r0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022ac:	f7ff feb6 	bl	800201c <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e099      	b.n	80023f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0201 	bic.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022dc:	e00f      	b.n	80022fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022de:	f7ff fe9d 	bl	800201c <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b05      	cmp	r3, #5
 80022ea:	d908      	bls.n	80022fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2203      	movs	r2, #3
 80022f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e078      	b.n	80023f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1e8      	bne.n	80022de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	4b38      	ldr	r3, [pc, #224]	@ (80023f8 <HAL_DMA_Init+0x158>)
 8002318:	4013      	ands	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800232a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002336:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002342:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002354:	2b04      	cmp	r3, #4
 8002356:	d107      	bne.n	8002368 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002360:	4313      	orrs	r3, r2
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4313      	orrs	r3, r2
 8002366:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f023 0307 	bic.w	r3, r3, #7
 800237e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	4313      	orrs	r3, r2
 8002388:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	2b04      	cmp	r3, #4
 8002390:	d117      	bne.n	80023c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00e      	beq.n	80023c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 fb1b 	bl	80029e0 <DMA_CheckFifoParam>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2240      	movs	r2, #64	@ 0x40
 80023b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80023be:	2301      	movs	r3, #1
 80023c0:	e016      	b.n	80023f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fad2 	bl	8002974 <DMA_CalcBaseAndBitshift>
 80023d0:	4603      	mov	r3, r0
 80023d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d8:	223f      	movs	r2, #63	@ 0x3f
 80023da:	409a      	lsls	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	f010803f 	.word	0xf010803f

080023fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002412:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_DMA_Start_IT+0x26>
 800241e:	2302      	movs	r3, #2
 8002420:	e040      	b.n	80024a4 <HAL_DMA_Start_IT+0xa8>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b01      	cmp	r3, #1
 8002434:	d12f      	bne.n	8002496 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2202      	movs	r2, #2
 800243a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fa64 	bl	8002918 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002454:	223f      	movs	r2, #63	@ 0x3f
 8002456:	409a      	lsls	r2, r3
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0216 	orr.w	r2, r2, #22
 800246a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0208 	orr.w	r2, r2, #8
 8002482:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e005      	b.n	80024a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800249e:	2302      	movs	r3, #2
 80024a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024ba:	f7ff fdaf 	bl	800201c <HAL_GetTick>
 80024be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d008      	beq.n	80024de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2280      	movs	r2, #128	@ 0x80
 80024d0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e052      	b.n	8002584 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0216 	bic.w	r2, r2, #22
 80024ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695a      	ldr	r2, [r3, #20]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <HAL_DMA_Abort+0x62>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800250a:	2b00      	cmp	r3, #0
 800250c:	d007      	beq.n	800251e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0208 	bic.w	r2, r2, #8
 800251c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0201 	bic.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800252e:	e013      	b.n	8002558 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002530:	f7ff fd74 	bl	800201c <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b05      	cmp	r3, #5
 800253c:	d90c      	bls.n	8002558 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2220      	movs	r2, #32
 8002542:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2203      	movs	r2, #3
 8002548:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e015      	b.n	8002584 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1e4      	bne.n	8002530 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256a:	223f      	movs	r2, #63	@ 0x3f
 800256c:	409a      	lsls	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d004      	beq.n	80025aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2280      	movs	r2, #128	@ 0x80
 80025a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e00c      	b.n	80025c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2205      	movs	r2, #5
 80025ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0201 	bic.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025dc:	4b8e      	ldr	r3, [pc, #568]	@ (8002818 <HAL_DMA_IRQHandler+0x248>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a8e      	ldr	r2, [pc, #568]	@ (800281c <HAL_DMA_IRQHandler+0x24c>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	0a9b      	lsrs	r3, r3, #10
 80025e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fa:	2208      	movs	r2, #8
 80025fc:	409a      	lsls	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4013      	ands	r3, r2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d01a      	beq.n	800263c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d013      	beq.n	800263c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0204 	bic.w	r2, r2, #4
 8002622:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002628:	2208      	movs	r2, #8
 800262a:	409a      	lsls	r2, r3
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002634:	f043 0201 	orr.w	r2, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002640:	2201      	movs	r2, #1
 8002642:	409a      	lsls	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4013      	ands	r3, r2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d012      	beq.n	8002672 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00b      	beq.n	8002672 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265e:	2201      	movs	r2, #1
 8002660:	409a      	lsls	r2, r3
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800266a:	f043 0202 	orr.w	r2, r3, #2
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002676:	2204      	movs	r2, #4
 8002678:	409a      	lsls	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d012      	beq.n	80026a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00b      	beq.n	80026a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002694:	2204      	movs	r2, #4
 8002696:	409a      	lsls	r2, r3
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a0:	f043 0204 	orr.w	r2, r3, #4
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ac:	2210      	movs	r2, #16
 80026ae:	409a      	lsls	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d043      	beq.n	8002740 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d03c      	beq.n	8002740 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ca:	2210      	movs	r2, #16
 80026cc:	409a      	lsls	r2, r3
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d018      	beq.n	8002712 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d108      	bne.n	8002700 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d024      	beq.n	8002740 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	4798      	blx	r3
 80026fe:	e01f      	b.n	8002740 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002704:	2b00      	cmp	r3, #0
 8002706:	d01b      	beq.n	8002740 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
 8002710:	e016      	b.n	8002740 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271c:	2b00      	cmp	r3, #0
 800271e:	d107      	bne.n	8002730 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0208 	bic.w	r2, r2, #8
 800272e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002744:	2220      	movs	r2, #32
 8002746:	409a      	lsls	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 808f 	beq.w	8002870 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 8087 	beq.w	8002870 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002766:	2220      	movs	r2, #32
 8002768:	409a      	lsls	r2, r3
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b05      	cmp	r3, #5
 8002778:	d136      	bne.n	80027e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0216 	bic.w	r2, r2, #22
 8002788:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002798:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d103      	bne.n	80027aa <HAL_DMA_IRQHandler+0x1da>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d007      	beq.n	80027ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0208 	bic.w	r2, r2, #8
 80027b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027be:	223f      	movs	r2, #63	@ 0x3f
 80027c0:	409a      	lsls	r2, r3
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d07e      	beq.n	80028dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	4798      	blx	r3
        }
        return;
 80027e6:	e079      	b.n	80028dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d01d      	beq.n	8002832 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10d      	bne.n	8002820 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002808:	2b00      	cmp	r3, #0
 800280a:	d031      	beq.n	8002870 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	4798      	blx	r3
 8002814:	e02c      	b.n	8002870 <HAL_DMA_IRQHandler+0x2a0>
 8002816:	bf00      	nop
 8002818:	20000004 	.word	0x20000004
 800281c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002824:	2b00      	cmp	r3, #0
 8002826:	d023      	beq.n	8002870 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	4798      	blx	r3
 8002830:	e01e      	b.n	8002870 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10f      	bne.n	8002860 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0210 	bic.w	r2, r2, #16
 800284e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002874:	2b00      	cmp	r3, #0
 8002876:	d032      	beq.n	80028de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d022      	beq.n	80028ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2205      	movs	r2, #5
 8002888:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	3301      	adds	r3, #1
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d307      	bcc.n	80028b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f2      	bne.n	800289c <HAL_DMA_IRQHandler+0x2cc>
 80028b6:	e000      	b.n	80028ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	4798      	blx	r3
 80028da:	e000      	b.n	80028de <HAL_DMA_IRQHandler+0x30e>
        return;
 80028dc:	bf00      	nop
    }
  }
}
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028f2:	b2db      	uxtb	r3, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002934:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b40      	cmp	r3, #64	@ 0x40
 8002944:	d108      	bne.n	8002958 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002956:	e007      	b.n	8002968 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	60da      	str	r2, [r3, #12]
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	3b10      	subs	r3, #16
 8002984:	4a14      	ldr	r2, [pc, #80]	@ (80029d8 <DMA_CalcBaseAndBitshift+0x64>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	091b      	lsrs	r3, r3, #4
 800298c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800298e:	4a13      	ldr	r2, [pc, #76]	@ (80029dc <DMA_CalcBaseAndBitshift+0x68>)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4413      	add	r3, r2
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d909      	bls.n	80029b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029aa:	f023 0303 	bic.w	r3, r3, #3
 80029ae:	1d1a      	adds	r2, r3, #4
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80029b4:	e007      	b.n	80029c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029be:	f023 0303 	bic.w	r3, r3, #3
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	aaaaaaab 	.word	0xaaaaaaab
 80029dc:	08009874 	.word	0x08009874

080029e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d11f      	bne.n	8002a3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d856      	bhi.n	8002aae <DMA_CheckFifoParam+0xce>
 8002a00:	a201      	add	r2, pc, #4	@ (adr r2, 8002a08 <DMA_CheckFifoParam+0x28>)
 8002a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a06:	bf00      	nop
 8002a08:	08002a19 	.word	0x08002a19
 8002a0c:	08002a2b 	.word	0x08002a2b
 8002a10:	08002a19 	.word	0x08002a19
 8002a14:	08002aaf 	.word	0x08002aaf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d046      	beq.n	8002ab2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a28:	e043      	b.n	8002ab2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a32:	d140      	bne.n	8002ab6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a38:	e03d      	b.n	8002ab6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a42:	d121      	bne.n	8002a88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d837      	bhi.n	8002aba <DMA_CheckFifoParam+0xda>
 8002a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a50 <DMA_CheckFifoParam+0x70>)
 8002a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a50:	08002a61 	.word	0x08002a61
 8002a54:	08002a67 	.word	0x08002a67
 8002a58:	08002a61 	.word	0x08002a61
 8002a5c:	08002a79 	.word	0x08002a79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
      break;
 8002a64:	e030      	b.n	8002ac8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d025      	beq.n	8002abe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a76:	e022      	b.n	8002abe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a80:	d11f      	bne.n	8002ac2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a86:	e01c      	b.n	8002ac2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d903      	bls.n	8002a96 <DMA_CheckFifoParam+0xb6>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d003      	beq.n	8002a9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a94:	e018      	b.n	8002ac8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	73fb      	strb	r3, [r7, #15]
      break;
 8002a9a:	e015      	b.n	8002ac8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00e      	beq.n	8002ac6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8002aac:	e00b      	b.n	8002ac6 <DMA_CheckFifoParam+0xe6>
      break;
 8002aae:	bf00      	nop
 8002ab0:	e00a      	b.n	8002ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ab2:	bf00      	nop
 8002ab4:	e008      	b.n	8002ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ab6:	bf00      	nop
 8002ab8:	e006      	b.n	8002ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8002aba:	bf00      	nop
 8002abc:	e004      	b.n	8002ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8002abe:	bf00      	nop
 8002ac0:	e002      	b.n	8002ac8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ac2:	bf00      	nop
 8002ac4:	e000      	b.n	8002ac8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ac6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop

08002ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	@ 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	e177      	b.n	8002de4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002af4:	2201      	movs	r2, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	f040 8166 	bne.w	8002dde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d005      	beq.n	8002b2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d130      	bne.n	8002b8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	2203      	movs	r2, #3
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b60:	2201      	movs	r2, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 0201 	and.w	r2, r3, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d017      	beq.n	8002bc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d123      	bne.n	8002c1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	08da      	lsrs	r2, r3, #3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3208      	adds	r2, #8
 8002bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	220f      	movs	r2, #15
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	08da      	lsrs	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3208      	adds	r2, #8
 8002c16:	69b9      	ldr	r1, [r7, #24]
 8002c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2203      	movs	r2, #3
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0203 	and.w	r2, r3, #3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80c0 	beq.w	8002dde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	4b66      	ldr	r3, [pc, #408]	@ (8002dfc <HAL_GPIO_Init+0x324>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c66:	4a65      	ldr	r2, [pc, #404]	@ (8002dfc <HAL_GPIO_Init+0x324>)
 8002c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c6e:	4b63      	ldr	r3, [pc, #396]	@ (8002dfc <HAL_GPIO_Init+0x324>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c7a:	4a61      	ldr	r2, [pc, #388]	@ (8002e00 <HAL_GPIO_Init+0x328>)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3302      	adds	r3, #2
 8002c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	220f      	movs	r2, #15
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a58      	ldr	r2, [pc, #352]	@ (8002e04 <HAL_GPIO_Init+0x32c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d037      	beq.n	8002d16 <HAL_GPIO_Init+0x23e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a57      	ldr	r2, [pc, #348]	@ (8002e08 <HAL_GPIO_Init+0x330>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d031      	beq.n	8002d12 <HAL_GPIO_Init+0x23a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a56      	ldr	r2, [pc, #344]	@ (8002e0c <HAL_GPIO_Init+0x334>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d02b      	beq.n	8002d0e <HAL_GPIO_Init+0x236>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a55      	ldr	r2, [pc, #340]	@ (8002e10 <HAL_GPIO_Init+0x338>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d025      	beq.n	8002d0a <HAL_GPIO_Init+0x232>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a54      	ldr	r2, [pc, #336]	@ (8002e14 <HAL_GPIO_Init+0x33c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01f      	beq.n	8002d06 <HAL_GPIO_Init+0x22e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a53      	ldr	r2, [pc, #332]	@ (8002e18 <HAL_GPIO_Init+0x340>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d019      	beq.n	8002d02 <HAL_GPIO_Init+0x22a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a52      	ldr	r2, [pc, #328]	@ (8002e1c <HAL_GPIO_Init+0x344>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_GPIO_Init+0x226>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a51      	ldr	r2, [pc, #324]	@ (8002e20 <HAL_GPIO_Init+0x348>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <HAL_GPIO_Init+0x222>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a50      	ldr	r2, [pc, #320]	@ (8002e24 <HAL_GPIO_Init+0x34c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <HAL_GPIO_Init+0x21e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4f      	ldr	r2, [pc, #316]	@ (8002e28 <HAL_GPIO_Init+0x350>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_GPIO_Init+0x21a>
 8002cee:	2309      	movs	r3, #9
 8002cf0:	e012      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002cf2:	230a      	movs	r3, #10
 8002cf4:	e010      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002cf6:	2308      	movs	r3, #8
 8002cf8:	e00e      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002cfa:	2307      	movs	r3, #7
 8002cfc:	e00c      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002cfe:	2306      	movs	r3, #6
 8002d00:	e00a      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d02:	2305      	movs	r3, #5
 8002d04:	e008      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d06:	2304      	movs	r3, #4
 8002d08:	e006      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e004      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e002      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_GPIO_Init+0x240>
 8002d16:	2300      	movs	r3, #0
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	f002 0203 	and.w	r2, r2, #3
 8002d1e:	0092      	lsls	r2, r2, #2
 8002d20:	4093      	lsls	r3, r2
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d28:	4935      	ldr	r1, [pc, #212]	@ (8002e00 <HAL_GPIO_Init+0x328>)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	3302      	adds	r3, #2
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d36:	4b3d      	ldr	r3, [pc, #244]	@ (8002e2c <HAL_GPIO_Init+0x354>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d5a:	4a34      	ldr	r2, [pc, #208]	@ (8002e2c <HAL_GPIO_Init+0x354>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d60:	4b32      	ldr	r3, [pc, #200]	@ (8002e2c <HAL_GPIO_Init+0x354>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d84:	4a29      	ldr	r2, [pc, #164]	@ (8002e2c <HAL_GPIO_Init+0x354>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d8a:	4b28      	ldr	r3, [pc, #160]	@ (8002e2c <HAL_GPIO_Init+0x354>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dae:	4a1f      	ldr	r2, [pc, #124]	@ (8002e2c <HAL_GPIO_Init+0x354>)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e2c <HAL_GPIO_Init+0x354>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dd8:	4a14      	ldr	r2, [pc, #80]	@ (8002e2c <HAL_GPIO_Init+0x354>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3301      	adds	r3, #1
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	2b0f      	cmp	r3, #15
 8002de8:	f67f ae84 	bls.w	8002af4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	3724      	adds	r7, #36	@ 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40013800 	.word	0x40013800
 8002e04:	40020000 	.word	0x40020000
 8002e08:	40020400 	.word	0x40020400
 8002e0c:	40020800 	.word	0x40020800
 8002e10:	40020c00 	.word	0x40020c00
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40021400 	.word	0x40021400
 8002e1c:	40021800 	.word	0x40021800
 8002e20:	40021c00 	.word	0x40021c00
 8002e24:	40022000 	.word	0x40022000
 8002e28:	40022400 	.word	0x40022400
 8002e2c:	40013c00 	.word	0x40013c00

08002e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	807b      	strh	r3, [r7, #2]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e40:	787b      	ldrb	r3, [r7, #1]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e4c:	e003      	b.n	8002e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e4e:	887b      	ldrh	r3, [r7, #2]
 8002e50:	041a      	lsls	r2, r3, #16
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	619a      	str	r2, [r3, #24]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e12b      	b.n	80030ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fe fbe6 	bl	800165c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2224      	movs	r2, #36	@ 0x24
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0201 	bic.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ec6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ec8:	f003 fb14 	bl	80064f4 <HAL_RCC_GetPCLK1Freq>
 8002ecc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4a81      	ldr	r2, [pc, #516]	@ (80030d8 <HAL_I2C_Init+0x274>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d807      	bhi.n	8002ee8 <HAL_I2C_Init+0x84>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4a80      	ldr	r2, [pc, #512]	@ (80030dc <HAL_I2C_Init+0x278>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	bf94      	ite	ls
 8002ee0:	2301      	movls	r3, #1
 8002ee2:	2300      	movhi	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	e006      	b.n	8002ef6 <HAL_I2C_Init+0x92>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4a7d      	ldr	r2, [pc, #500]	@ (80030e0 <HAL_I2C_Init+0x27c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	bf94      	ite	ls
 8002ef0:	2301      	movls	r3, #1
 8002ef2:	2300      	movhi	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e0e7      	b.n	80030ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4a78      	ldr	r2, [pc, #480]	@ (80030e4 <HAL_I2C_Init+0x280>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	0c9b      	lsrs	r3, r3, #18
 8002f08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a6a      	ldr	r2, [pc, #424]	@ (80030d8 <HAL_I2C_Init+0x274>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d802      	bhi.n	8002f38 <HAL_I2C_Init+0xd4>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	3301      	adds	r3, #1
 8002f36:	e009      	b.n	8002f4c <HAL_I2C_Init+0xe8>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	4a69      	ldr	r2, [pc, #420]	@ (80030e8 <HAL_I2C_Init+0x284>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	099b      	lsrs	r3, r3, #6
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	430b      	orrs	r3, r1
 8002f52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	495c      	ldr	r1, [pc, #368]	@ (80030d8 <HAL_I2C_Init+0x274>)
 8002f68:	428b      	cmp	r3, r1
 8002f6a:	d819      	bhi.n	8002fa0 <HAL_I2C_Init+0x13c>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1e59      	subs	r1, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f7a:	1c59      	adds	r1, r3, #1
 8002f7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f80:	400b      	ands	r3, r1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_I2C_Init+0x138>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1e59      	subs	r1, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f94:	3301      	adds	r3, #1
 8002f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9a:	e051      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8002f9c:	2304      	movs	r3, #4
 8002f9e:	e04f      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d111      	bne.n	8002fcc <HAL_I2C_Init+0x168>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1e58      	subs	r0, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	440b      	add	r3, r1
 8002fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e012      	b.n	8002ff2 <HAL_I2C_Init+0x18e>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1e58      	subs	r0, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	0099      	lsls	r1, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Init+0x196>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e022      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10e      	bne.n	8003020 <HAL_I2C_Init+0x1bc>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1e58      	subs	r0, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6859      	ldr	r1, [r3, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	440b      	add	r3, r1
 8003010:	fbb0 f3f3 	udiv	r3, r0, r3
 8003014:	3301      	adds	r3, #1
 8003016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800301e:	e00f      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	1e58      	subs	r0, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	0099      	lsls	r1, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	fbb0 f3f3 	udiv	r3, r0, r3
 8003036:	3301      	adds	r3, #1
 8003038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	6809      	ldr	r1, [r1, #0]
 8003044:	4313      	orrs	r3, r2
 8003046:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800306e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6911      	ldr	r1, [r2, #16]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68d2      	ldr	r2, [r2, #12]
 800307a:	4311      	orrs	r1, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	430b      	orrs	r3, r1
 8003082:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	000186a0 	.word	0x000186a0
 80030dc:	001e847f 	.word	0x001e847f
 80030e0:	003d08ff 	.word	0x003d08ff
 80030e4:	431bde83 	.word	0x431bde83
 80030e8:	10624dd3 	.word	0x10624dd3

080030ec <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030fe:	2b80      	cmp	r3, #128	@ 0x80
 8003100:	d103      	bne.n	800310a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2200      	movs	r2, #0
 8003108:	611a      	str	r2, [r3, #16]
  }
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	@ 0x28
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	4608      	mov	r0, r1
 8003122:	4611      	mov	r1, r2
 8003124:	461a      	mov	r2, r3
 8003126:	4603      	mov	r3, r0
 8003128:	817b      	strh	r3, [r7, #10]
 800312a:	460b      	mov	r3, r1
 800312c:	813b      	strh	r3, [r7, #8]
 800312e:	4613      	mov	r3, r2
 8003130:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003136:	f7fe ff71 	bl	800201c <HAL_GetTick>
 800313a:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b20      	cmp	r3, #32
 8003146:	f040 8136 	bne.w	80033b6 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800314a:	4b9d      	ldr	r3, [pc, #628]	@ (80033c0 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	08db      	lsrs	r3, r3, #3
 8003150:	4a9c      	ldr	r2, [pc, #624]	@ (80033c4 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	0a1a      	lsrs	r2, r3, #8
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	009a      	lsls	r2, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	3b01      	subs	r3, #1
 8003168:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d112      	bne.n	8003196 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	f043 0220 	orr.w	r2, r3, #32
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003192:	2302      	movs	r3, #2
 8003194:	e110      	b.n	80033b8 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d0df      	beq.n	8003164 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_I2C_Mem_Write_DMA+0x9a>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e102      	b.n	80033b8 <HAL_I2C_Mem_Write_DMA+0x2a0>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d007      	beq.n	80031d8 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2221      	movs	r2, #33	@ 0x21
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2240      	movs	r2, #64	@ 0x40
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003202:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003208:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4a6c      	ldr	r2, [pc, #432]	@ (80033c8 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8003218:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800321a:	897a      	ldrh	r2, [r7, #10]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8003220:	893a      	ldrh	r2, [r7, #8]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003226:	88fa      	ldrh	r2, [r7, #6]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 80a9 	beq.w	800338e <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003240:	2b00      	cmp	r3, #0
 8003242:	d02a      	beq.n	800329a <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003248:	4a60      	ldr	r2, [pc, #384]	@ (80033cc <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800324a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003250:	4a5f      	ldr	r2, [pc, #380]	@ (80033d0 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8003252:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003258:	2200      	movs	r2, #0
 800325a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003260:	2200      	movs	r2, #0
 8003262:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003268:	2200      	movs	r2, #0
 800326a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003270:	2200      	movs	r2, #0
 8003272:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327c:	4619      	mov	r1, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	3310      	adds	r3, #16
 8003284:	461a      	mov	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328a:	f7ff f8b7 	bl	80023fc <HAL_DMA_Start_IT>
 800328e:	4603      	mov	r3, r0
 8003290:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003292:	7efb      	ldrb	r3, [r7, #27]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d166      	bne.n	8003366 <HAL_I2C_Mem_Write_DMA+0x24e>
 8003298:	e013      	b.n	80032c2 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e07a      	b.n	80033b8 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80032c2:	88f8      	ldrh	r0, [r7, #6]
 80032c4:	893a      	ldrh	r2, [r7, #8]
 80032c6:	8979      	ldrh	r1, [r7, #10]
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	2323      	movs	r3, #35	@ 0x23
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	4603      	mov	r3, r0
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f001 fef2 	bl	80050bc <I2C_RequestMemoryWrite>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d022      	beq.n	8003324 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff f952 	bl	800258c <HAL_DMA_Abort_IT>
 80032e8:	4603      	mov	r3, r0
 80032ea:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f0:	2200      	movs	r2, #0
 80032f2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003302:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e049      	b.n	80033b8 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003324:	2300      	movs	r3, #0
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003350:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003360:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	e028      	b.n	80033b8 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2220      	movs	r2, #32
 800336a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	f043 0210 	orr.w	r2, r3, #16
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e014      	b.n	80033b8 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 80033b6:	2302      	movs	r3, #2
  }
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3720      	adds	r7, #32
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20000004 	.word	0x20000004
 80033c4:	14f8b589 	.word	0x14f8b589
 80033c8:	ffff0000 	.word	0xffff0000
 80033cc:	080053b9 	.word	0x080053b9
 80033d0:	08005577 	.word	0x08005577

080033d4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08c      	sub	sp, #48	@ 0x30
 80033d8:	af02      	add	r7, sp, #8
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	4608      	mov	r0, r1
 80033de:	4611      	mov	r1, r2
 80033e0:	461a      	mov	r2, r3
 80033e2:	4603      	mov	r3, r0
 80033e4:	817b      	strh	r3, [r7, #10]
 80033e6:	460b      	mov	r3, r1
 80033e8:	813b      	strh	r3, [r7, #8]
 80033ea:	4613      	mov	r3, r2
 80033ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033ee:	f7fe fe15 	bl	800201c <HAL_GetTick>
 80033f2:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b20      	cmp	r3, #32
 8003402:	f040 8172 	bne.w	80036ea <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003406:	4b93      	ldr	r3, [pc, #588]	@ (8003654 <HAL_I2C_Mem_Read_DMA+0x280>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	08db      	lsrs	r3, r3, #3
 800340c:	4a92      	ldr	r2, [pc, #584]	@ (8003658 <HAL_I2C_Mem_Read_DMA+0x284>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	0a1a      	lsrs	r2, r3, #8
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	009a      	lsls	r2, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	3b01      	subs	r3, #1
 8003424:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d112      	bne.n	8003452 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003446:	f043 0220 	orr.w	r2, r3, #32
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800344e:	2302      	movs	r3, #2
 8003450:	e14c      	b.n	80036ec <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b02      	cmp	r3, #2
 800345e:	d0df      	beq.n	8003420 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_I2C_Mem_Read_DMA+0x9a>
 800346a:	2302      	movs	r3, #2
 800346c:	e13e      	b.n	80036ec <HAL_I2C_Mem_Read_DMA+0x318>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b01      	cmp	r3, #1
 8003482:	d007      	beq.n	8003494 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2222      	movs	r2, #34	@ 0x22
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2240      	movs	r2, #64	@ 0x40
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80034c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4a62      	ldr	r2, [pc, #392]	@ (800365c <HAL_I2C_Mem_Read_DMA+0x288>)
 80034d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80034d6:	897a      	ldrh	r2, [r7, #10]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80034dc:	893a      	ldrh	r2, [r7, #8]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80034e2:	88fa      	ldrh	r2, [r7, #6]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80cc 	beq.w	8003690 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d02d      	beq.n	800355c <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003504:	4a56      	ldr	r2, [pc, #344]	@ (8003660 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8003506:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350c:	4a55      	ldr	r2, [pc, #340]	@ (8003664 <HAL_I2C_Mem_Read_DMA+0x290>)
 800350e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003514:	2200      	movs	r2, #0
 8003516:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351c:	2200      	movs	r2, #0
 800351e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003524:	2200      	movs	r2, #0
 8003526:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352c:	2200      	movs	r2, #0
 800352e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3310      	adds	r3, #16
 800353a:	4619      	mov	r1, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003540:	461a      	mov	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003546:	f7fe ff59 	bl	80023fc <HAL_DMA_Start_IT>
 800354a:	4603      	mov	r3, r0
 800354c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003550:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003554:	2b00      	cmp	r3, #0
 8003556:	f040 8087 	bne.w	8003668 <HAL_I2C_Mem_Read_DMA+0x294>
 800355a:	e013      	b.n	8003584 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003570:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0b3      	b.n	80036ec <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003584:	88f8      	ldrh	r0, [r7, #6]
 8003586:	893a      	ldrh	r2, [r7, #8]
 8003588:	8979      	ldrh	r1, [r7, #10]
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	2323      	movs	r3, #35	@ 0x23
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	4603      	mov	r3, r0
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f001 fe27 	bl	80051e8 <I2C_RequestMemoryRead>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d023      	beq.n	80035e8 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fe fff1 	bl	800258c <HAL_DMA_Abort_IT>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b4:	2200      	movs	r2, #0
 80035b6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035c6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0201 	bic.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e081      	b.n	80036ec <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d108      	bne.n	8003602 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	e007      	b.n	8003612 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003610:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800363e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800364e:	605a      	str	r2, [r3, #4]
 8003650:	e049      	b.n	80036e6 <HAL_I2C_Mem_Read_DMA+0x312>
 8003652:	bf00      	nop
 8003654:	20000004 	.word	0x20000004
 8003658:	14f8b589 	.word	0x14f8b589
 800365c:	ffff0000 	.word	0xffff0000
 8003660:	080053b9 	.word	0x080053b9
 8003664:	08005577 	.word	0x08005577
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367c:	f043 0210 	orr.w	r2, r3, #16
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e02d      	b.n	80036ec <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003690:	88f8      	ldrh	r0, [r7, #6]
 8003692:	893a      	ldrh	r2, [r7, #8]
 8003694:	8979      	ldrh	r1, [r7, #10]
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	2323      	movs	r3, #35	@ 0x23
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	4603      	mov	r3, r0
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f001 fda1 	bl	80051e8 <I2C_RequestMemoryRead>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e01d      	b.n	80036ec <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036d4:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	e000      	b.n	80036ec <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80036ea:	2302      	movs	r3, #2
  }
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3728      	adds	r7, #40	@ 0x28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	@ 0x28
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	460b      	mov	r3, r1
 8003702:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003704:	f7fe fc8a 	bl	800201c <HAL_GetTick>
 8003708:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b20      	cmp	r3, #32
 8003718:	f040 8111 	bne.w	800393e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	2319      	movs	r3, #25
 8003722:	2201      	movs	r2, #1
 8003724:	4988      	ldr	r1, [pc, #544]	@ (8003948 <HAL_I2C_IsDeviceReady+0x254>)
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f002 f80a 	bl	8005740 <I2C_WaitOnFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003732:	2302      	movs	r3, #2
 8003734:	e104      	b.n	8003940 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_I2C_IsDeviceReady+0x50>
 8003740:	2302      	movs	r3, #2
 8003742:	e0fd      	b.n	8003940 <HAL_I2C_IsDeviceReady+0x24c>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b01      	cmp	r3, #1
 8003758:	d007      	beq.n	800376a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0201 	orr.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003778:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2224      	movs	r2, #36	@ 0x24
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4a70      	ldr	r2, [pc, #448]	@ (800394c <HAL_I2C_IsDeviceReady+0x258>)
 800378c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800379c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f001 ffc8 	bl	8005740 <I2C_WaitOnFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00d      	beq.n	80037d2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037c4:	d103      	bne.n	80037ce <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037cc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e0b6      	b.n	8003940 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037d2:	897b      	ldrh	r3, [r7, #10]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037e0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80037e2:	f7fe fc1b 	bl	800201c <HAL_GetTick>
 80037e6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	bf0c      	ite	eq
 80037f6:	2301      	moveq	r3, #1
 80037f8:	2300      	movne	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003808:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800380c:	bf0c      	ite	eq
 800380e:	2301      	moveq	r3, #1
 8003810:	2300      	movne	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003816:	e025      	b.n	8003864 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003818:	f7fe fc00 	bl	800201c <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d302      	bcc.n	800382e <HAL_I2C_IsDeviceReady+0x13a>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d103      	bne.n	8003836 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	22a0      	movs	r2, #160	@ 0xa0
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b02      	cmp	r3, #2
 8003842:	bf0c      	ite	eq
 8003844:	2301      	moveq	r3, #1
 8003846:	2300      	movne	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2ba0      	cmp	r3, #160	@ 0xa0
 800386e:	d005      	beq.n	800387c <HAL_I2C_IsDeviceReady+0x188>
 8003870:	7dfb      	ldrb	r3, [r7, #23]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d102      	bne.n	800387c <HAL_I2C_IsDeviceReady+0x188>
 8003876:	7dbb      	ldrb	r3, [r7, #22]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0cd      	beq.n	8003818 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b02      	cmp	r3, #2
 8003890:	d129      	bne.n	80038e6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038a0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a2:	2300      	movs	r3, #0
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	2319      	movs	r3, #25
 80038be:	2201      	movs	r2, #1
 80038c0:	4921      	ldr	r1, [pc, #132]	@ (8003948 <HAL_I2C_IsDeviceReady+0x254>)
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f001 ff3c 	bl	8005740 <I2C_WaitOnFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e036      	b.n	8003940 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e02c      	b.n	8003940 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038f4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038fe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	2319      	movs	r3, #25
 8003906:	2201      	movs	r2, #1
 8003908:	490f      	ldr	r1, [pc, #60]	@ (8003948 <HAL_I2C_IsDeviceReady+0x254>)
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f001 ff18 	bl	8005740 <I2C_WaitOnFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e012      	b.n	8003940 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	3301      	adds	r3, #1
 800391e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	429a      	cmp	r2, r3
 8003926:	f4ff af32 	bcc.w	800378e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800393e:	2302      	movs	r3, #2
  }
}
 8003940:	4618      	mov	r0, r3
 8003942:	3720      	adds	r7, #32
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	00100002 	.word	0x00100002
 800394c:	ffff0000 	.word	0xffff0000

08003950 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003968:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003970:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003978:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	2b10      	cmp	r3, #16
 800397e:	d003      	beq.n	8003988 <HAL_I2C_EV_IRQHandler+0x38>
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	2b40      	cmp	r3, #64	@ 0x40
 8003984:	f040 80b1 	bne.w	8003aea <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10d      	bne.n	80039be <HAL_I2C_EV_IRQHandler+0x6e>
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80039a8:	d003      	beq.n	80039b2 <HAL_I2C_EV_IRQHandler+0x62>
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80039b0:	d101      	bne.n	80039b6 <HAL_I2C_EV_IRQHandler+0x66>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <HAL_I2C_EV_IRQHandler+0x68>
 80039b6:	2300      	movs	r3, #0
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	f000 8114 	beq.w	8003be6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00b      	beq.n	80039e0 <HAL_I2C_EV_IRQHandler+0x90>
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d006      	beq.n	80039e0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f002 f877 	bl	8005ac6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fd52 	bl	8004482 <I2C_Master_SB>
 80039de:	e083      	b.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d008      	beq.n	80039fc <HAL_I2C_EV_IRQHandler+0xac>
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fdca 	bl	800458e <I2C_Master_ADD10>
 80039fa:	e075      	b.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d008      	beq.n	8003a18 <HAL_I2C_EV_IRQHandler+0xc8>
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 fde6 	bl	80045e2 <I2C_Master_ADDR>
 8003a16:	e067      	b.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d036      	beq.n	8003a90 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a30:	f000 80db 	beq.w	8003bea <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00d      	beq.n	8003a5a <HAL_I2C_EV_IRQHandler+0x10a>
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_I2C_EV_IRQHandler+0x10a>
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d103      	bne.n	8003a5a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f9ae 	bl	8003db4 <I2C_MasterTransmit_TXE>
 8003a58:	e046      	b.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 80c2 	beq.w	8003bea <HAL_I2C_EV_IRQHandler+0x29a>
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80bc 	beq.w	8003bea <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a72:	7bbb      	ldrb	r3, [r7, #14]
 8003a74:	2b21      	cmp	r3, #33	@ 0x21
 8003a76:	d103      	bne.n	8003a80 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fa37 	bl	8003eec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a7e:	e0b4      	b.n	8003bea <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	2b40      	cmp	r3, #64	@ 0x40
 8003a84:	f040 80b1 	bne.w	8003bea <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 faa5 	bl	8003fd8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a8e:	e0ac      	b.n	8003bea <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a9e:	f000 80a4 	beq.w	8003bea <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00d      	beq.n	8003ac8 <HAL_I2C_EV_IRQHandler+0x178>
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <HAL_I2C_EV_IRQHandler+0x178>
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d103      	bne.n	8003ac8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fb21 	bl	8004108 <I2C_MasterReceive_RXNE>
 8003ac6:	e00f      	b.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 808b 	beq.w	8003bea <HAL_I2C_EV_IRQHandler+0x29a>
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 8085 	beq.w	8003bea <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fbd9 	bl	8004298 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ae6:	e080      	b.n	8003bea <HAL_I2C_EV_IRQHandler+0x29a>
 8003ae8:	e07f      	b.n	8003bea <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d004      	beq.n	8003afc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	e007      	b.n	8003b0c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d011      	beq.n	8003b3a <HAL_I2C_EV_IRQHandler+0x1ea>
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00c      	beq.n	8003b3a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003b30:	69b9      	ldr	r1, [r7, #24]
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 ffa4 	bl	8004a80 <I2C_Slave_ADDR>
 8003b38:	e05a      	b.n	8003bf0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_I2C_EV_IRQHandler+0x206>
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 ffde 	bl	8004b10 <I2C_Slave_STOPF>
 8003b54:	e04c      	b.n	8003bf0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b56:	7bbb      	ldrb	r3, [r7, #14]
 8003b58:	2b21      	cmp	r3, #33	@ 0x21
 8003b5a:	d002      	beq.n	8003b62 <HAL_I2C_EV_IRQHandler+0x212>
 8003b5c:	7bbb      	ldrb	r3, [r7, #14]
 8003b5e:	2b29      	cmp	r3, #41	@ 0x29
 8003b60:	d120      	bne.n	8003ba4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00d      	beq.n	8003b88 <HAL_I2C_EV_IRQHandler+0x238>
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d008      	beq.n	8003b88 <HAL_I2C_EV_IRQHandler+0x238>
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d103      	bne.n	8003b88 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 febf 	bl	8004904 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b86:	e032      	b.n	8003bee <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d02d      	beq.n	8003bee <HAL_I2C_EV_IRQHandler+0x29e>
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d028      	beq.n	8003bee <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 feee 	bl	800497e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ba2:	e024      	b.n	8003bee <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00d      	beq.n	8003bca <HAL_I2C_EV_IRQHandler+0x27a>
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_I2C_EV_IRQHandler+0x27a>
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d103      	bne.n	8003bca <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fefc 	bl	80049c0 <I2C_SlaveReceive_RXNE>
 8003bc8:	e012      	b.n	8003bf0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00d      	beq.n	8003bf0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d008      	beq.n	8003bf0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 ff2c 	bl	8004a3c <I2C_SlaveReceive_BTF>
 8003be4:	e004      	b.n	8003bf0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003be6:	bf00      	nop
 8003be8:	e002      	b.n	8003bf0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bea:	bf00      	nop
 8003bec:	e000      	b.n	8003bf0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003bf0:	3720      	adds	r7, #32
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b08a      	sub	sp, #40	@ 0x28
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c18:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00d      	beq.n	8003c40 <HAL_I2C_ER_IRQHandler+0x4a>
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d008      	beq.n	8003c40 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003c3e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00d      	beq.n	8003c66 <HAL_I2C_ER_IRQHandler+0x70>
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c56:	f043 0302 	orr.w	r3, r3, #2
 8003c5a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003c64:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d03e      	beq.n	8003cee <HAL_I2C_ER_IRQHandler+0xf8>
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d039      	beq.n	8003cee <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003c7a:	7efb      	ldrb	r3, [r7, #27]
 8003c7c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c8c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c92:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003c94:	7ebb      	ldrb	r3, [r7, #26]
 8003c96:	2b20      	cmp	r3, #32
 8003c98:	d112      	bne.n	8003cc0 <HAL_I2C_ER_IRQHandler+0xca>
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10f      	bne.n	8003cc0 <HAL_I2C_ER_IRQHandler+0xca>
 8003ca0:	7cfb      	ldrb	r3, [r7, #19]
 8003ca2:	2b21      	cmp	r3, #33	@ 0x21
 8003ca4:	d008      	beq.n	8003cb8 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003ca6:	7cfb      	ldrb	r3, [r7, #19]
 8003ca8:	2b29      	cmp	r3, #41	@ 0x29
 8003caa:	d005      	beq.n	8003cb8 <HAL_I2C_ER_IRQHandler+0xc2>
 8003cac:	7cfb      	ldrb	r3, [r7, #19]
 8003cae:	2b28      	cmp	r3, #40	@ 0x28
 8003cb0:	d106      	bne.n	8003cc0 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b21      	cmp	r3, #33	@ 0x21
 8003cb6:	d103      	bne.n	8003cc0 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f001 f859 	bl	8004d70 <I2C_Slave_AF>
 8003cbe:	e016      	b.n	8003cee <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cc8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ccc:	f043 0304 	orr.w	r3, r3, #4
 8003cd0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003cd2:	7efb      	ldrb	r3, [r7, #27]
 8003cd4:	2b10      	cmp	r3, #16
 8003cd6:	d002      	beq.n	8003cde <HAL_I2C_ER_IRQHandler+0xe8>
 8003cd8:	7efb      	ldrb	r3, [r7, #27]
 8003cda:	2b40      	cmp	r3, #64	@ 0x40
 8003cdc:	d107      	bne.n	8003cee <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cec:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00d      	beq.n	8003d14 <HAL_I2C_ER_IRQHandler+0x11e>
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d008      	beq.n	8003d14 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d04:	f043 0308 	orr.w	r3, r3, #8
 8003d08:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003d12:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d008      	beq.n	8003d2c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f001 f896 	bl	8004e58 <I2C_ITError>
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	3728      	adds	r7, #40	@ 0x28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	70fb      	strb	r3, [r7, #3]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d150      	bne.n	8003e7c <I2C_MasterTransmit_TXE+0xc8>
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	2b21      	cmp	r3, #33	@ 0x21
 8003dde:	d14d      	bne.n	8003e7c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d01d      	beq.n	8003e22 <I2C_MasterTransmit_TXE+0x6e>
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b20      	cmp	r3, #32
 8003dea:	d01a      	beq.n	8003e22 <I2C_MasterTransmit_TXE+0x6e>
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003df2:	d016      	beq.n	8003e22 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e02:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2211      	movs	r2, #17
 8003e08:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fc fe12 	bl	8000a44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e20:	e060      	b.n	8003ee4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e30:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e40:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b40      	cmp	r3, #64	@ 0x40
 8003e5a:	d107      	bne.n	8003e6c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7fc fe19 	bl	8000a9c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e6a:	e03b      	b.n	8003ee4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7fc fde5 	bl	8000a44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e7a:	e033      	b.n	8003ee4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	2b21      	cmp	r3, #33	@ 0x21
 8003e80:	d005      	beq.n	8003e8e <I2C_MasterTransmit_TXE+0xda>
 8003e82:	7bbb      	ldrb	r3, [r7, #14]
 8003e84:	2b40      	cmp	r3, #64	@ 0x40
 8003e86:	d12d      	bne.n	8003ee4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	2b22      	cmp	r3, #34	@ 0x22
 8003e8c:	d12a      	bne.n	8003ee4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d108      	bne.n	8003eaa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ea6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003ea8:	e01c      	b.n	8003ee4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b40      	cmp	r3, #64	@ 0x40
 8003eb4:	d103      	bne.n	8003ebe <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f88e 	bl	8003fd8 <I2C_MemoryTransmit_TXE_BTF>
}
 8003ebc:	e012      	b.n	8003ee4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec2:	781a      	ldrb	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003ee2:	e7ff      	b.n	8003ee4 <I2C_MasterTransmit_TXE+0x130>
 8003ee4:	bf00      	nop
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b21      	cmp	r3, #33	@ 0x21
 8003f04:	d164      	bne.n	8003fd0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d012      	beq.n	8003f36 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	781a      	ldrb	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003f34:	e04c      	b.n	8003fd0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d01d      	beq.n	8003f78 <I2C_MasterTransmit_BTF+0x8c>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	d01a      	beq.n	8003f78 <I2C_MasterTransmit_BTF+0x8c>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f48:	d016      	beq.n	8003f78 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f58:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2211      	movs	r2, #17
 8003f5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7fc fd67 	bl	8000a44 <HAL_I2C_MasterTxCpltCallback>
}
 8003f76:	e02b      	b.n	8003fd0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f86:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f96:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b40      	cmp	r3, #64	@ 0x40
 8003fb0:	d107      	bne.n	8003fc2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fc fd6e 	bl	8000a9c <HAL_I2C_MemTxCpltCallback>
}
 8003fc0:	e006      	b.n	8003fd0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fc fd3a 	bl	8000a44 <HAL_I2C_MasterTxCpltCallback>
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fe6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d11d      	bne.n	800402c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d10b      	bne.n	8004010 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004008:	1c9a      	adds	r2, r3, #2
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800400e:	e077      	b.n	8004100 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004014:	b29b      	uxth	r3, r3
 8004016:	121b      	asrs	r3, r3, #8
 8004018:	b2da      	uxtb	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800402a:	e069      	b.n	8004100 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004030:	2b01      	cmp	r3, #1
 8004032:	d10b      	bne.n	800404c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004038:	b2da      	uxtb	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800404a:	e059      	b.n	8004100 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004050:	2b02      	cmp	r3, #2
 8004052:	d152      	bne.n	80040fa <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	2b22      	cmp	r3, #34	@ 0x22
 8004058:	d10d      	bne.n	8004076 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004068:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004074:	e044      	b.n	8004100 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d015      	beq.n	80040ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004080:	7bfb      	ldrb	r3, [r7, #15]
 8004082:	2b21      	cmp	r3, #33	@ 0x21
 8004084:	d112      	bne.n	80040ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408a:	781a      	ldrb	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80040aa:	e029      	b.n	8004100 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d124      	bne.n	8004100 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	2b21      	cmp	r3, #33	@ 0x21
 80040ba:	d121      	bne.n	8004100 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040ca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fc fcd2 	bl	8000a9c <HAL_I2C_MemTxCpltCallback>
}
 80040f8:	e002      	b.n	8004100 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fe fff6 	bl	80030ec <I2C_Flush_DR>
}
 8004100:	bf00      	nop
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b22      	cmp	r3, #34	@ 0x22
 800411a:	f040 80b9 	bne.w	8004290 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004122:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b03      	cmp	r3, #3
 8004130:	d921      	bls.n	8004176 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b03      	cmp	r3, #3
 8004160:	f040 8096 	bne.w	8004290 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004172:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004174:	e08c      	b.n	8004290 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417a:	2b02      	cmp	r3, #2
 800417c:	d07f      	beq.n	800427e <I2C_MasterReceive_RXNE+0x176>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d002      	beq.n	800418a <I2C_MasterReceive_RXNE+0x82>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d179      	bne.n	800427e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f001 fc3a 	bl	8005a04 <I2C_WaitOnSTOPRequestThroughIT>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d14c      	bne.n	8004230 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041a4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041b4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b40      	cmp	r3, #64	@ 0x40
 80041ee:	d10a      	bne.n	8004206 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fc fc62 	bl	8000ac8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004204:	e044      	b.n	8004290 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d002      	beq.n	800421a <I2C_MasterReceive_RXNE+0x112>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b20      	cmp	r3, #32
 8004218:	d103      	bne.n	8004222 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004220:	e002      	b.n	8004228 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2212      	movs	r2, #18
 8004226:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7fc fc21 	bl	8000a70 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800422e:	e02f      	b.n	8004290 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800423e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff fd88 	bl	8003d8c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800427c:	e008      	b.n	8004290 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800428c:	605a      	str	r2, [r3, #4]
}
 800428e:	e7ff      	b.n	8004290 <I2C_MasterReceive_RXNE+0x188>
 8004290:	bf00      	nop
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d11b      	bne.n	80042e8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042be:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80042e6:	e0c8      	b.n	800447a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d129      	bne.n	8004346 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004300:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b04      	cmp	r3, #4
 8004306:	d00a      	beq.n	800431e <I2C_MasterReceive_BTF+0x86>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d007      	beq.n	800431e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800431c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004344:	e099      	b.n	800447a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	f040 8081 	bne.w	8004454 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d002      	beq.n	800435e <I2C_MasterReceive_BTF+0xc6>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b10      	cmp	r3, #16
 800435c:	d108      	bne.n	8004370 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	e019      	b.n	80043a4 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b04      	cmp	r3, #4
 8004374:	d002      	beq.n	800437c <I2C_MasterReceive_BTF+0xe4>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d108      	bne.n	800438e <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	e00a      	b.n	80043a4 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b10      	cmp	r3, #16
 8004392:	d007      	beq.n	80043a4 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043a2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80043fe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b40      	cmp	r3, #64	@ 0x40
 8004412:	d10a      	bne.n	800442a <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fc fb50 	bl	8000ac8 <HAL_I2C_MemRxCpltCallback>
}
 8004428:	e027      	b.n	800447a <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b08      	cmp	r3, #8
 8004436:	d002      	beq.n	800443e <I2C_MasterReceive_BTF+0x1a6>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b20      	cmp	r3, #32
 800443c:	d103      	bne.n	8004446 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	@ 0x30
 8004444:	e002      	b.n	800444c <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2212      	movs	r2, #18
 800444a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7fc fb0f 	bl	8000a70 <HAL_I2C_MasterRxCpltCallback>
}
 8004452:	e012      	b.n	800447a <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	1c5a      	adds	r2, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004470:	b29b      	uxth	r3, r3
 8004472:	3b01      	subs	r3, #1
 8004474:	b29a      	uxth	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b40      	cmp	r3, #64	@ 0x40
 8004494:	d117      	bne.n	80044c6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	461a      	mov	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044ae:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80044b0:	e067      	b.n	8004582 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	611a      	str	r2, [r3, #16]
}
 80044c4:	e05d      	b.n	8004582 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044ce:	d133      	bne.n	8004538 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b21      	cmp	r3, #33	@ 0x21
 80044da:	d109      	bne.n	80044f0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	461a      	mov	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044ec:	611a      	str	r2, [r3, #16]
 80044ee:	e008      	b.n	8004502 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004506:	2b00      	cmp	r3, #0
 8004508:	d004      	beq.n	8004514 <I2C_Master_SB+0x92>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800450e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004510:	2b00      	cmp	r3, #0
 8004512:	d108      	bne.n	8004526 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004518:	2b00      	cmp	r3, #0
 800451a:	d032      	beq.n	8004582 <I2C_Master_SB+0x100>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004522:	2b00      	cmp	r3, #0
 8004524:	d02d      	beq.n	8004582 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004534:	605a      	str	r2, [r3, #4]
}
 8004536:	e024      	b.n	8004582 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10e      	bne.n	800455e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004544:	b29b      	uxth	r3, r3
 8004546:	11db      	asrs	r3, r3, #7
 8004548:	b2db      	uxtb	r3, r3
 800454a:	f003 0306 	and.w	r3, r3, #6
 800454e:	b2db      	uxtb	r3, r3
 8004550:	f063 030f 	orn	r3, r3, #15
 8004554:	b2da      	uxtb	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	611a      	str	r2, [r3, #16]
}
 800455c:	e011      	b.n	8004582 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004562:	2b01      	cmp	r3, #1
 8004564:	d10d      	bne.n	8004582 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456a:	b29b      	uxth	r3, r3
 800456c:	11db      	asrs	r3, r3, #7
 800456e:	b2db      	uxtb	r3, r3
 8004570:	f003 0306 	and.w	r3, r3, #6
 8004574:	b2db      	uxtb	r3, r3
 8004576:	f063 030e 	orn	r3, r3, #14
 800457a:	b2da      	uxtb	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	611a      	str	r2, [r3, #16]
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459a:	b2da      	uxtb	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d004      	beq.n	80045b4 <I2C_Master_ADD10+0x26>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d108      	bne.n	80045c6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00c      	beq.n	80045d6 <I2C_Master_ADD10+0x48>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d007      	beq.n	80045d6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045d4:	605a      	str	r2, [r3, #4]
  }
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b091      	sub	sp, #68	@ 0x44
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fe:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b22      	cmp	r3, #34	@ 0x22
 800460a:	f040 8169 	bne.w	80048e0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10f      	bne.n	8004636 <I2C_Master_ADDR+0x54>
 8004616:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800461a:	2b40      	cmp	r3, #64	@ 0x40
 800461c:	d10b      	bne.n	8004636 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461e:	2300      	movs	r3, #0
 8004620:	633b      	str	r3, [r7, #48]	@ 0x30
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	633b      	str	r3, [r7, #48]	@ 0x30
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	633b      	str	r3, [r7, #48]	@ 0x30
 8004632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004634:	e160      	b.n	80048f8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800463a:	2b00      	cmp	r3, #0
 800463c:	d11d      	bne.n	800467a <I2C_Master_ADDR+0x98>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004646:	d118      	bne.n	800467a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004648:	2300      	movs	r3, #0
 800464a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800465c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800466c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	651a      	str	r2, [r3, #80]	@ 0x50
 8004678:	e13e      	b.n	80048f8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d113      	bne.n	80046ac <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004684:	2300      	movs	r3, #0
 8004686:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004698:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	e115      	b.n	80048d8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	f040 808a 	bne.w	80047cc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80046b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046be:	d137      	bne.n	8004730 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ce:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046de:	d113      	bne.n	8004708 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ee:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f0:	2300      	movs	r3, #0
 80046f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	627b      	str	r3, [r7, #36]	@ 0x24
 8004704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004706:	e0e7      	b.n	80048d8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004708:	2300      	movs	r3, #0
 800470a:	623b      	str	r3, [r7, #32]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	623b      	str	r3, [r7, #32]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	623b      	str	r3, [r7, #32]
 800471c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	e0d3      	b.n	80048d8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004732:	2b08      	cmp	r3, #8
 8004734:	d02e      	beq.n	8004794 <I2C_Master_ADDR+0x1b2>
 8004736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004738:	2b20      	cmp	r3, #32
 800473a:	d02b      	beq.n	8004794 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800473c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800473e:	2b12      	cmp	r3, #18
 8004740:	d102      	bne.n	8004748 <I2C_Master_ADDR+0x166>
 8004742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004744:	2b01      	cmp	r3, #1
 8004746:	d125      	bne.n	8004794 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474a:	2b04      	cmp	r3, #4
 800474c:	d00e      	beq.n	800476c <I2C_Master_ADDR+0x18a>
 800474e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004750:	2b02      	cmp	r3, #2
 8004752:	d00b      	beq.n	800476c <I2C_Master_ADDR+0x18a>
 8004754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004756:	2b10      	cmp	r3, #16
 8004758:	d008      	beq.n	800476c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	e007      	b.n	800477c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800477a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800477c:	2300      	movs	r3, #0
 800477e:	61fb      	str	r3, [r7, #28]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	61fb      	str	r3, [r7, #28]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	61fb      	str	r3, [r7, #28]
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	e0a1      	b.n	80048d8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047a2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a4:	2300      	movs	r3, #0
 80047a6:	61bb      	str	r3, [r7, #24]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	61bb      	str	r3, [r7, #24]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	61bb      	str	r3, [r7, #24]
 80047b8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	e085      	b.n	80048d8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d14d      	bne.n	8004872 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80047d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d016      	beq.n	800480a <I2C_Master_ADDR+0x228>
 80047dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d013      	beq.n	800480a <I2C_Master_ADDR+0x228>
 80047e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d010      	beq.n	800480a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047f6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	e007      	b.n	800481a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004818:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004828:	d117      	bne.n	800485a <I2C_Master_ADDR+0x278>
 800482a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800482c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004830:	d00b      	beq.n	800484a <I2C_Master_ADDR+0x268>
 8004832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004834:	2b01      	cmp	r3, #1
 8004836:	d008      	beq.n	800484a <I2C_Master_ADDR+0x268>
 8004838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800483a:	2b08      	cmp	r3, #8
 800483c:	d005      	beq.n	800484a <I2C_Master_ADDR+0x268>
 800483e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004840:	2b10      	cmp	r3, #16
 8004842:	d002      	beq.n	800484a <I2C_Master_ADDR+0x268>
 8004844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004846:	2b20      	cmp	r3, #32
 8004848:	d107      	bne.n	800485a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004858:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800485a:	2300      	movs	r3, #0
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	e032      	b.n	80048d8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004880:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800488c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004890:	d117      	bne.n	80048c2 <I2C_Master_ADDR+0x2e0>
 8004892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004894:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004898:	d00b      	beq.n	80048b2 <I2C_Master_ADDR+0x2d0>
 800489a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489c:	2b01      	cmp	r3, #1
 800489e:	d008      	beq.n	80048b2 <I2C_Master_ADDR+0x2d0>
 80048a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d005      	beq.n	80048b2 <I2C_Master_ADDR+0x2d0>
 80048a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a8:	2b10      	cmp	r3, #16
 80048aa:	d002      	beq.n	80048b2 <I2C_Master_ADDR+0x2d0>
 80048ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	d107      	bne.n	80048c2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80048c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c2:	2300      	movs	r3, #0
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	613b      	str	r3, [r7, #16]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	613b      	str	r3, [r7, #16]
 80048d6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80048de:	e00b      	b.n	80048f8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	68fb      	ldr	r3, [r7, #12]
}
 80048f6:	e7ff      	b.n	80048f8 <I2C_Master_ADDR+0x316>
 80048f8:	bf00      	nop
 80048fa:	3744      	adds	r7, #68	@ 0x44
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004912:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d02b      	beq.n	8004976 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004922:	781a      	ldrb	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004938:	b29b      	uxth	r3, r3
 800493a:	3b01      	subs	r3, #1
 800493c:	b29a      	uxth	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004946:	b29b      	uxth	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d114      	bne.n	8004976 <I2C_SlaveTransmit_TXE+0x72>
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	2b29      	cmp	r3, #41	@ 0x29
 8004950:	d111      	bne.n	8004976 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004960:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2221      	movs	r2, #33	@ 0x21
 8004966:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2228      	movs	r2, #40	@ 0x28
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff f9df 	bl	8003d34 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d011      	beq.n	80049b4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d02c      	beq.n	8004a34 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d114      	bne.n	8004a34 <I2C_SlaveReceive_RXNE+0x74>
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a0e:	d111      	bne.n	8004a34 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a1e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2222      	movs	r2, #34	@ 0x22
 8004a24:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2228      	movs	r2, #40	@ 0x28
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff f98a 	bl	8003d48 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d012      	beq.n	8004a74 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a9a:	2b28      	cmp	r3, #40	@ 0x28
 8004a9c:	d125      	bne.n	8004aea <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aac:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d103      	bne.n	8004ace <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	81bb      	strh	r3, [r7, #12]
 8004acc:	e002      	b.n	8004ad4 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004adc:	89ba      	ldrh	r2, [r7, #12]
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff f93a 	bl	8003d5c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004ae8:	e00e      	b.n	8004b08 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aea:	2300      	movs	r3, #0
 8004aec:	60bb      	str	r3, [r7, #8]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b1e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b2e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004b30:	2300      	movs	r3, #0
 8004b32:	60bb      	str	r3, [r7, #8]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	60bb      	str	r3, [r7, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0201 	orr.w	r2, r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b5c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b6c:	d172      	bne.n	8004c54 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	2b22      	cmp	r3, #34	@ 0x22
 8004b72:	d002      	beq.n	8004b7a <I2C_Slave_STOPF+0x6a>
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
 8004b76:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b78:	d135      	bne.n	8004be6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d005      	beq.n	8004b9e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b96:	f043 0204 	orr.w	r2, r3, #4
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fd fe96 	bl	80028e4 <HAL_DMA_GetState>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d049      	beq.n	8004c52 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc2:	4a69      	ldr	r2, [pc, #420]	@ (8004d68 <I2C_Slave_STOPF+0x258>)
 8004bc4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fd fcde 	bl	800258c <HAL_DMA_Abort_IT>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d03d      	beq.n	8004c52 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004be0:	4610      	mov	r0, r2
 8004be2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004be4:	e035      	b.n	8004c52 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d005      	beq.n	8004c0a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c02:	f043 0204 	orr.w	r2, r3, #4
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c18:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fd fe60 	bl	80028e4 <HAL_DMA_GetState>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d014      	beq.n	8004c54 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c2e:	4a4e      	ldr	r2, [pc, #312]	@ (8004d68 <I2C_Slave_STOPF+0x258>)
 8004c30:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fd fca8 	bl	800258c <HAL_DMA_Abort_IT>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d008      	beq.n	8004c54 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	4798      	blx	r3
 8004c50:	e000      	b.n	8004c54 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c52:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d03e      	beq.n	8004cdc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d112      	bne.n	8004c92 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9c:	2b40      	cmp	r3, #64	@ 0x40
 8004c9e:	d112      	bne.n	8004cc6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691a      	ldr	r2, [r3, #16]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd4:	f043 0204 	orr.w	r2, r3, #4
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f8b7 	bl	8004e58 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004cea:	e039      	b.n	8004d60 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cf0:	d109      	bne.n	8004d06 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2228      	movs	r2, #40	@ 0x28
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff f821 	bl	8003d48 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b28      	cmp	r3, #40	@ 0x28
 8004d10:	d111      	bne.n	8004d36 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a15      	ldr	r2, [pc, #84]	@ (8004d6c <I2C_Slave_STOPF+0x25c>)
 8004d16:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2220      	movs	r2, #32
 8004d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff f822 	bl	8003d78 <HAL_I2C_ListenCpltCallback>
}
 8004d34:	e014      	b.n	8004d60 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3a:	2b22      	cmp	r3, #34	@ 0x22
 8004d3c:	d002      	beq.n	8004d44 <I2C_Slave_STOPF+0x234>
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
 8004d40:	2b22      	cmp	r3, #34	@ 0x22
 8004d42:	d10d      	bne.n	8004d60 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fe fff4 	bl	8003d48 <HAL_I2C_SlaveRxCpltCallback>
}
 8004d60:	bf00      	nop
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	080055f1 	.word	0x080055f1
 8004d6c:	ffff0000 	.word	0xffff0000

08004d70 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d84:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d002      	beq.n	8004d92 <I2C_Slave_AF+0x22>
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	d129      	bne.n	8004de6 <I2C_Slave_AF+0x76>
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
 8004d94:	2b28      	cmp	r3, #40	@ 0x28
 8004d96:	d126      	bne.n	8004de6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a2e      	ldr	r2, [pc, #184]	@ (8004e54 <I2C_Slave_AF+0xe4>)
 8004d9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dac:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004db6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dc6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fe ffca 	bl	8003d78 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004de4:	e031      	b.n	8004e4a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	2b21      	cmp	r3, #33	@ 0x21
 8004dea:	d129      	bne.n	8004e40 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a19      	ldr	r2, [pc, #100]	@ (8004e54 <I2C_Slave_AF+0xe4>)
 8004df0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2221      	movs	r2, #33	@ 0x21
 8004df6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e16:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e20:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e30:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fe f95a 	bl	80030ec <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7fe ff7b 	bl	8003d34 <HAL_I2C_SlaveTxCpltCallback>
}
 8004e3e:	e004      	b.n	8004e4a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e48:	615a      	str	r2, [r3, #20]
}
 8004e4a:	bf00      	nop
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	ffff0000 	.word	0xffff0000

08004e58 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e66:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e6e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e70:	7bbb      	ldrb	r3, [r7, #14]
 8004e72:	2b10      	cmp	r3, #16
 8004e74:	d002      	beq.n	8004e7c <I2C_ITError+0x24>
 8004e76:	7bbb      	ldrb	r3, [r7, #14]
 8004e78:	2b40      	cmp	r3, #64	@ 0x40
 8004e7a:	d10a      	bne.n	8004e92 <I2C_ITError+0x3a>
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	2b22      	cmp	r3, #34	@ 0x22
 8004e80:	d107      	bne.n	8004e92 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e90:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e92:	7bfb      	ldrb	r3, [r7, #15]
 8004e94:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e98:	2b28      	cmp	r3, #40	@ 0x28
 8004e9a:	d107      	bne.n	8004eac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2228      	movs	r2, #40	@ 0x28
 8004ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004eaa:	e015      	b.n	8004ed8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eba:	d00a      	beq.n	8004ed2 <I2C_ITError+0x7a>
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	2b60      	cmp	r3, #96	@ 0x60
 8004ec0:	d007      	beq.n	8004ed2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ee2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ee6:	d162      	bne.n	8004fae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ef6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004efc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d020      	beq.n	8004f48 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f0a:	4a6a      	ldr	r2, [pc, #424]	@ (80050b4 <I2C_ITError+0x25c>)
 8004f0c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fd fb3a 	bl	800258c <HAL_DMA_Abort_IT>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 8089 	beq.w	8005032 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0201 	bic.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f42:	4610      	mov	r0, r2
 8004f44:	4798      	blx	r3
 8004f46:	e074      	b.n	8005032 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4c:	4a59      	ldr	r2, [pc, #356]	@ (80050b4 <I2C_ITError+0x25c>)
 8004f4e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fd fb19 	bl	800258c <HAL_DMA_Abort_IT>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d068      	beq.n	8005032 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f6a:	2b40      	cmp	r3, #64	@ 0x40
 8004f6c:	d10b      	bne.n	8004f86 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	b2d2      	uxtb	r2, r2
 8004f7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0201 	bic.w	r2, r2, #1
 8004f94:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004fa8:	4610      	mov	r0, r2
 8004faa:	4798      	blx	r3
 8004fac:	e041      	b.n	8005032 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b60      	cmp	r3, #96	@ 0x60
 8004fb8:	d125      	bne.n	8005006 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd2:	2b40      	cmp	r3, #64	@ 0x40
 8004fd4:	d10b      	bne.n	8004fee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0201 	bic.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fe fece 	bl	8003da0 <HAL_I2C_AbortCpltCallback>
 8005004:	e015      	b.n	8005032 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005010:	2b40      	cmp	r3, #64	@ 0x40
 8005012:	d10b      	bne.n	800502c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7fe fead 	bl	8003d8c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005036:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10e      	bne.n	8005060 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005048:	2b00      	cmp	r3, #0
 800504a:	d109      	bne.n	8005060 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005052:	2b00      	cmp	r3, #0
 8005054:	d104      	bne.n	8005060 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800505c:	2b00      	cmp	r3, #0
 800505e:	d007      	beq.n	8005070 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800506e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005076:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b04      	cmp	r3, #4
 8005082:	d113      	bne.n	80050ac <I2C_ITError+0x254>
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	2b28      	cmp	r3, #40	@ 0x28
 8005088:	d110      	bne.n	80050ac <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a0a      	ldr	r2, [pc, #40]	@ (80050b8 <I2C_ITError+0x260>)
 800508e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fe fe66 	bl	8003d78 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80050ac:	bf00      	nop
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	080055f1 	.word	0x080055f1
 80050b8:	ffff0000 	.word	0xffff0000

080050bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	4608      	mov	r0, r1
 80050c6:	4611      	mov	r1, r2
 80050c8:	461a      	mov	r2, r3
 80050ca:	4603      	mov	r3, r0
 80050cc:	817b      	strh	r3, [r7, #10]
 80050ce:	460b      	mov	r3, r1
 80050d0:	813b      	strh	r3, [r7, #8]
 80050d2:	4613      	mov	r3, r2
 80050d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 fb24 	bl	8005740 <I2C_WaitOnFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00d      	beq.n	800511a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800510c:	d103      	bne.n	8005116 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005114:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e05f      	b.n	80051da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800511a:	897b      	ldrh	r3, [r7, #10]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	461a      	mov	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005128:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	6a3a      	ldr	r2, [r7, #32]
 800512e:	492d      	ldr	r1, [pc, #180]	@ (80051e4 <I2C_RequestMemoryWrite+0x128>)
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 fb7f 	bl	8005834 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e04c      	b.n	80051da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005158:	6a39      	ldr	r1, [r7, #32]
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 fc0a 	bl	8005974 <I2C_WaitOnTXEFlagUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00d      	beq.n	8005182 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516a:	2b04      	cmp	r3, #4
 800516c:	d107      	bne.n	800517e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800517c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e02b      	b.n	80051da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d105      	bne.n	8005194 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005188:	893b      	ldrh	r3, [r7, #8]
 800518a:	b2da      	uxtb	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	611a      	str	r2, [r3, #16]
 8005192:	e021      	b.n	80051d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005194:	893b      	ldrh	r3, [r7, #8]
 8005196:	0a1b      	lsrs	r3, r3, #8
 8005198:	b29b      	uxth	r3, r3
 800519a:	b2da      	uxtb	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a4:	6a39      	ldr	r1, [r7, #32]
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 fbe4 	bl	8005974 <I2C_WaitOnTXEFlagUntilTimeout>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00d      	beq.n	80051ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d107      	bne.n	80051ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e005      	b.n	80051da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051ce:	893b      	ldrh	r3, [r7, #8]
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	00010002 	.word	0x00010002

080051e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af02      	add	r7, sp, #8
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	4608      	mov	r0, r1
 80051f2:	4611      	mov	r1, r2
 80051f4:	461a      	mov	r2, r3
 80051f6:	4603      	mov	r3, r0
 80051f8:	817b      	strh	r3, [r7, #10]
 80051fa:	460b      	mov	r3, r1
 80051fc:	813b      	strh	r3, [r7, #8]
 80051fe:	4613      	mov	r3, r2
 8005200:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005210:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005220:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	2200      	movs	r2, #0
 800522a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 fa86 	bl	8005740 <I2C_WaitOnFlagUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00d      	beq.n	8005256 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005244:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005248:	d103      	bne.n	8005252 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005250:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e0aa      	b.n	80053ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005256:	897b      	ldrh	r3, [r7, #10]
 8005258:	b2db      	uxtb	r3, r3
 800525a:	461a      	mov	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005264:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	6a3a      	ldr	r2, [r7, #32]
 800526a:	4952      	ldr	r1, [pc, #328]	@ (80053b4 <I2C_RequestMemoryRead+0x1cc>)
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 fae1 	bl	8005834 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e097      	b.n	80053ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800527c:	2300      	movs	r3, #0
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005294:	6a39      	ldr	r1, [r7, #32]
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 fb6c 	bl	8005974 <I2C_WaitOnTXEFlagUntilTimeout>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00d      	beq.n	80052be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d107      	bne.n	80052ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e076      	b.n	80053ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052be:	88fb      	ldrh	r3, [r7, #6]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d105      	bne.n	80052d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052c4:	893b      	ldrh	r3, [r7, #8]
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	611a      	str	r2, [r3, #16]
 80052ce:	e021      	b.n	8005314 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052d0:	893b      	ldrh	r3, [r7, #8]
 80052d2:	0a1b      	lsrs	r3, r3, #8
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052e0:	6a39      	ldr	r1, [r7, #32]
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 fb46 	bl	8005974 <I2C_WaitOnTXEFlagUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00d      	beq.n	800530a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d107      	bne.n	8005306 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005304:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e050      	b.n	80053ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800530a:	893b      	ldrh	r3, [r7, #8]
 800530c:	b2da      	uxtb	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005316:	6a39      	ldr	r1, [r7, #32]
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 fb2b 	bl	8005974 <I2C_WaitOnTXEFlagUntilTimeout>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00d      	beq.n	8005340 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005328:	2b04      	cmp	r3, #4
 800532a:	d107      	bne.n	800533c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800533a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e035      	b.n	80053ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800534e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	2200      	movs	r2, #0
 8005358:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f9ef 	bl	8005740 <I2C_WaitOnFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00d      	beq.n	8005384 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005376:	d103      	bne.n	8005380 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800537e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e013      	b.n	80053ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005384:	897b      	ldrh	r3, [r7, #10]
 8005386:	b2db      	uxtb	r3, r3
 8005388:	f043 0301 	orr.w	r3, r3, #1
 800538c:	b2da      	uxtb	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005396:	6a3a      	ldr	r2, [r7, #32]
 8005398:	4906      	ldr	r1, [pc, #24]	@ (80053b4 <I2C_RequestMemoryRead+0x1cc>)
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 fa4a 	bl	8005834 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	00010002 	.word	0x00010002

080053b8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053cc:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053d4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053da:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80053ea:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053f8:	2200      	movs	r2, #0
 80053fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005408:	2200      	movs	r2, #0
 800540a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800540c:	7cfb      	ldrb	r3, [r7, #19]
 800540e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005412:	2b21      	cmp	r3, #33	@ 0x21
 8005414:	d007      	beq.n	8005426 <I2C_DMAXferCplt+0x6e>
 8005416:	7cfb      	ldrb	r3, [r7, #19]
 8005418:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800541c:	2b22      	cmp	r3, #34	@ 0x22
 800541e:	d131      	bne.n	8005484 <I2C_DMAXferCplt+0xcc>
 8005420:	7cbb      	ldrb	r3, [r7, #18]
 8005422:	2b20      	cmp	r3, #32
 8005424:	d12e      	bne.n	8005484 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005434:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2200      	movs	r2, #0
 800543a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800543c:	7cfb      	ldrb	r3, [r7, #19]
 800543e:	2b29      	cmp	r3, #41	@ 0x29
 8005440:	d10a      	bne.n	8005458 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2221      	movs	r2, #33	@ 0x21
 8005446:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2228      	movs	r2, #40	@ 0x28
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005450:	6978      	ldr	r0, [r7, #20]
 8005452:	f7fe fc6f 	bl	8003d34 <HAL_I2C_SlaveTxCpltCallback>
 8005456:	e00c      	b.n	8005472 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005458:	7cfb      	ldrb	r3, [r7, #19]
 800545a:	2b2a      	cmp	r3, #42	@ 0x2a
 800545c:	d109      	bne.n	8005472 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2222      	movs	r2, #34	@ 0x22
 8005462:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2228      	movs	r2, #40	@ 0x28
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800546c:	6978      	ldr	r0, [r7, #20]
 800546e:	f7fe fc6b 	bl	8003d48 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005480:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005482:	e074      	b.n	800556e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d06e      	beq.n	800556e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005494:	b29b      	uxth	r3, r3
 8005496:	2b01      	cmp	r3, #1
 8005498:	d107      	bne.n	80054aa <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054a8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80054b8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80054c0:	d009      	beq.n	80054d6 <I2C_DMAXferCplt+0x11e>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d006      	beq.n	80054d6 <I2C_DMAXferCplt+0x11e>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80054ce:	d002      	beq.n	80054d6 <I2C_DMAXferCplt+0x11e>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b20      	cmp	r3, #32
 80054d4:	d107      	bne.n	80054e6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054e4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80054f4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005504:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2200      	movs	r2, #0
 800550a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005514:	6978      	ldr	r0, [r7, #20]
 8005516:	f7fe fc39 	bl	8003d8c <HAL_I2C_ErrorCallback>
}
 800551a:	e028      	b.n	800556e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b40      	cmp	r3, #64	@ 0x40
 800552e:	d10a      	bne.n	8005546 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	2200      	movs	r2, #0
 800553c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800553e:	6978      	ldr	r0, [r7, #20]
 8005540:	f7fb fac2 	bl	8000ac8 <HAL_I2C_MemRxCpltCallback>
}
 8005544:	e013      	b.n	800556e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b08      	cmp	r3, #8
 8005552:	d002      	beq.n	800555a <I2C_DMAXferCplt+0x1a2>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b20      	cmp	r3, #32
 8005558:	d103      	bne.n	8005562 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2200      	movs	r2, #0
 800555e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005560:	e002      	b.n	8005568 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2212      	movs	r2, #18
 8005566:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005568:	6978      	ldr	r0, [r7, #20]
 800556a:	f7fb fa81 	bl	8000a70 <HAL_I2C_MasterRxCpltCallback>
}
 800556e:	bf00      	nop
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b084      	sub	sp, #16
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005582:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005590:	2200      	movs	r2, #0
 8005592:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a0:	2200      	movs	r2, #0
 80055a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7fd f9ab 	bl	8002900 <HAL_DMA_GetError>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d01b      	beq.n	80055e8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055be:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055da:	f043 0210 	orr.w	r2, r3, #16
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7fe fbd2 	bl	8003d8c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80055e8:	bf00      	nop
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005600:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005608:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800560a:	4b4b      	ldr	r3, [pc, #300]	@ (8005738 <I2C_DMAAbort+0x148>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	08db      	lsrs	r3, r3, #3
 8005610:	4a4a      	ldr	r2, [pc, #296]	@ (800573c <I2C_DMAAbort+0x14c>)
 8005612:	fba2 2303 	umull	r2, r3, r2, r3
 8005616:	0a1a      	lsrs	r2, r3, #8
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	00da      	lsls	r2, r3, #3
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d106      	bne.n	8005638 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562e:	f043 0220 	orr.w	r2, r3, #32
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005636:	e00a      	b.n	800564e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3b01      	subs	r3, #1
 800563c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800564c:	d0ea      	beq.n	8005624 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800565a:	2200      	movs	r2, #0
 800565c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800566a:	2200      	movs	r2, #0
 800566c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800567c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2200      	movs	r2, #0
 8005682:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005690:	2200      	movs	r2, #0
 8005692:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a0:	2200      	movs	r2, #0
 80056a2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0201 	bic.w	r2, r2, #1
 80056b2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b60      	cmp	r3, #96	@ 0x60
 80056be:	d10e      	bne.n	80056de <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2200      	movs	r2, #0
 80056d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056d6:	6978      	ldr	r0, [r7, #20]
 80056d8:	f7fe fb62 	bl	8003da0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056dc:	e027      	b.n	800572e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056de:	7cfb      	ldrb	r3, [r7, #19]
 80056e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80056e4:	2b28      	cmp	r3, #40	@ 0x28
 80056e6:	d117      	bne.n	8005718 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0201 	orr.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005706:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2200      	movs	r2, #0
 800570c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2228      	movs	r2, #40	@ 0x28
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005716:	e007      	b.n	8005728 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005728:	6978      	ldr	r0, [r7, #20]
 800572a:	f7fe fb2f 	bl	8003d8c <HAL_I2C_ErrorCallback>
}
 800572e:	bf00      	nop
 8005730:	3718      	adds	r7, #24
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20000004 	.word	0x20000004
 800573c:	14f8b589 	.word	0x14f8b589

08005740 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	4613      	mov	r3, r2
 800574e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005750:	e048      	b.n	80057e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005758:	d044      	beq.n	80057e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800575a:	f7fc fc5f 	bl	800201c <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d302      	bcc.n	8005770 <I2C_WaitOnFlagUntilTimeout+0x30>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d139      	bne.n	80057e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	0c1b      	lsrs	r3, r3, #16
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b01      	cmp	r3, #1
 8005778:	d10d      	bne.n	8005796 <I2C_WaitOnFlagUntilTimeout+0x56>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	43da      	mvns	r2, r3
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	4013      	ands	r3, r2
 8005786:	b29b      	uxth	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	bf0c      	ite	eq
 800578c:	2301      	moveq	r3, #1
 800578e:	2300      	movne	r3, #0
 8005790:	b2db      	uxtb	r3, r3
 8005792:	461a      	mov	r2, r3
 8005794:	e00c      	b.n	80057b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	43da      	mvns	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	4013      	ands	r3, r2
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	bf0c      	ite	eq
 80057a8:	2301      	moveq	r3, #1
 80057aa:	2300      	movne	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	461a      	mov	r2, r3
 80057b0:	79fb      	ldrb	r3, [r7, #7]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d116      	bne.n	80057e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d0:	f043 0220 	orr.w	r2, r3, #32
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e023      	b.n	800582c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	0c1b      	lsrs	r3, r3, #16
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d10d      	bne.n	800580a <I2C_WaitOnFlagUntilTimeout+0xca>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	43da      	mvns	r2, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	4013      	ands	r3, r2
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	bf0c      	ite	eq
 8005800:	2301      	moveq	r3, #1
 8005802:	2300      	movne	r3, #0
 8005804:	b2db      	uxtb	r3, r3
 8005806:	461a      	mov	r2, r3
 8005808:	e00c      	b.n	8005824 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	43da      	mvns	r2, r3
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4013      	ands	r3, r2
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	bf0c      	ite	eq
 800581c:	2301      	moveq	r3, #1
 800581e:	2300      	movne	r3, #0
 8005820:	b2db      	uxtb	r3, r3
 8005822:	461a      	mov	r2, r3
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	429a      	cmp	r2, r3
 8005828:	d093      	beq.n	8005752 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005842:	e071      	b.n	8005928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800584e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005852:	d123      	bne.n	800589c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005862:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800586c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2220      	movs	r2, #32
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005888:	f043 0204 	orr.w	r2, r3, #4
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e067      	b.n	800596c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a2:	d041      	beq.n	8005928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a4:	f7fc fbba 	bl	800201c <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d302      	bcc.n	80058ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d136      	bne.n	8005928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	0c1b      	lsrs	r3, r3, #16
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d10c      	bne.n	80058de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	43da      	mvns	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4013      	ands	r3, r2
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	bf14      	ite	ne
 80058d6:	2301      	movne	r3, #1
 80058d8:	2300      	moveq	r3, #0
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	e00b      	b.n	80058f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	43da      	mvns	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	4013      	ands	r3, r2
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	bf14      	ite	ne
 80058f0:	2301      	movne	r3, #1
 80058f2:	2300      	moveq	r3, #0
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d016      	beq.n	8005928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2220      	movs	r2, #32
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005914:	f043 0220 	orr.w	r2, r3, #32
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e021      	b.n	800596c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	0c1b      	lsrs	r3, r3, #16
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b01      	cmp	r3, #1
 8005930:	d10c      	bne.n	800594c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	43da      	mvns	r2, r3
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	4013      	ands	r3, r2
 800593e:	b29b      	uxth	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	bf14      	ite	ne
 8005944:	2301      	movne	r3, #1
 8005946:	2300      	moveq	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	e00b      	b.n	8005964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	43da      	mvns	r2, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	4013      	ands	r3, r2
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	bf14      	ite	ne
 800595e:	2301      	movne	r3, #1
 8005960:	2300      	moveq	r3, #0
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	f47f af6d 	bne.w	8005844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005980:	e034      	b.n	80059ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 f870 	bl	8005a68 <I2C_IsAcknowledgeFailed>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e034      	b.n	80059fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005998:	d028      	beq.n	80059ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800599a:	f7fc fb3f 	bl	800201c <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d302      	bcc.n	80059b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d11d      	bne.n	80059ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ba:	2b80      	cmp	r3, #128	@ 0x80
 80059bc:	d016      	beq.n	80059ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d8:	f043 0220 	orr.w	r2, r3, #32
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e007      	b.n	80059fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059f6:	2b80      	cmp	r3, #128	@ 0x80
 80059f8:	d1c3      	bne.n	8005982 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a10:	4b13      	ldr	r3, [pc, #76]	@ (8005a60 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	08db      	lsrs	r3, r3, #3
 8005a16:	4a13      	ldr	r2, [pc, #76]	@ (8005a64 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005a18:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1c:	0a1a      	lsrs	r2, r3, #8
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d107      	bne.n	8005a42 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a36:	f043 0220 	orr.w	r2, r3, #32
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e008      	b.n	8005a54 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a50:	d0e9      	beq.n	8005a26 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	20000004 	.word	0x20000004
 8005a64:	14f8b589 	.word	0x14f8b589

08005a68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a7e:	d11b      	bne.n	8005ab8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa4:	f043 0204 	orr.w	r2, r3, #4
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005ad6:	d103      	bne.n	8005ae0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005ade:	e007      	b.n	8005af0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005ae8:	d102      	bne.n	8005af0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2208      	movs	r2, #8
 8005aee:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b20      	cmp	r3, #32
 8005b10:	d129      	bne.n	8005b66 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2224      	movs	r2, #36	@ 0x24
 8005b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0201 	bic.w	r2, r2, #1
 8005b28:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0210 	bic.w	r2, r2, #16
 8005b38:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0201 	orr.w	r2, r2, #1
 8005b58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	e000      	b.n	8005b68 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005b66:	2302      	movs	r3, #2
  }
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b20      	cmp	r3, #32
 8005b8c:	d12a      	bne.n	8005be4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2224      	movs	r2, #36	@ 0x24
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0201 	bic.w	r2, r2, #1
 8005ba4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bac:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005bae:	89fb      	ldrh	r3, [r7, #14]
 8005bb0:	f023 030f 	bic.w	r3, r3, #15
 8005bb4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	89fb      	ldrh	r3, [r7, #14]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	89fa      	ldrh	r2, [r7, #14]
 8005bc6:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f042 0201 	orr.w	r2, r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	e000      	b.n	8005be6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005be4:	2302      	movs	r3, #2
  }
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
	...

08005bf4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005bfe:	2300      	movs	r3, #0
 8005c00:	603b      	str	r3, [r7, #0]
 8005c02:	4b20      	ldr	r3, [pc, #128]	@ (8005c84 <HAL_PWREx_EnableOverDrive+0x90>)
 8005c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c06:	4a1f      	ldr	r2, [pc, #124]	@ (8005c84 <HAL_PWREx_EnableOverDrive+0x90>)
 8005c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8005c84 <HAL_PWREx_EnableOverDrive+0x90>)
 8005c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8005c88 <HAL_PWREx_EnableOverDrive+0x94>)
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c20:	f7fc f9fc 	bl	800201c <HAL_GetTick>
 8005c24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c26:	e009      	b.n	8005c3c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c28:	f7fc f9f8 	bl	800201c <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c36:	d901      	bls.n	8005c3c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e01f      	b.n	8005c7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c3c:	4b13      	ldr	r3, [pc, #76]	@ (8005c8c <HAL_PWREx_EnableOverDrive+0x98>)
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c48:	d1ee      	bne.n	8005c28 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005c4a:	4b11      	ldr	r3, [pc, #68]	@ (8005c90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c50:	f7fc f9e4 	bl	800201c <HAL_GetTick>
 8005c54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c56:	e009      	b.n	8005c6c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c58:	f7fc f9e0 	bl	800201c <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c66:	d901      	bls.n	8005c6c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e007      	b.n	8005c7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c6c:	4b07      	ldr	r3, [pc, #28]	@ (8005c8c <HAL_PWREx_EnableOverDrive+0x98>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c78:	d1ee      	bne.n	8005c58 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40023800 	.word	0x40023800
 8005c88:	420e0040 	.word	0x420e0040
 8005c8c:	40007000 	.word	0x40007000
 8005c90:	420e0044 	.word	0x420e0044

08005c94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e267      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d075      	beq.n	8005d9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005cb2:	4b88      	ldr	r3, [pc, #544]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 030c 	and.w	r3, r3, #12
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d00c      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cbe:	4b85      	ldr	r3, [pc, #532]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005cc6:	2b08      	cmp	r3, #8
 8005cc8:	d112      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cca:	4b82      	ldr	r3, [pc, #520]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cd6:	d10b      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cd8:	4b7e      	ldr	r3, [pc, #504]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d05b      	beq.n	8005d9c <HAL_RCC_OscConfig+0x108>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d157      	bne.n	8005d9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e242      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cf8:	d106      	bne.n	8005d08 <HAL_RCC_OscConfig+0x74>
 8005cfa:	4b76      	ldr	r3, [pc, #472]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a75      	ldr	r2, [pc, #468]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	e01d      	b.n	8005d44 <HAL_RCC_OscConfig+0xb0>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d10:	d10c      	bne.n	8005d2c <HAL_RCC_OscConfig+0x98>
 8005d12:	4b70      	ldr	r3, [pc, #448]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a6f      	ldr	r2, [pc, #444]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a6c      	ldr	r2, [pc, #432]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	e00b      	b.n	8005d44 <HAL_RCC_OscConfig+0xb0>
 8005d2c:	4b69      	ldr	r3, [pc, #420]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a68      	ldr	r2, [pc, #416]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	4b66      	ldr	r3, [pc, #408]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a65      	ldr	r2, [pc, #404]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d013      	beq.n	8005d74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d4c:	f7fc f966 	bl	800201c <HAL_GetTick>
 8005d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d54:	f7fc f962 	bl	800201c <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b64      	cmp	r3, #100	@ 0x64
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e207      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d66:	4b5b      	ldr	r3, [pc, #364]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0f0      	beq.n	8005d54 <HAL_RCC_OscConfig+0xc0>
 8005d72:	e014      	b.n	8005d9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d74:	f7fc f952 	bl	800201c <HAL_GetTick>
 8005d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d7c:	f7fc f94e 	bl	800201c <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b64      	cmp	r3, #100	@ 0x64
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e1f3      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d8e:	4b51      	ldr	r3, [pc, #324]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1f0      	bne.n	8005d7c <HAL_RCC_OscConfig+0xe8>
 8005d9a:	e000      	b.n	8005d9e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d063      	beq.n	8005e72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005daa:	4b4a      	ldr	r3, [pc, #296]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 030c 	and.w	r3, r3, #12
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00b      	beq.n	8005dce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005db6:	4b47      	ldr	r3, [pc, #284]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005dbe:	2b08      	cmp	r3, #8
 8005dc0:	d11c      	bne.n	8005dfc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dc2:	4b44      	ldr	r3, [pc, #272]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d116      	bne.n	8005dfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dce:	4b41      	ldr	r3, [pc, #260]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d005      	beq.n	8005de6 <HAL_RCC_OscConfig+0x152>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d001      	beq.n	8005de6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e1c7      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005de6:	4b3b      	ldr	r3, [pc, #236]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	4937      	ldr	r1, [pc, #220]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dfa:	e03a      	b.n	8005e72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d020      	beq.n	8005e46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e04:	4b34      	ldr	r3, [pc, #208]	@ (8005ed8 <HAL_RCC_OscConfig+0x244>)
 8005e06:	2201      	movs	r2, #1
 8005e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0a:	f7fc f907 	bl	800201c <HAL_GetTick>
 8005e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e10:	e008      	b.n	8005e24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e12:	f7fc f903 	bl	800201c <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e1a8      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e24:	4b2b      	ldr	r3, [pc, #172]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0f0      	beq.n	8005e12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e30:	4b28      	ldr	r3, [pc, #160]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	4925      	ldr	r1, [pc, #148]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	600b      	str	r3, [r1, #0]
 8005e44:	e015      	b.n	8005e72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e46:	4b24      	ldr	r3, [pc, #144]	@ (8005ed8 <HAL_RCC_OscConfig+0x244>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4c:	f7fc f8e6 	bl	800201c <HAL_GetTick>
 8005e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e52:	e008      	b.n	8005e66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e54:	f7fc f8e2 	bl	800201c <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e187      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e66:	4b1b      	ldr	r3, [pc, #108]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1f0      	bne.n	8005e54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d036      	beq.n	8005eec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d016      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e86:	4b15      	ldr	r3, [pc, #84]	@ (8005edc <HAL_RCC_OscConfig+0x248>)
 8005e88:	2201      	movs	r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e8c:	f7fc f8c6 	bl	800201c <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e94:	f7fc f8c2 	bl	800201c <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e167      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed4 <HAL_RCC_OscConfig+0x240>)
 8005ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0f0      	beq.n	8005e94 <HAL_RCC_OscConfig+0x200>
 8005eb2:	e01b      	b.n	8005eec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eb4:	4b09      	ldr	r3, [pc, #36]	@ (8005edc <HAL_RCC_OscConfig+0x248>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eba:	f7fc f8af 	bl	800201c <HAL_GetTick>
 8005ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ec0:	e00e      	b.n	8005ee0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ec2:	f7fc f8ab 	bl	800201c <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d907      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e150      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
 8005ed4:	40023800 	.word	0x40023800
 8005ed8:	42470000 	.word	0x42470000
 8005edc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ee0:	4b88      	ldr	r3, [pc, #544]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 8005ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1ea      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 8097 	beq.w	8006028 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005efa:	2300      	movs	r3, #0
 8005efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005efe:	4b81      	ldr	r3, [pc, #516]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 8005f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10f      	bne.n	8005f2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60bb      	str	r3, [r7, #8]
 8005f0e:	4b7d      	ldr	r3, [pc, #500]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 8005f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f12:	4a7c      	ldr	r2, [pc, #496]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 8005f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f1a:	4b7a      	ldr	r3, [pc, #488]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f22:	60bb      	str	r3, [r7, #8]
 8005f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f26:	2301      	movs	r3, #1
 8005f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f2a:	4b77      	ldr	r3, [pc, #476]	@ (8006108 <HAL_RCC_OscConfig+0x474>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d118      	bne.n	8005f68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f36:	4b74      	ldr	r3, [pc, #464]	@ (8006108 <HAL_RCC_OscConfig+0x474>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a73      	ldr	r2, [pc, #460]	@ (8006108 <HAL_RCC_OscConfig+0x474>)
 8005f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f42:	f7fc f86b 	bl	800201c <HAL_GetTick>
 8005f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f48:	e008      	b.n	8005f5c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f4a:	f7fc f867 	bl	800201c <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d901      	bls.n	8005f5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e10c      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8006108 <HAL_RCC_OscConfig+0x474>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d0f0      	beq.n	8005f4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d106      	bne.n	8005f7e <HAL_RCC_OscConfig+0x2ea>
 8005f70:	4b64      	ldr	r3, [pc, #400]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 8005f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f74:	4a63      	ldr	r2, [pc, #396]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 8005f76:	f043 0301 	orr.w	r3, r3, #1
 8005f7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f7c:	e01c      	b.n	8005fb8 <HAL_RCC_OscConfig+0x324>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	2b05      	cmp	r3, #5
 8005f84:	d10c      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x30c>
 8005f86:	4b5f      	ldr	r3, [pc, #380]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 8005f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f8a:	4a5e      	ldr	r2, [pc, #376]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 8005f8c:	f043 0304 	orr.w	r3, r3, #4
 8005f90:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f92:	4b5c      	ldr	r3, [pc, #368]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 8005f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f96:	4a5b      	ldr	r2, [pc, #364]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 8005f98:	f043 0301 	orr.w	r3, r3, #1
 8005f9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f9e:	e00b      	b.n	8005fb8 <HAL_RCC_OscConfig+0x324>
 8005fa0:	4b58      	ldr	r3, [pc, #352]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 8005fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa4:	4a57      	ldr	r2, [pc, #348]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 8005fa6:	f023 0301 	bic.w	r3, r3, #1
 8005faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fac:	4b55      	ldr	r3, [pc, #340]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 8005fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb0:	4a54      	ldr	r2, [pc, #336]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 8005fb2:	f023 0304 	bic.w	r3, r3, #4
 8005fb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d015      	beq.n	8005fec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc0:	f7fc f82c 	bl	800201c <HAL_GetTick>
 8005fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fc6:	e00a      	b.n	8005fde <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fc8:	f7fc f828 	bl	800201c <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e0cb      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fde:	4b49      	ldr	r3, [pc, #292]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0ee      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x334>
 8005fea:	e014      	b.n	8006016 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fec:	f7fc f816 	bl	800201c <HAL_GetTick>
 8005ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ff2:	e00a      	b.n	800600a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ff4:	f7fc f812 	bl	800201c <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006002:	4293      	cmp	r3, r2
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e0b5      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800600a:	4b3e      	ldr	r3, [pc, #248]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 800600c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1ee      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006016:	7dfb      	ldrb	r3, [r7, #23]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d105      	bne.n	8006028 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800601c:	4b39      	ldr	r3, [pc, #228]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 800601e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006020:	4a38      	ldr	r2, [pc, #224]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 8006022:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006026:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 80a1 	beq.w	8006174 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006032:	4b34      	ldr	r3, [pc, #208]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 030c 	and.w	r3, r3, #12
 800603a:	2b08      	cmp	r3, #8
 800603c:	d05c      	beq.n	80060f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	2b02      	cmp	r3, #2
 8006044:	d141      	bne.n	80060ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006046:	4b31      	ldr	r3, [pc, #196]	@ (800610c <HAL_RCC_OscConfig+0x478>)
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800604c:	f7fb ffe6 	bl	800201c <HAL_GetTick>
 8006050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006054:	f7fb ffe2 	bl	800201c <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e087      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006066:	4b27      	ldr	r3, [pc, #156]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1f0      	bne.n	8006054 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	69da      	ldr	r2, [r3, #28]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006080:	019b      	lsls	r3, r3, #6
 8006082:	431a      	orrs	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006088:	085b      	lsrs	r3, r3, #1
 800608a:	3b01      	subs	r3, #1
 800608c:	041b      	lsls	r3, r3, #16
 800608e:	431a      	orrs	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006094:	061b      	lsls	r3, r3, #24
 8006096:	491b      	ldr	r1, [pc, #108]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 8006098:	4313      	orrs	r3, r2
 800609a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800609c:	4b1b      	ldr	r3, [pc, #108]	@ (800610c <HAL_RCC_OscConfig+0x478>)
 800609e:	2201      	movs	r2, #1
 80060a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a2:	f7fb ffbb 	bl	800201c <HAL_GetTick>
 80060a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060a8:	e008      	b.n	80060bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060aa:	f7fb ffb7 	bl	800201c <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e05c      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060bc:	4b11      	ldr	r3, [pc, #68]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d0f0      	beq.n	80060aa <HAL_RCC_OscConfig+0x416>
 80060c8:	e054      	b.n	8006174 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ca:	4b10      	ldr	r3, [pc, #64]	@ (800610c <HAL_RCC_OscConfig+0x478>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d0:	f7fb ffa4 	bl	800201c <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060d8:	f7fb ffa0 	bl	800201c <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e045      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ea:	4b06      	ldr	r3, [pc, #24]	@ (8006104 <HAL_RCC_OscConfig+0x470>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1f0      	bne.n	80060d8 <HAL_RCC_OscConfig+0x444>
 80060f6:	e03d      	b.n	8006174 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d107      	bne.n	8006110 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e038      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
 8006104:	40023800 	.word	0x40023800
 8006108:	40007000 	.word	0x40007000
 800610c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006110:	4b1b      	ldr	r3, [pc, #108]	@ (8006180 <HAL_RCC_OscConfig+0x4ec>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d028      	beq.n	8006170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006128:	429a      	cmp	r2, r3
 800612a:	d121      	bne.n	8006170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006136:	429a      	cmp	r2, r3
 8006138:	d11a      	bne.n	8006170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006140:	4013      	ands	r3, r2
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006146:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006148:	4293      	cmp	r3, r2
 800614a:	d111      	bne.n	8006170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006156:	085b      	lsrs	r3, r3, #1
 8006158:	3b01      	subs	r3, #1
 800615a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800615c:	429a      	cmp	r2, r3
 800615e:	d107      	bne.n	8006170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800616c:	429a      	cmp	r2, r3
 800616e:	d001      	beq.n	8006174 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e000      	b.n	8006176 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	40023800 	.word	0x40023800

08006184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e0cc      	b.n	8006332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006198:	4b68      	ldr	r3, [pc, #416]	@ (800633c <HAL_RCC_ClockConfig+0x1b8>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 030f 	and.w	r3, r3, #15
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d90c      	bls.n	80061c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061a6:	4b65      	ldr	r3, [pc, #404]	@ (800633c <HAL_RCC_ClockConfig+0x1b8>)
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	b2d2      	uxtb	r2, r2
 80061ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ae:	4b63      	ldr	r3, [pc, #396]	@ (800633c <HAL_RCC_ClockConfig+0x1b8>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 030f 	and.w	r3, r3, #15
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d001      	beq.n	80061c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e0b8      	b.n	8006332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d020      	beq.n	800620e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d005      	beq.n	80061e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061d8:	4b59      	ldr	r3, [pc, #356]	@ (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	4a58      	ldr	r2, [pc, #352]	@ (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 80061de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80061e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0308 	and.w	r3, r3, #8
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d005      	beq.n	80061fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061f0:	4b53      	ldr	r3, [pc, #332]	@ (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	4a52      	ldr	r2, [pc, #328]	@ (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 80061f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80061fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061fc:	4b50      	ldr	r3, [pc, #320]	@ (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	494d      	ldr	r1, [pc, #308]	@ (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 800620a:	4313      	orrs	r3, r2
 800620c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d044      	beq.n	80062a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d107      	bne.n	8006232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006222:	4b47      	ldr	r3, [pc, #284]	@ (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d119      	bne.n	8006262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e07f      	b.n	8006332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2b02      	cmp	r3, #2
 8006238:	d003      	beq.n	8006242 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800623e:	2b03      	cmp	r3, #3
 8006240:	d107      	bne.n	8006252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006242:	4b3f      	ldr	r3, [pc, #252]	@ (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e06f      	b.n	8006332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006252:	4b3b      	ldr	r3, [pc, #236]	@ (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e067      	b.n	8006332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006262:	4b37      	ldr	r3, [pc, #220]	@ (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f023 0203 	bic.w	r2, r3, #3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	4934      	ldr	r1, [pc, #208]	@ (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 8006270:	4313      	orrs	r3, r2
 8006272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006274:	f7fb fed2 	bl	800201c <HAL_GetTick>
 8006278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800627a:	e00a      	b.n	8006292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800627c:	f7fb fece 	bl	800201c <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800628a:	4293      	cmp	r3, r2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e04f      	b.n	8006332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006292:	4b2b      	ldr	r3, [pc, #172]	@ (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f003 020c 	and.w	r2, r3, #12
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d1eb      	bne.n	800627c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062a4:	4b25      	ldr	r3, [pc, #148]	@ (800633c <HAL_RCC_ClockConfig+0x1b8>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 030f 	and.w	r3, r3, #15
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d20c      	bcs.n	80062cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062b2:	4b22      	ldr	r3, [pc, #136]	@ (800633c <HAL_RCC_ClockConfig+0x1b8>)
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	b2d2      	uxtb	r2, r2
 80062b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ba:	4b20      	ldr	r3, [pc, #128]	@ (800633c <HAL_RCC_ClockConfig+0x1b8>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 030f 	and.w	r3, r3, #15
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d001      	beq.n	80062cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e032      	b.n	8006332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d008      	beq.n	80062ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062d8:	4b19      	ldr	r3, [pc, #100]	@ (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	4916      	ldr	r1, [pc, #88]	@ (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0308 	and.w	r3, r3, #8
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d009      	beq.n	800630a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062f6:	4b12      	ldr	r3, [pc, #72]	@ (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	490e      	ldr	r1, [pc, #56]	@ (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 8006306:	4313      	orrs	r3, r2
 8006308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800630a:	f000 f821 	bl	8006350 <HAL_RCC_GetSysClockFreq>
 800630e:	4602      	mov	r2, r0
 8006310:	4b0b      	ldr	r3, [pc, #44]	@ (8006340 <HAL_RCC_ClockConfig+0x1bc>)
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	091b      	lsrs	r3, r3, #4
 8006316:	f003 030f 	and.w	r3, r3, #15
 800631a:	490a      	ldr	r1, [pc, #40]	@ (8006344 <HAL_RCC_ClockConfig+0x1c0>)
 800631c:	5ccb      	ldrb	r3, [r1, r3]
 800631e:	fa22 f303 	lsr.w	r3, r2, r3
 8006322:	4a09      	ldr	r2, [pc, #36]	@ (8006348 <HAL_RCC_ClockConfig+0x1c4>)
 8006324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006326:	4b09      	ldr	r3, [pc, #36]	@ (800634c <HAL_RCC_ClockConfig+0x1c8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f7fb fe32 	bl	8001f94 <HAL_InitTick>

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	40023c00 	.word	0x40023c00
 8006340:	40023800 	.word	0x40023800
 8006344:	0800985c 	.word	0x0800985c
 8006348:	20000004 	.word	0x20000004
 800634c:	20000008 	.word	0x20000008

08006350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006354:	b090      	sub	sp, #64	@ 0x40
 8006356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006360:	2300      	movs	r3, #0
 8006362:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006368:	4b59      	ldr	r3, [pc, #356]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f003 030c 	and.w	r3, r3, #12
 8006370:	2b08      	cmp	r3, #8
 8006372:	d00d      	beq.n	8006390 <HAL_RCC_GetSysClockFreq+0x40>
 8006374:	2b08      	cmp	r3, #8
 8006376:	f200 80a1 	bhi.w	80064bc <HAL_RCC_GetSysClockFreq+0x16c>
 800637a:	2b00      	cmp	r3, #0
 800637c:	d002      	beq.n	8006384 <HAL_RCC_GetSysClockFreq+0x34>
 800637e:	2b04      	cmp	r3, #4
 8006380:	d003      	beq.n	800638a <HAL_RCC_GetSysClockFreq+0x3a>
 8006382:	e09b      	b.n	80064bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006384:	4b53      	ldr	r3, [pc, #332]	@ (80064d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006386:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006388:	e09b      	b.n	80064c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800638a:	4b53      	ldr	r3, [pc, #332]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800638c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800638e:	e098      	b.n	80064c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006390:	4b4f      	ldr	r3, [pc, #316]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006398:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800639a:	4b4d      	ldr	r3, [pc, #308]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d028      	beq.n	80063f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063a6:	4b4a      	ldr	r3, [pc, #296]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	099b      	lsrs	r3, r3, #6
 80063ac:	2200      	movs	r2, #0
 80063ae:	623b      	str	r3, [r7, #32]
 80063b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80063b8:	2100      	movs	r1, #0
 80063ba:	4b47      	ldr	r3, [pc, #284]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80063bc:	fb03 f201 	mul.w	r2, r3, r1
 80063c0:	2300      	movs	r3, #0
 80063c2:	fb00 f303 	mul.w	r3, r0, r3
 80063c6:	4413      	add	r3, r2
 80063c8:	4a43      	ldr	r2, [pc, #268]	@ (80064d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80063ca:	fba0 1202 	umull	r1, r2, r0, r2
 80063ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063d0:	460a      	mov	r2, r1
 80063d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80063d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063d6:	4413      	add	r3, r2
 80063d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063dc:	2200      	movs	r2, #0
 80063de:	61bb      	str	r3, [r7, #24]
 80063e0:	61fa      	str	r2, [r7, #28]
 80063e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80063ea:	f7f9 ff51 	bl	8000290 <__aeabi_uldivmod>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4613      	mov	r3, r2
 80063f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063f6:	e053      	b.n	80064a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063f8:	4b35      	ldr	r3, [pc, #212]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	099b      	lsrs	r3, r3, #6
 80063fe:	2200      	movs	r2, #0
 8006400:	613b      	str	r3, [r7, #16]
 8006402:	617a      	str	r2, [r7, #20]
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800640a:	f04f 0b00 	mov.w	fp, #0
 800640e:	4652      	mov	r2, sl
 8006410:	465b      	mov	r3, fp
 8006412:	f04f 0000 	mov.w	r0, #0
 8006416:	f04f 0100 	mov.w	r1, #0
 800641a:	0159      	lsls	r1, r3, #5
 800641c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006420:	0150      	lsls	r0, r2, #5
 8006422:	4602      	mov	r2, r0
 8006424:	460b      	mov	r3, r1
 8006426:	ebb2 080a 	subs.w	r8, r2, sl
 800642a:	eb63 090b 	sbc.w	r9, r3, fp
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800643a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800643e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006442:	ebb2 0408 	subs.w	r4, r2, r8
 8006446:	eb63 0509 	sbc.w	r5, r3, r9
 800644a:	f04f 0200 	mov.w	r2, #0
 800644e:	f04f 0300 	mov.w	r3, #0
 8006452:	00eb      	lsls	r3, r5, #3
 8006454:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006458:	00e2      	lsls	r2, r4, #3
 800645a:	4614      	mov	r4, r2
 800645c:	461d      	mov	r5, r3
 800645e:	eb14 030a 	adds.w	r3, r4, sl
 8006462:	603b      	str	r3, [r7, #0]
 8006464:	eb45 030b 	adc.w	r3, r5, fp
 8006468:	607b      	str	r3, [r7, #4]
 800646a:	f04f 0200 	mov.w	r2, #0
 800646e:	f04f 0300 	mov.w	r3, #0
 8006472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006476:	4629      	mov	r1, r5
 8006478:	028b      	lsls	r3, r1, #10
 800647a:	4621      	mov	r1, r4
 800647c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006480:	4621      	mov	r1, r4
 8006482:	028a      	lsls	r2, r1, #10
 8006484:	4610      	mov	r0, r2
 8006486:	4619      	mov	r1, r3
 8006488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800648a:	2200      	movs	r2, #0
 800648c:	60bb      	str	r3, [r7, #8]
 800648e:	60fa      	str	r2, [r7, #12]
 8006490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006494:	f7f9 fefc 	bl	8000290 <__aeabi_uldivmod>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4613      	mov	r3, r2
 800649e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80064a0:	4b0b      	ldr	r3, [pc, #44]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	0c1b      	lsrs	r3, r3, #16
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	3301      	adds	r3, #1
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80064b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80064b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80064ba:	e002      	b.n	80064c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064bc:	4b05      	ldr	r3, [pc, #20]	@ (80064d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80064be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80064c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3740      	adds	r7, #64	@ 0x40
 80064c8:	46bd      	mov	sp, r7
 80064ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064ce:	bf00      	nop
 80064d0:	40023800 	.word	0x40023800
 80064d4:	00f42400 	.word	0x00f42400
 80064d8:	017d7840 	.word	0x017d7840

080064dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064e0:	4b03      	ldr	r3, [pc, #12]	@ (80064f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80064e2:	681b      	ldr	r3, [r3, #0]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	20000004 	.word	0x20000004

080064f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064f8:	f7ff fff0 	bl	80064dc <HAL_RCC_GetHCLKFreq>
 80064fc:	4602      	mov	r2, r0
 80064fe:	4b05      	ldr	r3, [pc, #20]	@ (8006514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	0a9b      	lsrs	r3, r3, #10
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	4903      	ldr	r1, [pc, #12]	@ (8006518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800650a:	5ccb      	ldrb	r3, [r1, r3]
 800650c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006510:	4618      	mov	r0, r3
 8006512:	bd80      	pop	{r7, pc}
 8006514:	40023800 	.word	0x40023800
 8006518:	0800986c 	.word	0x0800986c

0800651c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006520:	f7ff ffdc 	bl	80064dc <HAL_RCC_GetHCLKFreq>
 8006524:	4602      	mov	r2, r0
 8006526:	4b05      	ldr	r3, [pc, #20]	@ (800653c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	0b5b      	lsrs	r3, r3, #13
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	4903      	ldr	r1, [pc, #12]	@ (8006540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006532:	5ccb      	ldrb	r3, [r1, r3]
 8006534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006538:	4618      	mov	r0, r3
 800653a:	bd80      	pop	{r7, pc}
 800653c:	40023800 	.word	0x40023800
 8006540:	0800986c 	.word	0x0800986c

08006544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e041      	b.n	80065da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d106      	bne.n	8006570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7fb fb62 	bl	8001c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3304      	adds	r3, #4
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f000 fc58 	bl	8006e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d001      	beq.n	80065fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e04e      	b.n	800669a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0201 	orr.w	r2, r2, #1
 8006612:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a23      	ldr	r2, [pc, #140]	@ (80066a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d022      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x80>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006626:	d01d      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x80>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a1f      	ldr	r2, [pc, #124]	@ (80066ac <HAL_TIM_Base_Start_IT+0xc8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d018      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x80>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a1e      	ldr	r2, [pc, #120]	@ (80066b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d013      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x80>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a1c      	ldr	r2, [pc, #112]	@ (80066b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d00e      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x80>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a1b      	ldr	r2, [pc, #108]	@ (80066b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d009      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x80>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a19      	ldr	r2, [pc, #100]	@ (80066bc <HAL_TIM_Base_Start_IT+0xd8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d004      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x80>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a18      	ldr	r2, [pc, #96]	@ (80066c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d111      	bne.n	8006688 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b06      	cmp	r3, #6
 8006674:	d010      	beq.n	8006698 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f042 0201 	orr.w	r2, r2, #1
 8006684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006686:	e007      	b.n	8006698 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0201 	orr.w	r2, r2, #1
 8006696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	40010000 	.word	0x40010000
 80066ac:	40000400 	.word	0x40000400
 80066b0:	40000800 	.word	0x40000800
 80066b4:	40000c00 	.word	0x40000c00
 80066b8:	40010400 	.word	0x40010400
 80066bc:	40014000 	.word	0x40014000
 80066c0:	40001800 	.word	0x40001800

080066c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e041      	b.n	800675a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7fb faca 	bl	8001c84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3304      	adds	r3, #4
 8006700:	4619      	mov	r1, r3
 8006702:	4610      	mov	r0, r2
 8006704:	f000 fb98 	bl	8006e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d109      	bne.n	8006788 <HAL_TIM_PWM_Start+0x24>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b01      	cmp	r3, #1
 800677e:	bf14      	ite	ne
 8006780:	2301      	movne	r3, #1
 8006782:	2300      	moveq	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	e022      	b.n	80067ce <HAL_TIM_PWM_Start+0x6a>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2b04      	cmp	r3, #4
 800678c:	d109      	bne.n	80067a2 <HAL_TIM_PWM_Start+0x3e>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b01      	cmp	r3, #1
 8006798:	bf14      	ite	ne
 800679a:	2301      	movne	r3, #1
 800679c:	2300      	moveq	r3, #0
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	e015      	b.n	80067ce <HAL_TIM_PWM_Start+0x6a>
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b08      	cmp	r3, #8
 80067a6:	d109      	bne.n	80067bc <HAL_TIM_PWM_Start+0x58>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	bf14      	ite	ne
 80067b4:	2301      	movne	r3, #1
 80067b6:	2300      	moveq	r3, #0
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	e008      	b.n	80067ce <HAL_TIM_PWM_Start+0x6a>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	bf14      	ite	ne
 80067c8:	2301      	movne	r3, #1
 80067ca:	2300      	moveq	r3, #0
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e07c      	b.n	80068d0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d104      	bne.n	80067e6 <HAL_TIM_PWM_Start+0x82>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067e4:	e013      	b.n	800680e <HAL_TIM_PWM_Start+0xaa>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b04      	cmp	r3, #4
 80067ea:	d104      	bne.n	80067f6 <HAL_TIM_PWM_Start+0x92>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067f4:	e00b      	b.n	800680e <HAL_TIM_PWM_Start+0xaa>
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b08      	cmp	r3, #8
 80067fa:	d104      	bne.n	8006806 <HAL_TIM_PWM_Start+0xa2>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006804:	e003      	b.n	800680e <HAL_TIM_PWM_Start+0xaa>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2202      	movs	r2, #2
 800680a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2201      	movs	r2, #1
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	4618      	mov	r0, r3
 8006818:	f000 fe04 	bl	8007424 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a2d      	ldr	r2, [pc, #180]	@ (80068d8 <HAL_TIM_PWM_Start+0x174>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d004      	beq.n	8006830 <HAL_TIM_PWM_Start+0xcc>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a2c      	ldr	r2, [pc, #176]	@ (80068dc <HAL_TIM_PWM_Start+0x178>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d101      	bne.n	8006834 <HAL_TIM_PWM_Start+0xd0>
 8006830:	2301      	movs	r3, #1
 8006832:	e000      	b.n	8006836 <HAL_TIM_PWM_Start+0xd2>
 8006834:	2300      	movs	r3, #0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d007      	beq.n	800684a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006848:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a22      	ldr	r2, [pc, #136]	@ (80068d8 <HAL_TIM_PWM_Start+0x174>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d022      	beq.n	800689a <HAL_TIM_PWM_Start+0x136>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800685c:	d01d      	beq.n	800689a <HAL_TIM_PWM_Start+0x136>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a1f      	ldr	r2, [pc, #124]	@ (80068e0 <HAL_TIM_PWM_Start+0x17c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d018      	beq.n	800689a <HAL_TIM_PWM_Start+0x136>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a1d      	ldr	r2, [pc, #116]	@ (80068e4 <HAL_TIM_PWM_Start+0x180>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d013      	beq.n	800689a <HAL_TIM_PWM_Start+0x136>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a1c      	ldr	r2, [pc, #112]	@ (80068e8 <HAL_TIM_PWM_Start+0x184>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d00e      	beq.n	800689a <HAL_TIM_PWM_Start+0x136>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a16      	ldr	r2, [pc, #88]	@ (80068dc <HAL_TIM_PWM_Start+0x178>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d009      	beq.n	800689a <HAL_TIM_PWM_Start+0x136>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a18      	ldr	r2, [pc, #96]	@ (80068ec <HAL_TIM_PWM_Start+0x188>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d004      	beq.n	800689a <HAL_TIM_PWM_Start+0x136>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a16      	ldr	r2, [pc, #88]	@ (80068f0 <HAL_TIM_PWM_Start+0x18c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d111      	bne.n	80068be <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f003 0307 	and.w	r3, r3, #7
 80068a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b06      	cmp	r3, #6
 80068aa:	d010      	beq.n	80068ce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0201 	orr.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068bc:	e007      	b.n	80068ce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f042 0201 	orr.w	r2, r2, #1
 80068cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	40010000 	.word	0x40010000
 80068dc:	40010400 	.word	0x40010400
 80068e0:	40000400 	.word	0x40000400
 80068e4:	40000800 	.word	0x40000800
 80068e8:	40000c00 	.word	0x40000c00
 80068ec:	40014000 	.word	0x40014000
 80068f0:	40001800 	.word	0x40001800

080068f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d020      	beq.n	8006958 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01b      	beq.n	8006958 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f06f 0202 	mvn.w	r2, #2
 8006928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fa5b 	bl	8006dfa <HAL_TIM_IC_CaptureCallback>
 8006944:	e005      	b.n	8006952 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fa4d 	bl	8006de6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fa5e 	bl	8006e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f003 0304 	and.w	r3, r3, #4
 800695e:	2b00      	cmp	r3, #0
 8006960:	d020      	beq.n	80069a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b00      	cmp	r3, #0
 800696a:	d01b      	beq.n	80069a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f06f 0204 	mvn.w	r2, #4
 8006974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2202      	movs	r2, #2
 800697a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fa35 	bl	8006dfa <HAL_TIM_IC_CaptureCallback>
 8006990:	e005      	b.n	800699e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fa27 	bl	8006de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fa38 	bl	8006e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d020      	beq.n	80069f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f003 0308 	and.w	r3, r3, #8
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01b      	beq.n	80069f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f06f 0208 	mvn.w	r2, #8
 80069c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2204      	movs	r2, #4
 80069c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f003 0303 	and.w	r3, r3, #3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fa0f 	bl	8006dfa <HAL_TIM_IC_CaptureCallback>
 80069dc:	e005      	b.n	80069ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fa01 	bl	8006de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fa12 	bl	8006e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f003 0310 	and.w	r3, r3, #16
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d020      	beq.n	8006a3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f003 0310 	and.w	r3, r3, #16
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d01b      	beq.n	8006a3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0210 	mvn.w	r2, #16
 8006a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2208      	movs	r2, #8
 8006a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f9e9 	bl	8006dfa <HAL_TIM_IC_CaptureCallback>
 8006a28:	e005      	b.n	8006a36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f9db 	bl	8006de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f9ec 	bl	8006e0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00c      	beq.n	8006a60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d007      	beq.n	8006a60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f06f 0201 	mvn.w	r2, #1
 8006a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7fa fb88 	bl	8001170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00c      	beq.n	8006a84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d007      	beq.n	8006a84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fd7c 	bl	800757c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00c      	beq.n	8006aa8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d007      	beq.n	8006aa8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f9bd 	bl	8006e22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f003 0320 	and.w	r3, r3, #32
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00c      	beq.n	8006acc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f003 0320 	and.w	r3, r3, #32
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d007      	beq.n	8006acc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f06f 0220 	mvn.w	r2, #32
 8006ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fd4e 	bl	8007568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006acc:	bf00      	nop
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d101      	bne.n	8006af2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006aee:	2302      	movs	r3, #2
 8006af0:	e0ae      	b.n	8006c50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b0c      	cmp	r3, #12
 8006afe:	f200 809f 	bhi.w	8006c40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b02:	a201      	add	r2, pc, #4	@ (adr r2, 8006b08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b08:	08006b3d 	.word	0x08006b3d
 8006b0c:	08006c41 	.word	0x08006c41
 8006b10:	08006c41 	.word	0x08006c41
 8006b14:	08006c41 	.word	0x08006c41
 8006b18:	08006b7d 	.word	0x08006b7d
 8006b1c:	08006c41 	.word	0x08006c41
 8006b20:	08006c41 	.word	0x08006c41
 8006b24:	08006c41 	.word	0x08006c41
 8006b28:	08006bbf 	.word	0x08006bbf
 8006b2c:	08006c41 	.word	0x08006c41
 8006b30:	08006c41 	.word	0x08006c41
 8006b34:	08006c41 	.word	0x08006c41
 8006b38:	08006bff 	.word	0x08006bff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68b9      	ldr	r1, [r7, #8]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fa24 	bl	8006f90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699a      	ldr	r2, [r3, #24]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0208 	orr.w	r2, r2, #8
 8006b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	699a      	ldr	r2, [r3, #24]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 0204 	bic.w	r2, r2, #4
 8006b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6999      	ldr	r1, [r3, #24]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	691a      	ldr	r2, [r3, #16]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	619a      	str	r2, [r3, #24]
      break;
 8006b7a:	e064      	b.n	8006c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68b9      	ldr	r1, [r7, #8]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 fa74 	bl	8007070 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699a      	ldr	r2, [r3, #24]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	699a      	ldr	r2, [r3, #24]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6999      	ldr	r1, [r3, #24]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	021a      	lsls	r2, r3, #8
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	619a      	str	r2, [r3, #24]
      break;
 8006bbc:	e043      	b.n	8006c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68b9      	ldr	r1, [r7, #8]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 fac9 	bl	800715c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69da      	ldr	r2, [r3, #28]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f042 0208 	orr.w	r2, r2, #8
 8006bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69da      	ldr	r2, [r3, #28]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0204 	bic.w	r2, r2, #4
 8006be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69d9      	ldr	r1, [r3, #28]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	691a      	ldr	r2, [r3, #16]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	61da      	str	r2, [r3, #28]
      break;
 8006bfc:	e023      	b.n	8006c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68b9      	ldr	r1, [r7, #8]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 fb1d 	bl	8007244 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69da      	ldr	r2, [r3, #28]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69da      	ldr	r2, [r3, #28]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	69d9      	ldr	r1, [r3, #28]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	021a      	lsls	r2, r3, #8
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	61da      	str	r2, [r3, #28]
      break;
 8006c3e:	e002      	b.n	8006c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	75fb      	strb	r3, [r7, #23]
      break;
 8006c44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d101      	bne.n	8006c74 <HAL_TIM_ConfigClockSource+0x1c>
 8006c70:	2302      	movs	r3, #2
 8006c72:	e0b4      	b.n	8006dde <HAL_TIM_ConfigClockSource+0x186>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cac:	d03e      	beq.n	8006d2c <HAL_TIM_ConfigClockSource+0xd4>
 8006cae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cb2:	f200 8087 	bhi.w	8006dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cba:	f000 8086 	beq.w	8006dca <HAL_TIM_ConfigClockSource+0x172>
 8006cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cc2:	d87f      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cc4:	2b70      	cmp	r3, #112	@ 0x70
 8006cc6:	d01a      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0xa6>
 8006cc8:	2b70      	cmp	r3, #112	@ 0x70
 8006cca:	d87b      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ccc:	2b60      	cmp	r3, #96	@ 0x60
 8006cce:	d050      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x11a>
 8006cd0:	2b60      	cmp	r3, #96	@ 0x60
 8006cd2:	d877      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cd4:	2b50      	cmp	r3, #80	@ 0x50
 8006cd6:	d03c      	beq.n	8006d52 <HAL_TIM_ConfigClockSource+0xfa>
 8006cd8:	2b50      	cmp	r3, #80	@ 0x50
 8006cda:	d873      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cdc:	2b40      	cmp	r3, #64	@ 0x40
 8006cde:	d058      	beq.n	8006d92 <HAL_TIM_ConfigClockSource+0x13a>
 8006ce0:	2b40      	cmp	r3, #64	@ 0x40
 8006ce2:	d86f      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ce4:	2b30      	cmp	r3, #48	@ 0x30
 8006ce6:	d064      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0x15a>
 8006ce8:	2b30      	cmp	r3, #48	@ 0x30
 8006cea:	d86b      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cec:	2b20      	cmp	r3, #32
 8006cee:	d060      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0x15a>
 8006cf0:	2b20      	cmp	r3, #32
 8006cf2:	d867      	bhi.n	8006dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d05c      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0x15a>
 8006cf8:	2b10      	cmp	r3, #16
 8006cfa:	d05a      	beq.n	8006db2 <HAL_TIM_ConfigClockSource+0x15a>
 8006cfc:	e062      	b.n	8006dc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d0e:	f000 fb69 	bl	80073e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	609a      	str	r2, [r3, #8]
      break;
 8006d2a:	e04f      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d3c:	f000 fb52 	bl	80073e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689a      	ldr	r2, [r3, #8]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d4e:	609a      	str	r2, [r3, #8]
      break;
 8006d50:	e03c      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f000 fac6 	bl	80072f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2150      	movs	r1, #80	@ 0x50
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 fb1f 	bl	80073ae <TIM_ITRx_SetConfig>
      break;
 8006d70:	e02c      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d7e:	461a      	mov	r2, r3
 8006d80:	f000 fae5 	bl	800734e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2160      	movs	r1, #96	@ 0x60
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 fb0f 	bl	80073ae <TIM_ITRx_SetConfig>
      break;
 8006d90:	e01c      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f000 faa6 	bl	80072f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2140      	movs	r1, #64	@ 0x40
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 faff 	bl	80073ae <TIM_ITRx_SetConfig>
      break;
 8006db0:	e00c      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	f000 faf6 	bl	80073ae <TIM_ITRx_SetConfig>
      break;
 8006dc2:	e003      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc8:	e000      	b.n	8006dcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006dca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e02:	bf00      	nop
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b083      	sub	sp, #12
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
	...

08006e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a46      	ldr	r2, [pc, #280]	@ (8006f64 <TIM_Base_SetConfig+0x12c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d013      	beq.n	8006e78 <TIM_Base_SetConfig+0x40>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e56:	d00f      	beq.n	8006e78 <TIM_Base_SetConfig+0x40>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a43      	ldr	r2, [pc, #268]	@ (8006f68 <TIM_Base_SetConfig+0x130>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d00b      	beq.n	8006e78 <TIM_Base_SetConfig+0x40>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a42      	ldr	r2, [pc, #264]	@ (8006f6c <TIM_Base_SetConfig+0x134>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d007      	beq.n	8006e78 <TIM_Base_SetConfig+0x40>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a41      	ldr	r2, [pc, #260]	@ (8006f70 <TIM_Base_SetConfig+0x138>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d003      	beq.n	8006e78 <TIM_Base_SetConfig+0x40>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a40      	ldr	r2, [pc, #256]	@ (8006f74 <TIM_Base_SetConfig+0x13c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d108      	bne.n	8006e8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a35      	ldr	r2, [pc, #212]	@ (8006f64 <TIM_Base_SetConfig+0x12c>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d02b      	beq.n	8006eea <TIM_Base_SetConfig+0xb2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e98:	d027      	beq.n	8006eea <TIM_Base_SetConfig+0xb2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a32      	ldr	r2, [pc, #200]	@ (8006f68 <TIM_Base_SetConfig+0x130>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d023      	beq.n	8006eea <TIM_Base_SetConfig+0xb2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a31      	ldr	r2, [pc, #196]	@ (8006f6c <TIM_Base_SetConfig+0x134>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d01f      	beq.n	8006eea <TIM_Base_SetConfig+0xb2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a30      	ldr	r2, [pc, #192]	@ (8006f70 <TIM_Base_SetConfig+0x138>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d01b      	beq.n	8006eea <TIM_Base_SetConfig+0xb2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a2f      	ldr	r2, [pc, #188]	@ (8006f74 <TIM_Base_SetConfig+0x13c>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d017      	beq.n	8006eea <TIM_Base_SetConfig+0xb2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a2e      	ldr	r2, [pc, #184]	@ (8006f78 <TIM_Base_SetConfig+0x140>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d013      	beq.n	8006eea <TIM_Base_SetConfig+0xb2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a2d      	ldr	r2, [pc, #180]	@ (8006f7c <TIM_Base_SetConfig+0x144>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00f      	beq.n	8006eea <TIM_Base_SetConfig+0xb2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a2c      	ldr	r2, [pc, #176]	@ (8006f80 <TIM_Base_SetConfig+0x148>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00b      	beq.n	8006eea <TIM_Base_SetConfig+0xb2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a2b      	ldr	r2, [pc, #172]	@ (8006f84 <TIM_Base_SetConfig+0x14c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d007      	beq.n	8006eea <TIM_Base_SetConfig+0xb2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a2a      	ldr	r2, [pc, #168]	@ (8006f88 <TIM_Base_SetConfig+0x150>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d003      	beq.n	8006eea <TIM_Base_SetConfig+0xb2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a29      	ldr	r2, [pc, #164]	@ (8006f8c <TIM_Base_SetConfig+0x154>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d108      	bne.n	8006efc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	689a      	ldr	r2, [r3, #8]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a10      	ldr	r2, [pc, #64]	@ (8006f64 <TIM_Base_SetConfig+0x12c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d003      	beq.n	8006f30 <TIM_Base_SetConfig+0xf8>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a12      	ldr	r2, [pc, #72]	@ (8006f74 <TIM_Base_SetConfig+0x13c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d103      	bne.n	8006f38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	691a      	ldr	r2, [r3, #16]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d105      	bne.n	8006f56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f023 0201 	bic.w	r2, r3, #1
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	611a      	str	r2, [r3, #16]
  }
}
 8006f56:	bf00      	nop
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	40010000 	.word	0x40010000
 8006f68:	40000400 	.word	0x40000400
 8006f6c:	40000800 	.word	0x40000800
 8006f70:	40000c00 	.word	0x40000c00
 8006f74:	40010400 	.word	0x40010400
 8006f78:	40014000 	.word	0x40014000
 8006f7c:	40014400 	.word	0x40014400
 8006f80:	40014800 	.word	0x40014800
 8006f84:	40001800 	.word	0x40001800
 8006f88:	40001c00 	.word	0x40001c00
 8006f8c:	40002000 	.word	0x40002000

08006f90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	f023 0201 	bic.w	r2, r3, #1
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f023 0303 	bic.w	r3, r3, #3
 8006fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f023 0302 	bic.w	r3, r3, #2
 8006fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a20      	ldr	r2, [pc, #128]	@ (8007068 <TIM_OC1_SetConfig+0xd8>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d003      	beq.n	8006ff4 <TIM_OC1_SetConfig+0x64>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a1f      	ldr	r2, [pc, #124]	@ (800706c <TIM_OC1_SetConfig+0xdc>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d10c      	bne.n	800700e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f023 0308 	bic.w	r3, r3, #8
 8006ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	4313      	orrs	r3, r2
 8007004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f023 0304 	bic.w	r3, r3, #4
 800700c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a15      	ldr	r2, [pc, #84]	@ (8007068 <TIM_OC1_SetConfig+0xd8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d003      	beq.n	800701e <TIM_OC1_SetConfig+0x8e>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a14      	ldr	r2, [pc, #80]	@ (800706c <TIM_OC1_SetConfig+0xdc>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d111      	bne.n	8007042 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800702c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	4313      	orrs	r3, r2
 8007036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	4313      	orrs	r3, r2
 8007040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	621a      	str	r2, [r3, #32]
}
 800705c:	bf00      	nop
 800705e:	371c      	adds	r7, #28
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	40010000 	.word	0x40010000
 800706c:	40010400 	.word	0x40010400

08007070 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	f023 0210 	bic.w	r2, r3, #16
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800709e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	021b      	lsls	r3, r3, #8
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f023 0320 	bic.w	r3, r3, #32
 80070ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	011b      	lsls	r3, r3, #4
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a22      	ldr	r2, [pc, #136]	@ (8007154 <TIM_OC2_SetConfig+0xe4>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d003      	beq.n	80070d8 <TIM_OC2_SetConfig+0x68>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a21      	ldr	r2, [pc, #132]	@ (8007158 <TIM_OC2_SetConfig+0xe8>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d10d      	bne.n	80070f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	011b      	lsls	r3, r3, #4
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a17      	ldr	r2, [pc, #92]	@ (8007154 <TIM_OC2_SetConfig+0xe4>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d003      	beq.n	8007104 <TIM_OC2_SetConfig+0x94>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a16      	ldr	r2, [pc, #88]	@ (8007158 <TIM_OC2_SetConfig+0xe8>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d113      	bne.n	800712c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800710a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007112:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	4313      	orrs	r3, r2
 800711e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	4313      	orrs	r3, r2
 800712a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	621a      	str	r2, [r3, #32]
}
 8007146:	bf00      	nop
 8007148:	371c      	adds	r7, #28
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	40010000 	.word	0x40010000
 8007158:	40010400 	.word	0x40010400

0800715c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800715c:	b480      	push	{r7}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800718a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f023 0303 	bic.w	r3, r3, #3
 8007192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	4313      	orrs	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	021b      	lsls	r3, r3, #8
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a21      	ldr	r2, [pc, #132]	@ (800723c <TIM_OC3_SetConfig+0xe0>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d003      	beq.n	80071c2 <TIM_OC3_SetConfig+0x66>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a20      	ldr	r2, [pc, #128]	@ (8007240 <TIM_OC3_SetConfig+0xe4>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d10d      	bne.n	80071de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80071c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	021b      	lsls	r3, r3, #8
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80071dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a16      	ldr	r2, [pc, #88]	@ (800723c <TIM_OC3_SetConfig+0xe0>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d003      	beq.n	80071ee <TIM_OC3_SetConfig+0x92>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a15      	ldr	r2, [pc, #84]	@ (8007240 <TIM_OC3_SetConfig+0xe4>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d113      	bne.n	8007216 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80071fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	4313      	orrs	r3, r2
 8007208:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	4313      	orrs	r3, r2
 8007214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	621a      	str	r2, [r3, #32]
}
 8007230:	bf00      	nop
 8007232:	371c      	adds	r7, #28
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	40010000 	.word	0x40010000
 8007240:	40010400 	.word	0x40010400

08007244 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800727a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	021b      	lsls	r3, r3, #8
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4313      	orrs	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800728e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	031b      	lsls	r3, r3, #12
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	4313      	orrs	r3, r2
 800729a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a12      	ldr	r2, [pc, #72]	@ (80072e8 <TIM_OC4_SetConfig+0xa4>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d003      	beq.n	80072ac <TIM_OC4_SetConfig+0x68>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a11      	ldr	r2, [pc, #68]	@ (80072ec <TIM_OC4_SetConfig+0xa8>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d109      	bne.n	80072c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	019b      	lsls	r3, r3, #6
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	4313      	orrs	r3, r2
 80072be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	621a      	str	r2, [r3, #32]
}
 80072da:	bf00      	nop
 80072dc:	371c      	adds	r7, #28
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	40010000 	.word	0x40010000
 80072ec:	40010400 	.word	0x40010400

080072f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6a1b      	ldr	r3, [r3, #32]
 8007300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	f023 0201 	bic.w	r2, r3, #1
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800731a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	011b      	lsls	r3, r3, #4
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	4313      	orrs	r3, r2
 8007324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f023 030a 	bic.w	r3, r3, #10
 800732c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	4313      	orrs	r3, r2
 8007334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	621a      	str	r2, [r3, #32]
}
 8007342:	bf00      	nop
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800734e:	b480      	push	{r7}
 8007350:	b087      	sub	sp, #28
 8007352:	af00      	add	r7, sp, #0
 8007354:	60f8      	str	r0, [r7, #12]
 8007356:	60b9      	str	r1, [r7, #8]
 8007358:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	f023 0210 	bic.w	r2, r3, #16
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007378:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	031b      	lsls	r3, r3, #12
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800738a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	011b      	lsls	r3, r3, #4
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	4313      	orrs	r3, r2
 8007394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	621a      	str	r2, [r3, #32]
}
 80073a2:	bf00      	nop
 80073a4:	371c      	adds	r7, #28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b085      	sub	sp, #20
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	f043 0307 	orr.w	r3, r3, #7
 80073d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	609a      	str	r2, [r3, #8]
}
 80073d8:	bf00      	nop
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
 80073f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	021a      	lsls	r2, r3, #8
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	431a      	orrs	r2, r3
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	4313      	orrs	r3, r2
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	4313      	orrs	r3, r2
 8007410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	609a      	str	r2, [r3, #8]
}
 8007418:	bf00      	nop
 800741a:	371c      	adds	r7, #28
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007424:	b480      	push	{r7}
 8007426:	b087      	sub	sp, #28
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	f003 031f 	and.w	r3, r3, #31
 8007436:	2201      	movs	r2, #1
 8007438:	fa02 f303 	lsl.w	r3, r2, r3
 800743c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6a1a      	ldr	r2, [r3, #32]
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	43db      	mvns	r3, r3
 8007446:	401a      	ands	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6a1a      	ldr	r2, [r3, #32]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	f003 031f 	and.w	r3, r3, #31
 8007456:	6879      	ldr	r1, [r7, #4]
 8007458:	fa01 f303 	lsl.w	r3, r1, r3
 800745c:	431a      	orrs	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	621a      	str	r2, [r3, #32]
}
 8007462:	bf00      	nop
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
	...

08007470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007480:	2b01      	cmp	r3, #1
 8007482:	d101      	bne.n	8007488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007484:	2302      	movs	r3, #2
 8007486:	e05a      	b.n	800753e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2202      	movs	r2, #2
 8007494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a21      	ldr	r2, [pc, #132]	@ (800754c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d022      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074d4:	d01d      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a1d      	ldr	r2, [pc, #116]	@ (8007550 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d018      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a1b      	ldr	r2, [pc, #108]	@ (8007554 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d013      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a1a      	ldr	r2, [pc, #104]	@ (8007558 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d00e      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a18      	ldr	r2, [pc, #96]	@ (800755c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d009      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a17      	ldr	r2, [pc, #92]	@ (8007560 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d004      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a15      	ldr	r2, [pc, #84]	@ (8007564 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d10c      	bne.n	800752c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	4313      	orrs	r3, r2
 8007522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	40010000 	.word	0x40010000
 8007550:	40000400 	.word	0x40000400
 8007554:	40000800 	.word	0x40000800
 8007558:	40000c00 	.word	0x40000c00
 800755c:	40010400 	.word	0x40010400
 8007560:	40014000 	.word	0x40014000
 8007564:	40001800 	.word	0x40001800

08007568 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e042      	b.n	8007628 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d106      	bne.n	80075bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7fa fbea 	bl	8001d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2224      	movs	r2, #36	@ 0x24
 80075c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68da      	ldr	r2, [r3, #12]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 ff6d 	bl	80084b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	691a      	ldr	r2, [r3, #16]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	695a      	ldr	r2, [r3, #20]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007608:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2220      	movs	r2, #32
 8007614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2220      	movs	r2, #32
 800761c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08c      	sub	sp, #48	@ 0x30
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	4613      	mov	r3, r2
 800763c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b20      	cmp	r3, #32
 8007648:	d156      	bne.n	80076f8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <HAL_UART_Transmit_DMA+0x26>
 8007650:	88fb      	ldrh	r3, [r7, #6]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e04f      	b.n	80076fa <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	88fa      	ldrh	r2, [r7, #6]
 8007664:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	88fa      	ldrh	r2, [r7, #6]
 800766a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2221      	movs	r2, #33	@ 0x21
 8007676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767e:	4a21      	ldr	r2, [pc, #132]	@ (8007704 <HAL_UART_Transmit_DMA+0xd4>)
 8007680:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007686:	4a20      	ldr	r2, [pc, #128]	@ (8007708 <HAL_UART_Transmit_DMA+0xd8>)
 8007688:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768e:	4a1f      	ldr	r2, [pc, #124]	@ (800770c <HAL_UART_Transmit_DMA+0xdc>)
 8007690:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007696:	2200      	movs	r2, #0
 8007698:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800769a:	f107 0308 	add.w	r3, r7, #8
 800769e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80076a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a6:	6819      	ldr	r1, [r3, #0]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	3304      	adds	r3, #4
 80076ae:	461a      	mov	r2, r3
 80076b0:	88fb      	ldrh	r3, [r7, #6]
 80076b2:	f7fa fea3 	bl	80023fc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80076be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3314      	adds	r3, #20
 80076c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	e853 3f00 	ldrex	r3, [r3]
 80076ce:	617b      	str	r3, [r7, #20]
   return(result);
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3314      	adds	r3, #20
 80076de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80076e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	6a39      	ldr	r1, [r7, #32]
 80076e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076e8:	e841 2300 	strex	r3, r2, [r1]
 80076ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e5      	bne.n	80076c0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	e000      	b.n	80076fa <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80076f8:	2302      	movs	r3, #2
  }
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3730      	adds	r7, #48	@ 0x30
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	08007d41 	.word	0x08007d41
 8007708:	08007ddb 	.word	0x08007ddb
 800770c:	08007f5f 	.word	0x08007f5f

08007710 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08c      	sub	sp, #48	@ 0x30
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	4613      	mov	r3, r2
 800771c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b20      	cmp	r3, #32
 8007728:	d14a      	bne.n	80077c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007730:	88fb      	ldrh	r3, [r7, #6]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e043      	b.n	80077c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2201      	movs	r2, #1
 800773e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007746:	88fb      	ldrh	r3, [r7, #6]
 8007748:	461a      	mov	r2, r3
 800774a:	68b9      	ldr	r1, [r7, #8]
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 fc51 	bl	8007ff4 <UART_Start_Receive_DMA>
 8007752:	4603      	mov	r3, r0
 8007754:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007758:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800775c:	2b00      	cmp	r3, #0
 800775e:	d12c      	bne.n	80077ba <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007764:	2b01      	cmp	r3, #1
 8007766:	d125      	bne.n	80077b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007768:	2300      	movs	r3, #0
 800776a:	613b      	str	r3, [r7, #16]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	613b      	str	r3, [r7, #16]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	613b      	str	r3, [r7, #16]
 800777c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	330c      	adds	r3, #12
 8007784:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	e853 3f00 	ldrex	r3, [r3]
 800778c:	617b      	str	r3, [r7, #20]
   return(result);
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f043 0310 	orr.w	r3, r3, #16
 8007794:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	330c      	adds	r3, #12
 800779c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800779e:	627a      	str	r2, [r7, #36]	@ 0x24
 80077a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a2:	6a39      	ldr	r1, [r7, #32]
 80077a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077a6:	e841 2300 	strex	r3, r2, [r1]
 80077aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1e5      	bne.n	800777e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80077b2:	e002      	b.n	80077ba <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80077ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80077be:	e000      	b.n	80077c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80077c0:	2302      	movs	r3, #2
  }
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3730      	adds	r7, #48	@ 0x30
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
	...

080077cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b0ba      	sub	sp, #232	@ 0xe8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80077f8:	2300      	movs	r3, #0
 80077fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007802:	f003 030f 	and.w	r3, r3, #15
 8007806:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800780a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10f      	bne.n	8007832 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007816:	f003 0320 	and.w	r3, r3, #32
 800781a:	2b00      	cmp	r3, #0
 800781c:	d009      	beq.n	8007832 <HAL_UART_IRQHandler+0x66>
 800781e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007822:	f003 0320 	and.w	r3, r3, #32
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fd83 	bl	8008336 <UART_Receive_IT>
      return;
 8007830:	e25b      	b.n	8007cea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007836:	2b00      	cmp	r3, #0
 8007838:	f000 80de 	beq.w	80079f8 <HAL_UART_IRQHandler+0x22c>
 800783c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b00      	cmp	r3, #0
 8007846:	d106      	bne.n	8007856 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800784c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007850:	2b00      	cmp	r3, #0
 8007852:	f000 80d1 	beq.w	80079f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00b      	beq.n	800787a <HAL_UART_IRQHandler+0xae>
 8007862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800786a:	2b00      	cmp	r3, #0
 800786c:	d005      	beq.n	800787a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007872:	f043 0201 	orr.w	r2, r3, #1
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800787a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800787e:	f003 0304 	and.w	r3, r3, #4
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00b      	beq.n	800789e <HAL_UART_IRQHandler+0xd2>
 8007886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b00      	cmp	r3, #0
 8007890:	d005      	beq.n	800789e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007896:	f043 0202 	orr.w	r2, r3, #2
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800789e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00b      	beq.n	80078c2 <HAL_UART_IRQHandler+0xf6>
 80078aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d005      	beq.n	80078c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ba:	f043 0204 	orr.w	r2, r3, #4
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80078c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078c6:	f003 0308 	and.w	r3, r3, #8
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d011      	beq.n	80078f2 <HAL_UART_IRQHandler+0x126>
 80078ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078d2:	f003 0320 	and.w	r3, r3, #32
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d105      	bne.n	80078e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80078da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d005      	beq.n	80078f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ea:	f043 0208 	orr.w	r2, r3, #8
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 81f2 	beq.w	8007ce0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007900:	f003 0320 	and.w	r3, r3, #32
 8007904:	2b00      	cmp	r3, #0
 8007906:	d008      	beq.n	800791a <HAL_UART_IRQHandler+0x14e>
 8007908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800790c:	f003 0320 	and.w	r3, r3, #32
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fd0e 	bl	8008336 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007924:	2b40      	cmp	r3, #64	@ 0x40
 8007926:	bf0c      	ite	eq
 8007928:	2301      	moveq	r3, #1
 800792a:	2300      	movne	r3, #0
 800792c:	b2db      	uxtb	r3, r3
 800792e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007936:	f003 0308 	and.w	r3, r3, #8
 800793a:	2b00      	cmp	r3, #0
 800793c:	d103      	bne.n	8007946 <HAL_UART_IRQHandler+0x17a>
 800793e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007942:	2b00      	cmp	r3, #0
 8007944:	d04f      	beq.n	80079e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fc16 	bl	8008178 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007956:	2b40      	cmp	r3, #64	@ 0x40
 8007958:	d141      	bne.n	80079de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3314      	adds	r3, #20
 8007960:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007964:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007968:	e853 3f00 	ldrex	r3, [r3]
 800796c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007970:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007978:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3314      	adds	r3, #20
 8007982:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007986:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800798a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007992:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007996:	e841 2300 	strex	r3, r2, [r1]
 800799a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800799e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1d9      	bne.n	800795a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d013      	beq.n	80079d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079b2:	4a7e      	ldr	r2, [pc, #504]	@ (8007bac <HAL_UART_IRQHandler+0x3e0>)
 80079b4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fa fde6 	bl	800258c <HAL_DMA_Abort_IT>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d016      	beq.n	80079f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80079d0:	4610      	mov	r0, r2
 80079d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d4:	e00e      	b.n	80079f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f9a8 	bl	8007d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079dc:	e00a      	b.n	80079f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f9a4 	bl	8007d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e4:	e006      	b.n	80079f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f9a0 	bl	8007d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80079f2:	e175      	b.n	8007ce0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f4:	bf00      	nop
    return;
 80079f6:	e173      	b.n	8007ce0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	f040 814f 	bne.w	8007ca0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a06:	f003 0310 	and.w	r3, r3, #16
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 8148 	beq.w	8007ca0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a14:	f003 0310 	and.w	r3, r3, #16
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 8141 	beq.w	8007ca0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a1e:	2300      	movs	r3, #0
 8007a20:	60bb      	str	r3, [r7, #8]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	60bb      	str	r3, [r7, #8]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	60bb      	str	r3, [r7, #8]
 8007a32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a3e:	2b40      	cmp	r3, #64	@ 0x40
 8007a40:	f040 80b6 	bne.w	8007bb0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 8145 	beq.w	8007ce4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a62:	429a      	cmp	r2, r3
 8007a64:	f080 813e 	bcs.w	8007ce4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a6e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a74:	69db      	ldr	r3, [r3, #28]
 8007a76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a7a:	f000 8088 	beq.w	8007b8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	330c      	adds	r3, #12
 8007a84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a8c:	e853 3f00 	ldrex	r3, [r3]
 8007a90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	330c      	adds	r3, #12
 8007aa6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007aaa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007aae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007ab6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1d9      	bne.n	8007a7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3314      	adds	r3, #20
 8007ad0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007ada:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007adc:	f023 0301 	bic.w	r3, r3, #1
 8007ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3314      	adds	r3, #20
 8007aea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007aee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007af2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007af6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007afa:	e841 2300 	strex	r3, r2, [r1]
 8007afe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1e1      	bne.n	8007aca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	3314      	adds	r3, #20
 8007b0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3314      	adds	r3, #20
 8007b26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e3      	bne.n	8007b06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	330c      	adds	r3, #12
 8007b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b56:	e853 3f00 	ldrex	r3, [r3]
 8007b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b5e:	f023 0310 	bic.w	r3, r3, #16
 8007b62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	330c      	adds	r3, #12
 8007b6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007b70:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007b72:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b78:	e841 2300 	strex	r3, r2, [r1]
 8007b7c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e3      	bne.n	8007b4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7fa fc8f 	bl	80024ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2202      	movs	r2, #2
 8007b92:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7f9 fa73 	bl	8001090 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007baa:	e09b      	b.n	8007ce4 <HAL_UART_IRQHandler+0x518>
 8007bac:	0800823f 	.word	0x0800823f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 808e 	beq.w	8007ce8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007bcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 8089 	beq.w	8007ce8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	330c      	adds	r3, #12
 8007bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be0:	e853 3f00 	ldrex	r3, [r3]
 8007be4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007be8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	330c      	adds	r3, #12
 8007bf6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007bfa:	647a      	str	r2, [r7, #68]	@ 0x44
 8007bfc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e3      	bne.n	8007bd6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3314      	adds	r3, #20
 8007c14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c18:	e853 3f00 	ldrex	r3, [r3]
 8007c1c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	f023 0301 	bic.w	r3, r3, #1
 8007c24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3314      	adds	r3, #20
 8007c2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007c32:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e3      	bne.n	8007c0e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	330c      	adds	r3, #12
 8007c5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	e853 3f00 	ldrex	r3, [r3]
 8007c62:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f023 0310 	bic.w	r3, r3, #16
 8007c6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	330c      	adds	r3, #12
 8007c74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007c78:	61fa      	str	r2, [r7, #28]
 8007c7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	69b9      	ldr	r1, [r7, #24]
 8007c7e:	69fa      	ldr	r2, [r7, #28]
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	617b      	str	r3, [r7, #20]
   return(result);
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e3      	bne.n	8007c54 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7f9 f9f9 	bl	8001090 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c9e:	e023      	b.n	8007ce8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d009      	beq.n	8007cc0 <HAL_UART_IRQHandler+0x4f4>
 8007cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 fad4 	bl	8008266 <UART_Transmit_IT>
    return;
 8007cbe:	e014      	b.n	8007cea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00e      	beq.n	8007cea <HAL_UART_IRQHandler+0x51e>
 8007ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d008      	beq.n	8007cea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fb14 	bl	8008306 <UART_EndTransmit_IT>
    return;
 8007cde:	e004      	b.n	8007cea <HAL_UART_IRQHandler+0x51e>
    return;
 8007ce0:	bf00      	nop
 8007ce2:	e002      	b.n	8007cea <HAL_UART_IRQHandler+0x51e>
      return;
 8007ce4:	bf00      	nop
 8007ce6:	e000      	b.n	8007cea <HAL_UART_IRQHandler+0x51e>
      return;
 8007ce8:	bf00      	nop
  }
}
 8007cea:	37e8      	adds	r7, #232	@ 0xe8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007d0c:	bf00      	nop
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b090      	sub	sp, #64	@ 0x40
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d137      	bne.n	8007dcc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d5e:	2200      	movs	r2, #0
 8007d60:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	3314      	adds	r3, #20
 8007d68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6c:	e853 3f00 	ldrex	r3, [r3]
 8007d70:	623b      	str	r3, [r7, #32]
   return(result);
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3314      	adds	r3, #20
 8007d80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d82:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1e5      	bne.n	8007d62 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	330c      	adds	r3, #12
 8007d9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	330c      	adds	r3, #12
 8007db4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007db6:	61fa      	str	r2, [r7, #28]
 8007db8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dba:	69b9      	ldr	r1, [r7, #24]
 8007dbc:	69fa      	ldr	r2, [r7, #28]
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	617b      	str	r3, [r7, #20]
   return(result);
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e5      	bne.n	8007d96 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007dca:	e002      	b.n	8007dd2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007dcc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007dce:	f7f9 f987 	bl	80010e0 <HAL_UART_TxCpltCallback>
}
 8007dd2:	bf00      	nop
 8007dd4:	3740      	adds	r7, #64	@ 0x40
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f7ff ff81 	bl	8007cf0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dee:	bf00      	nop
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b09c      	sub	sp, #112	@ 0x70
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e02:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d172      	bne.n	8007ef8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007e12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e14:	2200      	movs	r2, #0
 8007e16:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	330c      	adds	r3, #12
 8007e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e22:	e853 3f00 	ldrex	r3, [r3]
 8007e26:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	330c      	adds	r3, #12
 8007e36:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007e38:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007e3a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e5      	bne.n	8007e18 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3314      	adds	r3, #20
 8007e52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e56:	e853 3f00 	ldrex	r3, [r3]
 8007e5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e5e:	f023 0301 	bic.w	r3, r3, #1
 8007e62:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	3314      	adds	r3, #20
 8007e6a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007e6c:	647a      	str	r2, [r7, #68]	@ 0x44
 8007e6e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e74:	e841 2300 	strex	r3, r2, [r1]
 8007e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1e5      	bne.n	8007e4c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	3314      	adds	r3, #20
 8007e86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8a:	e853 3f00 	ldrex	r3, [r3]
 8007e8e:	623b      	str	r3, [r7, #32]
   return(result);
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e96:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3314      	adds	r3, #20
 8007e9e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007ea0:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ea8:	e841 2300 	strex	r3, r2, [r1]
 8007eac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1e5      	bne.n	8007e80 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007eb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ebc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d119      	bne.n	8007ef8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ec4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	330c      	adds	r3, #12
 8007eca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	e853 3f00 	ldrex	r3, [r3]
 8007ed2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f023 0310 	bic.w	r3, r3, #16
 8007eda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007edc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	330c      	adds	r3, #12
 8007ee2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007ee4:	61fa      	str	r2, [r7, #28]
 8007ee6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee8:	69b9      	ldr	r1, [r7, #24]
 8007eea:	69fa      	ldr	r2, [r7, #28]
 8007eec:	e841 2300 	strex	r3, r2, [r1]
 8007ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1e5      	bne.n	8007ec4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ef8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007efa:	2200      	movs	r2, #0
 8007efc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d106      	bne.n	8007f14 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007f0e:	f7f9 f8bf 	bl	8001090 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f12:	e002      	b.n	8007f1a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007f14:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007f16:	f7ff fef5 	bl	8007d04 <HAL_UART_RxCpltCallback>
}
 8007f1a:	bf00      	nop
 8007f1c:	3770      	adds	r7, #112	@ 0x70
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b084      	sub	sp, #16
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2201      	movs	r2, #1
 8007f34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d108      	bne.n	8007f50 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007f42:	085b      	lsrs	r3, r3, #1
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	4619      	mov	r1, r3
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f7f9 f8a1 	bl	8001090 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f4e:	e002      	b.n	8007f56 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f7ff fee1 	bl	8007d18 <HAL_UART_RxHalfCpltCallback>
}
 8007f56:	bf00      	nop
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007f66:	2300      	movs	r3, #0
 8007f68:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f6e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f7a:	2b80      	cmp	r3, #128	@ 0x80
 8007f7c:	bf0c      	ite	eq
 8007f7e:	2301      	moveq	r3, #1
 8007f80:	2300      	movne	r3, #0
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b21      	cmp	r3, #33	@ 0x21
 8007f90:	d108      	bne.n	8007fa4 <UART_DMAError+0x46>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d005      	beq.n	8007fa4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007f9e:	68b8      	ldr	r0, [r7, #8]
 8007fa0:	f000 f8c2 	bl	8008128 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fae:	2b40      	cmp	r3, #64	@ 0x40
 8007fb0:	bf0c      	ite	eq
 8007fb2:	2301      	moveq	r3, #1
 8007fb4:	2300      	movne	r3, #0
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b22      	cmp	r3, #34	@ 0x22
 8007fc4:	d108      	bne.n	8007fd8 <UART_DMAError+0x7a>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d005      	beq.n	8007fd8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007fd2:	68b8      	ldr	r0, [r7, #8]
 8007fd4:	f000 f8d0 	bl	8008178 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fdc:	f043 0210 	orr.w	r2, r3, #16
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fe4:	68b8      	ldr	r0, [r7, #8]
 8007fe6:	f7ff fea1 	bl	8007d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fea:	bf00      	nop
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
	...

08007ff4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b098      	sub	sp, #96	@ 0x60
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	4613      	mov	r3, r2
 8008000:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	88fa      	ldrh	r2, [r7, #6]
 800800c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2222      	movs	r2, #34	@ 0x22
 8008018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008020:	4a3e      	ldr	r2, [pc, #248]	@ (800811c <UART_Start_Receive_DMA+0x128>)
 8008022:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008028:	4a3d      	ldr	r2, [pc, #244]	@ (8008120 <UART_Start_Receive_DMA+0x12c>)
 800802a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008030:	4a3c      	ldr	r2, [pc, #240]	@ (8008124 <UART_Start_Receive_DMA+0x130>)
 8008032:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008038:	2200      	movs	r2, #0
 800803a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800803c:	f107 0308 	add.w	r3, r7, #8
 8008040:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3304      	adds	r3, #4
 800804c:	4619      	mov	r1, r3
 800804e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	88fb      	ldrh	r3, [r7, #6]
 8008054:	f7fa f9d2 	bl	80023fc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008058:	2300      	movs	r3, #0
 800805a:	613b      	str	r3, [r7, #16]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	613b      	str	r3, [r7, #16]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	613b      	str	r3, [r7, #16]
 800806c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d019      	beq.n	80080aa <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	330c      	adds	r3, #12
 800807c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008080:	e853 3f00 	ldrex	r3, [r3]
 8008084:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800808c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	330c      	adds	r3, #12
 8008094:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008096:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008098:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800809c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800809e:	e841 2300 	strex	r3, r2, [r1]
 80080a2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80080a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1e5      	bne.n	8008076 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3314      	adds	r3, #20
 80080b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b4:	e853 3f00 	ldrex	r3, [r3]
 80080b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080bc:	f043 0301 	orr.w	r3, r3, #1
 80080c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3314      	adds	r3, #20
 80080c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80080ca:	63ba      	str	r2, [r7, #56]	@ 0x38
 80080cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80080d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080d2:	e841 2300 	strex	r3, r2, [r1]
 80080d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1e5      	bne.n	80080aa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3314      	adds	r3, #20
 80080e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	e853 3f00 	ldrex	r3, [r3]
 80080ec:	617b      	str	r3, [r7, #20]
   return(result);
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3314      	adds	r3, #20
 80080fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80080fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8008100:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008102:	6a39      	ldr	r1, [r7, #32]
 8008104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008106:	e841 2300 	strex	r3, r2, [r1]
 800810a:	61fb      	str	r3, [r7, #28]
   return(result);
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1e5      	bne.n	80080de <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3760      	adds	r7, #96	@ 0x60
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	08007df7 	.word	0x08007df7
 8008120:	08007f23 	.word	0x08007f23
 8008124:	08007f5f 	.word	0x08007f5f

08008128 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008128:	b480      	push	{r7}
 800812a:	b089      	sub	sp, #36	@ 0x24
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	330c      	adds	r3, #12
 8008136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	e853 3f00 	ldrex	r3, [r3]
 800813e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008146:	61fb      	str	r3, [r7, #28]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	330c      	adds	r3, #12
 800814e:	69fa      	ldr	r2, [r7, #28]
 8008150:	61ba      	str	r2, [r7, #24]
 8008152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008154:	6979      	ldr	r1, [r7, #20]
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	e841 2300 	strex	r3, r2, [r1]
 800815c:	613b      	str	r3, [r7, #16]
   return(result);
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1e5      	bne.n	8008130 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2220      	movs	r2, #32
 8008168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800816c:	bf00      	nop
 800816e:	3724      	adds	r7, #36	@ 0x24
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008178:	b480      	push	{r7}
 800817a:	b095      	sub	sp, #84	@ 0x54
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	330c      	adds	r3, #12
 8008186:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800818a:	e853 3f00 	ldrex	r3, [r3]
 800818e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008192:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	330c      	adds	r3, #12
 800819e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80081a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80081a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80081a8:	e841 2300 	strex	r3, r2, [r1]
 80081ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80081ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1e5      	bne.n	8008180 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3314      	adds	r3, #20
 80081ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081bc:	6a3b      	ldr	r3, [r7, #32]
 80081be:	e853 3f00 	ldrex	r3, [r3]
 80081c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	f023 0301 	bic.w	r3, r3, #1
 80081ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	3314      	adds	r3, #20
 80081d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081dc:	e841 2300 	strex	r3, r2, [r1]
 80081e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1e5      	bne.n	80081b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d119      	bne.n	8008224 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	330c      	adds	r3, #12
 80081f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	e853 3f00 	ldrex	r3, [r3]
 80081fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	f023 0310 	bic.w	r3, r3, #16
 8008206:	647b      	str	r3, [r7, #68]	@ 0x44
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	330c      	adds	r3, #12
 800820e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008210:	61ba      	str	r2, [r7, #24]
 8008212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008214:	6979      	ldr	r1, [r7, #20]
 8008216:	69ba      	ldr	r2, [r7, #24]
 8008218:	e841 2300 	strex	r3, r2, [r1]
 800821c:	613b      	str	r3, [r7, #16]
   return(result);
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1e5      	bne.n	80081f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2220      	movs	r2, #32
 8008228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008232:	bf00      	nop
 8008234:	3754      	adds	r7, #84	@ 0x54
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b084      	sub	sp, #16
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800824a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f7ff fd67 	bl	8007d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800825e:	bf00      	nop
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008266:	b480      	push	{r7}
 8008268:	b085      	sub	sp, #20
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b21      	cmp	r3, #33	@ 0x21
 8008278:	d13e      	bne.n	80082f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008282:	d114      	bne.n	80082ae <UART_Transmit_IT+0x48>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d110      	bne.n	80082ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a1b      	ldr	r3, [r3, #32]
 8008290:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	881b      	ldrh	r3, [r3, #0]
 8008296:	461a      	mov	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	1c9a      	adds	r2, r3, #2
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	621a      	str	r2, [r3, #32]
 80082ac:	e008      	b.n	80082c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a1b      	ldr	r3, [r3, #32]
 80082b2:	1c59      	adds	r1, r3, #1
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	6211      	str	r1, [r2, #32]
 80082b8:	781a      	ldrb	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	3b01      	subs	r3, #1
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	4619      	mov	r1, r3
 80082ce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10f      	bne.n	80082f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68da      	ldr	r2, [r3, #12]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80082e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68da      	ldr	r2, [r3, #12]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	e000      	b.n	80082fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082f8:	2302      	movs	r3, #2
  }
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b082      	sub	sp, #8
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68da      	ldr	r2, [r3, #12]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800831c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2220      	movs	r2, #32
 8008322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7f8 feda 	bl	80010e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b08c      	sub	sp, #48	@ 0x30
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b22      	cmp	r3, #34	@ 0x22
 8008348:	f040 80ae 	bne.w	80084a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008354:	d117      	bne.n	8008386 <UART_Receive_IT+0x50>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d113      	bne.n	8008386 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800835e:	2300      	movs	r3, #0
 8008360:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008366:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	b29b      	uxth	r3, r3
 8008370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008374:	b29a      	uxth	r2, r3
 8008376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008378:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800837e:	1c9a      	adds	r2, r3, #2
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	629a      	str	r2, [r3, #40]	@ 0x28
 8008384:	e026      	b.n	80083d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800838a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800838c:	2300      	movs	r3, #0
 800838e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008398:	d007      	beq.n	80083aa <UART_Receive_IT+0x74>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10a      	bne.n	80083b8 <UART_Receive_IT+0x82>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d106      	bne.n	80083b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b4:	701a      	strb	r2, [r3, #0]
 80083b6:	e008      	b.n	80083ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083c4:	b2da      	uxtb	r2, r3
 80083c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80083d8:	b29b      	uxth	r3, r3
 80083da:	3b01      	subs	r3, #1
 80083dc:	b29b      	uxth	r3, r3
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	4619      	mov	r1, r3
 80083e2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d15d      	bne.n	80084a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68da      	ldr	r2, [r3, #12]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f022 0220 	bic.w	r2, r2, #32
 80083f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68da      	ldr	r2, [r3, #12]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008406:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	695a      	ldr	r2, [r3, #20]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 0201 	bic.w	r2, r2, #1
 8008416:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2220      	movs	r2, #32
 800841c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800842a:	2b01      	cmp	r3, #1
 800842c:	d135      	bne.n	800849a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	330c      	adds	r3, #12
 800843a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	e853 3f00 	ldrex	r3, [r3]
 8008442:	613b      	str	r3, [r7, #16]
   return(result);
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	f023 0310 	bic.w	r3, r3, #16
 800844a:	627b      	str	r3, [r7, #36]	@ 0x24
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	330c      	adds	r3, #12
 8008452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008454:	623a      	str	r2, [r7, #32]
 8008456:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008458:	69f9      	ldr	r1, [r7, #28]
 800845a:	6a3a      	ldr	r2, [r7, #32]
 800845c:	e841 2300 	strex	r3, r2, [r1]
 8008460:	61bb      	str	r3, [r7, #24]
   return(result);
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1e5      	bne.n	8008434 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0310 	and.w	r3, r3, #16
 8008472:	2b10      	cmp	r3, #16
 8008474:	d10a      	bne.n	800848c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008476:	2300      	movs	r3, #0
 8008478:	60fb      	str	r3, [r7, #12]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	60fb      	str	r3, [r7, #12]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	60fb      	str	r3, [r7, #12]
 800848a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7f8 fdfc 	bl	8001090 <HAL_UARTEx_RxEventCallback>
 8008498:	e002      	b.n	80084a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f7ff fc32 	bl	8007d04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	e002      	b.n	80084aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	e000      	b.n	80084aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80084a8:	2302      	movs	r3, #2
  }
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3730      	adds	r7, #48	@ 0x30
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
	...

080084b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084b8:	b0c0      	sub	sp, #256	@ 0x100
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80084cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084d0:	68d9      	ldr	r1, [r3, #12]
 80084d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	ea40 0301 	orr.w	r3, r0, r1
 80084dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084e2:	689a      	ldr	r2, [r3, #8]
 80084e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	431a      	orrs	r2, r3
 80084ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	431a      	orrs	r2, r3
 80084f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800850c:	f021 010c 	bic.w	r1, r1, #12
 8008510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800851a:	430b      	orrs	r3, r1
 800851c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800851e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800852a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800852e:	6999      	ldr	r1, [r3, #24]
 8008530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	ea40 0301 	orr.w	r3, r0, r1
 800853a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800853c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	4b8f      	ldr	r3, [pc, #572]	@ (8008780 <UART_SetConfig+0x2cc>)
 8008544:	429a      	cmp	r2, r3
 8008546:	d005      	beq.n	8008554 <UART_SetConfig+0xa0>
 8008548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	4b8d      	ldr	r3, [pc, #564]	@ (8008784 <UART_SetConfig+0x2d0>)
 8008550:	429a      	cmp	r2, r3
 8008552:	d104      	bne.n	800855e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008554:	f7fd ffe2 	bl	800651c <HAL_RCC_GetPCLK2Freq>
 8008558:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800855c:	e003      	b.n	8008566 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800855e:	f7fd ffc9 	bl	80064f4 <HAL_RCC_GetPCLK1Freq>
 8008562:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800856a:	69db      	ldr	r3, [r3, #28]
 800856c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008570:	f040 810c 	bne.w	800878c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008578:	2200      	movs	r2, #0
 800857a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800857e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008582:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008586:	4622      	mov	r2, r4
 8008588:	462b      	mov	r3, r5
 800858a:	1891      	adds	r1, r2, r2
 800858c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800858e:	415b      	adcs	r3, r3
 8008590:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008592:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008596:	4621      	mov	r1, r4
 8008598:	eb12 0801 	adds.w	r8, r2, r1
 800859c:	4629      	mov	r1, r5
 800859e:	eb43 0901 	adc.w	r9, r3, r1
 80085a2:	f04f 0200 	mov.w	r2, #0
 80085a6:	f04f 0300 	mov.w	r3, #0
 80085aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80085ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80085b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80085b6:	4690      	mov	r8, r2
 80085b8:	4699      	mov	r9, r3
 80085ba:	4623      	mov	r3, r4
 80085bc:	eb18 0303 	adds.w	r3, r8, r3
 80085c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80085c4:	462b      	mov	r3, r5
 80085c6:	eb49 0303 	adc.w	r3, r9, r3
 80085ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80085ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80085da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80085de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80085e2:	460b      	mov	r3, r1
 80085e4:	18db      	adds	r3, r3, r3
 80085e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80085e8:	4613      	mov	r3, r2
 80085ea:	eb42 0303 	adc.w	r3, r2, r3
 80085ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80085f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80085f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80085f8:	f7f7 fe4a 	bl	8000290 <__aeabi_uldivmod>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	4b61      	ldr	r3, [pc, #388]	@ (8008788 <UART_SetConfig+0x2d4>)
 8008602:	fba3 2302 	umull	r2, r3, r3, r2
 8008606:	095b      	lsrs	r3, r3, #5
 8008608:	011c      	lsls	r4, r3, #4
 800860a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800860e:	2200      	movs	r2, #0
 8008610:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008614:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008618:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800861c:	4642      	mov	r2, r8
 800861e:	464b      	mov	r3, r9
 8008620:	1891      	adds	r1, r2, r2
 8008622:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008624:	415b      	adcs	r3, r3
 8008626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008628:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800862c:	4641      	mov	r1, r8
 800862e:	eb12 0a01 	adds.w	sl, r2, r1
 8008632:	4649      	mov	r1, r9
 8008634:	eb43 0b01 	adc.w	fp, r3, r1
 8008638:	f04f 0200 	mov.w	r2, #0
 800863c:	f04f 0300 	mov.w	r3, #0
 8008640:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008644:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008648:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800864c:	4692      	mov	sl, r2
 800864e:	469b      	mov	fp, r3
 8008650:	4643      	mov	r3, r8
 8008652:	eb1a 0303 	adds.w	r3, sl, r3
 8008656:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800865a:	464b      	mov	r3, r9
 800865c:	eb4b 0303 	adc.w	r3, fp, r3
 8008660:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008670:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008674:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008678:	460b      	mov	r3, r1
 800867a:	18db      	adds	r3, r3, r3
 800867c:	643b      	str	r3, [r7, #64]	@ 0x40
 800867e:	4613      	mov	r3, r2
 8008680:	eb42 0303 	adc.w	r3, r2, r3
 8008684:	647b      	str	r3, [r7, #68]	@ 0x44
 8008686:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800868a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800868e:	f7f7 fdff 	bl	8000290 <__aeabi_uldivmod>
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	4611      	mov	r1, r2
 8008698:	4b3b      	ldr	r3, [pc, #236]	@ (8008788 <UART_SetConfig+0x2d4>)
 800869a:	fba3 2301 	umull	r2, r3, r3, r1
 800869e:	095b      	lsrs	r3, r3, #5
 80086a0:	2264      	movs	r2, #100	@ 0x64
 80086a2:	fb02 f303 	mul.w	r3, r2, r3
 80086a6:	1acb      	subs	r3, r1, r3
 80086a8:	00db      	lsls	r3, r3, #3
 80086aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80086ae:	4b36      	ldr	r3, [pc, #216]	@ (8008788 <UART_SetConfig+0x2d4>)
 80086b0:	fba3 2302 	umull	r2, r3, r3, r2
 80086b4:	095b      	lsrs	r3, r3, #5
 80086b6:	005b      	lsls	r3, r3, #1
 80086b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80086bc:	441c      	add	r4, r3
 80086be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086c2:	2200      	movs	r2, #0
 80086c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80086c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80086cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80086d0:	4642      	mov	r2, r8
 80086d2:	464b      	mov	r3, r9
 80086d4:	1891      	adds	r1, r2, r2
 80086d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80086d8:	415b      	adcs	r3, r3
 80086da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80086e0:	4641      	mov	r1, r8
 80086e2:	1851      	adds	r1, r2, r1
 80086e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80086e6:	4649      	mov	r1, r9
 80086e8:	414b      	adcs	r3, r1
 80086ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ec:	f04f 0200 	mov.w	r2, #0
 80086f0:	f04f 0300 	mov.w	r3, #0
 80086f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80086f8:	4659      	mov	r1, fp
 80086fa:	00cb      	lsls	r3, r1, #3
 80086fc:	4651      	mov	r1, sl
 80086fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008702:	4651      	mov	r1, sl
 8008704:	00ca      	lsls	r2, r1, #3
 8008706:	4610      	mov	r0, r2
 8008708:	4619      	mov	r1, r3
 800870a:	4603      	mov	r3, r0
 800870c:	4642      	mov	r2, r8
 800870e:	189b      	adds	r3, r3, r2
 8008710:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008714:	464b      	mov	r3, r9
 8008716:	460a      	mov	r2, r1
 8008718:	eb42 0303 	adc.w	r3, r2, r3
 800871c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800872c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008730:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008734:	460b      	mov	r3, r1
 8008736:	18db      	adds	r3, r3, r3
 8008738:	62bb      	str	r3, [r7, #40]	@ 0x28
 800873a:	4613      	mov	r3, r2
 800873c:	eb42 0303 	adc.w	r3, r2, r3
 8008740:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008742:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008746:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800874a:	f7f7 fda1 	bl	8000290 <__aeabi_uldivmod>
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	4b0d      	ldr	r3, [pc, #52]	@ (8008788 <UART_SetConfig+0x2d4>)
 8008754:	fba3 1302 	umull	r1, r3, r3, r2
 8008758:	095b      	lsrs	r3, r3, #5
 800875a:	2164      	movs	r1, #100	@ 0x64
 800875c:	fb01 f303 	mul.w	r3, r1, r3
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	00db      	lsls	r3, r3, #3
 8008764:	3332      	adds	r3, #50	@ 0x32
 8008766:	4a08      	ldr	r2, [pc, #32]	@ (8008788 <UART_SetConfig+0x2d4>)
 8008768:	fba2 2303 	umull	r2, r3, r2, r3
 800876c:	095b      	lsrs	r3, r3, #5
 800876e:	f003 0207 	and.w	r2, r3, #7
 8008772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4422      	add	r2, r4
 800877a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800877c:	e106      	b.n	800898c <UART_SetConfig+0x4d8>
 800877e:	bf00      	nop
 8008780:	40011000 	.word	0x40011000
 8008784:	40011400 	.word	0x40011400
 8008788:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800878c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008790:	2200      	movs	r2, #0
 8008792:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008796:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800879a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800879e:	4642      	mov	r2, r8
 80087a0:	464b      	mov	r3, r9
 80087a2:	1891      	adds	r1, r2, r2
 80087a4:	6239      	str	r1, [r7, #32]
 80087a6:	415b      	adcs	r3, r3
 80087a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80087aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80087ae:	4641      	mov	r1, r8
 80087b0:	1854      	adds	r4, r2, r1
 80087b2:	4649      	mov	r1, r9
 80087b4:	eb43 0501 	adc.w	r5, r3, r1
 80087b8:	f04f 0200 	mov.w	r2, #0
 80087bc:	f04f 0300 	mov.w	r3, #0
 80087c0:	00eb      	lsls	r3, r5, #3
 80087c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087c6:	00e2      	lsls	r2, r4, #3
 80087c8:	4614      	mov	r4, r2
 80087ca:	461d      	mov	r5, r3
 80087cc:	4643      	mov	r3, r8
 80087ce:	18e3      	adds	r3, r4, r3
 80087d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80087d4:	464b      	mov	r3, r9
 80087d6:	eb45 0303 	adc.w	r3, r5, r3
 80087da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80087de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80087ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80087ee:	f04f 0200 	mov.w	r2, #0
 80087f2:	f04f 0300 	mov.w	r3, #0
 80087f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80087fa:	4629      	mov	r1, r5
 80087fc:	008b      	lsls	r3, r1, #2
 80087fe:	4621      	mov	r1, r4
 8008800:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008804:	4621      	mov	r1, r4
 8008806:	008a      	lsls	r2, r1, #2
 8008808:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800880c:	f7f7 fd40 	bl	8000290 <__aeabi_uldivmod>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4b60      	ldr	r3, [pc, #384]	@ (8008998 <UART_SetConfig+0x4e4>)
 8008816:	fba3 2302 	umull	r2, r3, r3, r2
 800881a:	095b      	lsrs	r3, r3, #5
 800881c:	011c      	lsls	r4, r3, #4
 800881e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008822:	2200      	movs	r2, #0
 8008824:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008828:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800882c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008830:	4642      	mov	r2, r8
 8008832:	464b      	mov	r3, r9
 8008834:	1891      	adds	r1, r2, r2
 8008836:	61b9      	str	r1, [r7, #24]
 8008838:	415b      	adcs	r3, r3
 800883a:	61fb      	str	r3, [r7, #28]
 800883c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008840:	4641      	mov	r1, r8
 8008842:	1851      	adds	r1, r2, r1
 8008844:	6139      	str	r1, [r7, #16]
 8008846:	4649      	mov	r1, r9
 8008848:	414b      	adcs	r3, r1
 800884a:	617b      	str	r3, [r7, #20]
 800884c:	f04f 0200 	mov.w	r2, #0
 8008850:	f04f 0300 	mov.w	r3, #0
 8008854:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008858:	4659      	mov	r1, fp
 800885a:	00cb      	lsls	r3, r1, #3
 800885c:	4651      	mov	r1, sl
 800885e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008862:	4651      	mov	r1, sl
 8008864:	00ca      	lsls	r2, r1, #3
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	4603      	mov	r3, r0
 800886c:	4642      	mov	r2, r8
 800886e:	189b      	adds	r3, r3, r2
 8008870:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008874:	464b      	mov	r3, r9
 8008876:	460a      	mov	r2, r1
 8008878:	eb42 0303 	adc.w	r3, r2, r3
 800887c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	67bb      	str	r3, [r7, #120]	@ 0x78
 800888a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800888c:	f04f 0200 	mov.w	r2, #0
 8008890:	f04f 0300 	mov.w	r3, #0
 8008894:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008898:	4649      	mov	r1, r9
 800889a:	008b      	lsls	r3, r1, #2
 800889c:	4641      	mov	r1, r8
 800889e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088a2:	4641      	mov	r1, r8
 80088a4:	008a      	lsls	r2, r1, #2
 80088a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80088aa:	f7f7 fcf1 	bl	8000290 <__aeabi_uldivmod>
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	4611      	mov	r1, r2
 80088b4:	4b38      	ldr	r3, [pc, #224]	@ (8008998 <UART_SetConfig+0x4e4>)
 80088b6:	fba3 2301 	umull	r2, r3, r3, r1
 80088ba:	095b      	lsrs	r3, r3, #5
 80088bc:	2264      	movs	r2, #100	@ 0x64
 80088be:	fb02 f303 	mul.w	r3, r2, r3
 80088c2:	1acb      	subs	r3, r1, r3
 80088c4:	011b      	lsls	r3, r3, #4
 80088c6:	3332      	adds	r3, #50	@ 0x32
 80088c8:	4a33      	ldr	r2, [pc, #204]	@ (8008998 <UART_SetConfig+0x4e4>)
 80088ca:	fba2 2303 	umull	r2, r3, r2, r3
 80088ce:	095b      	lsrs	r3, r3, #5
 80088d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80088d4:	441c      	add	r4, r3
 80088d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088da:	2200      	movs	r2, #0
 80088dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80088de:	677a      	str	r2, [r7, #116]	@ 0x74
 80088e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80088e4:	4642      	mov	r2, r8
 80088e6:	464b      	mov	r3, r9
 80088e8:	1891      	adds	r1, r2, r2
 80088ea:	60b9      	str	r1, [r7, #8]
 80088ec:	415b      	adcs	r3, r3
 80088ee:	60fb      	str	r3, [r7, #12]
 80088f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088f4:	4641      	mov	r1, r8
 80088f6:	1851      	adds	r1, r2, r1
 80088f8:	6039      	str	r1, [r7, #0]
 80088fa:	4649      	mov	r1, r9
 80088fc:	414b      	adcs	r3, r1
 80088fe:	607b      	str	r3, [r7, #4]
 8008900:	f04f 0200 	mov.w	r2, #0
 8008904:	f04f 0300 	mov.w	r3, #0
 8008908:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800890c:	4659      	mov	r1, fp
 800890e:	00cb      	lsls	r3, r1, #3
 8008910:	4651      	mov	r1, sl
 8008912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008916:	4651      	mov	r1, sl
 8008918:	00ca      	lsls	r2, r1, #3
 800891a:	4610      	mov	r0, r2
 800891c:	4619      	mov	r1, r3
 800891e:	4603      	mov	r3, r0
 8008920:	4642      	mov	r2, r8
 8008922:	189b      	adds	r3, r3, r2
 8008924:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008926:	464b      	mov	r3, r9
 8008928:	460a      	mov	r2, r1
 800892a:	eb42 0303 	adc.w	r3, r2, r3
 800892e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	663b      	str	r3, [r7, #96]	@ 0x60
 800893a:	667a      	str	r2, [r7, #100]	@ 0x64
 800893c:	f04f 0200 	mov.w	r2, #0
 8008940:	f04f 0300 	mov.w	r3, #0
 8008944:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008948:	4649      	mov	r1, r9
 800894a:	008b      	lsls	r3, r1, #2
 800894c:	4641      	mov	r1, r8
 800894e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008952:	4641      	mov	r1, r8
 8008954:	008a      	lsls	r2, r1, #2
 8008956:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800895a:	f7f7 fc99 	bl	8000290 <__aeabi_uldivmod>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	4b0d      	ldr	r3, [pc, #52]	@ (8008998 <UART_SetConfig+0x4e4>)
 8008964:	fba3 1302 	umull	r1, r3, r3, r2
 8008968:	095b      	lsrs	r3, r3, #5
 800896a:	2164      	movs	r1, #100	@ 0x64
 800896c:	fb01 f303 	mul.w	r3, r1, r3
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	011b      	lsls	r3, r3, #4
 8008974:	3332      	adds	r3, #50	@ 0x32
 8008976:	4a08      	ldr	r2, [pc, #32]	@ (8008998 <UART_SetConfig+0x4e4>)
 8008978:	fba2 2303 	umull	r2, r3, r2, r3
 800897c:	095b      	lsrs	r3, r3, #5
 800897e:	f003 020f 	and.w	r2, r3, #15
 8008982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4422      	add	r2, r4
 800898a:	609a      	str	r2, [r3, #8]
}
 800898c:	bf00      	nop
 800898e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008992:	46bd      	mov	sp, r7
 8008994:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008998:	51eb851f 	.word	0x51eb851f

0800899c <sniprintf>:
 800899c:	b40c      	push	{r2, r3}
 800899e:	b530      	push	{r4, r5, lr}
 80089a0:	4b17      	ldr	r3, [pc, #92]	@ (8008a00 <sniprintf+0x64>)
 80089a2:	1e0c      	subs	r4, r1, #0
 80089a4:	681d      	ldr	r5, [r3, #0]
 80089a6:	b09d      	sub	sp, #116	@ 0x74
 80089a8:	da08      	bge.n	80089bc <sniprintf+0x20>
 80089aa:	238b      	movs	r3, #139	@ 0x8b
 80089ac:	602b      	str	r3, [r5, #0]
 80089ae:	f04f 30ff 	mov.w	r0, #4294967295
 80089b2:	b01d      	add	sp, #116	@ 0x74
 80089b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089b8:	b002      	add	sp, #8
 80089ba:	4770      	bx	lr
 80089bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80089c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80089c4:	bf14      	ite	ne
 80089c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80089ca:	4623      	moveq	r3, r4
 80089cc:	9304      	str	r3, [sp, #16]
 80089ce:	9307      	str	r3, [sp, #28]
 80089d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80089d4:	9002      	str	r0, [sp, #8]
 80089d6:	9006      	str	r0, [sp, #24]
 80089d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80089dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80089de:	ab21      	add	r3, sp, #132	@ 0x84
 80089e0:	a902      	add	r1, sp, #8
 80089e2:	4628      	mov	r0, r5
 80089e4:	9301      	str	r3, [sp, #4]
 80089e6:	f000 f9cf 	bl	8008d88 <_svfiprintf_r>
 80089ea:	1c43      	adds	r3, r0, #1
 80089ec:	bfbc      	itt	lt
 80089ee:	238b      	movlt	r3, #139	@ 0x8b
 80089f0:	602b      	strlt	r3, [r5, #0]
 80089f2:	2c00      	cmp	r4, #0
 80089f4:	d0dd      	beq.n	80089b2 <sniprintf+0x16>
 80089f6:	9b02      	ldr	r3, [sp, #8]
 80089f8:	2200      	movs	r2, #0
 80089fa:	701a      	strb	r2, [r3, #0]
 80089fc:	e7d9      	b.n	80089b2 <sniprintf+0x16>
 80089fe:	bf00      	nop
 8008a00:	20000010 	.word	0x20000010

08008a04 <_vsniprintf_r>:
 8008a04:	b530      	push	{r4, r5, lr}
 8008a06:	4614      	mov	r4, r2
 8008a08:	2c00      	cmp	r4, #0
 8008a0a:	b09b      	sub	sp, #108	@ 0x6c
 8008a0c:	4605      	mov	r5, r0
 8008a0e:	461a      	mov	r2, r3
 8008a10:	da05      	bge.n	8008a1e <_vsniprintf_r+0x1a>
 8008a12:	238b      	movs	r3, #139	@ 0x8b
 8008a14:	6003      	str	r3, [r0, #0]
 8008a16:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1a:	b01b      	add	sp, #108	@ 0x6c
 8008a1c:	bd30      	pop	{r4, r5, pc}
 8008a1e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008a22:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008a26:	bf14      	ite	ne
 8008a28:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008a2c:	4623      	moveq	r3, r4
 8008a2e:	9302      	str	r3, [sp, #8]
 8008a30:	9305      	str	r3, [sp, #20]
 8008a32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008a36:	9100      	str	r1, [sp, #0]
 8008a38:	9104      	str	r1, [sp, #16]
 8008a3a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008a3e:	4669      	mov	r1, sp
 8008a40:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008a42:	f000 f9a1 	bl	8008d88 <_svfiprintf_r>
 8008a46:	1c43      	adds	r3, r0, #1
 8008a48:	bfbc      	itt	lt
 8008a4a:	238b      	movlt	r3, #139	@ 0x8b
 8008a4c:	602b      	strlt	r3, [r5, #0]
 8008a4e:	2c00      	cmp	r4, #0
 8008a50:	d0e3      	beq.n	8008a1a <_vsniprintf_r+0x16>
 8008a52:	9b00      	ldr	r3, [sp, #0]
 8008a54:	2200      	movs	r2, #0
 8008a56:	701a      	strb	r2, [r3, #0]
 8008a58:	e7df      	b.n	8008a1a <_vsniprintf_r+0x16>
	...

08008a5c <vsniprintf>:
 8008a5c:	b507      	push	{r0, r1, r2, lr}
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	4613      	mov	r3, r2
 8008a62:	460a      	mov	r2, r1
 8008a64:	4601      	mov	r1, r0
 8008a66:	4803      	ldr	r0, [pc, #12]	@ (8008a74 <vsniprintf+0x18>)
 8008a68:	6800      	ldr	r0, [r0, #0]
 8008a6a:	f7ff ffcb 	bl	8008a04 <_vsniprintf_r>
 8008a6e:	b003      	add	sp, #12
 8008a70:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a74:	20000010 	.word	0x20000010

08008a78 <memset>:
 8008a78:	4402      	add	r2, r0
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d100      	bne.n	8008a82 <memset+0xa>
 8008a80:	4770      	bx	lr
 8008a82:	f803 1b01 	strb.w	r1, [r3], #1
 8008a86:	e7f9      	b.n	8008a7c <memset+0x4>

08008a88 <__errno>:
 8008a88:	4b01      	ldr	r3, [pc, #4]	@ (8008a90 <__errno+0x8>)
 8008a8a:	6818      	ldr	r0, [r3, #0]
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	20000010 	.word	0x20000010

08008a94 <__libc_init_array>:
 8008a94:	b570      	push	{r4, r5, r6, lr}
 8008a96:	4d0d      	ldr	r5, [pc, #52]	@ (8008acc <__libc_init_array+0x38>)
 8008a98:	4c0d      	ldr	r4, [pc, #52]	@ (8008ad0 <__libc_init_array+0x3c>)
 8008a9a:	1b64      	subs	r4, r4, r5
 8008a9c:	10a4      	asrs	r4, r4, #2
 8008a9e:	2600      	movs	r6, #0
 8008aa0:	42a6      	cmp	r6, r4
 8008aa2:	d109      	bne.n	8008ab8 <__libc_init_array+0x24>
 8008aa4:	4d0b      	ldr	r5, [pc, #44]	@ (8008ad4 <__libc_init_array+0x40>)
 8008aa6:	4c0c      	ldr	r4, [pc, #48]	@ (8008ad8 <__libc_init_array+0x44>)
 8008aa8:	f000 fc66 	bl	8009378 <_init>
 8008aac:	1b64      	subs	r4, r4, r5
 8008aae:	10a4      	asrs	r4, r4, #2
 8008ab0:	2600      	movs	r6, #0
 8008ab2:	42a6      	cmp	r6, r4
 8008ab4:	d105      	bne.n	8008ac2 <__libc_init_array+0x2e>
 8008ab6:	bd70      	pop	{r4, r5, r6, pc}
 8008ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008abc:	4798      	blx	r3
 8008abe:	3601      	adds	r6, #1
 8008ac0:	e7ee      	b.n	8008aa0 <__libc_init_array+0xc>
 8008ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac6:	4798      	blx	r3
 8008ac8:	3601      	adds	r6, #1
 8008aca:	e7f2      	b.n	8008ab2 <__libc_init_array+0x1e>
 8008acc:	080098b8 	.word	0x080098b8
 8008ad0:	080098b8 	.word	0x080098b8
 8008ad4:	080098b8 	.word	0x080098b8
 8008ad8:	080098bc 	.word	0x080098bc

08008adc <__retarget_lock_acquire_recursive>:
 8008adc:	4770      	bx	lr

08008ade <__retarget_lock_release_recursive>:
 8008ade:	4770      	bx	lr

08008ae0 <_free_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	4605      	mov	r5, r0
 8008ae4:	2900      	cmp	r1, #0
 8008ae6:	d041      	beq.n	8008b6c <_free_r+0x8c>
 8008ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aec:	1f0c      	subs	r4, r1, #4
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	bfb8      	it	lt
 8008af2:	18e4      	addlt	r4, r4, r3
 8008af4:	f000 f8e0 	bl	8008cb8 <__malloc_lock>
 8008af8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b70 <_free_r+0x90>)
 8008afa:	6813      	ldr	r3, [r2, #0]
 8008afc:	b933      	cbnz	r3, 8008b0c <_free_r+0x2c>
 8008afe:	6063      	str	r3, [r4, #4]
 8008b00:	6014      	str	r4, [r2, #0]
 8008b02:	4628      	mov	r0, r5
 8008b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b08:	f000 b8dc 	b.w	8008cc4 <__malloc_unlock>
 8008b0c:	42a3      	cmp	r3, r4
 8008b0e:	d908      	bls.n	8008b22 <_free_r+0x42>
 8008b10:	6820      	ldr	r0, [r4, #0]
 8008b12:	1821      	adds	r1, r4, r0
 8008b14:	428b      	cmp	r3, r1
 8008b16:	bf01      	itttt	eq
 8008b18:	6819      	ldreq	r1, [r3, #0]
 8008b1a:	685b      	ldreq	r3, [r3, #4]
 8008b1c:	1809      	addeq	r1, r1, r0
 8008b1e:	6021      	streq	r1, [r4, #0]
 8008b20:	e7ed      	b.n	8008afe <_free_r+0x1e>
 8008b22:	461a      	mov	r2, r3
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	b10b      	cbz	r3, 8008b2c <_free_r+0x4c>
 8008b28:	42a3      	cmp	r3, r4
 8008b2a:	d9fa      	bls.n	8008b22 <_free_r+0x42>
 8008b2c:	6811      	ldr	r1, [r2, #0]
 8008b2e:	1850      	adds	r0, r2, r1
 8008b30:	42a0      	cmp	r0, r4
 8008b32:	d10b      	bne.n	8008b4c <_free_r+0x6c>
 8008b34:	6820      	ldr	r0, [r4, #0]
 8008b36:	4401      	add	r1, r0
 8008b38:	1850      	adds	r0, r2, r1
 8008b3a:	4283      	cmp	r3, r0
 8008b3c:	6011      	str	r1, [r2, #0]
 8008b3e:	d1e0      	bne.n	8008b02 <_free_r+0x22>
 8008b40:	6818      	ldr	r0, [r3, #0]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	6053      	str	r3, [r2, #4]
 8008b46:	4408      	add	r0, r1
 8008b48:	6010      	str	r0, [r2, #0]
 8008b4a:	e7da      	b.n	8008b02 <_free_r+0x22>
 8008b4c:	d902      	bls.n	8008b54 <_free_r+0x74>
 8008b4e:	230c      	movs	r3, #12
 8008b50:	602b      	str	r3, [r5, #0]
 8008b52:	e7d6      	b.n	8008b02 <_free_r+0x22>
 8008b54:	6820      	ldr	r0, [r4, #0]
 8008b56:	1821      	adds	r1, r4, r0
 8008b58:	428b      	cmp	r3, r1
 8008b5a:	bf04      	itt	eq
 8008b5c:	6819      	ldreq	r1, [r3, #0]
 8008b5e:	685b      	ldreq	r3, [r3, #4]
 8008b60:	6063      	str	r3, [r4, #4]
 8008b62:	bf04      	itt	eq
 8008b64:	1809      	addeq	r1, r1, r0
 8008b66:	6021      	streq	r1, [r4, #0]
 8008b68:	6054      	str	r4, [r2, #4]
 8008b6a:	e7ca      	b.n	8008b02 <_free_r+0x22>
 8008b6c:	bd38      	pop	{r3, r4, r5, pc}
 8008b6e:	bf00      	nop
 8008b70:	200008e4 	.word	0x200008e4

08008b74 <sbrk_aligned>:
 8008b74:	b570      	push	{r4, r5, r6, lr}
 8008b76:	4e0f      	ldr	r6, [pc, #60]	@ (8008bb4 <sbrk_aligned+0x40>)
 8008b78:	460c      	mov	r4, r1
 8008b7a:	6831      	ldr	r1, [r6, #0]
 8008b7c:	4605      	mov	r5, r0
 8008b7e:	b911      	cbnz	r1, 8008b86 <sbrk_aligned+0x12>
 8008b80:	f000 fba6 	bl	80092d0 <_sbrk_r>
 8008b84:	6030      	str	r0, [r6, #0]
 8008b86:	4621      	mov	r1, r4
 8008b88:	4628      	mov	r0, r5
 8008b8a:	f000 fba1 	bl	80092d0 <_sbrk_r>
 8008b8e:	1c43      	adds	r3, r0, #1
 8008b90:	d103      	bne.n	8008b9a <sbrk_aligned+0x26>
 8008b92:	f04f 34ff 	mov.w	r4, #4294967295
 8008b96:	4620      	mov	r0, r4
 8008b98:	bd70      	pop	{r4, r5, r6, pc}
 8008b9a:	1cc4      	adds	r4, r0, #3
 8008b9c:	f024 0403 	bic.w	r4, r4, #3
 8008ba0:	42a0      	cmp	r0, r4
 8008ba2:	d0f8      	beq.n	8008b96 <sbrk_aligned+0x22>
 8008ba4:	1a21      	subs	r1, r4, r0
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	f000 fb92 	bl	80092d0 <_sbrk_r>
 8008bac:	3001      	adds	r0, #1
 8008bae:	d1f2      	bne.n	8008b96 <sbrk_aligned+0x22>
 8008bb0:	e7ef      	b.n	8008b92 <sbrk_aligned+0x1e>
 8008bb2:	bf00      	nop
 8008bb4:	200008e0 	.word	0x200008e0

08008bb8 <_malloc_r>:
 8008bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bbc:	1ccd      	adds	r5, r1, #3
 8008bbe:	f025 0503 	bic.w	r5, r5, #3
 8008bc2:	3508      	adds	r5, #8
 8008bc4:	2d0c      	cmp	r5, #12
 8008bc6:	bf38      	it	cc
 8008bc8:	250c      	movcc	r5, #12
 8008bca:	2d00      	cmp	r5, #0
 8008bcc:	4606      	mov	r6, r0
 8008bce:	db01      	blt.n	8008bd4 <_malloc_r+0x1c>
 8008bd0:	42a9      	cmp	r1, r5
 8008bd2:	d904      	bls.n	8008bde <_malloc_r+0x26>
 8008bd4:	230c      	movs	r3, #12
 8008bd6:	6033      	str	r3, [r6, #0]
 8008bd8:	2000      	movs	r0, #0
 8008bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008cb4 <_malloc_r+0xfc>
 8008be2:	f000 f869 	bl	8008cb8 <__malloc_lock>
 8008be6:	f8d8 3000 	ldr.w	r3, [r8]
 8008bea:	461c      	mov	r4, r3
 8008bec:	bb44      	cbnz	r4, 8008c40 <_malloc_r+0x88>
 8008bee:	4629      	mov	r1, r5
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	f7ff ffbf 	bl	8008b74 <sbrk_aligned>
 8008bf6:	1c43      	adds	r3, r0, #1
 8008bf8:	4604      	mov	r4, r0
 8008bfa:	d158      	bne.n	8008cae <_malloc_r+0xf6>
 8008bfc:	f8d8 4000 	ldr.w	r4, [r8]
 8008c00:	4627      	mov	r7, r4
 8008c02:	2f00      	cmp	r7, #0
 8008c04:	d143      	bne.n	8008c8e <_malloc_r+0xd6>
 8008c06:	2c00      	cmp	r4, #0
 8008c08:	d04b      	beq.n	8008ca2 <_malloc_r+0xea>
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	4639      	mov	r1, r7
 8008c0e:	4630      	mov	r0, r6
 8008c10:	eb04 0903 	add.w	r9, r4, r3
 8008c14:	f000 fb5c 	bl	80092d0 <_sbrk_r>
 8008c18:	4581      	cmp	r9, r0
 8008c1a:	d142      	bne.n	8008ca2 <_malloc_r+0xea>
 8008c1c:	6821      	ldr	r1, [r4, #0]
 8008c1e:	1a6d      	subs	r5, r5, r1
 8008c20:	4629      	mov	r1, r5
 8008c22:	4630      	mov	r0, r6
 8008c24:	f7ff ffa6 	bl	8008b74 <sbrk_aligned>
 8008c28:	3001      	adds	r0, #1
 8008c2a:	d03a      	beq.n	8008ca2 <_malloc_r+0xea>
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	442b      	add	r3, r5
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	f8d8 3000 	ldr.w	r3, [r8]
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	bb62      	cbnz	r2, 8008c94 <_malloc_r+0xdc>
 8008c3a:	f8c8 7000 	str.w	r7, [r8]
 8008c3e:	e00f      	b.n	8008c60 <_malloc_r+0xa8>
 8008c40:	6822      	ldr	r2, [r4, #0]
 8008c42:	1b52      	subs	r2, r2, r5
 8008c44:	d420      	bmi.n	8008c88 <_malloc_r+0xd0>
 8008c46:	2a0b      	cmp	r2, #11
 8008c48:	d917      	bls.n	8008c7a <_malloc_r+0xc2>
 8008c4a:	1961      	adds	r1, r4, r5
 8008c4c:	42a3      	cmp	r3, r4
 8008c4e:	6025      	str	r5, [r4, #0]
 8008c50:	bf18      	it	ne
 8008c52:	6059      	strne	r1, [r3, #4]
 8008c54:	6863      	ldr	r3, [r4, #4]
 8008c56:	bf08      	it	eq
 8008c58:	f8c8 1000 	streq.w	r1, [r8]
 8008c5c:	5162      	str	r2, [r4, r5]
 8008c5e:	604b      	str	r3, [r1, #4]
 8008c60:	4630      	mov	r0, r6
 8008c62:	f000 f82f 	bl	8008cc4 <__malloc_unlock>
 8008c66:	f104 000b 	add.w	r0, r4, #11
 8008c6a:	1d23      	adds	r3, r4, #4
 8008c6c:	f020 0007 	bic.w	r0, r0, #7
 8008c70:	1ac2      	subs	r2, r0, r3
 8008c72:	bf1c      	itt	ne
 8008c74:	1a1b      	subne	r3, r3, r0
 8008c76:	50a3      	strne	r3, [r4, r2]
 8008c78:	e7af      	b.n	8008bda <_malloc_r+0x22>
 8008c7a:	6862      	ldr	r2, [r4, #4]
 8008c7c:	42a3      	cmp	r3, r4
 8008c7e:	bf0c      	ite	eq
 8008c80:	f8c8 2000 	streq.w	r2, [r8]
 8008c84:	605a      	strne	r2, [r3, #4]
 8008c86:	e7eb      	b.n	8008c60 <_malloc_r+0xa8>
 8008c88:	4623      	mov	r3, r4
 8008c8a:	6864      	ldr	r4, [r4, #4]
 8008c8c:	e7ae      	b.n	8008bec <_malloc_r+0x34>
 8008c8e:	463c      	mov	r4, r7
 8008c90:	687f      	ldr	r7, [r7, #4]
 8008c92:	e7b6      	b.n	8008c02 <_malloc_r+0x4a>
 8008c94:	461a      	mov	r2, r3
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	42a3      	cmp	r3, r4
 8008c9a:	d1fb      	bne.n	8008c94 <_malloc_r+0xdc>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	6053      	str	r3, [r2, #4]
 8008ca0:	e7de      	b.n	8008c60 <_malloc_r+0xa8>
 8008ca2:	230c      	movs	r3, #12
 8008ca4:	6033      	str	r3, [r6, #0]
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	f000 f80c 	bl	8008cc4 <__malloc_unlock>
 8008cac:	e794      	b.n	8008bd8 <_malloc_r+0x20>
 8008cae:	6005      	str	r5, [r0, #0]
 8008cb0:	e7d6      	b.n	8008c60 <_malloc_r+0xa8>
 8008cb2:	bf00      	nop
 8008cb4:	200008e4 	.word	0x200008e4

08008cb8 <__malloc_lock>:
 8008cb8:	4801      	ldr	r0, [pc, #4]	@ (8008cc0 <__malloc_lock+0x8>)
 8008cba:	f7ff bf0f 	b.w	8008adc <__retarget_lock_acquire_recursive>
 8008cbe:	bf00      	nop
 8008cc0:	200008dc 	.word	0x200008dc

08008cc4 <__malloc_unlock>:
 8008cc4:	4801      	ldr	r0, [pc, #4]	@ (8008ccc <__malloc_unlock+0x8>)
 8008cc6:	f7ff bf0a 	b.w	8008ade <__retarget_lock_release_recursive>
 8008cca:	bf00      	nop
 8008ccc:	200008dc 	.word	0x200008dc

08008cd0 <__ssputs_r>:
 8008cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd4:	688e      	ldr	r6, [r1, #8]
 8008cd6:	461f      	mov	r7, r3
 8008cd8:	42be      	cmp	r6, r7
 8008cda:	680b      	ldr	r3, [r1, #0]
 8008cdc:	4682      	mov	sl, r0
 8008cde:	460c      	mov	r4, r1
 8008ce0:	4690      	mov	r8, r2
 8008ce2:	d82d      	bhi.n	8008d40 <__ssputs_r+0x70>
 8008ce4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ce8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008cec:	d026      	beq.n	8008d3c <__ssputs_r+0x6c>
 8008cee:	6965      	ldr	r5, [r4, #20]
 8008cf0:	6909      	ldr	r1, [r1, #16]
 8008cf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cf6:	eba3 0901 	sub.w	r9, r3, r1
 8008cfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cfe:	1c7b      	adds	r3, r7, #1
 8008d00:	444b      	add	r3, r9
 8008d02:	106d      	asrs	r5, r5, #1
 8008d04:	429d      	cmp	r5, r3
 8008d06:	bf38      	it	cc
 8008d08:	461d      	movcc	r5, r3
 8008d0a:	0553      	lsls	r3, r2, #21
 8008d0c:	d527      	bpl.n	8008d5e <__ssputs_r+0x8e>
 8008d0e:	4629      	mov	r1, r5
 8008d10:	f7ff ff52 	bl	8008bb8 <_malloc_r>
 8008d14:	4606      	mov	r6, r0
 8008d16:	b360      	cbz	r0, 8008d72 <__ssputs_r+0xa2>
 8008d18:	6921      	ldr	r1, [r4, #16]
 8008d1a:	464a      	mov	r2, r9
 8008d1c:	f000 fae8 	bl	80092f0 <memcpy>
 8008d20:	89a3      	ldrh	r3, [r4, #12]
 8008d22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d2a:	81a3      	strh	r3, [r4, #12]
 8008d2c:	6126      	str	r6, [r4, #16]
 8008d2e:	6165      	str	r5, [r4, #20]
 8008d30:	444e      	add	r6, r9
 8008d32:	eba5 0509 	sub.w	r5, r5, r9
 8008d36:	6026      	str	r6, [r4, #0]
 8008d38:	60a5      	str	r5, [r4, #8]
 8008d3a:	463e      	mov	r6, r7
 8008d3c:	42be      	cmp	r6, r7
 8008d3e:	d900      	bls.n	8008d42 <__ssputs_r+0x72>
 8008d40:	463e      	mov	r6, r7
 8008d42:	6820      	ldr	r0, [r4, #0]
 8008d44:	4632      	mov	r2, r6
 8008d46:	4641      	mov	r1, r8
 8008d48:	f000 faa8 	bl	800929c <memmove>
 8008d4c:	68a3      	ldr	r3, [r4, #8]
 8008d4e:	1b9b      	subs	r3, r3, r6
 8008d50:	60a3      	str	r3, [r4, #8]
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	4433      	add	r3, r6
 8008d56:	6023      	str	r3, [r4, #0]
 8008d58:	2000      	movs	r0, #0
 8008d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5e:	462a      	mov	r2, r5
 8008d60:	f000 fad4 	bl	800930c <_realloc_r>
 8008d64:	4606      	mov	r6, r0
 8008d66:	2800      	cmp	r0, #0
 8008d68:	d1e0      	bne.n	8008d2c <__ssputs_r+0x5c>
 8008d6a:	6921      	ldr	r1, [r4, #16]
 8008d6c:	4650      	mov	r0, sl
 8008d6e:	f7ff feb7 	bl	8008ae0 <_free_r>
 8008d72:	230c      	movs	r3, #12
 8008d74:	f8ca 3000 	str.w	r3, [sl]
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d7e:	81a3      	strh	r3, [r4, #12]
 8008d80:	f04f 30ff 	mov.w	r0, #4294967295
 8008d84:	e7e9      	b.n	8008d5a <__ssputs_r+0x8a>
	...

08008d88 <_svfiprintf_r>:
 8008d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d8c:	4698      	mov	r8, r3
 8008d8e:	898b      	ldrh	r3, [r1, #12]
 8008d90:	061b      	lsls	r3, r3, #24
 8008d92:	b09d      	sub	sp, #116	@ 0x74
 8008d94:	4607      	mov	r7, r0
 8008d96:	460d      	mov	r5, r1
 8008d98:	4614      	mov	r4, r2
 8008d9a:	d510      	bpl.n	8008dbe <_svfiprintf_r+0x36>
 8008d9c:	690b      	ldr	r3, [r1, #16]
 8008d9e:	b973      	cbnz	r3, 8008dbe <_svfiprintf_r+0x36>
 8008da0:	2140      	movs	r1, #64	@ 0x40
 8008da2:	f7ff ff09 	bl	8008bb8 <_malloc_r>
 8008da6:	6028      	str	r0, [r5, #0]
 8008da8:	6128      	str	r0, [r5, #16]
 8008daa:	b930      	cbnz	r0, 8008dba <_svfiprintf_r+0x32>
 8008dac:	230c      	movs	r3, #12
 8008dae:	603b      	str	r3, [r7, #0]
 8008db0:	f04f 30ff 	mov.w	r0, #4294967295
 8008db4:	b01d      	add	sp, #116	@ 0x74
 8008db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dba:	2340      	movs	r3, #64	@ 0x40
 8008dbc:	616b      	str	r3, [r5, #20]
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dc2:	2320      	movs	r3, #32
 8008dc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dcc:	2330      	movs	r3, #48	@ 0x30
 8008dce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f6c <_svfiprintf_r+0x1e4>
 8008dd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008dd6:	f04f 0901 	mov.w	r9, #1
 8008dda:	4623      	mov	r3, r4
 8008ddc:	469a      	mov	sl, r3
 8008dde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008de2:	b10a      	cbz	r2, 8008de8 <_svfiprintf_r+0x60>
 8008de4:	2a25      	cmp	r2, #37	@ 0x25
 8008de6:	d1f9      	bne.n	8008ddc <_svfiprintf_r+0x54>
 8008de8:	ebba 0b04 	subs.w	fp, sl, r4
 8008dec:	d00b      	beq.n	8008e06 <_svfiprintf_r+0x7e>
 8008dee:	465b      	mov	r3, fp
 8008df0:	4622      	mov	r2, r4
 8008df2:	4629      	mov	r1, r5
 8008df4:	4638      	mov	r0, r7
 8008df6:	f7ff ff6b 	bl	8008cd0 <__ssputs_r>
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	f000 80a7 	beq.w	8008f4e <_svfiprintf_r+0x1c6>
 8008e00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e02:	445a      	add	r2, fp
 8008e04:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e06:	f89a 3000 	ldrb.w	r3, [sl]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f000 809f 	beq.w	8008f4e <_svfiprintf_r+0x1c6>
 8008e10:	2300      	movs	r3, #0
 8008e12:	f04f 32ff 	mov.w	r2, #4294967295
 8008e16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e1a:	f10a 0a01 	add.w	sl, sl, #1
 8008e1e:	9304      	str	r3, [sp, #16]
 8008e20:	9307      	str	r3, [sp, #28]
 8008e22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e26:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e28:	4654      	mov	r4, sl
 8008e2a:	2205      	movs	r2, #5
 8008e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e30:	484e      	ldr	r0, [pc, #312]	@ (8008f6c <_svfiprintf_r+0x1e4>)
 8008e32:	f7f7 f9dd 	bl	80001f0 <memchr>
 8008e36:	9a04      	ldr	r2, [sp, #16]
 8008e38:	b9d8      	cbnz	r0, 8008e72 <_svfiprintf_r+0xea>
 8008e3a:	06d0      	lsls	r0, r2, #27
 8008e3c:	bf44      	itt	mi
 8008e3e:	2320      	movmi	r3, #32
 8008e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e44:	0711      	lsls	r1, r2, #28
 8008e46:	bf44      	itt	mi
 8008e48:	232b      	movmi	r3, #43	@ 0x2b
 8008e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8008e52:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e54:	d015      	beq.n	8008e82 <_svfiprintf_r+0xfa>
 8008e56:	9a07      	ldr	r2, [sp, #28]
 8008e58:	4654      	mov	r4, sl
 8008e5a:	2000      	movs	r0, #0
 8008e5c:	f04f 0c0a 	mov.w	ip, #10
 8008e60:	4621      	mov	r1, r4
 8008e62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e66:	3b30      	subs	r3, #48	@ 0x30
 8008e68:	2b09      	cmp	r3, #9
 8008e6a:	d94b      	bls.n	8008f04 <_svfiprintf_r+0x17c>
 8008e6c:	b1b0      	cbz	r0, 8008e9c <_svfiprintf_r+0x114>
 8008e6e:	9207      	str	r2, [sp, #28]
 8008e70:	e014      	b.n	8008e9c <_svfiprintf_r+0x114>
 8008e72:	eba0 0308 	sub.w	r3, r0, r8
 8008e76:	fa09 f303 	lsl.w	r3, r9, r3
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	9304      	str	r3, [sp, #16]
 8008e7e:	46a2      	mov	sl, r4
 8008e80:	e7d2      	b.n	8008e28 <_svfiprintf_r+0xa0>
 8008e82:	9b03      	ldr	r3, [sp, #12]
 8008e84:	1d19      	adds	r1, r3, #4
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	9103      	str	r1, [sp, #12]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	bfbb      	ittet	lt
 8008e8e:	425b      	neglt	r3, r3
 8008e90:	f042 0202 	orrlt.w	r2, r2, #2
 8008e94:	9307      	strge	r3, [sp, #28]
 8008e96:	9307      	strlt	r3, [sp, #28]
 8008e98:	bfb8      	it	lt
 8008e9a:	9204      	strlt	r2, [sp, #16]
 8008e9c:	7823      	ldrb	r3, [r4, #0]
 8008e9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ea0:	d10a      	bne.n	8008eb8 <_svfiprintf_r+0x130>
 8008ea2:	7863      	ldrb	r3, [r4, #1]
 8008ea4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ea6:	d132      	bne.n	8008f0e <_svfiprintf_r+0x186>
 8008ea8:	9b03      	ldr	r3, [sp, #12]
 8008eaa:	1d1a      	adds	r2, r3, #4
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	9203      	str	r2, [sp, #12]
 8008eb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008eb4:	3402      	adds	r4, #2
 8008eb6:	9305      	str	r3, [sp, #20]
 8008eb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f7c <_svfiprintf_r+0x1f4>
 8008ebc:	7821      	ldrb	r1, [r4, #0]
 8008ebe:	2203      	movs	r2, #3
 8008ec0:	4650      	mov	r0, sl
 8008ec2:	f7f7 f995 	bl	80001f0 <memchr>
 8008ec6:	b138      	cbz	r0, 8008ed8 <_svfiprintf_r+0x150>
 8008ec8:	9b04      	ldr	r3, [sp, #16]
 8008eca:	eba0 000a 	sub.w	r0, r0, sl
 8008ece:	2240      	movs	r2, #64	@ 0x40
 8008ed0:	4082      	lsls	r2, r0
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	3401      	adds	r4, #1
 8008ed6:	9304      	str	r3, [sp, #16]
 8008ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008edc:	4824      	ldr	r0, [pc, #144]	@ (8008f70 <_svfiprintf_r+0x1e8>)
 8008ede:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ee2:	2206      	movs	r2, #6
 8008ee4:	f7f7 f984 	bl	80001f0 <memchr>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d036      	beq.n	8008f5a <_svfiprintf_r+0x1d2>
 8008eec:	4b21      	ldr	r3, [pc, #132]	@ (8008f74 <_svfiprintf_r+0x1ec>)
 8008eee:	bb1b      	cbnz	r3, 8008f38 <_svfiprintf_r+0x1b0>
 8008ef0:	9b03      	ldr	r3, [sp, #12]
 8008ef2:	3307      	adds	r3, #7
 8008ef4:	f023 0307 	bic.w	r3, r3, #7
 8008ef8:	3308      	adds	r3, #8
 8008efa:	9303      	str	r3, [sp, #12]
 8008efc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008efe:	4433      	add	r3, r6
 8008f00:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f02:	e76a      	b.n	8008dda <_svfiprintf_r+0x52>
 8008f04:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f08:	460c      	mov	r4, r1
 8008f0a:	2001      	movs	r0, #1
 8008f0c:	e7a8      	b.n	8008e60 <_svfiprintf_r+0xd8>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	3401      	adds	r4, #1
 8008f12:	9305      	str	r3, [sp, #20]
 8008f14:	4619      	mov	r1, r3
 8008f16:	f04f 0c0a 	mov.w	ip, #10
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f20:	3a30      	subs	r2, #48	@ 0x30
 8008f22:	2a09      	cmp	r2, #9
 8008f24:	d903      	bls.n	8008f2e <_svfiprintf_r+0x1a6>
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d0c6      	beq.n	8008eb8 <_svfiprintf_r+0x130>
 8008f2a:	9105      	str	r1, [sp, #20]
 8008f2c:	e7c4      	b.n	8008eb8 <_svfiprintf_r+0x130>
 8008f2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f32:	4604      	mov	r4, r0
 8008f34:	2301      	movs	r3, #1
 8008f36:	e7f0      	b.n	8008f1a <_svfiprintf_r+0x192>
 8008f38:	ab03      	add	r3, sp, #12
 8008f3a:	9300      	str	r3, [sp, #0]
 8008f3c:	462a      	mov	r2, r5
 8008f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f78 <_svfiprintf_r+0x1f0>)
 8008f40:	a904      	add	r1, sp, #16
 8008f42:	4638      	mov	r0, r7
 8008f44:	f3af 8000 	nop.w
 8008f48:	1c42      	adds	r2, r0, #1
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	d1d6      	bne.n	8008efc <_svfiprintf_r+0x174>
 8008f4e:	89ab      	ldrh	r3, [r5, #12]
 8008f50:	065b      	lsls	r3, r3, #25
 8008f52:	f53f af2d 	bmi.w	8008db0 <_svfiprintf_r+0x28>
 8008f56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f58:	e72c      	b.n	8008db4 <_svfiprintf_r+0x2c>
 8008f5a:	ab03      	add	r3, sp, #12
 8008f5c:	9300      	str	r3, [sp, #0]
 8008f5e:	462a      	mov	r2, r5
 8008f60:	4b05      	ldr	r3, [pc, #20]	@ (8008f78 <_svfiprintf_r+0x1f0>)
 8008f62:	a904      	add	r1, sp, #16
 8008f64:	4638      	mov	r0, r7
 8008f66:	f000 f879 	bl	800905c <_printf_i>
 8008f6a:	e7ed      	b.n	8008f48 <_svfiprintf_r+0x1c0>
 8008f6c:	0800987c 	.word	0x0800987c
 8008f70:	08009886 	.word	0x08009886
 8008f74:	00000000 	.word	0x00000000
 8008f78:	08008cd1 	.word	0x08008cd1
 8008f7c:	08009882 	.word	0x08009882

08008f80 <_printf_common>:
 8008f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f84:	4616      	mov	r6, r2
 8008f86:	4698      	mov	r8, r3
 8008f88:	688a      	ldr	r2, [r1, #8]
 8008f8a:	690b      	ldr	r3, [r1, #16]
 8008f8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f90:	4293      	cmp	r3, r2
 8008f92:	bfb8      	it	lt
 8008f94:	4613      	movlt	r3, r2
 8008f96:	6033      	str	r3, [r6, #0]
 8008f98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f9c:	4607      	mov	r7, r0
 8008f9e:	460c      	mov	r4, r1
 8008fa0:	b10a      	cbz	r2, 8008fa6 <_printf_common+0x26>
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	6033      	str	r3, [r6, #0]
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	0699      	lsls	r1, r3, #26
 8008faa:	bf42      	ittt	mi
 8008fac:	6833      	ldrmi	r3, [r6, #0]
 8008fae:	3302      	addmi	r3, #2
 8008fb0:	6033      	strmi	r3, [r6, #0]
 8008fb2:	6825      	ldr	r5, [r4, #0]
 8008fb4:	f015 0506 	ands.w	r5, r5, #6
 8008fb8:	d106      	bne.n	8008fc8 <_printf_common+0x48>
 8008fba:	f104 0a19 	add.w	sl, r4, #25
 8008fbe:	68e3      	ldr	r3, [r4, #12]
 8008fc0:	6832      	ldr	r2, [r6, #0]
 8008fc2:	1a9b      	subs	r3, r3, r2
 8008fc4:	42ab      	cmp	r3, r5
 8008fc6:	dc26      	bgt.n	8009016 <_printf_common+0x96>
 8008fc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008fcc:	6822      	ldr	r2, [r4, #0]
 8008fce:	3b00      	subs	r3, #0
 8008fd0:	bf18      	it	ne
 8008fd2:	2301      	movne	r3, #1
 8008fd4:	0692      	lsls	r2, r2, #26
 8008fd6:	d42b      	bmi.n	8009030 <_printf_common+0xb0>
 8008fd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008fdc:	4641      	mov	r1, r8
 8008fde:	4638      	mov	r0, r7
 8008fe0:	47c8      	blx	r9
 8008fe2:	3001      	adds	r0, #1
 8008fe4:	d01e      	beq.n	8009024 <_printf_common+0xa4>
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	6922      	ldr	r2, [r4, #16]
 8008fea:	f003 0306 	and.w	r3, r3, #6
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	bf02      	ittt	eq
 8008ff2:	68e5      	ldreq	r5, [r4, #12]
 8008ff4:	6833      	ldreq	r3, [r6, #0]
 8008ff6:	1aed      	subeq	r5, r5, r3
 8008ff8:	68a3      	ldr	r3, [r4, #8]
 8008ffa:	bf0c      	ite	eq
 8008ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009000:	2500      	movne	r5, #0
 8009002:	4293      	cmp	r3, r2
 8009004:	bfc4      	itt	gt
 8009006:	1a9b      	subgt	r3, r3, r2
 8009008:	18ed      	addgt	r5, r5, r3
 800900a:	2600      	movs	r6, #0
 800900c:	341a      	adds	r4, #26
 800900e:	42b5      	cmp	r5, r6
 8009010:	d11a      	bne.n	8009048 <_printf_common+0xc8>
 8009012:	2000      	movs	r0, #0
 8009014:	e008      	b.n	8009028 <_printf_common+0xa8>
 8009016:	2301      	movs	r3, #1
 8009018:	4652      	mov	r2, sl
 800901a:	4641      	mov	r1, r8
 800901c:	4638      	mov	r0, r7
 800901e:	47c8      	blx	r9
 8009020:	3001      	adds	r0, #1
 8009022:	d103      	bne.n	800902c <_printf_common+0xac>
 8009024:	f04f 30ff 	mov.w	r0, #4294967295
 8009028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800902c:	3501      	adds	r5, #1
 800902e:	e7c6      	b.n	8008fbe <_printf_common+0x3e>
 8009030:	18e1      	adds	r1, r4, r3
 8009032:	1c5a      	adds	r2, r3, #1
 8009034:	2030      	movs	r0, #48	@ 0x30
 8009036:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800903a:	4422      	add	r2, r4
 800903c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009040:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009044:	3302      	adds	r3, #2
 8009046:	e7c7      	b.n	8008fd8 <_printf_common+0x58>
 8009048:	2301      	movs	r3, #1
 800904a:	4622      	mov	r2, r4
 800904c:	4641      	mov	r1, r8
 800904e:	4638      	mov	r0, r7
 8009050:	47c8      	blx	r9
 8009052:	3001      	adds	r0, #1
 8009054:	d0e6      	beq.n	8009024 <_printf_common+0xa4>
 8009056:	3601      	adds	r6, #1
 8009058:	e7d9      	b.n	800900e <_printf_common+0x8e>
	...

0800905c <_printf_i>:
 800905c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009060:	7e0f      	ldrb	r7, [r1, #24]
 8009062:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009064:	2f78      	cmp	r7, #120	@ 0x78
 8009066:	4691      	mov	r9, r2
 8009068:	4680      	mov	r8, r0
 800906a:	460c      	mov	r4, r1
 800906c:	469a      	mov	sl, r3
 800906e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009072:	d807      	bhi.n	8009084 <_printf_i+0x28>
 8009074:	2f62      	cmp	r7, #98	@ 0x62
 8009076:	d80a      	bhi.n	800908e <_printf_i+0x32>
 8009078:	2f00      	cmp	r7, #0
 800907a:	f000 80d2 	beq.w	8009222 <_printf_i+0x1c6>
 800907e:	2f58      	cmp	r7, #88	@ 0x58
 8009080:	f000 80b9 	beq.w	80091f6 <_printf_i+0x19a>
 8009084:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009088:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800908c:	e03a      	b.n	8009104 <_printf_i+0xa8>
 800908e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009092:	2b15      	cmp	r3, #21
 8009094:	d8f6      	bhi.n	8009084 <_printf_i+0x28>
 8009096:	a101      	add	r1, pc, #4	@ (adr r1, 800909c <_printf_i+0x40>)
 8009098:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800909c:	080090f5 	.word	0x080090f5
 80090a0:	08009109 	.word	0x08009109
 80090a4:	08009085 	.word	0x08009085
 80090a8:	08009085 	.word	0x08009085
 80090ac:	08009085 	.word	0x08009085
 80090b0:	08009085 	.word	0x08009085
 80090b4:	08009109 	.word	0x08009109
 80090b8:	08009085 	.word	0x08009085
 80090bc:	08009085 	.word	0x08009085
 80090c0:	08009085 	.word	0x08009085
 80090c4:	08009085 	.word	0x08009085
 80090c8:	08009209 	.word	0x08009209
 80090cc:	08009133 	.word	0x08009133
 80090d0:	080091c3 	.word	0x080091c3
 80090d4:	08009085 	.word	0x08009085
 80090d8:	08009085 	.word	0x08009085
 80090dc:	0800922b 	.word	0x0800922b
 80090e0:	08009085 	.word	0x08009085
 80090e4:	08009133 	.word	0x08009133
 80090e8:	08009085 	.word	0x08009085
 80090ec:	08009085 	.word	0x08009085
 80090f0:	080091cb 	.word	0x080091cb
 80090f4:	6833      	ldr	r3, [r6, #0]
 80090f6:	1d1a      	adds	r2, r3, #4
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	6032      	str	r2, [r6, #0]
 80090fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009100:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009104:	2301      	movs	r3, #1
 8009106:	e09d      	b.n	8009244 <_printf_i+0x1e8>
 8009108:	6833      	ldr	r3, [r6, #0]
 800910a:	6820      	ldr	r0, [r4, #0]
 800910c:	1d19      	adds	r1, r3, #4
 800910e:	6031      	str	r1, [r6, #0]
 8009110:	0606      	lsls	r6, r0, #24
 8009112:	d501      	bpl.n	8009118 <_printf_i+0xbc>
 8009114:	681d      	ldr	r5, [r3, #0]
 8009116:	e003      	b.n	8009120 <_printf_i+0xc4>
 8009118:	0645      	lsls	r5, r0, #25
 800911a:	d5fb      	bpl.n	8009114 <_printf_i+0xb8>
 800911c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009120:	2d00      	cmp	r5, #0
 8009122:	da03      	bge.n	800912c <_printf_i+0xd0>
 8009124:	232d      	movs	r3, #45	@ 0x2d
 8009126:	426d      	negs	r5, r5
 8009128:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800912c:	4859      	ldr	r0, [pc, #356]	@ (8009294 <_printf_i+0x238>)
 800912e:	230a      	movs	r3, #10
 8009130:	e011      	b.n	8009156 <_printf_i+0xfa>
 8009132:	6821      	ldr	r1, [r4, #0]
 8009134:	6833      	ldr	r3, [r6, #0]
 8009136:	0608      	lsls	r0, r1, #24
 8009138:	f853 5b04 	ldr.w	r5, [r3], #4
 800913c:	d402      	bmi.n	8009144 <_printf_i+0xe8>
 800913e:	0649      	lsls	r1, r1, #25
 8009140:	bf48      	it	mi
 8009142:	b2ad      	uxthmi	r5, r5
 8009144:	2f6f      	cmp	r7, #111	@ 0x6f
 8009146:	4853      	ldr	r0, [pc, #332]	@ (8009294 <_printf_i+0x238>)
 8009148:	6033      	str	r3, [r6, #0]
 800914a:	bf14      	ite	ne
 800914c:	230a      	movne	r3, #10
 800914e:	2308      	moveq	r3, #8
 8009150:	2100      	movs	r1, #0
 8009152:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009156:	6866      	ldr	r6, [r4, #4]
 8009158:	60a6      	str	r6, [r4, #8]
 800915a:	2e00      	cmp	r6, #0
 800915c:	bfa2      	ittt	ge
 800915e:	6821      	ldrge	r1, [r4, #0]
 8009160:	f021 0104 	bicge.w	r1, r1, #4
 8009164:	6021      	strge	r1, [r4, #0]
 8009166:	b90d      	cbnz	r5, 800916c <_printf_i+0x110>
 8009168:	2e00      	cmp	r6, #0
 800916a:	d04b      	beq.n	8009204 <_printf_i+0x1a8>
 800916c:	4616      	mov	r6, r2
 800916e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009172:	fb03 5711 	mls	r7, r3, r1, r5
 8009176:	5dc7      	ldrb	r7, [r0, r7]
 8009178:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800917c:	462f      	mov	r7, r5
 800917e:	42bb      	cmp	r3, r7
 8009180:	460d      	mov	r5, r1
 8009182:	d9f4      	bls.n	800916e <_printf_i+0x112>
 8009184:	2b08      	cmp	r3, #8
 8009186:	d10b      	bne.n	80091a0 <_printf_i+0x144>
 8009188:	6823      	ldr	r3, [r4, #0]
 800918a:	07df      	lsls	r7, r3, #31
 800918c:	d508      	bpl.n	80091a0 <_printf_i+0x144>
 800918e:	6923      	ldr	r3, [r4, #16]
 8009190:	6861      	ldr	r1, [r4, #4]
 8009192:	4299      	cmp	r1, r3
 8009194:	bfde      	ittt	le
 8009196:	2330      	movle	r3, #48	@ 0x30
 8009198:	f806 3c01 	strble.w	r3, [r6, #-1]
 800919c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80091a0:	1b92      	subs	r2, r2, r6
 80091a2:	6122      	str	r2, [r4, #16]
 80091a4:	f8cd a000 	str.w	sl, [sp]
 80091a8:	464b      	mov	r3, r9
 80091aa:	aa03      	add	r2, sp, #12
 80091ac:	4621      	mov	r1, r4
 80091ae:	4640      	mov	r0, r8
 80091b0:	f7ff fee6 	bl	8008f80 <_printf_common>
 80091b4:	3001      	adds	r0, #1
 80091b6:	d14a      	bne.n	800924e <_printf_i+0x1f2>
 80091b8:	f04f 30ff 	mov.w	r0, #4294967295
 80091bc:	b004      	add	sp, #16
 80091be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	f043 0320 	orr.w	r3, r3, #32
 80091c8:	6023      	str	r3, [r4, #0]
 80091ca:	4833      	ldr	r0, [pc, #204]	@ (8009298 <_printf_i+0x23c>)
 80091cc:	2778      	movs	r7, #120	@ 0x78
 80091ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	6831      	ldr	r1, [r6, #0]
 80091d6:	061f      	lsls	r7, r3, #24
 80091d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80091dc:	d402      	bmi.n	80091e4 <_printf_i+0x188>
 80091de:	065f      	lsls	r7, r3, #25
 80091e0:	bf48      	it	mi
 80091e2:	b2ad      	uxthmi	r5, r5
 80091e4:	6031      	str	r1, [r6, #0]
 80091e6:	07d9      	lsls	r1, r3, #31
 80091e8:	bf44      	itt	mi
 80091ea:	f043 0320 	orrmi.w	r3, r3, #32
 80091ee:	6023      	strmi	r3, [r4, #0]
 80091f0:	b11d      	cbz	r5, 80091fa <_printf_i+0x19e>
 80091f2:	2310      	movs	r3, #16
 80091f4:	e7ac      	b.n	8009150 <_printf_i+0xf4>
 80091f6:	4827      	ldr	r0, [pc, #156]	@ (8009294 <_printf_i+0x238>)
 80091f8:	e7e9      	b.n	80091ce <_printf_i+0x172>
 80091fa:	6823      	ldr	r3, [r4, #0]
 80091fc:	f023 0320 	bic.w	r3, r3, #32
 8009200:	6023      	str	r3, [r4, #0]
 8009202:	e7f6      	b.n	80091f2 <_printf_i+0x196>
 8009204:	4616      	mov	r6, r2
 8009206:	e7bd      	b.n	8009184 <_printf_i+0x128>
 8009208:	6833      	ldr	r3, [r6, #0]
 800920a:	6825      	ldr	r5, [r4, #0]
 800920c:	6961      	ldr	r1, [r4, #20]
 800920e:	1d18      	adds	r0, r3, #4
 8009210:	6030      	str	r0, [r6, #0]
 8009212:	062e      	lsls	r6, r5, #24
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	d501      	bpl.n	800921c <_printf_i+0x1c0>
 8009218:	6019      	str	r1, [r3, #0]
 800921a:	e002      	b.n	8009222 <_printf_i+0x1c6>
 800921c:	0668      	lsls	r0, r5, #25
 800921e:	d5fb      	bpl.n	8009218 <_printf_i+0x1bc>
 8009220:	8019      	strh	r1, [r3, #0]
 8009222:	2300      	movs	r3, #0
 8009224:	6123      	str	r3, [r4, #16]
 8009226:	4616      	mov	r6, r2
 8009228:	e7bc      	b.n	80091a4 <_printf_i+0x148>
 800922a:	6833      	ldr	r3, [r6, #0]
 800922c:	1d1a      	adds	r2, r3, #4
 800922e:	6032      	str	r2, [r6, #0]
 8009230:	681e      	ldr	r6, [r3, #0]
 8009232:	6862      	ldr	r2, [r4, #4]
 8009234:	2100      	movs	r1, #0
 8009236:	4630      	mov	r0, r6
 8009238:	f7f6 ffda 	bl	80001f0 <memchr>
 800923c:	b108      	cbz	r0, 8009242 <_printf_i+0x1e6>
 800923e:	1b80      	subs	r0, r0, r6
 8009240:	6060      	str	r0, [r4, #4]
 8009242:	6863      	ldr	r3, [r4, #4]
 8009244:	6123      	str	r3, [r4, #16]
 8009246:	2300      	movs	r3, #0
 8009248:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800924c:	e7aa      	b.n	80091a4 <_printf_i+0x148>
 800924e:	6923      	ldr	r3, [r4, #16]
 8009250:	4632      	mov	r2, r6
 8009252:	4649      	mov	r1, r9
 8009254:	4640      	mov	r0, r8
 8009256:	47d0      	blx	sl
 8009258:	3001      	adds	r0, #1
 800925a:	d0ad      	beq.n	80091b8 <_printf_i+0x15c>
 800925c:	6823      	ldr	r3, [r4, #0]
 800925e:	079b      	lsls	r3, r3, #30
 8009260:	d413      	bmi.n	800928a <_printf_i+0x22e>
 8009262:	68e0      	ldr	r0, [r4, #12]
 8009264:	9b03      	ldr	r3, [sp, #12]
 8009266:	4298      	cmp	r0, r3
 8009268:	bfb8      	it	lt
 800926a:	4618      	movlt	r0, r3
 800926c:	e7a6      	b.n	80091bc <_printf_i+0x160>
 800926e:	2301      	movs	r3, #1
 8009270:	4632      	mov	r2, r6
 8009272:	4649      	mov	r1, r9
 8009274:	4640      	mov	r0, r8
 8009276:	47d0      	blx	sl
 8009278:	3001      	adds	r0, #1
 800927a:	d09d      	beq.n	80091b8 <_printf_i+0x15c>
 800927c:	3501      	adds	r5, #1
 800927e:	68e3      	ldr	r3, [r4, #12]
 8009280:	9903      	ldr	r1, [sp, #12]
 8009282:	1a5b      	subs	r3, r3, r1
 8009284:	42ab      	cmp	r3, r5
 8009286:	dcf2      	bgt.n	800926e <_printf_i+0x212>
 8009288:	e7eb      	b.n	8009262 <_printf_i+0x206>
 800928a:	2500      	movs	r5, #0
 800928c:	f104 0619 	add.w	r6, r4, #25
 8009290:	e7f5      	b.n	800927e <_printf_i+0x222>
 8009292:	bf00      	nop
 8009294:	0800988d 	.word	0x0800988d
 8009298:	0800989e 	.word	0x0800989e

0800929c <memmove>:
 800929c:	4288      	cmp	r0, r1
 800929e:	b510      	push	{r4, lr}
 80092a0:	eb01 0402 	add.w	r4, r1, r2
 80092a4:	d902      	bls.n	80092ac <memmove+0x10>
 80092a6:	4284      	cmp	r4, r0
 80092a8:	4623      	mov	r3, r4
 80092aa:	d807      	bhi.n	80092bc <memmove+0x20>
 80092ac:	1e43      	subs	r3, r0, #1
 80092ae:	42a1      	cmp	r1, r4
 80092b0:	d008      	beq.n	80092c4 <memmove+0x28>
 80092b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092ba:	e7f8      	b.n	80092ae <memmove+0x12>
 80092bc:	4402      	add	r2, r0
 80092be:	4601      	mov	r1, r0
 80092c0:	428a      	cmp	r2, r1
 80092c2:	d100      	bne.n	80092c6 <memmove+0x2a>
 80092c4:	bd10      	pop	{r4, pc}
 80092c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092ce:	e7f7      	b.n	80092c0 <memmove+0x24>

080092d0 <_sbrk_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4d06      	ldr	r5, [pc, #24]	@ (80092ec <_sbrk_r+0x1c>)
 80092d4:	2300      	movs	r3, #0
 80092d6:	4604      	mov	r4, r0
 80092d8:	4608      	mov	r0, r1
 80092da:	602b      	str	r3, [r5, #0]
 80092dc:	f7f8 fbba 	bl	8001a54 <_sbrk>
 80092e0:	1c43      	adds	r3, r0, #1
 80092e2:	d102      	bne.n	80092ea <_sbrk_r+0x1a>
 80092e4:	682b      	ldr	r3, [r5, #0]
 80092e6:	b103      	cbz	r3, 80092ea <_sbrk_r+0x1a>
 80092e8:	6023      	str	r3, [r4, #0]
 80092ea:	bd38      	pop	{r3, r4, r5, pc}
 80092ec:	200008d8 	.word	0x200008d8

080092f0 <memcpy>:
 80092f0:	440a      	add	r2, r1
 80092f2:	4291      	cmp	r1, r2
 80092f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80092f8:	d100      	bne.n	80092fc <memcpy+0xc>
 80092fa:	4770      	bx	lr
 80092fc:	b510      	push	{r4, lr}
 80092fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009302:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009306:	4291      	cmp	r1, r2
 8009308:	d1f9      	bne.n	80092fe <memcpy+0xe>
 800930a:	bd10      	pop	{r4, pc}

0800930c <_realloc_r>:
 800930c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009310:	4680      	mov	r8, r0
 8009312:	4615      	mov	r5, r2
 8009314:	460c      	mov	r4, r1
 8009316:	b921      	cbnz	r1, 8009322 <_realloc_r+0x16>
 8009318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800931c:	4611      	mov	r1, r2
 800931e:	f7ff bc4b 	b.w	8008bb8 <_malloc_r>
 8009322:	b92a      	cbnz	r2, 8009330 <_realloc_r+0x24>
 8009324:	f7ff fbdc 	bl	8008ae0 <_free_r>
 8009328:	2400      	movs	r4, #0
 800932a:	4620      	mov	r0, r4
 800932c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009330:	f000 f81a 	bl	8009368 <_malloc_usable_size_r>
 8009334:	4285      	cmp	r5, r0
 8009336:	4606      	mov	r6, r0
 8009338:	d802      	bhi.n	8009340 <_realloc_r+0x34>
 800933a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800933e:	d8f4      	bhi.n	800932a <_realloc_r+0x1e>
 8009340:	4629      	mov	r1, r5
 8009342:	4640      	mov	r0, r8
 8009344:	f7ff fc38 	bl	8008bb8 <_malloc_r>
 8009348:	4607      	mov	r7, r0
 800934a:	2800      	cmp	r0, #0
 800934c:	d0ec      	beq.n	8009328 <_realloc_r+0x1c>
 800934e:	42b5      	cmp	r5, r6
 8009350:	462a      	mov	r2, r5
 8009352:	4621      	mov	r1, r4
 8009354:	bf28      	it	cs
 8009356:	4632      	movcs	r2, r6
 8009358:	f7ff ffca 	bl	80092f0 <memcpy>
 800935c:	4621      	mov	r1, r4
 800935e:	4640      	mov	r0, r8
 8009360:	f7ff fbbe 	bl	8008ae0 <_free_r>
 8009364:	463c      	mov	r4, r7
 8009366:	e7e0      	b.n	800932a <_realloc_r+0x1e>

08009368 <_malloc_usable_size_r>:
 8009368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800936c:	1f18      	subs	r0, r3, #4
 800936e:	2b00      	cmp	r3, #0
 8009370:	bfbc      	itt	lt
 8009372:	580b      	ldrlt	r3, [r1, r0]
 8009374:	18c0      	addlt	r0, r0, r3
 8009376:	4770      	bx	lr

08009378 <_init>:
 8009378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937a:	bf00      	nop
 800937c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937e:	bc08      	pop	{r3}
 8009380:	469e      	mov	lr, r3
 8009382:	4770      	bx	lr

08009384 <_fini>:
 8009384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009386:	bf00      	nop
 8009388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800938a:	bc08      	pop	{r3}
 800938c:	469e      	mov	lr, r3
 800938e:	4770      	bx	lr
