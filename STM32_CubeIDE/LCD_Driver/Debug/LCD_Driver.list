
LCD_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c08  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08007db8  08007db8  00008db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800804c  0800804c  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  0800804c  0800804c  0000904c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008054  08008054  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008054  08008054  00009054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008058  08008058  00009058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800805c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a060  2**0
                  CONTENTS
 10 .bss          00000680  20000060  20000060  0000a060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006e0  200006e0  0000a060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015110  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036cb  00000000  00000000  0001f1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00022870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6c  00000000  00000000  00023b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002643b  00000000  00000000  00024974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019de1  00000000  00000000  0004adaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de2ed  00000000  00000000  00064b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00142e7d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005134  00000000  00000000  00142ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00147ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007da0 	.word	0x08007da0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08007da0 	.word	0x08007da0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_I2C_MasterTxCpltCallback>:
}


/************ Interrupt Function *****************/
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    if(EEPROM_I2C == hi2c)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a06      	ldr	r2, [pc, #24]	@ (80005a4 <HAL_I2C_MasterTxCpltCallback+0x24>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d102      	bne.n	8000596 <HAL_I2C_MasterTxCpltCallback+0x16>
    {
        EEPROM_TX_STA = STD_ON;
 8000590:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8000592:	2201      	movs	r2, #1
 8000594:	701a      	strb	r2, [r3, #0]
    }
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	200002e4 	.word	0x200002e4
 80005a8:	20000000 	.word	0x20000000

080005ac <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    if(EEPROM_I2C == hi2c)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4a06      	ldr	r2, [pc, #24]	@ (80005d0 <HAL_I2C_MasterRxCpltCallback+0x24>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d102      	bne.n	80005c2 <HAL_I2C_MasterRxCpltCallback+0x16>
    {
        EEPROM_RX_STA = STD_ON;
 80005bc:	4b05      	ldr	r3, [pc, #20]	@ (80005d4 <HAL_I2C_MasterRxCpltCallback+0x28>)
 80005be:	2201      	movs	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
    }
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	200002e4 	.word	0x200002e4
 80005d4:	20000001 	.word	0x20000001

080005d8 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    if(EEPROM_I2C == hi2c)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a06      	ldr	r2, [pc, #24]	@ (80005fc <HAL_I2C_MemTxCpltCallback+0x24>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d102      	bne.n	80005ee <HAL_I2C_MemTxCpltCallback+0x16>
    {
        EEPROM_TX_STA = STD_ON;
 80005e8:	4b05      	ldr	r3, [pc, #20]	@ (8000600 <HAL_I2C_MemTxCpltCallback+0x28>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]
    }
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	200002e4 	.word	0x200002e4
 8000600:	20000000 	.word	0x20000000

08000604 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    if(EEPROM_I2C == hi2c)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4a06      	ldr	r2, [pc, #24]	@ (8000628 <HAL_I2C_MemRxCpltCallback+0x24>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d102      	bne.n	800061a <HAL_I2C_MemRxCpltCallback+0x16>
    {
        EEPROM_RX_STA = STD_ON;
 8000614:	4b05      	ldr	r3, [pc, #20]	@ (800062c <HAL_I2C_MemRxCpltCallback+0x28>)
 8000616:	2201      	movs	r2, #1
 8000618:	701a      	strb	r2, [r3, #0]
    }
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	200002e4 	.word	0x200002e4
 800062c:	20000001 	.word	0x20000001

08000630 <SPI_WriteData>:
//     GPIO_Init(LCD_CTRLB, &GPIO_InitStructure);						//初始化
// }

//向SPI总线传输一个8位数据
void  SPI_WriteData(uint8_t Data)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]
#if (VIRTUAL_SPI_LCD == STD_ON)
    unsigned char i=0;
 800063a:	2300      	movs	r3, #0
 800063c:	73fb      	strb	r3, [r7, #15]
    for(i=8;i>0;i--)
 800063e:	2308      	movs	r3, #8
 8000640:	73fb      	strb	r3, [r7, #15]
 8000642:	e01e      	b.n	8000682 <SPI_WriteData+0x52>
    {
        if(Data&0x80)
 8000644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000648:	2b00      	cmp	r3, #0
 800064a:	da05      	bge.n	8000658 <SPI_WriteData+0x28>
        {
            LCD_SDA_SET; //输出数据
 800064c:	2201      	movs	r2, #1
 800064e:	2108      	movs	r1, #8
 8000650:	4810      	ldr	r0, [pc, #64]	@ (8000694 <SPI_WriteData+0x64>)
 8000652:	f002 f949 	bl	80028e8 <HAL_GPIO_WritePin>
 8000656:	e004      	b.n	8000662 <SPI_WriteData+0x32>
        }
        else
        {
            LCD_SDA_CLR;
 8000658:	2200      	movs	r2, #0
 800065a:	2108      	movs	r1, #8
 800065c:	480d      	ldr	r0, [pc, #52]	@ (8000694 <SPI_WriteData+0x64>)
 800065e:	f002 f943 	bl	80028e8 <HAL_GPIO_WritePin>
        }
        LCD_SCL_CLR;       
 8000662:	2200      	movs	r2, #0
 8000664:	2104      	movs	r1, #4
 8000666:	480b      	ldr	r0, [pc, #44]	@ (8000694 <SPI_WriteData+0x64>)
 8000668:	f002 f93e 	bl	80028e8 <HAL_GPIO_WritePin>
        LCD_SCL_SET;
 800066c:	2201      	movs	r2, #1
 800066e:	2104      	movs	r1, #4
 8000670:	4808      	ldr	r0, [pc, #32]	@ (8000694 <SPI_WriteData+0x64>)
 8000672:	f002 f939 	bl	80028e8 <HAL_GPIO_WritePin>
        Data<<=1; 
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	71fb      	strb	r3, [r7, #7]
    for(i=8;i>0;i--)
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	3b01      	subs	r3, #1
 8000680:	73fb      	strb	r3, [r7, #15]
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1dd      	bne.n	8000644 <SPI_WriteData+0x14>
    uint8_t *pData = &Data;
    while(LCD_Tx_Status != STD_ON);
    LCD_Tx_Status = STD_OFF;
    HAL_SPI_Transmit_DMA(&LCD_SPI, pData, 1);
#endif
}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40020000 	.word	0x40020000

08000698 <Lcd_WriteIndex>:
 
 //向液晶屏写一个8位指令
 void Lcd_WriteIndex(uint8_t Index)
 {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
    //SPI 写命令时序开始
    LCD_CS_CLR;
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006a8:	480a      	ldr	r0, [pc, #40]	@ (80006d4 <Lcd_WriteIndex+0x3c>)
 80006aa:	f002 f91d 	bl	80028e8 <HAL_GPIO_WritePin>
    LCD_RS_CLR;
 80006ae:	2200      	movs	r2, #0
 80006b0:	2110      	movs	r1, #16
 80006b2:	4809      	ldr	r0, [pc, #36]	@ (80006d8 <Lcd_WriteIndex+0x40>)
 80006b4:	f002 f918 	bl	80028e8 <HAL_GPIO_WritePin>
    SPI_WriteData(Index);
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ffb8 	bl	8000630 <SPI_WriteData>
    LCD_CS_SET;
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006c6:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <Lcd_WriteIndex+0x3c>)
 80006c8:	f002 f90e 	bl	80028e8 <HAL_GPIO_WritePin>
 }
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40020400 	.word	0x40020400
 80006d8:	40020000 	.word	0x40020000

080006dc <Lcd_WriteData>:
 
 //向液晶屏写一个8位数据
 void Lcd_WriteData(uint8_t Data)
 {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
    LCD_CS_CLR;
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006ec:	480a      	ldr	r0, [pc, #40]	@ (8000718 <Lcd_WriteData+0x3c>)
 80006ee:	f002 f8fb 	bl	80028e8 <HAL_GPIO_WritePin>
    LCD_RS_SET;
 80006f2:	2201      	movs	r2, #1
 80006f4:	2110      	movs	r1, #16
 80006f6:	4809      	ldr	r0, [pc, #36]	@ (800071c <Lcd_WriteData+0x40>)
 80006f8:	f002 f8f6 	bl	80028e8 <HAL_GPIO_WritePin>
    SPI_WriteData(Data);
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff96 	bl	8000630 <SPI_WriteData>
    LCD_CS_SET; 
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800070a:	4803      	ldr	r0, [pc, #12]	@ (8000718 <Lcd_WriteData+0x3c>)
 800070c:	f002 f8ec 	bl	80028e8 <HAL_GPIO_WritePin>
 }
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40020400 	.word	0x40020400
 800071c:	40020000 	.word	0x40020000

08000720 <LCD_WriteData_16Bit>:
 //向液晶屏写一个16位数据
 void LCD_WriteData_16Bit(uint16_t Data)
 {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	80fb      	strh	r3, [r7, #6]
    LCD_CS_CLR;
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000730:	480e      	ldr	r0, [pc, #56]	@ (800076c <LCD_WriteData_16Bit+0x4c>)
 8000732:	f002 f8d9 	bl	80028e8 <HAL_GPIO_WritePin>
    LCD_RS_SET;
 8000736:	2201      	movs	r2, #1
 8000738:	2110      	movs	r1, #16
 800073a:	480d      	ldr	r0, [pc, #52]	@ (8000770 <LCD_WriteData_16Bit+0x50>)
 800073c:	f002 f8d4 	bl	80028e8 <HAL_GPIO_WritePin>
    SPI_WriteData(Data>>8); 	//写入高8位数据
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	0a1b      	lsrs	r3, r3, #8
 8000744:	b29b      	uxth	r3, r3
 8000746:	b2db      	uxtb	r3, r3
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff71 	bl	8000630 <SPI_WriteData>
    SPI_WriteData(Data); 			//写入低8位数据
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff6c 	bl	8000630 <SPI_WriteData>
    LCD_CS_SET; 
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800075e:	4803      	ldr	r0, [pc, #12]	@ (800076c <LCD_WriteData_16Bit+0x4c>)
 8000760:	f002 f8c2 	bl	80028e8 <HAL_GPIO_WritePin>
 }
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40020400 	.word	0x40020400
 8000770:	40020000 	.word	0x40020000

08000774 <Lcd_Reset>:
    Lcd_WriteIndex(Index);
    Lcd_WriteData(Data);
}
 
void Lcd_Reset(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
     LCD_RST_CLR;
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800077e:	4808      	ldr	r0, [pc, #32]	@ (80007a0 <Lcd_Reset+0x2c>)
 8000780:	f002 f8b2 	bl	80028e8 <HAL_GPIO_WritePin>
     HAL_Delay(100);
 8000784:	2064      	movs	r0, #100	@ 0x64
 8000786:	f001 f9bd 	bl	8001b04 <HAL_Delay>
     LCD_RST_SET;
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000790:	4803      	ldr	r0, [pc, #12]	@ (80007a0 <Lcd_Reset+0x2c>)
 8000792:	f002 f8a9 	bl	80028e8 <HAL_GPIO_WritePin>
     HAL_Delay(100);
 8000796:	2064      	movs	r0, #100	@ 0x64
 8000798:	f001 f9b4 	bl	8001b04 <HAL_Delay>
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40020400 	.word	0x40020400

080007a4 <Lcd_Init>:
 
 //LCD Init For 1.44Inch LCD Panel with ST7735R.
 void Lcd_Init(void)
 {	
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
//     LCD_GPIO_Init();
     Lcd_Reset(); //Reset before LCD Init.
 80007a8:	f7ff ffe4 	bl	8000774 <Lcd_Reset>
 
     //LCD Init For 1.44Inch LCD Panel with ST7735R.
     Lcd_WriteIndex(0x11);//Sleep exit 
 80007ac:	2011      	movs	r0, #17
 80007ae:	f7ff ff73 	bl	8000698 <Lcd_WriteIndex>
     HAL_Delay (120);
 80007b2:	2078      	movs	r0, #120	@ 0x78
 80007b4:	f001 f9a6 	bl	8001b04 <HAL_Delay>
     //ST7735R Frame Rate
     Lcd_WriteIndex(0xB1); 
 80007b8:	20b1      	movs	r0, #177	@ 0xb1
 80007ba:	f7ff ff6d 	bl	8000698 <Lcd_WriteIndex>
     Lcd_WriteData(0x01); 
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff ff8c 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x2C); 
 80007c4:	202c      	movs	r0, #44	@ 0x2c
 80007c6:	f7ff ff89 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x2D); 
 80007ca:	202d      	movs	r0, #45	@ 0x2d
 80007cc:	f7ff ff86 	bl	80006dc <Lcd_WriteData>
 
     Lcd_WriteIndex(0xB2); 
 80007d0:	20b2      	movs	r0, #178	@ 0xb2
 80007d2:	f7ff ff61 	bl	8000698 <Lcd_WriteIndex>
     Lcd_WriteData(0x01); 
 80007d6:	2001      	movs	r0, #1
 80007d8:	f7ff ff80 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x2C); 
 80007dc:	202c      	movs	r0, #44	@ 0x2c
 80007de:	f7ff ff7d 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x2D); 
 80007e2:	202d      	movs	r0, #45	@ 0x2d
 80007e4:	f7ff ff7a 	bl	80006dc <Lcd_WriteData>
 
     Lcd_WriteIndex(0xB3); 
 80007e8:	20b3      	movs	r0, #179	@ 0xb3
 80007ea:	f7ff ff55 	bl	8000698 <Lcd_WriteIndex>
     Lcd_WriteData(0x01); 
 80007ee:	2001      	movs	r0, #1
 80007f0:	f7ff ff74 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x2C); 
 80007f4:	202c      	movs	r0, #44	@ 0x2c
 80007f6:	f7ff ff71 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x2D); 
 80007fa:	202d      	movs	r0, #45	@ 0x2d
 80007fc:	f7ff ff6e 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x01); 
 8000800:	2001      	movs	r0, #1
 8000802:	f7ff ff6b 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x2C); 
 8000806:	202c      	movs	r0, #44	@ 0x2c
 8000808:	f7ff ff68 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x2D); 
 800080c:	202d      	movs	r0, #45	@ 0x2d
 800080e:	f7ff ff65 	bl	80006dc <Lcd_WriteData>
     
     Lcd_WriteIndex(0xB4); //Column inversion 
 8000812:	20b4      	movs	r0, #180	@ 0xb4
 8000814:	f7ff ff40 	bl	8000698 <Lcd_WriteIndex>
     Lcd_WriteData(0x07); 
 8000818:	2007      	movs	r0, #7
 800081a:	f7ff ff5f 	bl	80006dc <Lcd_WriteData>
     
     //ST7735R Power Sequence
     Lcd_WriteIndex(0xC0); 
 800081e:	20c0      	movs	r0, #192	@ 0xc0
 8000820:	f7ff ff3a 	bl	8000698 <Lcd_WriteIndex>
     Lcd_WriteData(0xA2); 
 8000824:	20a2      	movs	r0, #162	@ 0xa2
 8000826:	f7ff ff59 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x02); 
 800082a:	2002      	movs	r0, #2
 800082c:	f7ff ff56 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x84); 
 8000830:	2084      	movs	r0, #132	@ 0x84
 8000832:	f7ff ff53 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteIndex(0xC1); 
 8000836:	20c1      	movs	r0, #193	@ 0xc1
 8000838:	f7ff ff2e 	bl	8000698 <Lcd_WriteIndex>
     Lcd_WriteData(0xC5); 
 800083c:	20c5      	movs	r0, #197	@ 0xc5
 800083e:	f7ff ff4d 	bl	80006dc <Lcd_WriteData>
 
     Lcd_WriteIndex(0xC2); 
 8000842:	20c2      	movs	r0, #194	@ 0xc2
 8000844:	f7ff ff28 	bl	8000698 <Lcd_WriteIndex>
     Lcd_WriteData(0x0A); 
 8000848:	200a      	movs	r0, #10
 800084a:	f7ff ff47 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x00); 
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff ff44 	bl	80006dc <Lcd_WriteData>
 
     Lcd_WriteIndex(0xC3); 
 8000854:	20c3      	movs	r0, #195	@ 0xc3
 8000856:	f7ff ff1f 	bl	8000698 <Lcd_WriteIndex>
     Lcd_WriteData(0x8A); 
 800085a:	208a      	movs	r0, #138	@ 0x8a
 800085c:	f7ff ff3e 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x2A); 
 8000860:	202a      	movs	r0, #42	@ 0x2a
 8000862:	f7ff ff3b 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteIndex(0xC4); 
 8000866:	20c4      	movs	r0, #196	@ 0xc4
 8000868:	f7ff ff16 	bl	8000698 <Lcd_WriteIndex>
     Lcd_WriteData(0x8A); 
 800086c:	208a      	movs	r0, #138	@ 0x8a
 800086e:	f7ff ff35 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0xEE); 
 8000872:	20ee      	movs	r0, #238	@ 0xee
 8000874:	f7ff ff32 	bl	80006dc <Lcd_WriteData>
     
     Lcd_WriteIndex(0xC5); //VCOM 
 8000878:	20c5      	movs	r0, #197	@ 0xc5
 800087a:	f7ff ff0d 	bl	8000698 <Lcd_WriteIndex>
     Lcd_WriteData(0x0E); 
 800087e:	200e      	movs	r0, #14
 8000880:	f7ff ff2c 	bl	80006dc <Lcd_WriteData>
     
     Lcd_WriteIndex(0x36); //MX, MY, RGB mode 
 8000884:	2036      	movs	r0, #54	@ 0x36
 8000886:	f7ff ff07 	bl	8000698 <Lcd_WriteIndex>
     Lcd_WriteData(0xC8); 
 800088a:	20c8      	movs	r0, #200	@ 0xc8
 800088c:	f7ff ff26 	bl	80006dc <Lcd_WriteData>
     
     //ST7735R Gamma Sequence
     Lcd_WriteIndex(0xe0); 
 8000890:	20e0      	movs	r0, #224	@ 0xe0
 8000892:	f7ff ff01 	bl	8000698 <Lcd_WriteIndex>
     Lcd_WriteData(0x0f); 
 8000896:	200f      	movs	r0, #15
 8000898:	f7ff ff20 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x1a); 
 800089c:	201a      	movs	r0, #26
 800089e:	f7ff ff1d 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x0f); 
 80008a2:	200f      	movs	r0, #15
 80008a4:	f7ff ff1a 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x18); 
 80008a8:	2018      	movs	r0, #24
 80008aa:	f7ff ff17 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x2f); 
 80008ae:	202f      	movs	r0, #47	@ 0x2f
 80008b0:	f7ff ff14 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x28); 
 80008b4:	2028      	movs	r0, #40	@ 0x28
 80008b6:	f7ff ff11 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x20); 
 80008ba:	2020      	movs	r0, #32
 80008bc:	f7ff ff0e 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x22); 
 80008c0:	2022      	movs	r0, #34	@ 0x22
 80008c2:	f7ff ff0b 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x1f); 
 80008c6:	201f      	movs	r0, #31
 80008c8:	f7ff ff08 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x1b); 
 80008cc:	201b      	movs	r0, #27
 80008ce:	f7ff ff05 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x23); 
 80008d2:	2023      	movs	r0, #35	@ 0x23
 80008d4:	f7ff ff02 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x37); 
 80008d8:	2037      	movs	r0, #55	@ 0x37
 80008da:	f7ff feff 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x00); 	
 80008de:	2000      	movs	r0, #0
 80008e0:	f7ff fefc 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x07); 
 80008e4:	2007      	movs	r0, #7
 80008e6:	f7ff fef9 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x02); 
 80008ea:	2002      	movs	r0, #2
 80008ec:	f7ff fef6 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x10); 
 80008f0:	2010      	movs	r0, #16
 80008f2:	f7ff fef3 	bl	80006dc <Lcd_WriteData>
 
     Lcd_WriteIndex(0xe1); 
 80008f6:	20e1      	movs	r0, #225	@ 0xe1
 80008f8:	f7ff fece 	bl	8000698 <Lcd_WriteIndex>
     Lcd_WriteData(0x0f); 
 80008fc:	200f      	movs	r0, #15
 80008fe:	f7ff feed 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x1b); 
 8000902:	201b      	movs	r0, #27
 8000904:	f7ff feea 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x0f); 
 8000908:	200f      	movs	r0, #15
 800090a:	f7ff fee7 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x17); 
 800090e:	2017      	movs	r0, #23
 8000910:	f7ff fee4 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x33); 
 8000914:	2033      	movs	r0, #51	@ 0x33
 8000916:	f7ff fee1 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x2c); 
 800091a:	202c      	movs	r0, #44	@ 0x2c
 800091c:	f7ff fede 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x29); 
 8000920:	2029      	movs	r0, #41	@ 0x29
 8000922:	f7ff fedb 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x2e); 
 8000926:	202e      	movs	r0, #46	@ 0x2e
 8000928:	f7ff fed8 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x30); 
 800092c:	2030      	movs	r0, #48	@ 0x30
 800092e:	f7ff fed5 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x30); 
 8000932:	2030      	movs	r0, #48	@ 0x30
 8000934:	f7ff fed2 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x39); 
 8000938:	2039      	movs	r0, #57	@ 0x39
 800093a:	f7ff fecf 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x3f); 
 800093e:	203f      	movs	r0, #63	@ 0x3f
 8000940:	f7ff fecc 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x00); 
 8000944:	2000      	movs	r0, #0
 8000946:	f7ff fec9 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x07); 
 800094a:	2007      	movs	r0, #7
 800094c:	f7ff fec6 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x03); 
 8000950:	2003      	movs	r0, #3
 8000952:	f7ff fec3 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x10);  
 8000956:	2010      	movs	r0, #16
 8000958:	f7ff fec0 	bl	80006dc <Lcd_WriteData>
     
     Lcd_WriteIndex(0x2a);
 800095c:	202a      	movs	r0, #42	@ 0x2a
 800095e:	f7ff fe9b 	bl	8000698 <Lcd_WriteIndex>
     Lcd_WriteData(0x00);
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff feba 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x00);
 8000968:	2000      	movs	r0, #0
 800096a:	f7ff feb7 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x00);
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff feb4 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x7f);
 8000974:	207f      	movs	r0, #127	@ 0x7f
 8000976:	f7ff feb1 	bl	80006dc <Lcd_WriteData>
 
     Lcd_WriteIndex(0x2b);
 800097a:	202b      	movs	r0, #43	@ 0x2b
 800097c:	f7ff fe8c 	bl	8000698 <Lcd_WriteIndex>
     Lcd_WriteData(0x00);
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff feab 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x00);
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff fea8 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x00);
 800098c:	2000      	movs	r0, #0
 800098e:	f7ff fea5 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteData(0x9f);
 8000992:	209f      	movs	r0, #159	@ 0x9f
 8000994:	f7ff fea2 	bl	80006dc <Lcd_WriteData>
     
     Lcd_WriteIndex(0xF0); //Enable test command  
 8000998:	20f0      	movs	r0, #240	@ 0xf0
 800099a:	f7ff fe7d 	bl	8000698 <Lcd_WriteIndex>
     Lcd_WriteData(0x01); 
 800099e:	2001      	movs	r0, #1
 80009a0:	f7ff fe9c 	bl	80006dc <Lcd_WriteData>
     Lcd_WriteIndex(0xF6); //Disable ram power save mode 
 80009a4:	20f6      	movs	r0, #246	@ 0xf6
 80009a6:	f7ff fe77 	bl	8000698 <Lcd_WriteIndex>
     Lcd_WriteData(0x00); 
 80009aa:	2000      	movs	r0, #0
 80009ac:	f7ff fe96 	bl	80006dc <Lcd_WriteData>
     
     Lcd_WriteIndex(0x3A); //65k mode 
 80009b0:	203a      	movs	r0, #58	@ 0x3a
 80009b2:	f7ff fe71 	bl	8000698 <Lcd_WriteIndex>
     Lcd_WriteData(0x05); 
 80009b6:	2005      	movs	r0, #5
 80009b8:	f7ff fe90 	bl	80006dc <Lcd_WriteData>
     
     
     Lcd_WriteIndex(0x29);//Display on	 
 80009bc:	2029      	movs	r0, #41	@ 0x29
 80009be:	f7ff fe6b 	bl	8000698 <Lcd_WriteIndex>
 }
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <Lcd_SetRegion>:
 功能：设置lcd显示区域，在此区域写点数据自动换行
 入口参数：xy起点和终点
 返回值：无
 *************************************************/
void Lcd_SetRegion(uint16_t x_start,uint16_t y_start,uint16_t x_end,uint16_t y_end)
{		
 80009c6:	b590      	push	{r4, r7, lr}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4604      	mov	r4, r0
 80009ce:	4608      	mov	r0, r1
 80009d0:	4611      	mov	r1, r2
 80009d2:	461a      	mov	r2, r3
 80009d4:	4623      	mov	r3, r4
 80009d6:	80fb      	strh	r3, [r7, #6]
 80009d8:	4603      	mov	r3, r0
 80009da:	80bb      	strh	r3, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	807b      	strh	r3, [r7, #2]
 80009e0:	4613      	mov	r3, r2
 80009e2:	803b      	strh	r3, [r7, #0]
    Lcd_WriteIndex(0x2a);
 80009e4:	202a      	movs	r0, #42	@ 0x2a
 80009e6:	f7ff fe57 	bl	8000698 <Lcd_WriteIndex>
    Lcd_WriteData(0x00);
 80009ea:	2000      	movs	r0, #0
 80009ec:	f7ff fe76 	bl	80006dc <Lcd_WriteData>
    Lcd_WriteData(x_start+2);
 80009f0:	88fb      	ldrh	r3, [r7, #6]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	3302      	adds	r3, #2
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fe6f 	bl	80006dc <Lcd_WriteData>
    Lcd_WriteData(0x00);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff fe6c 	bl	80006dc <Lcd_WriteData>
    Lcd_WriteData(x_end+2);
 8000a04:	887b      	ldrh	r3, [r7, #2]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	3302      	adds	r3, #2
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fe65 	bl	80006dc <Lcd_WriteData>

    Lcd_WriteIndex(0x2b);
 8000a12:	202b      	movs	r0, #43	@ 0x2b
 8000a14:	f7ff fe40 	bl	8000698 <Lcd_WriteIndex>
    Lcd_WriteData(0x00);
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f7ff fe5f 	bl	80006dc <Lcd_WriteData>
    Lcd_WriteData(y_start+3);
 8000a1e:	88bb      	ldrh	r3, [r7, #4]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	3303      	adds	r3, #3
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fe58 	bl	80006dc <Lcd_WriteData>
    Lcd_WriteData(0x00);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff fe55 	bl	80006dc <Lcd_WriteData>
    Lcd_WriteData(y_end+3);
 8000a32:	883b      	ldrh	r3, [r7, #0]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	3303      	adds	r3, #3
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fe4e 	bl	80006dc <Lcd_WriteData>
    
    Lcd_WriteIndex(0x2c);
 8000a40:	202c      	movs	r0, #44	@ 0x2c
 8000a42:	f7ff fe29 	bl	8000698 <Lcd_WriteIndex>

}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd90      	pop	{r4, r7, pc}

08000a4e <Lcd_Clear>:
功能：全屏清屏函数
入口参数：填充颜色COLOR
返回值：无
*************************************************/
void Lcd_Clear(uint16_t Color)               
{	
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b084      	sub	sp, #16
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	4603      	mov	r3, r0
 8000a56:	80fb      	strh	r3, [r7, #6]
    unsigned int i,m;
    Lcd_SetRegion(0,0,X_MAX_PIXEL-1,Y_MAX_PIXEL-1);
 8000a58:	237f      	movs	r3, #127	@ 0x7f
 8000a5a:	227f      	movs	r2, #127	@ 0x7f
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f7ff ffb1 	bl	80009c6 <Lcd_SetRegion>
    Lcd_WriteIndex(0x2C);
 8000a64:	202c      	movs	r0, #44	@ 0x2c
 8000a66:	f7ff fe17 	bl	8000698 <Lcd_WriteIndex>
    for(i=0;i<X_MAX_PIXEL;i++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	e00f      	b.n	8000a90 <Lcd_Clear+0x42>
        for(m=0;m<Y_MAX_PIXEL;m++)
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	e006      	b.n	8000a84 <Lcd_Clear+0x36>
        {	
            LCD_WriteData_16Bit(Color);
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fe51 	bl	8000720 <LCD_WriteData_16Bit>
        for(m=0;m<Y_MAX_PIXEL;m++)
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	3301      	adds	r3, #1
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a88:	d9f5      	bls.n	8000a76 <Lcd_Clear+0x28>
    for(i=0;i<X_MAX_PIXEL;i++)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a94:	d9ec      	bls.n	8000a70 <Lcd_Clear+0x22>
        }   
}
 8000a96:	bf00      	nop
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <DEBUG_PRINTF>:
	msg.msghead = 0;
	msg.msgtail = 0;
	msg.emptylen = MSGLOG_LEN;
}

uint32_t DEBUG_PRINTF(const char *format, ...) {
 8000aa0:	b40f      	push	{r0, r1, r2, r3}
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, format);
 8000aa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aac:	603b      	str	r3, [r7, #0]

    uint8_t ret = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	74fb      	strb	r3, [r7, #19]
    uint32_t tsLen = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
    uint32_t msgLen = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
    uint32_t totalLen = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]

    uint32_t currentTime = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]

    while(TxStatus != STD_ON);
 8000ac2:	bf00      	nop
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b3c <DEBUG_PRINTF+0x9c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d1fb      	bne.n	8000ac4 <DEBUG_PRINTF+0x24>
    TxStatus = STD_OFF;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <DEBUG_PRINTF+0x9c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
    currentTime = HAL_GetTick();
 8000ad2:	f001 f80b 	bl	8001aec <HAL_GetTick>
 8000ad6:	6078      	str	r0, [r7, #4]
    tsLen = snprintf(TxMsg, sizeof(TxMsg), "%010u", currentTime);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a19      	ldr	r2, [pc, #100]	@ (8000b40 <DEBUG_PRINTF+0xa0>)
 8000adc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ae0:	4818      	ldr	r0, [pc, #96]	@ (8000b44 <DEBUG_PRINTF+0xa4>)
 8000ae2:	f006 fc6f 	bl	80073c4 <sniprintf>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	60fb      	str	r3, [r7, #12]
    msgLen = vsnprintf(TxMsg+tsLen, sizeof(TxMsg), format, args);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	4a15      	ldr	r2, [pc, #84]	@ (8000b44 <DEBUG_PRINTF+0xa4>)
 8000aee:	1898      	adds	r0, r3, r2
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	6a3a      	ldr	r2, [r7, #32]
 8000af4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000af8:	f006 fcc4 	bl	8007484 <vsniprintf>
 8000afc:	4603      	mov	r3, r0
 8000afe:	60bb      	str	r3, [r7, #8]
    totalLen = tsLen + msgLen;
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	4413      	add	r3, r2
 8000b06:	617b      	str	r3, [r7, #20]

    va_end(args);

    if (totalLen == sizeof(TxMsg))
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b0e:	d101      	bne.n	8000b14 <DEBUG_PRINTF+0x74>
    {
        totalLen = sizeof(TxMsg) - 1;
 8000b10:	23ff      	movs	r3, #255	@ 0xff
 8000b12:	617b      	str	r3, [r7, #20]
    }
#if (MSG_PRINT_METHOD == PRINT_IMM)
#if (TRANSMIT_METHOD == POLLING)
    ret = HAL_UART_Transmit(TRANSMIT_COMPORT, (const uint8_t *)TxMsg, totalLen, TRANSMIT_TIMEOUT);
#elif (TRANSMIT_METHOD == DMA)
    ret = HAL_UART_Transmit_DMA(TRANSMIT_COMPORT, (const uint8_t *)TxMsg, totalLen);
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	490a      	ldr	r1, [pc, #40]	@ (8000b44 <DEBUG_PRINTF+0xa4>)
 8000b1c:	480a      	ldr	r0, [pc, #40]	@ (8000b48 <DEBUG_PRINTF+0xa8>)
 8000b1e:	f005 fa9b 	bl	8006058 <HAL_UART_Transmit_DMA>
 8000b22:	4603      	mov	r3, r0
 8000b24:	74fb      	strb	r3, [r7, #19]
    ret = HAL_UART_Transmit_IT(TRANSMIT_COMPORT, (const uint8_t *)TxMsg, totalLen);
#endif
#elif (MSG_PRINT_METHOD == PRINT_TASK)
    Msg_Copy(TxMsg, totalLen);
#endif
    return ((totalLen<< 2) | ret);
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	009a      	lsls	r2, r3, #2
 8000b2a:	7cfb      	ldrb	r3, [r7, #19]
 8000b2c:	4313      	orrs	r3, r2
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr
 8000b3c:	20000002 	.word	0x20000002
 8000b40:	08007db8 	.word	0x08007db8
 8000b44:	2000007c 	.word	0x2000007c
 8000b48:	2000048c 	.word	0x2000048c

08000b4c <HAL_UARTEx_RxEventCallback>:
    return ((totalLen<< 2) | ret);
}


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	807b      	strh	r3, [r7, #2]
    if(RECEIVE_COMPORT == huart)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a0d      	ldr	r2, [pc, #52]	@ (8000b90 <HAL_UARTEx_RxEventCallback+0x44>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d113      	bne.n	8000b88 <HAL_UARTEx_RxEventCallback+0x3c>
    {
        HAL_UART_Transmit_DMA(TRANSMIT_COMPORT, (const uint8_t *)RxMsg, Size);
 8000b60:	887b      	ldrh	r3, [r7, #2]
 8000b62:	461a      	mov	r2, r3
 8000b64:	490b      	ldr	r1, [pc, #44]	@ (8000b94 <HAL_UARTEx_RxEventCallback+0x48>)
 8000b66:	480a      	ldr	r0, [pc, #40]	@ (8000b90 <HAL_UARTEx_RxEventCallback+0x44>)
 8000b68:	f005 fa76 	bl	8006058 <HAL_UART_Transmit_DMA>
        HAL_UARTEx_ReceiveToIdle_DMA(RECEIVE_COMPORT, RxMsg, RX_MESSAGE_LEN);
 8000b6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b70:	4908      	ldr	r1, [pc, #32]	@ (8000b94 <HAL_UARTEx_RxEventCallback+0x48>)
 8000b72:	4807      	ldr	r0, [pc, #28]	@ (8000b90 <HAL_UARTEx_RxEventCallback+0x44>)
 8000b74:	f005 fae0 	bl	8006138 <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(RECEIVE_DMA, DMA_IT_HT);
 8000b78:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f022 0208 	bic.w	r2, r2, #8
 8000b86:	601a      	str	r2, [r3, #0]
    }
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2000048c 	.word	0x2000048c
 8000b94:	2000017c 	.word	0x2000017c
 8000b98:	200004d4 	.word	0x200004d4

08000b9c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
    if(RECEIVE_COMPORT == huart)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a06      	ldr	r2, [pc, #24]	@ (8000bc0 <HAL_UART_TxCpltCallback+0x24>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d102      	bne.n	8000bb2 <HAL_UART_TxCpltCallback+0x16>
    {
        TxStatus = STD_ON;
 8000bac:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <HAL_UART_TxCpltCallback+0x28>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
    }
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	2000048c 	.word	0x2000048c
 8000bc4:	20000002 	.word	0x20000002

08000bc8 <Tower_Init>:
 *      Author: 18283
 */
#include "bsp_tower.h"

void Tower_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(TIM_TOWER_PORT, TIM_TOWER_CHANNEL);
 8000bcc:	2104      	movs	r1, #4
 8000bce:	4802      	ldr	r0, [pc, #8]	@ (8000bd8 <Tower_Init+0x10>)
 8000bd0:	f004 fadc 	bl	800518c <HAL_TIM_PWM_Start>
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000444 	.word	0x20000444

08000bdc <GreenLed_Test>:
    }
    LOG_RELEASE("--------------Tower&Led around test End--------------\n");
}

void GreenLed_Test(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
    LOG_RELEASE("--------------Led around test Begin------------\n");
 8000be2:	481a      	ldr	r0, [pc, #104]	@ (8000c4c <GreenLed_Test+0x70>)
 8000be4:	f7ff ff5c 	bl	8000aa0 <DEBUG_PRINTF>
    for(int i = 0; i < LED_TEST_STEP; i++)
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	e00e      	b.n	8000c0c <GreenLed_Test+0x30>
    {
        __HAL_TIM_SET_COMPARE(TIM_TOWER_PORT, TIM_TOWER_CHANNEL, i * LED_TEST_STEPLEN);
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <GreenLed_Test+0x74>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	639a      	str	r2, [r3, #56]	@ 0x38
        HAL_Delay(LED_TEST_DELAY);
 8000c00:	2032      	movs	r0, #50	@ 0x32
 8000c02:	f000 ff7f 	bl	8001b04 <HAL_Delay>
    for(int i = 0; i < LED_TEST_STEP; i++)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2bc6      	cmp	r3, #198	@ 0xc6
 8000c10:	dded      	ble.n	8000bee <GreenLed_Test+0x12>
    }
    for(int i = 0; i < LED_TEST_STEP; i++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	e00f      	b.n	8000c38 <GreenLed_Test+0x5c>
    {
        __HAL_TIM_SET_COMPARE(TIM_TOWER_PORT, TIM_TOWER_CHANNEL, TIM_TOWER_PWM_PERIOD - i * LED_TEST_STEPLEN);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	f06f 0209 	mvn.w	r2, #9
 8000c1e:	fb02 f303 	mul.w	r3, r2, r3
 8000c22:	f503 62fa 	add.w	r2, r3, #2000	@ 0x7d0
 8000c26:	4b0a      	ldr	r3, [pc, #40]	@ (8000c50 <GreenLed_Test+0x74>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	639a      	str	r2, [r3, #56]	@ 0x38
        HAL_Delay(LED_TEST_DELAY);
 8000c2c:	2032      	movs	r0, #50	@ 0x32
 8000c2e:	f000 ff69 	bl	8001b04 <HAL_Delay>
    for(int i = 0; i < LED_TEST_STEP; i++)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	2bc6      	cmp	r3, #198	@ 0xc6
 8000c3c:	ddec      	ble.n	8000c18 <GreenLed_Test+0x3c>
    }
    LOG_RELEASE("--------------Led around test End--------------\n");
 8000c3e:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <GreenLed_Test+0x78>)
 8000c40:	f7ff ff2e 	bl	8000aa0 <DEBUG_PRINTF>
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	08007f34 	.word	0x08007f34
 8000c50:	20000444 	.word	0x20000444
 8000c54:	08007f70 	.word	0x08007f70

08000c58 <HAL_TIM_PeriodElapsedCallback>:
{
    return OS_Tick1ms;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
    if(OS_TICK_TIMER == htim)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a1a      	ldr	r2, [pc, #104]	@ (8000ccc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d12a      	bne.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x66>
    {
        OS_Tick1ms++;
 8000c68:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	4a18      	ldr	r2, [pc, #96]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c70:	6013      	str	r3, [r2, #0]
        if((OS_Tick1ms % 500) == 0)
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4b17      	ldr	r3, [pc, #92]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c78:	fba3 1302 	umull	r1, r3, r3, r2
 8000c7c:	095b      	lsrs	r3, r3, #5
 8000c7e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000c82:	fb01 f303 	mul.w	r3, r1, r3
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d105      	bne.n	8000c98 <HAL_TIM_PeriodElapsedCallback+0x40>
        {
            SET_500MS_TASK;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f043 0320 	orr.w	r3, r3, #32
 8000c94:	4a10      	ldr	r2, [pc, #64]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c96:	6013      	str	r3, [r2, #0]
        }
        if((OS_Tick1ms % 1000) == 0)
 8000c98:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000ca2:	099b      	lsrs	r3, r3, #6
 8000ca4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ca8:	fb01 f303 	mul.w	r3, r1, r3
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d105      	bne.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x66>
        {
            SET_1000MS_TASK;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cba:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000cbc:	6013      	str	r3, [r2, #0]
        }
    }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	200003fc 	.word	0x200003fc
 8000cd0:	2000027c 	.word	0x2000027c
 8000cd4:	10624dd3 	.word	0x10624dd3
 8000cd8:	20000280 	.word	0x20000280

08000cdc <Task_1ms_Entry>:
    // TxStatus = STD_OFF;
	// HAL_UART_Transmit_DMA(TRANSMIT_COMPORT, pData, 1);
}

void Task_1ms_Entry(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
	// LOG_RELEASE("This is a 1ms message\n");
	RESET_1MS_TASK;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <Task_1ms_Entry+0x1c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f023 0301 	bic.w	r3, r3, #1
 8000ce8:	4a03      	ldr	r2, [pc, #12]	@ (8000cf8 <Task_1ms_Entry+0x1c>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000280 	.word	0x20000280

08000cfc <Task_5ms_Entry>:

void Task_5ms_Entry(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
	// LOG_RELEASE("This is a 5ms message\n");
	RESET_5MS_TASK;
 8000d00:	4b05      	ldr	r3, [pc, #20]	@ (8000d18 <Task_5ms_Entry+0x1c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f023 0302 	bic.w	r3, r3, #2
 8000d08:	4a03      	ldr	r2, [pc, #12]	@ (8000d18 <Task_5ms_Entry+0x1c>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000280 	.word	0x20000280

08000d1c <Task_10ms_Entry>:

void Task_10ms_Entry(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
	// LOG_RELEASE("This is a 10ms message\n");
	RESET_10MS_TASK;
 8000d20:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <Task_10ms_Entry+0x1c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f023 0304 	bic.w	r3, r3, #4
 8000d28:	4a03      	ldr	r2, [pc, #12]	@ (8000d38 <Task_10ms_Entry+0x1c>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000280 	.word	0x20000280

08000d3c <Task_50ms_Entry>:

void Task_50ms_Entry(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
	// LOG_RELEASE("This is a 50ms message\n");
	RESET_50MS_TASK;
 8000d40:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <Task_50ms_Entry+0x1c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f023 0308 	bic.w	r3, r3, #8
 8000d48:	4a03      	ldr	r2, [pc, #12]	@ (8000d58 <Task_50ms_Entry+0x1c>)
 8000d4a:	6013      	str	r3, [r2, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000280 	.word	0x20000280

08000d5c <Task_100ms_Entry>:

void Task_100ms_Entry(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
	// LOG_RELEASE("This is a 100ms message\n");
	RESET_100MS_TASK;
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <Task_100ms_Entry+0x1c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f023 0310 	bic.w	r3, r3, #16
 8000d68:	4a03      	ldr	r2, [pc, #12]	@ (8000d78 <Task_100ms_Entry+0x1c>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000280 	.word	0x20000280

08000d7c <Task_500ms_Entry>:
extern volatile uint32_t OS_Tick1ms;
// uint8_t Tx500Msg[12];
// uint8_t Tx500MsgReal[12];
// extern uint8_t DMA2_Stream0_TxStatus;
void Task_500ms_Entry(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 500ms message\n");
 8000d80:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <Task_500ms_Entry+0x1c>)
 8000d82:	f7ff fe8d 	bl	8000aa0 <DEBUG_PRINTF>
	// HAL_UART_Transmit_DMA(&LOG_COM, (const uint8_t *)Tx500MsgReal, 12);
	// LOG_RELEASE("SPI Tx Cpt: %d.\n", SPI_Tx_Cpt);
	// LOG_RELEASE("LCD Tx Cpt: %d.\n", LCD_Tx_Cpt);
	// OLED_task();
	// Lcd_Task();
	RESET_500MS_TASK;
 8000d86:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <Task_500ms_Entry+0x20>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f023 0320 	bic.w	r3, r3, #32
 8000d8e:	4a03      	ldr	r2, [pc, #12]	@ (8000d9c <Task_500ms_Entry+0x20>)
 8000d90:	6013      	str	r3, [r2, #0]
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	08007fac 	.word	0x08007fac
 8000d9c:	20000280 	.word	0x20000280

08000da0 <Task_1000ms_Entry>:
uint8_t ret0 = 0;
void Task_1000ms_Entry(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 1000ms message\n");
 8000da4:	4806      	ldr	r0, [pc, #24]	@ (8000dc0 <Task_1000ms_Entry+0x20>)
 8000da6:	f7ff fe7b 	bl	8000aa0 <DEBUG_PRINTF>
	// LOG_RELEASE("OS_Tick: %d.\n", OS_Tick1ms);
	// I2C_Test1();
	// Tower_Around_Test();
	// Tower_GreenLed_Test();
	GreenLed_Test();
 8000daa:	f7ff ff17 	bl	8000bdc <GreenLed_Test>
	// Led_task();
	// Bsp_AdcValuePrint();
	RESET_1000MS_TASK;
 8000dae:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <Task_1000ms_Entry+0x24>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000db6:	4a03      	ldr	r2, [pc, #12]	@ (8000dc4 <Task_1000ms_Entry+0x24>)
 8000db8:	6013      	str	r3, [r2, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	08007fd0 	.word	0x08007fd0
 8000dc4:	20000280 	.word	0x20000280

08000dc8 <OS_Init>:

void OS_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(OS_TICK_TIMER);
 8000dcc:	4810      	ldr	r0, [pc, #64]	@ (8000e10 <OS_Init+0x48>)
 8000dce:	f004 f91d 	bl	800500c <HAL_TIM_Base_Start_IT>
	HAL_UARTEx_ReceiveToIdle_DMA(RECEIVE_COMPORT, RxMsg, RX_MESSAGE_LEN);
 8000dd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dd6:	490f      	ldr	r1, [pc, #60]	@ (8000e14 <OS_Init+0x4c>)
 8000dd8:	480f      	ldr	r0, [pc, #60]	@ (8000e18 <OS_Init+0x50>)
 8000dda:	f005 f9ad 	bl	8006138 <HAL_UARTEx_ReceiveToIdle_DMA>
	Tower_Init();
 8000dde:	f7ff fef3 	bl	8000bc8 <Tower_Init>
	// Bsp_AdcStart();
	// OLED_Init();
	Lcd_Init();
 8000de2:	f7ff fcdf 	bl	80007a4 <Lcd_Init>
	LCD_LED_SET;
 8000de6:	2201      	movs	r2, #1
 8000de8:	2102      	movs	r1, #2
 8000dea:	480c      	ldr	r0, [pc, #48]	@ (8000e1c <OS_Init+0x54>)
 8000dec:	f001 fd7c 	bl	80028e8 <HAL_GPIO_WritePin>
	Lcd_Clear(BLACK);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff fe2c 	bl	8000a4e <Lcd_Clear>
	// Lcd_Clear(WHITE);
	HAL_Delay(500);
 8000df6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000dfa:	f000 fe83 	bl	8001b04 <HAL_Delay>
	SET_1000MS_TASK;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <OS_Init+0x58>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e06:	4a06      	ldr	r2, [pc, #24]	@ (8000e20 <OS_Init+0x58>)
 8000e08:	6013      	str	r3, [r2, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200003fc 	.word	0x200003fc
 8000e14:	2000017c 	.word	0x2000017c
 8000e18:	2000048c 	.word	0x2000048c
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	20000280 	.word	0x20000280

08000e24 <Start_OS>:

void Start_OS(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	while(1)
	{
		if(GET_1MS_TASK)
 8000e28:	4b1c      	ldr	r3, [pc, #112]	@ (8000e9c <Start_OS+0x78>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d101      	bne.n	8000e38 <Start_OS+0x14>
		{
			Task_1ms_Entry();
 8000e34:	f7ff ff52 	bl	8000cdc <Task_1ms_Entry>
		}
		if(GET_5MS_TASK)
 8000e38:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <Start_OS+0x78>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d101      	bne.n	8000e48 <Start_OS+0x24>
		{
			Task_5ms_Entry();
 8000e44:	f7ff ff5a 	bl	8000cfc <Task_5ms_Entry>
		}
		if(GET_10MS_TASK)
 8000e48:	4b14      	ldr	r3, [pc, #80]	@ (8000e9c <Start_OS+0x78>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	d101      	bne.n	8000e58 <Start_OS+0x34>
		{
			Task_10ms_Entry();
 8000e54:	f7ff ff62 	bl	8000d1c <Task_10ms_Entry>
		}
		if(GET_50MS_TASK)
 8000e58:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <Start_OS+0x78>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0308 	and.w	r3, r3, #8
 8000e60:	2b08      	cmp	r3, #8
 8000e62:	d101      	bne.n	8000e68 <Start_OS+0x44>
		{
			Task_50ms_Entry();
 8000e64:	f7ff ff6a 	bl	8000d3c <Task_50ms_Entry>
		}
		if(GET_100MS_TASK)
 8000e68:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <Start_OS+0x78>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0310 	and.w	r3, r3, #16
 8000e70:	2b10      	cmp	r3, #16
 8000e72:	d101      	bne.n	8000e78 <Start_OS+0x54>
		{
			Task_100ms_Entry();
 8000e74:	f7ff ff72 	bl	8000d5c <Task_100ms_Entry>
		}
		if(GET_500MS_TASK)
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <Start_OS+0x78>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0320 	and.w	r3, r3, #32
 8000e80:	2b20      	cmp	r3, #32
 8000e82:	d101      	bne.n	8000e88 <Start_OS+0x64>
		{
			Task_500ms_Entry();
 8000e84:	f7ff ff7a 	bl	8000d7c <Task_500ms_Entry>
		}
		if(GET_1000MS_TASK)
 8000e88:	4b04      	ldr	r3, [pc, #16]	@ (8000e9c <Start_OS+0x78>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e90:	2b40      	cmp	r3, #64	@ 0x40
 8000e92:	d1c9      	bne.n	8000e28 <Start_OS+0x4>
		{
			Task_1000ms_Entry();
 8000e94:	f7ff ff84 	bl	8000da0 <Task_1000ms_Entry>
		if(GET_1MS_TASK)
 8000e98:	e7c6      	b.n	8000e28 <Start_OS+0x4>
 8000e9a:	bf00      	nop
 8000e9c:	20000280 	.word	0x20000280

08000ea0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8000f98 <MX_DMA_Init+0xf8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a3a      	ldr	r2, [pc, #232]	@ (8000f98 <MX_DMA_Init+0xf8>)
 8000eb0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b38      	ldr	r3, [pc, #224]	@ (8000f98 <MX_DMA_Init+0xf8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4b34      	ldr	r3, [pc, #208]	@ (8000f98 <MX_DMA_Init+0xf8>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	4a33      	ldr	r2, [pc, #204]	@ (8000f98 <MX_DMA_Init+0xf8>)
 8000ecc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed2:	4b31      	ldr	r3, [pc, #196]	@ (8000f98 <MX_DMA_Init+0xf8>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000ede:	4b2f      	ldr	r3, [pc, #188]	@ (8000f9c <MX_DMA_Init+0xfc>)
 8000ee0:	4a2f      	ldr	r2, [pc, #188]	@ (8000fa0 <MX_DMA_Init+0x100>)
 8000ee2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f9c <MX_DMA_Init+0xfc>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000eea:	4b2c      	ldr	r3, [pc, #176]	@ (8000f9c <MX_DMA_Init+0xfc>)
 8000eec:	2280      	movs	r2, #128	@ 0x80
 8000eee:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f9c <MX_DMA_Init+0xfc>)
 8000ef2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ef6:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000ef8:	4b28      	ldr	r3, [pc, #160]	@ (8000f9c <MX_DMA_Init+0xfc>)
 8000efa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000efe:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f00:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <MX_DMA_Init+0xfc>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f06:	4b25      	ldr	r3, [pc, #148]	@ (8000f9c <MX_DMA_Init+0xfc>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000f0c:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <MX_DMA_Init+0xfc>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000f12:	4b22      	ldr	r3, [pc, #136]	@ (8000f9c <MX_DMA_Init+0xfc>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f18:	4b20      	ldr	r3, [pc, #128]	@ (8000f9c <MX_DMA_Init+0xfc>)
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <MX_DMA_Init+0xfc>)
 8000f20:	2203      	movs	r2, #3
 8000f22:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f24:	4b1d      	ldr	r3, [pc, #116]	@ (8000f9c <MX_DMA_Init+0xfc>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f9c <MX_DMA_Init+0xfc>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000f30:	481a      	ldr	r0, [pc, #104]	@ (8000f9c <MX_DMA_Init+0xfc>)
 8000f32:	f000 ff1d 	bl	8001d70 <HAL_DMA_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_DMA_Init+0xa0>
  {
    Error_Handler();
 8000f3c:	f000 fa3a 	bl	80013b4 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	200b      	movs	r0, #11
 8000f46:	f000 fedc 	bl	8001d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f4a:	200b      	movs	r0, #11
 8000f4c:	f000 fef5 	bl	8001d3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2011      	movs	r0, #17
 8000f56:	f000 fed4 	bl	8001d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f5a:	2011      	movs	r0, #17
 8000f5c:	f000 feed 	bl	8001d3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2038      	movs	r0, #56	@ 0x38
 8000f66:	f000 fecc 	bl	8001d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f6a:	2038      	movs	r0, #56	@ 0x38
 8000f6c:	f000 fee5 	bl	8001d3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	203a      	movs	r0, #58	@ 0x3a
 8000f76:	f000 fec4 	bl	8001d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f7a:	203a      	movs	r0, #58	@ 0x3a
 8000f7c:	f000 fedd 	bl	8001d3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	2046      	movs	r0, #70	@ 0x46
 8000f86:	f000 febc 	bl	8001d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000f8a:	2046      	movs	r0, #70	@ 0x46
 8000f8c:	f000 fed5 	bl	8001d3a <HAL_NVIC_EnableIRQ>

}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	20000284 	.word	0x20000284
 8000fa0:	40026410 	.word	0x40026410

08000fa4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	4b37      	ldr	r3, [pc, #220]	@ (800109c <MX_GPIO_Init+0xf8>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a36      	ldr	r2, [pc, #216]	@ (800109c <MX_GPIO_Init+0xf8>)
 8000fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b34      	ldr	r3, [pc, #208]	@ (800109c <MX_GPIO_Init+0xf8>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b30      	ldr	r3, [pc, #192]	@ (800109c <MX_GPIO_Init+0xf8>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a2f      	ldr	r2, [pc, #188]	@ (800109c <MX_GPIO_Init+0xf8>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800109c <MX_GPIO_Init+0xf8>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	4b29      	ldr	r3, [pc, #164]	@ (800109c <MX_GPIO_Init+0xf8>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4a28      	ldr	r2, [pc, #160]	@ (800109c <MX_GPIO_Init+0xf8>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	6313      	str	r3, [r2, #48]	@ 0x30
 8001002:	4b26      	ldr	r3, [pc, #152]	@ (800109c <MX_GPIO_Init+0xf8>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_LED_Pin|LCD_SDA_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	211a      	movs	r1, #26
 8001012:	4823      	ldr	r0, [pc, #140]	@ (80010a0 <MX_GPIO_Init+0xfc>)
 8001014:	f001 fc68 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SCL_GPIO_Port, LCD_SCL_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2104      	movs	r1, #4
 800101c:	4820      	ldr	r0, [pc, #128]	@ (80010a0 <MX_GPIO_Init+0xfc>)
 800101e:	f001 fc63 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8001028:	481e      	ldr	r0, [pc, #120]	@ (80010a4 <MX_GPIO_Init+0x100>)
 800102a:	f001 fc5d 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001034:	481c      	ldr	r0, [pc, #112]	@ (80010a8 <MX_GPIO_Init+0x104>)
 8001036:	f001 fc57 	bl	80028e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_LED_Pin LCD_SCL_Pin LCD_SDA_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|LCD_SCL_Pin|LCD_SDA_Pin|LCD_RS_Pin;
 800103a:	231e      	movs	r3, #30
 800103c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001042:	2301      	movs	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001046:	2303      	movs	r3, #3
 8001048:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	4619      	mov	r1, r3
 8001050:	4813      	ldr	r0, [pc, #76]	@ (80010a0 <MX_GPIO_Init+0xfc>)
 8001052:	f001 fa9d 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CS_Pin;
 8001056:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800105a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001060:	2301      	movs	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4619      	mov	r1, r3
 800106e:	480d      	ldr	r0, [pc, #52]	@ (80010a4 <MX_GPIO_Init+0x100>)
 8001070:	f001 fa8e 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001074:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001078:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107e:	2301      	movs	r3, #1
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	4619      	mov	r1, r3
 800108c:	4806      	ldr	r0, [pc, #24]	@ (80010a8 <MX_GPIO_Init+0x104>)
 800108e:	f001 fa7f 	bl	8002590 <HAL_GPIO_Init>

}
 8001092:	bf00      	nop
 8001094:	3720      	adds	r7, #32
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020400 	.word	0x40020400
 80010a8:	40021c00 	.word	0x40021c00

080010ac <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001124 <MX_I2C1_Init+0x78>)
 80010b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001128 <MX_I2C1_Init+0x7c>)
 80010ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010bc:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010c2:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d0:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010d6:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010dc:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e8:	480d      	ldr	r0, [pc, #52]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010ea:	f001 fc17 	bl	800291c <HAL_I2C_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010f4:	f000 f95e 	bl	80013b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010f8:	2100      	movs	r1, #0
 80010fa:	4809      	ldr	r0, [pc, #36]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010fc:	f003 fa13 	bl	8004526 <HAL_I2CEx_ConfigAnalogFilter>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001106:	f000 f955 	bl	80013b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800110a:	2100      	movs	r1, #0
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <MX_I2C1_Init+0x74>)
 800110e:	f003 fa46 	bl	800459e <HAL_I2CEx_ConfigDigitalFilter>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001118:	f000 f94c 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200002e4 	.word	0x200002e4
 8001124:	40005400 	.word	0x40005400
 8001128:	00061a80 	.word	0x00061a80

0800112c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	@ 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a4f      	ldr	r2, [pc, #316]	@ (8001288 <HAL_I2C_MspInit+0x15c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	f040 8098 	bne.w	8001280 <HAL_I2C_MspInit+0x154>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	4b4d      	ldr	r3, [pc, #308]	@ (800128c <HAL_I2C_MspInit+0x160>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001158:	4a4c      	ldr	r2, [pc, #304]	@ (800128c <HAL_I2C_MspInit+0x160>)
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001160:	4b4a      	ldr	r3, [pc, #296]	@ (800128c <HAL_I2C_MspInit+0x160>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800116c:	23c0      	movs	r3, #192	@ 0xc0
 800116e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001170:	2312      	movs	r3, #18
 8001172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800117c:	2304      	movs	r3, #4
 800117e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	4842      	ldr	r0, [pc, #264]	@ (8001290 <HAL_I2C_MspInit+0x164>)
 8001188:	f001 fa02 	bl	8002590 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	4b3e      	ldr	r3, [pc, #248]	@ (800128c <HAL_I2C_MspInit+0x160>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	4a3d      	ldr	r2, [pc, #244]	@ (800128c <HAL_I2C_MspInit+0x160>)
 8001196:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800119a:	6413      	str	r3, [r2, #64]	@ 0x40
 800119c:	4b3b      	ldr	r3, [pc, #236]	@ (800128c <HAL_I2C_MspInit+0x160>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80011a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001294 <HAL_I2C_MspInit+0x168>)
 80011aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001298 <HAL_I2C_MspInit+0x16c>)
 80011ac:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80011ae:	4b39      	ldr	r3, [pc, #228]	@ (8001294 <HAL_I2C_MspInit+0x168>)
 80011b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80011b4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b6:	4b37      	ldr	r3, [pc, #220]	@ (8001294 <HAL_I2C_MspInit+0x168>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011bc:	4b35      	ldr	r3, [pc, #212]	@ (8001294 <HAL_I2C_MspInit+0x168>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011c2:	4b34      	ldr	r3, [pc, #208]	@ (8001294 <HAL_I2C_MspInit+0x168>)
 80011c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011c8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ca:	4b32      	ldr	r3, [pc, #200]	@ (8001294 <HAL_I2C_MspInit+0x168>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011d0:	4b30      	ldr	r3, [pc, #192]	@ (8001294 <HAL_I2C_MspInit+0x168>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80011d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001294 <HAL_I2C_MspInit+0x168>)
 80011d8:	2200      	movs	r2, #0
 80011da:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001294 <HAL_I2C_MspInit+0x168>)
 80011de:	2200      	movs	r2, #0
 80011e0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001294 <HAL_I2C_MspInit+0x168>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80011e8:	482a      	ldr	r0, [pc, #168]	@ (8001294 <HAL_I2C_MspInit+0x168>)
 80011ea:	f000 fdc1 	bl	8001d70 <HAL_DMA_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80011f4:	f000 f8de 	bl	80013b4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a26      	ldr	r2, [pc, #152]	@ (8001294 <HAL_I2C_MspInit+0x168>)
 80011fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80011fe:	4a25      	ldr	r2, [pc, #148]	@ (8001294 <HAL_I2C_MspInit+0x168>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001204:	4b25      	ldr	r3, [pc, #148]	@ (800129c <HAL_I2C_MspInit+0x170>)
 8001206:	4a26      	ldr	r2, [pc, #152]	@ (80012a0 <HAL_I2C_MspInit+0x174>)
 8001208:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800120a:	4b24      	ldr	r3, [pc, #144]	@ (800129c <HAL_I2C_MspInit+0x170>)
 800120c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001210:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001212:	4b22      	ldr	r3, [pc, #136]	@ (800129c <HAL_I2C_MspInit+0x170>)
 8001214:	2240      	movs	r2, #64	@ 0x40
 8001216:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001218:	4b20      	ldr	r3, [pc, #128]	@ (800129c <HAL_I2C_MspInit+0x170>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800121e:	4b1f      	ldr	r3, [pc, #124]	@ (800129c <HAL_I2C_MspInit+0x170>)
 8001220:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001224:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001226:	4b1d      	ldr	r3, [pc, #116]	@ (800129c <HAL_I2C_MspInit+0x170>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800122c:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <HAL_I2C_MspInit+0x170>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001232:	4b1a      	ldr	r3, [pc, #104]	@ (800129c <HAL_I2C_MspInit+0x170>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001238:	4b18      	ldr	r3, [pc, #96]	@ (800129c <HAL_I2C_MspInit+0x170>)
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800123e:	4b17      	ldr	r3, [pc, #92]	@ (800129c <HAL_I2C_MspInit+0x170>)
 8001240:	2200      	movs	r2, #0
 8001242:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001244:	4815      	ldr	r0, [pc, #84]	@ (800129c <HAL_I2C_MspInit+0x170>)
 8001246:	f000 fd93 	bl	8001d70 <HAL_DMA_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8001250:	f000 f8b0 	bl	80013b4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a11      	ldr	r2, [pc, #68]	@ (800129c <HAL_I2C_MspInit+0x170>)
 8001258:	635a      	str	r2, [r3, #52]	@ 0x34
 800125a:	4a10      	ldr	r2, [pc, #64]	@ (800129c <HAL_I2C_MspInit+0x170>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001260:	2200      	movs	r2, #0
 8001262:	2100      	movs	r1, #0
 8001264:	201f      	movs	r0, #31
 8001266:	f000 fd4c 	bl	8001d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800126a:	201f      	movs	r0, #31
 800126c:	f000 fd65 	bl	8001d3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2100      	movs	r1, #0
 8001274:	2020      	movs	r0, #32
 8001276:	f000 fd44 	bl	8001d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800127a:	2020      	movs	r0, #32
 800127c:	f000 fd5d 	bl	8001d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001280:	bf00      	nop
 8001282:	3728      	adds	r7, #40	@ 0x28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40005400 	.word	0x40005400
 800128c:	40023800 	.word	0x40023800
 8001290:	40020400 	.word	0x40020400
 8001294:	20000338 	.word	0x20000338
 8001298:	40026010 	.word	0x40026010
 800129c:	20000398 	.word	0x20000398
 80012a0:	400260a0 	.word	0x400260a0

080012a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a8:	f000 fbba 	bl	8001a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ac:	f000 f812 	bl	80012d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b0:	f7ff fe78 	bl	8000fa4 <MX_GPIO_Init>
  MX_DMA_Init();
 80012b4:	f7ff fdf4 	bl	8000ea0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80012b8:	f000 faa8 	bl	800180c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80012bc:	f000 f97a 	bl	80015b4 <MX_TIM3_Init>
  MX_I2C1_Init();
 80012c0:	f7ff fef4 	bl	80010ac <MX_I2C1_Init>
  MX_TIM5_Init();
 80012c4:	f000 f9c4 	bl	8001650 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  OS_Init();
 80012c8:	f7ff fd7e 	bl	8000dc8 <OS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Start_OS();
 80012cc:	f7ff fdaa 	bl	8000e24 <Start_OS>
 80012d0:	e7fc      	b.n	80012cc <main+0x28>
	...

080012d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b094      	sub	sp, #80	@ 0x50
 80012d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012da:	f107 0320 	add.w	r3, r7, #32
 80012de:	2230      	movs	r2, #48	@ 0x30
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f006 f8dc 	bl	80074a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	4b2b      	ldr	r3, [pc, #172]	@ (80013ac <SystemClock_Config+0xd8>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001300:	4a2a      	ldr	r2, [pc, #168]	@ (80013ac <SystemClock_Config+0xd8>)
 8001302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001306:	6413      	str	r3, [r2, #64]	@ 0x40
 8001308:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <SystemClock_Config+0xd8>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	4b25      	ldr	r3, [pc, #148]	@ (80013b0 <SystemClock_Config+0xdc>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a24      	ldr	r2, [pc, #144]	@ (80013b0 <SystemClock_Config+0xdc>)
 800131e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <SystemClock_Config+0xdc>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001330:	2302      	movs	r3, #2
 8001332:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001334:	2301      	movs	r3, #1
 8001336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001338:	2310      	movs	r3, #16
 800133a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133c:	2302      	movs	r3, #2
 800133e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001340:	2300      	movs	r3, #0
 8001342:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001344:	2308      	movs	r3, #8
 8001346:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001348:	23b4      	movs	r3, #180	@ 0xb4
 800134a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800134c:	2302      	movs	r3, #2
 800134e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001350:	2304      	movs	r3, #4
 8001352:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	4618      	mov	r0, r3
 800135a:	f003 f9af 	bl	80046bc <HAL_RCC_OscConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001364:	f000 f826 	bl	80013b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001368:	f003 f958 	bl	800461c <HAL_PWREx_EnableOverDrive>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001372:	f000 f81f 	bl	80013b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001376:	230f      	movs	r3, #15
 8001378:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137a:	2302      	movs	r3, #2
 800137c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001382:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001386:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001388:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800138c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	2105      	movs	r1, #5
 8001394:	4618      	mov	r0, r3
 8001396:	f003 fc09 	bl	8004bac <HAL_RCC_ClockConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80013a0:	f000 f808 	bl	80013b4 <Error_Handler>
  }
}
 80013a4:	bf00      	nop
 80013a6:	3750      	adds	r7, #80	@ 0x50
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40007000 	.word	0x40007000

080013b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b8:	b672      	cpsid	i
}
 80013ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <Error_Handler+0x8>

080013c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <HAL_MspInit+0x4c>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ce:	4a0f      	ldr	r2, [pc, #60]	@ (800140c <HAL_MspInit+0x4c>)
 80013d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013d6:	4b0d      	ldr	r3, [pc, #52]	@ (800140c <HAL_MspInit+0x4c>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	603b      	str	r3, [r7, #0]
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <HAL_MspInit+0x4c>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	4a08      	ldr	r2, [pc, #32]	@ (800140c <HAL_MspInit+0x4c>)
 80013ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f2:	4b06      	ldr	r3, [pc, #24]	@ (800140c <HAL_MspInit+0x4c>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <NMI_Handler+0x4>

08001418 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <HardFault_Handler+0x4>

08001420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <MemManage_Handler+0x4>

08001428 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <UsageFault_Handler+0x4>

08001438 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001466:	f000 fb2d 	bl	8001ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001474:	4802      	ldr	r0, [pc, #8]	@ (8001480 <DMA1_Stream0_IRQHandler+0x10>)
 8001476:	f000 fe13 	bl	80020a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000338 	.word	0x20000338

08001484 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001488:	4802      	ldr	r0, [pc, #8]	@ (8001494 <DMA1_Stream6_IRQHandler+0x10>)
 800148a:	f000 fe09 	bl	80020a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000398 	.word	0x20000398

08001498 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800149c:	4802      	ldr	r0, [pc, #8]	@ (80014a8 <TIM3_IRQHandler+0x10>)
 800149e:	f003 ff3d 	bl	800531c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200003fc 	.word	0x200003fc

080014ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014b0:	4802      	ldr	r0, [pc, #8]	@ (80014bc <I2C1_EV_IRQHandler+0x10>)
 80014b2:	f001 fb8c 	bl	8002bce <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200002e4 	.word	0x200002e4

080014c0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80014c4:	4802      	ldr	r0, [pc, #8]	@ (80014d0 <I2C1_ER_IRQHandler+0x10>)
 80014c6:	f001 fcd5 	bl	8002e74 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200002e4 	.word	0x200002e4

080014d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014d8:	4802      	ldr	r0, [pc, #8]	@ (80014e4 <USART1_IRQHandler+0x10>)
 80014da:	f004 fe8b 	bl	80061f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000048c 	.word	0x2000048c

080014e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 80014ec:	4802      	ldr	r0, [pc, #8]	@ (80014f8 <DMA2_Stream0_IRQHandler+0x10>)
 80014ee:	f000 fdd7 	bl	80020a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000284 	.word	0x20000284

080014fc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001500:	4802      	ldr	r0, [pc, #8]	@ (800150c <DMA2_Stream2_IRQHandler+0x10>)
 8001502:	f000 fdcd 	bl	80020a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200004d4 	.word	0x200004d4

08001510 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001514:	4802      	ldr	r0, [pc, #8]	@ (8001520 <DMA2_Stream7_IRQHandler+0x10>)
 8001516:	f000 fdc3 	bl	80020a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000534 	.word	0x20000534

08001524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800152c:	4a14      	ldr	r2, [pc, #80]	@ (8001580 <_sbrk+0x5c>)
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <_sbrk+0x60>)
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001538:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001540:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <_sbrk+0x64>)
 8001542:	4a12      	ldr	r2, [pc, #72]	@ (800158c <_sbrk+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	429a      	cmp	r2, r3
 8001552:	d207      	bcs.n	8001564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001554:	f005 ffac 	bl	80074b0 <__errno>
 8001558:	4603      	mov	r3, r0
 800155a:	220c      	movs	r2, #12
 800155c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	e009      	b.n	8001578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001564:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156a:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	4a05      	ldr	r2, [pc, #20]	@ (8001588 <_sbrk+0x64>)
 8001574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20030000 	.word	0x20030000
 8001584:	00000400 	.word	0x00000400
 8001588:	200003f8 	.word	0x200003f8
 800158c:	200006e0 	.word	0x200006e0

08001590 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <SystemInit+0x20>)
 8001596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800159a:	4a05      	ldr	r2, [pc, #20]	@ (80015b0 <SystemInit+0x20>)
 800159c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	463b      	mov	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001648 <MX_TIM3_Init+0x94>)
 80015d2:	4a1e      	ldr	r2, [pc, #120]	@ (800164c <MX_TIM3_Init+0x98>)
 80015d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 900-1;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001648 <MX_TIM3_Init+0x94>)
 80015d8:	f240 3283 	movw	r2, #899	@ 0x383
 80015dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015de:	4b1a      	ldr	r3, [pc, #104]	@ (8001648 <MX_TIM3_Init+0x94>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80015e4:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <MX_TIM3_Init+0x94>)
 80015e6:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80015ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ec:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <MX_TIM3_Init+0x94>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f2:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <MX_TIM3_Init+0x94>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015f8:	4813      	ldr	r0, [pc, #76]	@ (8001648 <MX_TIM3_Init+0x94>)
 80015fa:	f003 fcb7 	bl	8004f6c <HAL_TIM_Base_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001604:	f7ff fed6 	bl	80013b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800160c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	4619      	mov	r1, r3
 8001614:	480c      	ldr	r0, [pc, #48]	@ (8001648 <MX_TIM3_Init+0x94>)
 8001616:	f004 f833 	bl	8005680 <HAL_TIM_ConfigClockSource>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001620:	f7ff fec8 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800162c:	463b      	mov	r3, r7
 800162e:	4619      	mov	r1, r3
 8001630:	4805      	ldr	r0, [pc, #20]	@ (8001648 <MX_TIM3_Init+0x94>)
 8001632:	f004 fc31 	bl	8005e98 <HAL_TIMEx_MasterConfigSynchronization>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800163c:	f7ff feba 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200003fc 	.word	0x200003fc
 800164c:	40000400 	.word	0x40000400

08001650 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	@ 0x28
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001656:	f107 0320 	add.w	r3, r7, #32
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]
 800166e:	615a      	str	r2, [r3, #20]
 8001670:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001672:	4b22      	ldr	r3, [pc, #136]	@ (80016fc <MX_TIM5_Init+0xac>)
 8001674:	4a22      	ldr	r2, [pc, #136]	@ (8001700 <MX_TIM5_Init+0xb0>)
 8001676:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 900-1;
 8001678:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <MX_TIM5_Init+0xac>)
 800167a:	f240 3283 	movw	r2, #899	@ 0x383
 800167e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001680:	4b1e      	ldr	r3, [pc, #120]	@ (80016fc <MX_TIM5_Init+0xac>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000-1;
 8001686:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <MX_TIM5_Init+0xac>)
 8001688:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800168c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168e:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <MX_TIM5_Init+0xac>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001694:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <MX_TIM5_Init+0xac>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800169a:	4818      	ldr	r0, [pc, #96]	@ (80016fc <MX_TIM5_Init+0xac>)
 800169c:	f003 fd26 	bl	80050ec <HAL_TIM_PWM_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80016a6:	f7ff fe85 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016b2:	f107 0320 	add.w	r3, r7, #32
 80016b6:	4619      	mov	r1, r3
 80016b8:	4810      	ldr	r0, [pc, #64]	@ (80016fc <MX_TIM5_Init+0xac>)
 80016ba:	f004 fbed 	bl	8005e98 <HAL_TIMEx_MasterConfigSynchronization>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80016c4:	f7ff fe76 	bl	80013b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c8:	2360      	movs	r3, #96	@ 0x60
 80016ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80016cc:	2332      	movs	r3, #50	@ 0x32
 80016ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80016d4:	2304      	movs	r3, #4
 80016d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2204      	movs	r2, #4
 80016dc:	4619      	mov	r1, r3
 80016de:	4807      	ldr	r0, [pc, #28]	@ (80016fc <MX_TIM5_Init+0xac>)
 80016e0:	f003 ff0c 	bl	80054fc <HAL_TIM_PWM_ConfigChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80016ea:	f7ff fe63 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80016ee:	4803      	ldr	r0, [pc, #12]	@ (80016fc <MX_TIM5_Init+0xac>)
 80016f0:	f000 f852 	bl	8001798 <HAL_TIM_MspPostInit>

}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	@ 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000444 	.word	0x20000444
 8001700:	40000c00 	.word	0x40000c00

08001704 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0e      	ldr	r2, [pc, #56]	@ (800174c <HAL_TIM_Base_MspInit+0x48>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d115      	bne.n	8001742 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b0d      	ldr	r3, [pc, #52]	@ (8001750 <HAL_TIM_Base_MspInit+0x4c>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171e:	4a0c      	ldr	r2, [pc, #48]	@ (8001750 <HAL_TIM_Base_MspInit+0x4c>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6413      	str	r3, [r2, #64]	@ 0x40
 8001726:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <HAL_TIM_Base_MspInit+0x4c>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	201d      	movs	r0, #29
 8001738:	f000 fae3 	bl	8001d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800173c:	201d      	movs	r0, #29
 800173e:	f000 fafc 	bl	8001d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40000400 	.word	0x40000400
 8001750:	40023800 	.word	0x40023800

08001754 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0b      	ldr	r2, [pc, #44]	@ (8001790 <HAL_TIM_PWM_MspInit+0x3c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d10d      	bne.n	8001782 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <HAL_TIM_PWM_MspInit+0x40>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	4a09      	ldr	r2, [pc, #36]	@ (8001794 <HAL_TIM_PWM_MspInit+0x40>)
 8001770:	f043 0308 	orr.w	r3, r3, #8
 8001774:	6413      	str	r3, [r2, #64]	@ 0x40
 8001776:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <HAL_TIM_PWM_MspInit+0x40>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40000c00 	.word	0x40000c00
 8001794:	40023800 	.word	0x40023800

08001798 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a12      	ldr	r2, [pc, #72]	@ (8001800 <HAL_TIM_MspPostInit+0x68>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d11e      	bne.n	80017f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <HAL_TIM_MspPostInit+0x6c>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a10      	ldr	r2, [pc, #64]	@ (8001804 <HAL_TIM_MspPostInit+0x6c>)
 80017c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <HAL_TIM_MspPostInit+0x6c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PH11     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80017e8:	2302      	movs	r3, #2
 80017ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	4619      	mov	r1, r3
 80017f2:	4805      	ldr	r0, [pc, #20]	@ (8001808 <HAL_TIM_MspPostInit+0x70>)
 80017f4:	f000 fecc 	bl	8002590 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80017f8:	bf00      	nop
 80017fa:	3720      	adds	r7, #32
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40000c00 	.word	0x40000c00
 8001804:	40023800 	.word	0x40023800
 8001808:	40021c00 	.word	0x40021c00

0800180c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <MX_USART1_UART_Init+0x4c>)
 8001812:	4a12      	ldr	r2, [pc, #72]	@ (800185c <MX_USART1_UART_Init+0x50>)
 8001814:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <MX_USART1_UART_Init+0x4c>)
 8001818:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800181c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800181e:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <MX_USART1_UART_Init+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001824:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <MX_USART1_UART_Init+0x4c>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800182a:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <MX_USART1_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001830:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <MX_USART1_UART_Init+0x4c>)
 8001832:	220c      	movs	r2, #12
 8001834:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001836:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <MX_USART1_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <MX_USART1_UART_Init+0x4c>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	@ (8001858 <MX_USART1_UART_Init+0x4c>)
 8001844:	f004 fbb8 	bl	8005fb8 <HAL_UART_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800184e:	f7ff fdb1 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000048c 	.word	0x2000048c
 800185c:	40011000 	.word	0x40011000

08001860 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	@ 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a4c      	ldr	r2, [pc, #304]	@ (80019b0 <HAL_UART_MspInit+0x150>)
 800187e:	4293      	cmp	r3, r2
 8001880:	f040 8091 	bne.w	80019a6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	4b4a      	ldr	r3, [pc, #296]	@ (80019b4 <HAL_UART_MspInit+0x154>)
 800188a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188c:	4a49      	ldr	r2, [pc, #292]	@ (80019b4 <HAL_UART_MspInit+0x154>)
 800188e:	f043 0310 	orr.w	r3, r3, #16
 8001892:	6453      	str	r3, [r2, #68]	@ 0x44
 8001894:	4b47      	ldr	r3, [pc, #284]	@ (80019b4 <HAL_UART_MspInit+0x154>)
 8001896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001898:	f003 0310 	and.w	r3, r3, #16
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	4b43      	ldr	r3, [pc, #268]	@ (80019b4 <HAL_UART_MspInit+0x154>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a8:	4a42      	ldr	r2, [pc, #264]	@ (80019b4 <HAL_UART_MspInit+0x154>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b0:	4b40      	ldr	r3, [pc, #256]	@ (80019b4 <HAL_UART_MspInit+0x154>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018bc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80018c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ca:	2303      	movs	r3, #3
 80018cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018ce:	2307      	movs	r3, #7
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	4837      	ldr	r0, [pc, #220]	@ (80019b8 <HAL_UART_MspInit+0x158>)
 80018da:	f000 fe59 	bl	8002590 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80018de:	4b37      	ldr	r3, [pc, #220]	@ (80019bc <HAL_UART_MspInit+0x15c>)
 80018e0:	4a37      	ldr	r2, [pc, #220]	@ (80019c0 <HAL_UART_MspInit+0x160>)
 80018e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80018e4:	4b35      	ldr	r3, [pc, #212]	@ (80019bc <HAL_UART_MspInit+0x15c>)
 80018e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80018ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ec:	4b33      	ldr	r3, [pc, #204]	@ (80019bc <HAL_UART_MspInit+0x15c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018f2:	4b32      	ldr	r3, [pc, #200]	@ (80019bc <HAL_UART_MspInit+0x15c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018f8:	4b30      	ldr	r3, [pc, #192]	@ (80019bc <HAL_UART_MspInit+0x15c>)
 80018fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001900:	4b2e      	ldr	r3, [pc, #184]	@ (80019bc <HAL_UART_MspInit+0x15c>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001906:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <HAL_UART_MspInit+0x15c>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800190c:	4b2b      	ldr	r3, [pc, #172]	@ (80019bc <HAL_UART_MspInit+0x15c>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001912:	4b2a      	ldr	r3, [pc, #168]	@ (80019bc <HAL_UART_MspInit+0x15c>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001918:	4b28      	ldr	r3, [pc, #160]	@ (80019bc <HAL_UART_MspInit+0x15c>)
 800191a:	2200      	movs	r2, #0
 800191c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800191e:	4827      	ldr	r0, [pc, #156]	@ (80019bc <HAL_UART_MspInit+0x15c>)
 8001920:	f000 fa26 	bl	8001d70 <HAL_DMA_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800192a:	f7ff fd43 	bl	80013b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a22      	ldr	r2, [pc, #136]	@ (80019bc <HAL_UART_MspInit+0x15c>)
 8001932:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001934:	4a21      	ldr	r2, [pc, #132]	@ (80019bc <HAL_UART_MspInit+0x15c>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800193a:	4b22      	ldr	r3, [pc, #136]	@ (80019c4 <HAL_UART_MspInit+0x164>)
 800193c:	4a22      	ldr	r2, [pc, #136]	@ (80019c8 <HAL_UART_MspInit+0x168>)
 800193e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001940:	4b20      	ldr	r3, [pc, #128]	@ (80019c4 <HAL_UART_MspInit+0x164>)
 8001942:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001946:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001948:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <HAL_UART_MspInit+0x164>)
 800194a:	2240      	movs	r2, #64	@ 0x40
 800194c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800194e:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <HAL_UART_MspInit+0x164>)
 8001950:	2200      	movs	r2, #0
 8001952:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001954:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <HAL_UART_MspInit+0x164>)
 8001956:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800195a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800195c:	4b19      	ldr	r3, [pc, #100]	@ (80019c4 <HAL_UART_MspInit+0x164>)
 800195e:	2200      	movs	r2, #0
 8001960:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001962:	4b18      	ldr	r3, [pc, #96]	@ (80019c4 <HAL_UART_MspInit+0x164>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001968:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <HAL_UART_MspInit+0x164>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800196e:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <HAL_UART_MspInit+0x164>)
 8001970:	2200      	movs	r2, #0
 8001972:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001974:	4b13      	ldr	r3, [pc, #76]	@ (80019c4 <HAL_UART_MspInit+0x164>)
 8001976:	2200      	movs	r2, #0
 8001978:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800197a:	4812      	ldr	r0, [pc, #72]	@ (80019c4 <HAL_UART_MspInit+0x164>)
 800197c:	f000 f9f8 	bl	8001d70 <HAL_DMA_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001986:	f7ff fd15 	bl	80013b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <HAL_UART_MspInit+0x164>)
 800198e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001990:	4a0c      	ldr	r2, [pc, #48]	@ (80019c4 <HAL_UART_MspInit+0x164>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	2025      	movs	r0, #37	@ 0x25
 800199c:	f000 f9b1 	bl	8001d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019a0:	2025      	movs	r0, #37	@ 0x25
 80019a2:	f000 f9ca 	bl	8001d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80019a6:	bf00      	nop
 80019a8:	3728      	adds	r7, #40	@ 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40011000 	.word	0x40011000
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020000 	.word	0x40020000
 80019bc:	200004d4 	.word	0x200004d4
 80019c0:	40026440 	.word	0x40026440
 80019c4:	20000534 	.word	0x20000534
 80019c8:	400264b8 	.word	0x400264b8

080019cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80019cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019d0:	f7ff fdde 	bl	8001590 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d4:	480c      	ldr	r0, [pc, #48]	@ (8001a08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019d6:	490d      	ldr	r1, [pc, #52]	@ (8001a0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001a14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001a18 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019fa:	f005 fd5f 	bl	80074bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fe:	f7ff fc51 	bl	80012a4 <main>
  bx  lr    
 8001a02:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a04:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a0c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001a10:	0800805c 	.word	0x0800805c
  ldr r2, =_sbss
 8001a14:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001a18:	200006e0 	.word	0x200006e0

08001a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <ADC_IRQHandler>
	...

08001a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a24:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <HAL_Init+0x40>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0d      	ldr	r2, [pc, #52]	@ (8001a60 <HAL_Init+0x40>)
 8001a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <HAL_Init+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0a      	ldr	r2, [pc, #40]	@ (8001a60 <HAL_Init+0x40>)
 8001a36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a3c:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a07      	ldr	r2, [pc, #28]	@ (8001a60 <HAL_Init+0x40>)
 8001a42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a48:	2003      	movs	r0, #3
 8001a4a:	f000 f94f 	bl	8001cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 f808 	bl	8001a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a54:	f7ff fcb4 	bl	80013c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023c00 	.word	0x40023c00

08001a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a6c:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <HAL_InitTick+0x54>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <HAL_InitTick+0x58>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f967 	bl	8001d56 <HAL_SYSTICK_Config>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00e      	b.n	8001ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b0f      	cmp	r3, #15
 8001a96:	d80a      	bhi.n	8001aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f000 f92f 	bl	8001d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa4:	4a06      	ldr	r2, [pc, #24]	@ (8001ac0 <HAL_InitTick+0x5c>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e000      	b.n	8001ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000004 	.word	0x20000004
 8001abc:	2000000c 	.word	0x2000000c
 8001ac0:	20000008 	.word	0x20000008

08001ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <HAL_IncTick+0x20>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <HAL_IncTick+0x24>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a04      	ldr	r2, [pc, #16]	@ (8001ae8 <HAL_IncTick+0x24>)
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	2000000c 	.word	0x2000000c
 8001ae8:	20000594 	.word	0x20000594

08001aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return uwTick;
 8001af0:	4b03      	ldr	r3, [pc, #12]	@ (8001b00 <HAL_GetTick+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000594 	.word	0x20000594

08001b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b0c:	f7ff ffee 	bl	8001aec <HAL_GetTick>
 8001b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1c:	d005      	beq.n	8001b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <HAL_Delay+0x44>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b2a:	bf00      	nop
 8001b2c:	f7ff ffde 	bl	8001aec <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d8f7      	bhi.n	8001b2c <HAL_Delay+0x28>
  {
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2000000c 	.word	0x2000000c

08001b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7e:	4a04      	ldr	r2, [pc, #16]	@ (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	60d3      	str	r3, [r2, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b98:	4b04      	ldr	r3, [pc, #16]	@ (8001bac <__NVIC_GetPriorityGrouping+0x18>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	db0b      	blt.n	8001bda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	f003 021f 	and.w	r2, r3, #31
 8001bc8:	4907      	ldr	r1, [pc, #28]	@ (8001be8 <__NVIC_EnableIRQ+0x38>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000e100 	.word	0xe000e100

08001bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	6039      	str	r1, [r7, #0]
 8001bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	db0a      	blt.n	8001c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	490c      	ldr	r1, [pc, #48]	@ (8001c38 <__NVIC_SetPriority+0x4c>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	0112      	lsls	r2, r2, #4
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	440b      	add	r3, r1
 8001c10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c14:	e00a      	b.n	8001c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4908      	ldr	r1, [pc, #32]	@ (8001c3c <__NVIC_SetPriority+0x50>)
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	3b04      	subs	r3, #4
 8001c24:	0112      	lsls	r2, r2, #4
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	440b      	add	r3, r1
 8001c2a:	761a      	strb	r2, [r3, #24]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000e100 	.word	0xe000e100
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	@ 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f1c3 0307 	rsb	r3, r3, #7
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	bf28      	it	cs
 8001c5e:	2304      	movcs	r3, #4
 8001c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3304      	adds	r3, #4
 8001c66:	2b06      	cmp	r3, #6
 8001c68:	d902      	bls.n	8001c70 <NVIC_EncodePriority+0x30>
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3b03      	subs	r3, #3
 8001c6e:	e000      	b.n	8001c72 <NVIC_EncodePriority+0x32>
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	f04f 32ff 	mov.w	r2, #4294967295
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	401a      	ands	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c88:	f04f 31ff 	mov.w	r1, #4294967295
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	43d9      	mvns	r1, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	4313      	orrs	r3, r2
         );
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3724      	adds	r7, #36	@ 0x24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cb8:	d301      	bcc.n	8001cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00f      	b.n	8001cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce8 <SysTick_Config+0x40>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc6:	210f      	movs	r1, #15
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	f7ff ff8e 	bl	8001bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd0:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <SysTick_Config+0x40>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd6:	4b04      	ldr	r3, [pc, #16]	@ (8001ce8 <SysTick_Config+0x40>)
 8001cd8:	2207      	movs	r2, #7
 8001cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	e000e010 	.word	0xe000e010

08001cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ff29 	bl	8001b4c <__NVIC_SetPriorityGrouping>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d14:	f7ff ff3e 	bl	8001b94 <__NVIC_GetPriorityGrouping>
 8001d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	6978      	ldr	r0, [r7, #20]
 8001d20:	f7ff ff8e 	bl	8001c40 <NVIC_EncodePriority>
 8001d24:	4602      	mov	r2, r0
 8001d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff5d 	bl	8001bec <__NVIC_SetPriority>
}
 8001d32:	bf00      	nop
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff31 	bl	8001bb0 <__NVIC_EnableIRQ>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff ffa2 	bl	8001ca8 <SysTick_Config>
 8001d64:	4603      	mov	r3, r0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d7c:	f7ff feb6 	bl	8001aec <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e099      	b.n	8001ec0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0201 	bic.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dac:	e00f      	b.n	8001dce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dae:	f7ff fe9d 	bl	8001aec <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b05      	cmp	r3, #5
 8001dba:	d908      	bls.n	8001dce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e078      	b.n	8001ec0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1e8      	bne.n	8001dae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	4b38      	ldr	r3, [pc, #224]	@ (8001ec8 <HAL_DMA_Init+0x158>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d107      	bne.n	8001e38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e30:	4313      	orrs	r3, r2
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f023 0307 	bic.w	r3, r3, #7
 8001e4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d117      	bne.n	8001e92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00e      	beq.n	8001e92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 fb0f 	bl	8002498 <DMA_CheckFifoParam>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2240      	movs	r2, #64	@ 0x40
 8001e84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e016      	b.n	8001ec0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fac6 	bl	800242c <DMA_CalcBaseAndBitshift>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea8:	223f      	movs	r2, #63	@ 0x3f
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	f010803f 	.word	0xf010803f

08001ecc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_DMA_Start_IT+0x26>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e040      	b.n	8001f74 <HAL_DMA_Start_IT+0xa8>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d12f      	bne.n	8001f66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 fa58 	bl	80023d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f24:	223f      	movs	r2, #63	@ 0x3f
 8001f26:	409a      	lsls	r2, r3
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0216 	orr.w	r2, r2, #22
 8001f3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d007      	beq.n	8001f54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0208 	orr.w	r2, r2, #8
 8001f52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e005      	b.n	8001f72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f8a:	f7ff fdaf 	bl	8001aec <HAL_GetTick>
 8001f8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d008      	beq.n	8001fae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2280      	movs	r2, #128	@ 0x80
 8001fa0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e052      	b.n	8002054 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0216 	bic.w	r2, r2, #22
 8001fbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fcc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d103      	bne.n	8001fde <HAL_DMA_Abort+0x62>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d007      	beq.n	8001fee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0208 	bic.w	r2, r2, #8
 8001fec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ffe:	e013      	b.n	8002028 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002000:	f7ff fd74 	bl	8001aec <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b05      	cmp	r3, #5
 800200c:	d90c      	bls.n	8002028 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2220      	movs	r2, #32
 8002012:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2203      	movs	r2, #3
 8002018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e015      	b.n	8002054 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1e4      	bne.n	8002000 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203a:	223f      	movs	r2, #63	@ 0x3f
 800203c:	409a      	lsls	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d004      	beq.n	800207a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2280      	movs	r2, #128	@ 0x80
 8002074:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e00c      	b.n	8002094 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2205      	movs	r2, #5
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0201 	bic.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020ac:	4b8e      	ldr	r3, [pc, #568]	@ (80022e8 <HAL_DMA_IRQHandler+0x248>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a8e      	ldr	r2, [pc, #568]	@ (80022ec <HAL_DMA_IRQHandler+0x24c>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	0a9b      	lsrs	r3, r3, #10
 80020b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ca:	2208      	movs	r2, #8
 80020cc:	409a      	lsls	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d01a      	beq.n	800210c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0204 	bic.w	r2, r2, #4
 80020f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f8:	2208      	movs	r2, #8
 80020fa:	409a      	lsls	r2, r3
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002104:	f043 0201 	orr.w	r2, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002110:	2201      	movs	r2, #1
 8002112:	409a      	lsls	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d012      	beq.n	8002142 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00b      	beq.n	8002142 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800212e:	2201      	movs	r2, #1
 8002130:	409a      	lsls	r2, r3
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800213a:	f043 0202 	orr.w	r2, r3, #2
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002146:	2204      	movs	r2, #4
 8002148:	409a      	lsls	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4013      	ands	r3, r2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d012      	beq.n	8002178 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00b      	beq.n	8002178 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002164:	2204      	movs	r2, #4
 8002166:	409a      	lsls	r2, r3
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002170:	f043 0204 	orr.w	r2, r3, #4
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217c:	2210      	movs	r2, #16
 800217e:	409a      	lsls	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d043      	beq.n	8002210 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d03c      	beq.n	8002210 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219a:	2210      	movs	r2, #16
 800219c:	409a      	lsls	r2, r3
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d018      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d108      	bne.n	80021d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d024      	beq.n	8002210 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	4798      	blx	r3
 80021ce:	e01f      	b.n	8002210 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d01b      	beq.n	8002210 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
 80021e0:	e016      	b.n	8002210 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0208 	bic.w	r2, r2, #8
 80021fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002214:	2220      	movs	r2, #32
 8002216:	409a      	lsls	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 808f 	beq.w	8002340 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 8087 	beq.w	8002340 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002236:	2220      	movs	r2, #32
 8002238:	409a      	lsls	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b05      	cmp	r3, #5
 8002248:	d136      	bne.n	80022b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0216 	bic.w	r2, r2, #22
 8002258:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002268:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	2b00      	cmp	r3, #0
 8002270:	d103      	bne.n	800227a <HAL_DMA_IRQHandler+0x1da>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002276:	2b00      	cmp	r3, #0
 8002278:	d007      	beq.n	800228a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0208 	bic.w	r2, r2, #8
 8002288:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228e:	223f      	movs	r2, #63	@ 0x3f
 8002290:	409a      	lsls	r2, r3
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d07e      	beq.n	80023ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	4798      	blx	r3
        }
        return;
 80022b6:	e079      	b.n	80023ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d01d      	beq.n	8002302 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10d      	bne.n	80022f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d031      	beq.n	8002340 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	4798      	blx	r3
 80022e4:	e02c      	b.n	8002340 <HAL_DMA_IRQHandler+0x2a0>
 80022e6:	bf00      	nop
 80022e8:	20000004 	.word	0x20000004
 80022ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d023      	beq.n	8002340 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	4798      	blx	r3
 8002300:	e01e      	b.n	8002340 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10f      	bne.n	8002330 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0210 	bic.w	r2, r2, #16
 800231e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002344:	2b00      	cmp	r3, #0
 8002346:	d032      	beq.n	80023ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d022      	beq.n	800239a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2205      	movs	r2, #5
 8002358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	3301      	adds	r3, #1
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	429a      	cmp	r2, r3
 8002376:	d307      	bcc.n	8002388 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f2      	bne.n	800236c <HAL_DMA_IRQHandler+0x2cc>
 8002386:	e000      	b.n	800238a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002388:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d005      	beq.n	80023ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	4798      	blx	r3
 80023aa:	e000      	b.n	80023ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80023ac:	bf00      	nop
    }
  }
}
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023c2:	b2db      	uxtb	r3, r3
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80023ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b40      	cmp	r3, #64	@ 0x40
 80023fc:	d108      	bne.n	8002410 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800240e:	e007      	b.n	8002420 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	60da      	str	r2, [r3, #12]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	3b10      	subs	r3, #16
 800243c:	4a14      	ldr	r2, [pc, #80]	@ (8002490 <DMA_CalcBaseAndBitshift+0x64>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	091b      	lsrs	r3, r3, #4
 8002444:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002446:	4a13      	ldr	r2, [pc, #76]	@ (8002494 <DMA_CalcBaseAndBitshift+0x68>)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4413      	add	r3, r2
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b03      	cmp	r3, #3
 8002458:	d909      	bls.n	800246e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002462:	f023 0303 	bic.w	r3, r3, #3
 8002466:	1d1a      	adds	r2, r3, #4
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	659a      	str	r2, [r3, #88]	@ 0x58
 800246c:	e007      	b.n	800247e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002476:	f023 0303 	bic.w	r3, r3, #3
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	aaaaaaab 	.word	0xaaaaaaab
 8002494:	08008010 	.word	0x08008010

08002498 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d11f      	bne.n	80024f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d856      	bhi.n	8002566 <DMA_CheckFifoParam+0xce>
 80024b8:	a201      	add	r2, pc, #4	@ (adr r2, 80024c0 <DMA_CheckFifoParam+0x28>)
 80024ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024be:	bf00      	nop
 80024c0:	080024d1 	.word	0x080024d1
 80024c4:	080024e3 	.word	0x080024e3
 80024c8:	080024d1 	.word	0x080024d1
 80024cc:	08002567 	.word	0x08002567
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d046      	beq.n	800256a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e0:	e043      	b.n	800256a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024ea:	d140      	bne.n	800256e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f0:	e03d      	b.n	800256e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024fa:	d121      	bne.n	8002540 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d837      	bhi.n	8002572 <DMA_CheckFifoParam+0xda>
 8002502:	a201      	add	r2, pc, #4	@ (adr r2, 8002508 <DMA_CheckFifoParam+0x70>)
 8002504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002508:	08002519 	.word	0x08002519
 800250c:	0800251f 	.word	0x0800251f
 8002510:	08002519 	.word	0x08002519
 8002514:	08002531 	.word	0x08002531
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
      break;
 800251c:	e030      	b.n	8002580 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002522:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d025      	beq.n	8002576 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800252e:	e022      	b.n	8002576 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002534:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002538:	d11f      	bne.n	800257a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800253e:	e01c      	b.n	800257a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d903      	bls.n	800254e <DMA_CheckFifoParam+0xb6>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d003      	beq.n	8002554 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800254c:	e018      	b.n	8002580 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
      break;
 8002552:	e015      	b.n	8002580 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002558:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00e      	beq.n	800257e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
      break;
 8002564:	e00b      	b.n	800257e <DMA_CheckFifoParam+0xe6>
      break;
 8002566:	bf00      	nop
 8002568:	e00a      	b.n	8002580 <DMA_CheckFifoParam+0xe8>
      break;
 800256a:	bf00      	nop
 800256c:	e008      	b.n	8002580 <DMA_CheckFifoParam+0xe8>
      break;
 800256e:	bf00      	nop
 8002570:	e006      	b.n	8002580 <DMA_CheckFifoParam+0xe8>
      break;
 8002572:	bf00      	nop
 8002574:	e004      	b.n	8002580 <DMA_CheckFifoParam+0xe8>
      break;
 8002576:	bf00      	nop
 8002578:	e002      	b.n	8002580 <DMA_CheckFifoParam+0xe8>
      break;   
 800257a:	bf00      	nop
 800257c:	e000      	b.n	8002580 <DMA_CheckFifoParam+0xe8>
      break;
 800257e:	bf00      	nop
    }
  } 
  
  return status; 
 8002580:	7bfb      	ldrb	r3, [r7, #15]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop

08002590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002590:	b480      	push	{r7}
 8002592:	b089      	sub	sp, #36	@ 0x24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
 80025aa:	e177      	b.n	800289c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025ac:	2201      	movs	r2, #1
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	f040 8166 	bne.w	8002896 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d005      	beq.n	80025e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d130      	bne.n	8002644 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	2203      	movs	r2, #3
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002618:	2201      	movs	r2, #1
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 0201 	and.w	r2, r3, #1
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b03      	cmp	r3, #3
 800264e:	d017      	beq.n	8002680 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	2203      	movs	r2, #3
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d123      	bne.n	80026d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	08da      	lsrs	r2, r3, #3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3208      	adds	r2, #8
 8002694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	220f      	movs	r2, #15
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	08da      	lsrs	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3208      	adds	r2, #8
 80026ce:	69b9      	ldr	r1, [r7, #24]
 80026d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	2203      	movs	r2, #3
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0203 	and.w	r2, r3, #3
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80c0 	beq.w	8002896 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	4b66      	ldr	r3, [pc, #408]	@ (80028b4 <HAL_GPIO_Init+0x324>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271e:	4a65      	ldr	r2, [pc, #404]	@ (80028b4 <HAL_GPIO_Init+0x324>)
 8002720:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002724:	6453      	str	r3, [r2, #68]	@ 0x44
 8002726:	4b63      	ldr	r3, [pc, #396]	@ (80028b4 <HAL_GPIO_Init+0x324>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002732:	4a61      	ldr	r2, [pc, #388]	@ (80028b8 <HAL_GPIO_Init+0x328>)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	089b      	lsrs	r3, r3, #2
 8002738:	3302      	adds	r3, #2
 800273a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	220f      	movs	r2, #15
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4013      	ands	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a58      	ldr	r2, [pc, #352]	@ (80028bc <HAL_GPIO_Init+0x32c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d037      	beq.n	80027ce <HAL_GPIO_Init+0x23e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a57      	ldr	r2, [pc, #348]	@ (80028c0 <HAL_GPIO_Init+0x330>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d031      	beq.n	80027ca <HAL_GPIO_Init+0x23a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a56      	ldr	r2, [pc, #344]	@ (80028c4 <HAL_GPIO_Init+0x334>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d02b      	beq.n	80027c6 <HAL_GPIO_Init+0x236>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a55      	ldr	r2, [pc, #340]	@ (80028c8 <HAL_GPIO_Init+0x338>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d025      	beq.n	80027c2 <HAL_GPIO_Init+0x232>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a54      	ldr	r2, [pc, #336]	@ (80028cc <HAL_GPIO_Init+0x33c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d01f      	beq.n	80027be <HAL_GPIO_Init+0x22e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a53      	ldr	r2, [pc, #332]	@ (80028d0 <HAL_GPIO_Init+0x340>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d019      	beq.n	80027ba <HAL_GPIO_Init+0x22a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a52      	ldr	r2, [pc, #328]	@ (80028d4 <HAL_GPIO_Init+0x344>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d013      	beq.n	80027b6 <HAL_GPIO_Init+0x226>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a51      	ldr	r2, [pc, #324]	@ (80028d8 <HAL_GPIO_Init+0x348>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00d      	beq.n	80027b2 <HAL_GPIO_Init+0x222>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a50      	ldr	r2, [pc, #320]	@ (80028dc <HAL_GPIO_Init+0x34c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d007      	beq.n	80027ae <HAL_GPIO_Init+0x21e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a4f      	ldr	r2, [pc, #316]	@ (80028e0 <HAL_GPIO_Init+0x350>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d101      	bne.n	80027aa <HAL_GPIO_Init+0x21a>
 80027a6:	2309      	movs	r3, #9
 80027a8:	e012      	b.n	80027d0 <HAL_GPIO_Init+0x240>
 80027aa:	230a      	movs	r3, #10
 80027ac:	e010      	b.n	80027d0 <HAL_GPIO_Init+0x240>
 80027ae:	2308      	movs	r3, #8
 80027b0:	e00e      	b.n	80027d0 <HAL_GPIO_Init+0x240>
 80027b2:	2307      	movs	r3, #7
 80027b4:	e00c      	b.n	80027d0 <HAL_GPIO_Init+0x240>
 80027b6:	2306      	movs	r3, #6
 80027b8:	e00a      	b.n	80027d0 <HAL_GPIO_Init+0x240>
 80027ba:	2305      	movs	r3, #5
 80027bc:	e008      	b.n	80027d0 <HAL_GPIO_Init+0x240>
 80027be:	2304      	movs	r3, #4
 80027c0:	e006      	b.n	80027d0 <HAL_GPIO_Init+0x240>
 80027c2:	2303      	movs	r3, #3
 80027c4:	e004      	b.n	80027d0 <HAL_GPIO_Init+0x240>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e002      	b.n	80027d0 <HAL_GPIO_Init+0x240>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_GPIO_Init+0x240>
 80027ce:	2300      	movs	r3, #0
 80027d0:	69fa      	ldr	r2, [r7, #28]
 80027d2:	f002 0203 	and.w	r2, r2, #3
 80027d6:	0092      	lsls	r2, r2, #2
 80027d8:	4093      	lsls	r3, r2
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027e0:	4935      	ldr	r1, [pc, #212]	@ (80028b8 <HAL_GPIO_Init+0x328>)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	089b      	lsrs	r3, r3, #2
 80027e6:	3302      	adds	r3, #2
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ee:	4b3d      	ldr	r3, [pc, #244]	@ (80028e4 <HAL_GPIO_Init+0x354>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002812:	4a34      	ldr	r2, [pc, #208]	@ (80028e4 <HAL_GPIO_Init+0x354>)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002818:	4b32      	ldr	r3, [pc, #200]	@ (80028e4 <HAL_GPIO_Init+0x354>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800283c:	4a29      	ldr	r2, [pc, #164]	@ (80028e4 <HAL_GPIO_Init+0x354>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002842:	4b28      	ldr	r3, [pc, #160]	@ (80028e4 <HAL_GPIO_Init+0x354>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002866:	4a1f      	ldr	r2, [pc, #124]	@ (80028e4 <HAL_GPIO_Init+0x354>)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800286c:	4b1d      	ldr	r3, [pc, #116]	@ (80028e4 <HAL_GPIO_Init+0x354>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002890:	4a14      	ldr	r2, [pc, #80]	@ (80028e4 <HAL_GPIO_Init+0x354>)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3301      	adds	r3, #1
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	2b0f      	cmp	r3, #15
 80028a0:	f67f ae84 	bls.w	80025ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
 80028a8:	3724      	adds	r7, #36	@ 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40013800 	.word	0x40013800
 80028bc:	40020000 	.word	0x40020000
 80028c0:	40020400 	.word	0x40020400
 80028c4:	40020800 	.word	0x40020800
 80028c8:	40020c00 	.word	0x40020c00
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40021400 	.word	0x40021400
 80028d4:	40021800 	.word	0x40021800
 80028d8:	40021c00 	.word	0x40021c00
 80028dc:	40022000 	.word	0x40022000
 80028e0:	40022400 	.word	0x40022400
 80028e4:	40013c00 	.word	0x40013c00

080028e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
 80028f4:	4613      	mov	r3, r2
 80028f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f8:	787b      	ldrb	r3, [r7, #1]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002904:	e003      	b.n	800290e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002906:	887b      	ldrh	r3, [r7, #2]
 8002908:	041a      	lsls	r2, r3, #16
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	619a      	str	r2, [r3, #24]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e12b      	b.n	8002b86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7fe fbf2 	bl	800112c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2224      	movs	r2, #36	@ 0x24
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800296e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800297e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002980:	f002 facc 	bl	8004f1c <HAL_RCC_GetPCLK1Freq>
 8002984:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4a81      	ldr	r2, [pc, #516]	@ (8002b90 <HAL_I2C_Init+0x274>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d807      	bhi.n	80029a0 <HAL_I2C_Init+0x84>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4a80      	ldr	r2, [pc, #512]	@ (8002b94 <HAL_I2C_Init+0x278>)
 8002994:	4293      	cmp	r3, r2
 8002996:	bf94      	ite	ls
 8002998:	2301      	movls	r3, #1
 800299a:	2300      	movhi	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	e006      	b.n	80029ae <HAL_I2C_Init+0x92>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4a7d      	ldr	r2, [pc, #500]	@ (8002b98 <HAL_I2C_Init+0x27c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	bf94      	ite	ls
 80029a8:	2301      	movls	r3, #1
 80029aa:	2300      	movhi	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e0e7      	b.n	8002b86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4a78      	ldr	r2, [pc, #480]	@ (8002b9c <HAL_I2C_Init+0x280>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	0c9b      	lsrs	r3, r3, #18
 80029c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4a6a      	ldr	r2, [pc, #424]	@ (8002b90 <HAL_I2C_Init+0x274>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d802      	bhi.n	80029f0 <HAL_I2C_Init+0xd4>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	3301      	adds	r3, #1
 80029ee:	e009      	b.n	8002a04 <HAL_I2C_Init+0xe8>
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029f6:	fb02 f303 	mul.w	r3, r2, r3
 80029fa:	4a69      	ldr	r2, [pc, #420]	@ (8002ba0 <HAL_I2C_Init+0x284>)
 80029fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002a00:	099b      	lsrs	r3, r3, #6
 8002a02:	3301      	adds	r3, #1
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	495c      	ldr	r1, [pc, #368]	@ (8002b90 <HAL_I2C_Init+0x274>)
 8002a20:	428b      	cmp	r3, r1
 8002a22:	d819      	bhi.n	8002a58 <HAL_I2C_Init+0x13c>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	1e59      	subs	r1, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a32:	1c59      	adds	r1, r3, #1
 8002a34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a38:	400b      	ands	r3, r1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HAL_I2C_Init+0x138>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1e59      	subs	r1, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a52:	e051      	b.n	8002af8 <HAL_I2C_Init+0x1dc>
 8002a54:	2304      	movs	r3, #4
 8002a56:	e04f      	b.n	8002af8 <HAL_I2C_Init+0x1dc>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d111      	bne.n	8002a84 <HAL_I2C_Init+0x168>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1e58      	subs	r0, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	440b      	add	r3, r1
 8002a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a72:	3301      	adds	r3, #1
 8002a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	bf0c      	ite	eq
 8002a7c:	2301      	moveq	r3, #1
 8002a7e:	2300      	movne	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	e012      	b.n	8002aaa <HAL_I2C_Init+0x18e>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1e58      	subs	r0, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6859      	ldr	r1, [r3, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	0099      	lsls	r1, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf0c      	ite	eq
 8002aa4:	2301      	moveq	r3, #1
 8002aa6:	2300      	movne	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_Init+0x196>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e022      	b.n	8002af8 <HAL_I2C_Init+0x1dc>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10e      	bne.n	8002ad8 <HAL_I2C_Init+0x1bc>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1e58      	subs	r0, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6859      	ldr	r1, [r3, #4]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	440b      	add	r3, r1
 8002ac8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002acc:	3301      	adds	r3, #1
 8002ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ad6:	e00f      	b.n	8002af8 <HAL_I2C_Init+0x1dc>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	1e58      	subs	r0, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6859      	ldr	r1, [r3, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	0099      	lsls	r1, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aee:	3301      	adds	r3, #1
 8002af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	6809      	ldr	r1, [r1, #0]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69da      	ldr	r2, [r3, #28]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6911      	ldr	r1, [r2, #16]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68d2      	ldr	r2, [r2, #12]
 8002b32:	4311      	orrs	r1, r2
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0201 	orr.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	000186a0 	.word	0x000186a0
 8002b94:	001e847f 	.word	0x001e847f
 8002b98:	003d08ff 	.word	0x003d08ff
 8002b9c:	431bde83 	.word	0x431bde83
 8002ba0:	10624dd3 	.word	0x10624dd3

08002ba4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb6:	2b80      	cmp	r3, #128	@ 0x80
 8002bb8:	d103      	bne.n	8002bc2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b088      	sub	sp, #32
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be6:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bf6:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	2b10      	cmp	r3, #16
 8002bfc:	d003      	beq.n	8002c06 <HAL_I2C_EV_IRQHandler+0x38>
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	2b40      	cmp	r3, #64	@ 0x40
 8002c02:	f040 80b1 	bne.w	8002d68 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10d      	bne.n	8002c3c <HAL_I2C_EV_IRQHandler+0x6e>
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002c26:	d003      	beq.n	8002c30 <HAL_I2C_EV_IRQHandler+0x62>
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002c2e:	d101      	bne.n	8002c34 <HAL_I2C_EV_IRQHandler+0x66>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <HAL_I2C_EV_IRQHandler+0x68>
 8002c34:	2300      	movs	r3, #0
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	f000 8114 	beq.w	8002e64 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00b      	beq.n	8002c5e <HAL_I2C_EV_IRQHandler+0x90>
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d006      	beq.n	8002c5e <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f001 fc4d 	bl	80044f0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fd52 	bl	8003700 <I2C_Master_SB>
 8002c5c:	e083      	b.n	8002d66 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_I2C_EV_IRQHandler+0xac>
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fdca 	bl	800380c <I2C_Master_ADD10>
 8002c78:	e075      	b.n	8002d66 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_I2C_EV_IRQHandler+0xc8>
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fde6 	bl	8003860 <I2C_Master_ADDR>
 8002c94:	e067      	b.n	8002d66 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d036      	beq.n	8002d0e <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002caa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cae:	f000 80db 	beq.w	8002e68 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00d      	beq.n	8002cd8 <HAL_I2C_EV_IRQHandler+0x10a>
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d008      	beq.n	8002cd8 <HAL_I2C_EV_IRQHandler+0x10a>
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d103      	bne.n	8002cd8 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f9ae 	bl	8003032 <I2C_MasterTransmit_TXE>
 8002cd6:	e046      	b.n	8002d66 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 80c2 	beq.w	8002e68 <HAL_I2C_EV_IRQHandler+0x29a>
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80bc 	beq.w	8002e68 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002cf0:	7bbb      	ldrb	r3, [r7, #14]
 8002cf2:	2b21      	cmp	r3, #33	@ 0x21
 8002cf4:	d103      	bne.n	8002cfe <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fa37 	bl	800316a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cfc:	e0b4      	b.n	8002e68 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	2b40      	cmp	r3, #64	@ 0x40
 8002d02:	f040 80b1 	bne.w	8002e68 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 faa5 	bl	8003256 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d0c:	e0ac      	b.n	8002e68 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d1c:	f000 80a4 	beq.w	8002e68 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00d      	beq.n	8002d46 <HAL_I2C_EV_IRQHandler+0x178>
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_I2C_EV_IRQHandler+0x178>
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d103      	bne.n	8002d46 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fb21 	bl	8003386 <I2C_MasterReceive_RXNE>
 8002d44:	e00f      	b.n	8002d66 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 808b 	beq.w	8002e68 <HAL_I2C_EV_IRQHandler+0x29a>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8085 	beq.w	8002e68 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fbd9 	bl	8003516 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d64:	e080      	b.n	8002e68 <HAL_I2C_EV_IRQHandler+0x29a>
 8002d66:	e07f      	b.n	8002e68 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d004      	beq.n	8002d7a <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	61fb      	str	r3, [r7, #28]
 8002d78:	e007      	b.n	8002d8a <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d011      	beq.n	8002db8 <HAL_I2C_EV_IRQHandler+0x1ea>
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00c      	beq.n	8002db8 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002dae:	69b9      	ldr	r1, [r7, #24]
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 ffa4 	bl	8003cfe <I2C_Slave_ADDR>
 8002db6:	e05a      	b.n	8002e6e <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <HAL_I2C_EV_IRQHandler+0x206>
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 ffdf 	bl	8003d90 <I2C_Slave_STOPF>
 8002dd2:	e04c      	b.n	8002e6e <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002dd4:	7bbb      	ldrb	r3, [r7, #14]
 8002dd6:	2b21      	cmp	r3, #33	@ 0x21
 8002dd8:	d002      	beq.n	8002de0 <HAL_I2C_EV_IRQHandler+0x212>
 8002dda:	7bbb      	ldrb	r3, [r7, #14]
 8002ddc:	2b29      	cmp	r3, #41	@ 0x29
 8002dde:	d120      	bne.n	8002e22 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00d      	beq.n	8002e06 <HAL_I2C_EV_IRQHandler+0x238>
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <HAL_I2C_EV_IRQHandler+0x238>
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d103      	bne.n	8002e06 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 febf 	bl	8003b82 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e04:	e032      	b.n	8002e6c <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d02d      	beq.n	8002e6c <HAL_I2C_EV_IRQHandler+0x29e>
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d028      	beq.n	8002e6c <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 feee 	bl	8003bfc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e20:	e024      	b.n	8002e6c <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00d      	beq.n	8002e48 <HAL_I2C_EV_IRQHandler+0x27a>
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <HAL_I2C_EV_IRQHandler+0x27a>
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d103      	bne.n	8002e48 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fefc 	bl	8003c3e <I2C_SlaveReceive_RXNE>
 8002e46:	e012      	b.n	8002e6e <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00d      	beq.n	8002e6e <HAL_I2C_EV_IRQHandler+0x2a0>
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 ff2c 	bl	8003cba <I2C_SlaveReceive_BTF>
 8002e62:	e004      	b.n	8002e6e <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002e64:	bf00      	nop
 8002e66:	e002      	b.n	8002e6e <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e68:	bf00      	nop
 8002e6a:	e000      	b.n	8002e6e <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e6c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002e6e:	3720      	adds	r7, #32
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	@ 0x28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e96:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00d      	beq.n	8002ebe <HAL_I2C_ER_IRQHandler+0x4a>
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002ebc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00d      	beq.n	8002ee4 <HAL_I2C_ER_IRQHandler+0x70>
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	f043 0302 	orr.w	r3, r3, #2
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002ee2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d03e      	beq.n	8002f6c <HAL_I2C_ER_IRQHandler+0xf8>
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d039      	beq.n	8002f6c <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8002ef8:	7efb      	ldrb	r3, [r7, #27]
 8002efa:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f0a:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f10:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002f12:	7ebb      	ldrb	r3, [r7, #26]
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d112      	bne.n	8002f3e <HAL_I2C_ER_IRQHandler+0xca>
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10f      	bne.n	8002f3e <HAL_I2C_ER_IRQHandler+0xca>
 8002f1e:	7cfb      	ldrb	r3, [r7, #19]
 8002f20:	2b21      	cmp	r3, #33	@ 0x21
 8002f22:	d008      	beq.n	8002f36 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
 8002f26:	2b29      	cmp	r3, #41	@ 0x29
 8002f28:	d005      	beq.n	8002f36 <HAL_I2C_ER_IRQHandler+0xc2>
 8002f2a:	7cfb      	ldrb	r3, [r7, #19]
 8002f2c:	2b28      	cmp	r3, #40	@ 0x28
 8002f2e:	d106      	bne.n	8002f3e <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b21      	cmp	r3, #33	@ 0x21
 8002f34:	d103      	bne.n	8002f3e <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f001 f85a 	bl	8003ff0 <I2C_Slave_AF>
 8002f3c:	e016      	b.n	8002f6c <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f46:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4a:	f043 0304 	orr.w	r3, r3, #4
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002f50:	7efb      	ldrb	r3, [r7, #27]
 8002f52:	2b10      	cmp	r3, #16
 8002f54:	d002      	beq.n	8002f5c <HAL_I2C_ER_IRQHandler+0xe8>
 8002f56:	7efb      	ldrb	r3, [r7, #27]
 8002f58:	2b40      	cmp	r3, #64	@ 0x40
 8002f5a:	d107      	bne.n	8002f6c <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f6a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <HAL_I2C_ER_IRQHandler+0x11e>
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f82:	f043 0308 	orr.w	r3, r3, #8
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002f90:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d008      	beq.n	8002faa <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f001 f897 	bl	80040d8 <I2C_ITError>
  }
}
 8002faa:	bf00      	nop
 8002fac:	3728      	adds	r7, #40	@ 0x28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	70fb      	strb	r3, [r7, #3]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003040:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003048:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003054:	2b00      	cmp	r3, #0
 8003056:	d150      	bne.n	80030fa <I2C_MasterTransmit_TXE+0xc8>
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	2b21      	cmp	r3, #33	@ 0x21
 800305c:	d14d      	bne.n	80030fa <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b08      	cmp	r3, #8
 8003062:	d01d      	beq.n	80030a0 <I2C_MasterTransmit_TXE+0x6e>
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b20      	cmp	r3, #32
 8003068:	d01a      	beq.n	80030a0 <I2C_MasterTransmit_TXE+0x6e>
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003070:	d016      	beq.n	80030a0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003080:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2211      	movs	r2, #17
 8003086:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7fd fa71 	bl	8000580 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800309e:	e060      	b.n	8003162 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80030ae:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030be:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b40      	cmp	r3, #64	@ 0x40
 80030d8:	d107      	bne.n	80030ea <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fd fa78 	bl	80005d8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030e8:	e03b      	b.n	8003162 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fd fa44 	bl	8000580 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030f8:	e033      	b.n	8003162 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	2b21      	cmp	r3, #33	@ 0x21
 80030fe:	d005      	beq.n	800310c <I2C_MasterTransmit_TXE+0xda>
 8003100:	7bbb      	ldrb	r3, [r7, #14]
 8003102:	2b40      	cmp	r3, #64	@ 0x40
 8003104:	d12d      	bne.n	8003162 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	2b22      	cmp	r3, #34	@ 0x22
 800310a:	d12a      	bne.n	8003162 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d108      	bne.n	8003128 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003124:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003126:	e01c      	b.n	8003162 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b40      	cmp	r3, #64	@ 0x40
 8003132:	d103      	bne.n	800313c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f88e 	bl	8003256 <I2C_MemoryTransmit_TXE_BTF>
}
 800313a:	e012      	b.n	8003162 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	781a      	ldrb	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003160:	e7ff      	b.n	8003162 <I2C_MasterTransmit_TXE+0x130>
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003176:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b21      	cmp	r3, #33	@ 0x21
 8003182:	d164      	bne.n	800324e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d012      	beq.n	80031b4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003192:	781a      	ldrb	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80031b2:	e04c      	b.n	800324e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d01d      	beq.n	80031f6 <I2C_MasterTransmit_BTF+0x8c>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d01a      	beq.n	80031f6 <I2C_MasterTransmit_BTF+0x8c>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031c6:	d016      	beq.n	80031f6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031d6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2211      	movs	r2, #17
 80031dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fd f9c6 	bl	8000580 <HAL_I2C_MasterTxCpltCallback>
}
 80031f4:	e02b      	b.n	800324e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003204:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003214:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b40      	cmp	r3, #64	@ 0x40
 800322e:	d107      	bne.n	8003240 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7fd f9cd 	bl	80005d8 <HAL_I2C_MemTxCpltCallback>
}
 800323e:	e006      	b.n	800324e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7fd f999 	bl	8000580 <HAL_I2C_MasterTxCpltCallback>
}
 800324e:	bf00      	nop
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003264:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800326a:	2b00      	cmp	r3, #0
 800326c:	d11d      	bne.n	80032aa <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003272:	2b01      	cmp	r3, #1
 8003274:	d10b      	bne.n	800328e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800327a:	b2da      	uxtb	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003286:	1c9a      	adds	r2, r3, #2
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800328c:	e077      	b.n	800337e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003292:	b29b      	uxth	r3, r3
 8003294:	121b      	asrs	r3, r3, #8
 8003296:	b2da      	uxtb	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80032a8:	e069      	b.n	800337e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d10b      	bne.n	80032ca <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80032c8:	e059      	b.n	800337e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d152      	bne.n	8003378 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	2b22      	cmp	r3, #34	@ 0x22
 80032d6:	d10d      	bne.n	80032f4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032e6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80032f2:	e044      	b.n	800337e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d015      	beq.n	800332a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	2b21      	cmp	r3, #33	@ 0x21
 8003302:	d112      	bne.n	800332a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003308:	781a      	ldrb	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003328:	e029      	b.n	800337e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d124      	bne.n	800337e <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	2b21      	cmp	r3, #33	@ 0x21
 8003338:	d121      	bne.n	800337e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003348:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003358:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7fd f931 	bl	80005d8 <HAL_I2C_MemTxCpltCallback>
}
 8003376:	e002      	b.n	800337e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff fc13 	bl	8002ba4 <I2C_Flush_DR>
}
 800337e:	bf00      	nop
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b084      	sub	sp, #16
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b22      	cmp	r3, #34	@ 0x22
 8003398:	f040 80b9 	bne.w	800350e <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a0:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d921      	bls.n	80033f4 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b03      	cmp	r3, #3
 80033de:	f040 8096 	bne.w	800350e <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033f0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80033f2:	e08c      	b.n	800350e <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d07f      	beq.n	80034fc <I2C_MasterReceive_RXNE+0x176>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d002      	beq.n	8003408 <I2C_MasterReceive_RXNE+0x82>
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d179      	bne.n	80034fc <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f001 f83f 	bl	800448c <I2C_WaitOnSTOPRequestThroughIT>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d14c      	bne.n	80034ae <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003422:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003432:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b40      	cmp	r3, #64	@ 0x40
 800346c:	d10a      	bne.n	8003484 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7fd f8c1 	bl	8000604 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003482:	e044      	b.n	800350e <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b08      	cmp	r3, #8
 8003490:	d002      	beq.n	8003498 <I2C_MasterReceive_RXNE+0x112>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b20      	cmp	r3, #32
 8003496:	d103      	bne.n	80034a0 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	631a      	str	r2, [r3, #48]	@ 0x30
 800349e:	e002      	b.n	80034a6 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2212      	movs	r2, #18
 80034a4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fd f880 	bl	80005ac <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034ac:	e02f      	b.n	800350e <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff fd88 	bl	800300a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034fa:	e008      	b.n	800350e <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800350a:	605a      	str	r2, [r3, #4]
}
 800350c:	e7ff      	b.n	800350e <I2C_MasterReceive_RXNE+0x188>
 800350e:	bf00      	nop
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003522:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b04      	cmp	r3, #4
 800352c:	d11b      	bne.n	8003566 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800353c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003564:	e0c8      	b.n	80036f8 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b03      	cmp	r3, #3
 800356e:	d129      	bne.n	80035c4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800357e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b04      	cmp	r3, #4
 8003584:	d00a      	beq.n	800359c <I2C_MasterReceive_BTF+0x86>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b02      	cmp	r3, #2
 800358a:	d007      	beq.n	800359c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800359a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80035c2:	e099      	b.n	80036f8 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	f040 8081 	bne.w	80036d2 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d002      	beq.n	80035dc <I2C_MasterReceive_BTF+0xc6>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b10      	cmp	r3, #16
 80035da:	d108      	bne.n	80035ee <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	e019      	b.n	8003622 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d002      	beq.n	80035fa <I2C_MasterReceive_BTF+0xe4>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d108      	bne.n	800360c <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	e00a      	b.n	8003622 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b10      	cmp	r3, #16
 8003610:	d007      	beq.n	8003622 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003620:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003664:	b29b      	uxth	r3, r3
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800367c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b40      	cmp	r3, #64	@ 0x40
 8003690:	d10a      	bne.n	80036a8 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7fc ffaf 	bl	8000604 <HAL_I2C_MemRxCpltCallback>
}
 80036a6:	e027      	b.n	80036f8 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d002      	beq.n	80036bc <I2C_MasterReceive_BTF+0x1a6>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d103      	bne.n	80036c4 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80036c2:	e002      	b.n	80036ca <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2212      	movs	r2, #18
 80036c8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fc ff6e 	bl	80005ac <HAL_I2C_MasterRxCpltCallback>
}
 80036d0:	e012      	b.n	80036f8 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80036f8:	bf00      	nop
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b40      	cmp	r3, #64	@ 0x40
 8003712:	d117      	bne.n	8003744 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003718:	2b00      	cmp	r3, #0
 800371a:	d109      	bne.n	8003730 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003720:	b2db      	uxtb	r3, r3
 8003722:	461a      	mov	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800372c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800372e:	e067      	b.n	8003800 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	b2da      	uxtb	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	611a      	str	r2, [r3, #16]
}
 8003742:	e05d      	b.n	8003800 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800374c:	d133      	bne.n	80037b6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b21      	cmp	r3, #33	@ 0x21
 8003758:	d109      	bne.n	800376e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375e:	b2db      	uxtb	r3, r3
 8003760:	461a      	mov	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800376a:	611a      	str	r2, [r3, #16]
 800376c:	e008      	b.n	8003780 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	b2da      	uxtb	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003784:	2b00      	cmp	r3, #0
 8003786:	d004      	beq.n	8003792 <I2C_Master_SB+0x92>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800378c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378e:	2b00      	cmp	r3, #0
 8003790:	d108      	bne.n	80037a4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003796:	2b00      	cmp	r3, #0
 8003798:	d032      	beq.n	8003800 <I2C_Master_SB+0x100>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800379e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d02d      	beq.n	8003800 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037b2:	605a      	str	r2, [r3, #4]
}
 80037b4:	e024      	b.n	8003800 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10e      	bne.n	80037dc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	11db      	asrs	r3, r3, #7
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f003 0306 	and.w	r3, r3, #6
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f063 030f 	orn	r3, r3, #15
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	611a      	str	r2, [r3, #16]
}
 80037da:	e011      	b.n	8003800 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d10d      	bne.n	8003800 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	11db      	asrs	r3, r3, #7
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f003 0306 	and.w	r3, r3, #6
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f063 030e 	orn	r3, r3, #14
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	611a      	str	r2, [r3, #16]
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003818:	b2da      	uxtb	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003824:	2b00      	cmp	r3, #0
 8003826:	d004      	beq.n	8003832 <I2C_Master_ADD10+0x26>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800382c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d108      	bne.n	8003844 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00c      	beq.n	8003854 <I2C_Master_ADD10+0x48>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d007      	beq.n	8003854 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003852:	605a      	str	r2, [r3, #4]
  }
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003860:	b480      	push	{r7}
 8003862:	b091      	sub	sp, #68	@ 0x44
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800386e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003876:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387c:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b22      	cmp	r3, #34	@ 0x22
 8003888:	f040 8169 	bne.w	8003b5e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10f      	bne.n	80038b4 <I2C_Master_ADDR+0x54>
 8003894:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003898:	2b40      	cmp	r3, #64	@ 0x40
 800389a:	d10b      	bne.n	80038b4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800389c:	2300      	movs	r3, #0
 800389e:	633b      	str	r3, [r7, #48]	@ 0x30
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80038b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b2:	e160      	b.n	8003b76 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d11d      	bne.n	80038f8 <I2C_Master_ADDR+0x98>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80038c4:	d118      	bne.n	80038f8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c6:	2300      	movs	r3, #0
 80038c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038ea:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	651a      	str	r2, [r3, #80]	@ 0x50
 80038f6:	e13e      	b.n	8003b76 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d113      	bne.n	800392a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003902:	2300      	movs	r3, #0
 8003904:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003916:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e115      	b.n	8003b56 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b01      	cmp	r3, #1
 8003932:	f040 808a 	bne.w	8003a4a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003938:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800393c:	d137      	bne.n	80039ae <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800394c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003958:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800395c:	d113      	bne.n	8003986 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800396c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396e:	2300      	movs	r3, #0
 8003970:	627b      	str	r3, [r7, #36]	@ 0x24
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	627b      	str	r3, [r7, #36]	@ 0x24
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	627b      	str	r3, [r7, #36]	@ 0x24
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	e0e7      	b.n	8003b56 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003986:	2300      	movs	r3, #0
 8003988:	623b      	str	r3, [r7, #32]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	623b      	str	r3, [r7, #32]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	623b      	str	r3, [r7, #32]
 800399a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	e0d3      	b.n	8003b56 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80039ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d02e      	beq.n	8003a12 <I2C_Master_ADDR+0x1b2>
 80039b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	d02b      	beq.n	8003a12 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80039ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039bc:	2b12      	cmp	r3, #18
 80039be:	d102      	bne.n	80039c6 <I2C_Master_ADDR+0x166>
 80039c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d125      	bne.n	8003a12 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80039c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d00e      	beq.n	80039ea <I2C_Master_ADDR+0x18a>
 80039cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d00b      	beq.n	80039ea <I2C_Master_ADDR+0x18a>
 80039d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d4:	2b10      	cmp	r3, #16
 80039d6:	d008      	beq.n	80039ea <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	e007      	b.n	80039fa <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	e0a1      	b.n	8003b56 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a20:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a22:	2300      	movs	r3, #0
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	e085      	b.n	8003b56 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d14d      	bne.n	8003af0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d016      	beq.n	8003a88 <I2C_Master_ADDR+0x228>
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d013      	beq.n	8003a88 <I2C_Master_ADDR+0x228>
 8003a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a62:	2b10      	cmp	r3, #16
 8003a64:	d010      	beq.n	8003a88 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a74:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e007      	b.n	8003a98 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a96:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aa2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aa6:	d117      	bne.n	8003ad8 <I2C_Master_ADDR+0x278>
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aaa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003aae:	d00b      	beq.n	8003ac8 <I2C_Master_ADDR+0x268>
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d008      	beq.n	8003ac8 <I2C_Master_ADDR+0x268>
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d005      	beq.n	8003ac8 <I2C_Master_ADDR+0x268>
 8003abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003abe:	2b10      	cmp	r3, #16
 8003ac0:	d002      	beq.n	8003ac8 <I2C_Master_ADDR+0x268>
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	d107      	bne.n	8003ad8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ad6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	e032      	b.n	8003b56 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003afe:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b0e:	d117      	bne.n	8003b40 <I2C_Master_ADDR+0x2e0>
 8003b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b12:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b16:	d00b      	beq.n	8003b30 <I2C_Master_ADDR+0x2d0>
 8003b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d008      	beq.n	8003b30 <I2C_Master_ADDR+0x2d0>
 8003b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d005      	beq.n	8003b30 <I2C_Master_ADDR+0x2d0>
 8003b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b26:	2b10      	cmp	r3, #16
 8003b28:	d002      	beq.n	8003b30 <I2C_Master_ADDR+0x2d0>
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d107      	bne.n	8003b40 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b3e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b40:	2300      	movs	r3, #0
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003b5c:	e00b      	b.n	8003b76 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	68fb      	ldr	r3, [r7, #12]
}
 8003b74:	e7ff      	b.n	8003b76 <I2C_Master_ADDR+0x316>
 8003b76:	bf00      	nop
 8003b78:	3744      	adds	r7, #68	@ 0x44
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b084      	sub	sp, #16
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b90:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d02b      	beq.n	8003bf4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba0:	781a      	ldrb	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d114      	bne.n	8003bf4 <I2C_SlaveTransmit_TXE+0x72>
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	2b29      	cmp	r3, #41	@ 0x29
 8003bce:	d111      	bne.n	8003bf4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bde:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2221      	movs	r2, #33	@ 0x21
 8003be4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2228      	movs	r2, #40	@ 0x28
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff f9df 	bl	8002fb2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d011      	beq.n	8003c32 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c12:	781a      	ldrb	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c4c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d02c      	beq.n	8003cb2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d114      	bne.n	8003cb2 <I2C_SlaveReceive_RXNE+0x74>
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c8c:	d111      	bne.n	8003cb2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c9c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2222      	movs	r2, #34	@ 0x22
 8003ca2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2228      	movs	r2, #40	@ 0x28
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff f98a 	bl	8002fc6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d012      	beq.n	8003cf2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b084      	sub	sp, #16
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d18:	2b28      	cmp	r3, #40	@ 0x28
 8003d1a:	d125      	bne.n	8003d68 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d2a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003d36:	2301      	movs	r3, #1
 8003d38:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d103      	bne.n	8003d4c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	81bb      	strh	r3, [r7, #12]
 8003d4a:	e002      	b.n	8003d52 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003d5a:	89ba      	ldrh	r2, [r7, #12]
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff f93a 	bl	8002fda <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003d66:	e00e      	b.n	8003d86 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	60bb      	str	r3, [r7, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	60bb      	str	r3, [r7, #8]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d9e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003dae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003db0:	2300      	movs	r3, #0
 8003db2:	60bb      	str	r3, [r7, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ddc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003de8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dec:	d172      	bne.n	8003ed4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
 8003df0:	2b22      	cmp	r3, #34	@ 0x22
 8003df2:	d002      	beq.n	8003dfa <I2C_Slave_STOPF+0x6a>
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003df8:	d135      	bne.n	8003e66 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d005      	beq.n	8003e1e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e16:	f043 0204 	orr.w	r2, r3, #4
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e2c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fe fabe 	bl	80023b4 <HAL_DMA_GetState>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d049      	beq.n	8003ed2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e42:	4a69      	ldr	r2, [pc, #420]	@ (8003fe8 <I2C_Slave_STOPF+0x258>)
 8003e44:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe f906 	bl	800205c <HAL_DMA_Abort_IT>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d03d      	beq.n	8003ed2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e60:	4610      	mov	r0, r2
 8003e62:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e64:	e035      	b.n	8003ed2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e82:	f043 0204 	orr.w	r2, r3, #4
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e98:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fe fa88 	bl	80023b4 <HAL_DMA_GetState>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d014      	beq.n	8003ed4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eae:	4a4e      	ldr	r2, [pc, #312]	@ (8003fe8 <I2C_Slave_STOPF+0x258>)
 8003eb0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe f8d0 	bl	800205c <HAL_DMA_Abort_IT>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d008      	beq.n	8003ed4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ecc:	4610      	mov	r0, r2
 8003ece:	4798      	blx	r3
 8003ed0:	e000      	b.n	8003ed4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ed2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d03e      	beq.n	8003f5c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d112      	bne.n	8003f12 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1c:	2b40      	cmp	r3, #64	@ 0x40
 8003f1e:	d112      	bne.n	8003f46 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691a      	ldr	r2, [r3, #16]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f54:	f043 0204 	orr.w	r2, r3, #4
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f8b7 	bl	80040d8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003f6a:	e039      	b.n	8003fe0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
 8003f6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f70:	d109      	bne.n	8003f86 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2228      	movs	r2, #40	@ 0x28
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff f820 	bl	8002fc6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b28      	cmp	r3, #40	@ 0x28
 8003f90:	d111      	bne.n	8003fb6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a15      	ldr	r2, [pc, #84]	@ (8003fec <I2C_Slave_STOPF+0x25c>)
 8003f96:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff f821 	bl	8002ff6 <HAL_I2C_ListenCpltCallback>
}
 8003fb4:	e014      	b.n	8003fe0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fba:	2b22      	cmp	r3, #34	@ 0x22
 8003fbc:	d002      	beq.n	8003fc4 <I2C_Slave_STOPF+0x234>
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	2b22      	cmp	r3, #34	@ 0x22
 8003fc2:	d10d      	bne.n	8003fe0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fe fff3 	bl	8002fc6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	0800433d 	.word	0x0800433d
 8003fec:	ffff0000 	.word	0xffff0000

08003ff0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004004:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b08      	cmp	r3, #8
 800400a:	d002      	beq.n	8004012 <I2C_Slave_AF+0x22>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b20      	cmp	r3, #32
 8004010:	d129      	bne.n	8004066 <I2C_Slave_AF+0x76>
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	2b28      	cmp	r3, #40	@ 0x28
 8004016:	d126      	bne.n	8004066 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a2e      	ldr	r2, [pc, #184]	@ (80040d4 <I2C_Slave_AF+0xe4>)
 800401c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800402c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004036:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004046:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7fe ffc9 	bl	8002ff6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004064:	e031      	b.n	80040ca <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	2b21      	cmp	r3, #33	@ 0x21
 800406a:	d129      	bne.n	80040c0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a19      	ldr	r2, [pc, #100]	@ (80040d4 <I2C_Slave_AF+0xe4>)
 8004070:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2221      	movs	r2, #33	@ 0x21
 8004076:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004096:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040a0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040b0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fe fd76 	bl	8002ba4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7fe ff7a 	bl	8002fb2 <HAL_I2C_SlaveTxCpltCallback>
}
 80040be:	e004      	b.n	80040ca <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040c8:	615a      	str	r2, [r3, #20]
}
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	ffff0000 	.word	0xffff0000

080040d8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80040f0:	7bbb      	ldrb	r3, [r7, #14]
 80040f2:	2b10      	cmp	r3, #16
 80040f4:	d002      	beq.n	80040fc <I2C_ITError+0x24>
 80040f6:	7bbb      	ldrb	r3, [r7, #14]
 80040f8:	2b40      	cmp	r3, #64	@ 0x40
 80040fa:	d10a      	bne.n	8004112 <I2C_ITError+0x3a>
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	2b22      	cmp	r3, #34	@ 0x22
 8004100:	d107      	bne.n	8004112 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004110:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004118:	2b28      	cmp	r3, #40	@ 0x28
 800411a:	d107      	bne.n	800412c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2228      	movs	r2, #40	@ 0x28
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800412a:	e015      	b.n	8004158 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004136:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800413a:	d00a      	beq.n	8004152 <I2C_ITError+0x7a>
 800413c:	7bfb      	ldrb	r3, [r7, #15]
 800413e:	2b60      	cmp	r3, #96	@ 0x60
 8004140:	d007      	beq.n	8004152 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004162:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004166:	d162      	bne.n	800422e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004176:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800417c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b01      	cmp	r3, #1
 8004184:	d020      	beq.n	80041c8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800418a:	4a6a      	ldr	r2, [pc, #424]	@ (8004334 <I2C_ITError+0x25c>)
 800418c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004192:	4618      	mov	r0, r3
 8004194:	f7fd ff62 	bl	800205c <HAL_DMA_Abort_IT>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 8089 	beq.w	80042b2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0201 	bic.w	r2, r2, #1
 80041ae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80041c2:	4610      	mov	r0, r2
 80041c4:	4798      	blx	r3
 80041c6:	e074      	b.n	80042b2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041cc:	4a59      	ldr	r2, [pc, #356]	@ (8004334 <I2C_ITError+0x25c>)
 80041ce:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fd ff41 	bl	800205c <HAL_DMA_Abort_IT>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d068      	beq.n	80042b2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ea:	2b40      	cmp	r3, #64	@ 0x40
 80041ec:	d10b      	bne.n	8004206 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004228:	4610      	mov	r0, r2
 800422a:	4798      	blx	r3
 800422c:	e041      	b.n	80042b2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b60      	cmp	r3, #96	@ 0x60
 8004238:	d125      	bne.n	8004286 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004252:	2b40      	cmp	r3, #64	@ 0x40
 8004254:	d10b      	bne.n	800426e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0201 	bic.w	r2, r2, #1
 800427c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fe fecd 	bl	800301e <HAL_I2C_AbortCpltCallback>
 8004284:	e015      	b.n	80042b2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004290:	2b40      	cmp	r3, #64	@ 0x40
 8004292:	d10b      	bne.n	80042ac <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7fe feac 	bl	800300a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10e      	bne.n	80042e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d109      	bne.n	80042e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d104      	bne.n	80042e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d007      	beq.n	80042f0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042ee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b04      	cmp	r3, #4
 8004302:	d113      	bne.n	800432c <I2C_ITError+0x254>
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	2b28      	cmp	r3, #40	@ 0x28
 8004308:	d110      	bne.n	800432c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a0a      	ldr	r2, [pc, #40]	@ (8004338 <I2C_ITError+0x260>)
 800430e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fe fe65 	bl	8002ff6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800432c:	bf00      	nop
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	0800433d 	.word	0x0800433d
 8004338:	ffff0000 	.word	0xffff0000

0800433c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004354:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004356:	4b4b      	ldr	r3, [pc, #300]	@ (8004484 <I2C_DMAAbort+0x148>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	08db      	lsrs	r3, r3, #3
 800435c:	4a4a      	ldr	r2, [pc, #296]	@ (8004488 <I2C_DMAAbort+0x14c>)
 800435e:	fba2 2303 	umull	r2, r3, r2, r3
 8004362:	0a1a      	lsrs	r2, r3, #8
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	00da      	lsls	r2, r3, #3
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d106      	bne.n	8004384 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437a:	f043 0220 	orr.w	r2, r3, #32
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004382:	e00a      	b.n	800439a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3b01      	subs	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004398:	d0ea      	beq.n	8004370 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a6:	2200      	movs	r2, #0
 80043a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b6:	2200      	movs	r2, #0
 80043b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2200      	movs	r2, #0
 80043ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043dc:	2200      	movs	r2, #0
 80043de:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ec:	2200      	movs	r2, #0
 80043ee:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0201 	bic.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b60      	cmp	r3, #96	@ 0x60
 800440a:	d10e      	bne.n	800442a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2200      	movs	r2, #0
 8004420:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004422:	6978      	ldr	r0, [r7, #20]
 8004424:	f7fe fdfb 	bl	800301e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004428:	e027      	b.n	800447a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800442a:	7cfb      	ldrb	r3, [r7, #19]
 800442c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004430:	2b28      	cmp	r3, #40	@ 0x28
 8004432:	d117      	bne.n	8004464 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004452:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2200      	movs	r2, #0
 8004458:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2228      	movs	r2, #40	@ 0x28
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004462:	e007      	b.n	8004474 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004474:	6978      	ldr	r0, [r7, #20]
 8004476:	f7fe fdc8 	bl	800300a <HAL_I2C_ErrorCallback>
}
 800447a:	bf00      	nop
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000004 	.word	0x20000004
 8004488:	14f8b589 	.word	0x14f8b589

0800448c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004498:	4b13      	ldr	r3, [pc, #76]	@ (80044e8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	08db      	lsrs	r3, r3, #3
 800449e:	4a13      	ldr	r2, [pc, #76]	@ (80044ec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	0a1a      	lsrs	r2, r3, #8
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d107      	bne.n	80044ca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044be:	f043 0220 	orr.w	r2, r3, #32
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e008      	b.n	80044dc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044d8:	d0e9      	beq.n	80044ae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	20000004 	.word	0x20000004
 80044ec:	14f8b589 	.word	0x14f8b589

080044f0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004500:	d103      	bne.n	800450a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004508:	e007      	b.n	800451a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004512:	d102      	bne.n	800451a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2208      	movs	r2, #8
 8004518:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b20      	cmp	r3, #32
 800453a:	d129      	bne.n	8004590 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2224      	movs	r2, #36	@ 0x24
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0201 	bic.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0210 	bic.w	r2, r2, #16
 8004562:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	e000      	b.n	8004592 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004590:	2302      	movs	r3, #2
  }
}
 8004592:	4618      	mov	r0, r3
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800459e:	b480      	push	{r7}
 80045a0:	b085      	sub	sp, #20
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d12a      	bne.n	800460e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2224      	movs	r2, #36	@ 0x24
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0201 	bic.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80045d8:	89fb      	ldrh	r3, [r7, #14]
 80045da:	f023 030f 	bic.w	r3, r3, #15
 80045de:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	89fb      	ldrh	r3, [r7, #14]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	89fa      	ldrh	r2, [r7, #14]
 80045f0:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f042 0201 	orr.w	r2, r2, #1
 8004600:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	e000      	b.n	8004610 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800460e:	2302      	movs	r3, #2
  }
}
 8004610:	4618      	mov	r0, r3
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004626:	2300      	movs	r3, #0
 8004628:	603b      	str	r3, [r7, #0]
 800462a:	4b20      	ldr	r3, [pc, #128]	@ (80046ac <HAL_PWREx_EnableOverDrive+0x90>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462e:	4a1f      	ldr	r2, [pc, #124]	@ (80046ac <HAL_PWREx_EnableOverDrive+0x90>)
 8004630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004634:	6413      	str	r3, [r2, #64]	@ 0x40
 8004636:	4b1d      	ldr	r3, [pc, #116]	@ (80046ac <HAL_PWREx_EnableOverDrive+0x90>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004642:	4b1b      	ldr	r3, [pc, #108]	@ (80046b0 <HAL_PWREx_EnableOverDrive+0x94>)
 8004644:	2201      	movs	r2, #1
 8004646:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004648:	f7fd fa50 	bl	8001aec <HAL_GetTick>
 800464c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800464e:	e009      	b.n	8004664 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004650:	f7fd fa4c 	bl	8001aec <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800465e:	d901      	bls.n	8004664 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e01f      	b.n	80046a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004664:	4b13      	ldr	r3, [pc, #76]	@ (80046b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800466c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004670:	d1ee      	bne.n	8004650 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004672:	4b11      	ldr	r3, [pc, #68]	@ (80046b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004674:	2201      	movs	r2, #1
 8004676:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004678:	f7fd fa38 	bl	8001aec <HAL_GetTick>
 800467c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800467e:	e009      	b.n	8004694 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004680:	f7fd fa34 	bl	8001aec <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800468e:	d901      	bls.n	8004694 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e007      	b.n	80046a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004694:	4b07      	ldr	r3, [pc, #28]	@ (80046b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046a0:	d1ee      	bne.n	8004680 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40023800 	.word	0x40023800
 80046b0:	420e0040 	.word	0x420e0040
 80046b4:	40007000 	.word	0x40007000
 80046b8:	420e0044 	.word	0x420e0044

080046bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e267      	b.n	8004b9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d075      	beq.n	80047c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046da:	4b88      	ldr	r3, [pc, #544]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 030c 	and.w	r3, r3, #12
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d00c      	beq.n	8004700 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046e6:	4b85      	ldr	r3, [pc, #532]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d112      	bne.n	8004718 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046f2:	4b82      	ldr	r3, [pc, #520]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046fe:	d10b      	bne.n	8004718 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004700:	4b7e      	ldr	r3, [pc, #504]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d05b      	beq.n	80047c4 <HAL_RCC_OscConfig+0x108>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d157      	bne.n	80047c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e242      	b.n	8004b9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004720:	d106      	bne.n	8004730 <HAL_RCC_OscConfig+0x74>
 8004722:	4b76      	ldr	r3, [pc, #472]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a75      	ldr	r2, [pc, #468]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 8004728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	e01d      	b.n	800476c <HAL_RCC_OscConfig+0xb0>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004738:	d10c      	bne.n	8004754 <HAL_RCC_OscConfig+0x98>
 800473a:	4b70      	ldr	r3, [pc, #448]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a6f      	ldr	r2, [pc, #444]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 8004740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	4b6d      	ldr	r3, [pc, #436]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a6c      	ldr	r2, [pc, #432]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 800474c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	e00b      	b.n	800476c <HAL_RCC_OscConfig+0xb0>
 8004754:	4b69      	ldr	r3, [pc, #420]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a68      	ldr	r2, [pc, #416]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 800475a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	4b66      	ldr	r3, [pc, #408]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a65      	ldr	r2, [pc, #404]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 8004766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800476a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d013      	beq.n	800479c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004774:	f7fd f9ba 	bl	8001aec <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800477c:	f7fd f9b6 	bl	8001aec <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b64      	cmp	r3, #100	@ 0x64
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e207      	b.n	8004b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478e:	4b5b      	ldr	r3, [pc, #364]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0f0      	beq.n	800477c <HAL_RCC_OscConfig+0xc0>
 800479a:	e014      	b.n	80047c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479c:	f7fd f9a6 	bl	8001aec <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047a4:	f7fd f9a2 	bl	8001aec <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b64      	cmp	r3, #100	@ 0x64
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e1f3      	b.n	8004b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047b6:	4b51      	ldr	r3, [pc, #324]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <HAL_RCC_OscConfig+0xe8>
 80047c2:	e000      	b.n	80047c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d063      	beq.n	800489a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047d2:	4b4a      	ldr	r3, [pc, #296]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 030c 	and.w	r3, r3, #12
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00b      	beq.n	80047f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047de:	4b47      	ldr	r3, [pc, #284]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d11c      	bne.n	8004824 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ea:	4b44      	ldr	r3, [pc, #272]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d116      	bne.n	8004824 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047f6:	4b41      	ldr	r3, [pc, #260]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d005      	beq.n	800480e <HAL_RCC_OscConfig+0x152>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d001      	beq.n	800480e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e1c7      	b.n	8004b9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480e:	4b3b      	ldr	r3, [pc, #236]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	4937      	ldr	r1, [pc, #220]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 800481e:	4313      	orrs	r3, r2
 8004820:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004822:	e03a      	b.n	800489a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d020      	beq.n	800486e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800482c:	4b34      	ldr	r3, [pc, #208]	@ (8004900 <HAL_RCC_OscConfig+0x244>)
 800482e:	2201      	movs	r2, #1
 8004830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004832:	f7fd f95b 	bl	8001aec <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800483a:	f7fd f957 	bl	8001aec <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e1a8      	b.n	8004b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484c:	4b2b      	ldr	r3, [pc, #172]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0f0      	beq.n	800483a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004858:	4b28      	ldr	r3, [pc, #160]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	4925      	ldr	r1, [pc, #148]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 8004868:	4313      	orrs	r3, r2
 800486a:	600b      	str	r3, [r1, #0]
 800486c:	e015      	b.n	800489a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800486e:	4b24      	ldr	r3, [pc, #144]	@ (8004900 <HAL_RCC_OscConfig+0x244>)
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004874:	f7fd f93a 	bl	8001aec <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800487c:	f7fd f936 	bl	8001aec <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e187      	b.n	8004b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800488e:	4b1b      	ldr	r3, [pc, #108]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1f0      	bne.n	800487c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d036      	beq.n	8004914 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d016      	beq.n	80048dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ae:	4b15      	ldr	r3, [pc, #84]	@ (8004904 <HAL_RCC_OscConfig+0x248>)
 80048b0:	2201      	movs	r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b4:	f7fd f91a 	bl	8001aec <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048bc:	f7fd f916 	bl	8001aec <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e167      	b.n	8004b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ce:	4b0b      	ldr	r3, [pc, #44]	@ (80048fc <HAL_RCC_OscConfig+0x240>)
 80048d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0f0      	beq.n	80048bc <HAL_RCC_OscConfig+0x200>
 80048da:	e01b      	b.n	8004914 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048dc:	4b09      	ldr	r3, [pc, #36]	@ (8004904 <HAL_RCC_OscConfig+0x248>)
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048e2:	f7fd f903 	bl	8001aec <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e8:	e00e      	b.n	8004908 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ea:	f7fd f8ff 	bl	8001aec <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d907      	bls.n	8004908 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e150      	b.n	8004b9e <HAL_RCC_OscConfig+0x4e2>
 80048fc:	40023800 	.word	0x40023800
 8004900:	42470000 	.word	0x42470000
 8004904:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004908:	4b88      	ldr	r3, [pc, #544]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 800490a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1ea      	bne.n	80048ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8097 	beq.w	8004a50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004922:	2300      	movs	r3, #0
 8004924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004926:	4b81      	ldr	r3, [pc, #516]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10f      	bne.n	8004952 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004932:	2300      	movs	r3, #0
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	4b7d      	ldr	r3, [pc, #500]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 8004938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493a:	4a7c      	ldr	r2, [pc, #496]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 800493c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004940:	6413      	str	r3, [r2, #64]	@ 0x40
 8004942:	4b7a      	ldr	r3, [pc, #488]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 8004944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800494a:	60bb      	str	r3, [r7, #8]
 800494c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800494e:	2301      	movs	r3, #1
 8004950:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004952:	4b77      	ldr	r3, [pc, #476]	@ (8004b30 <HAL_RCC_OscConfig+0x474>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495a:	2b00      	cmp	r3, #0
 800495c:	d118      	bne.n	8004990 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800495e:	4b74      	ldr	r3, [pc, #464]	@ (8004b30 <HAL_RCC_OscConfig+0x474>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a73      	ldr	r2, [pc, #460]	@ (8004b30 <HAL_RCC_OscConfig+0x474>)
 8004964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800496a:	f7fd f8bf 	bl	8001aec <HAL_GetTick>
 800496e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004972:	f7fd f8bb 	bl	8001aec <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e10c      	b.n	8004b9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004984:	4b6a      	ldr	r3, [pc, #424]	@ (8004b30 <HAL_RCC_OscConfig+0x474>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0f0      	beq.n	8004972 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d106      	bne.n	80049a6 <HAL_RCC_OscConfig+0x2ea>
 8004998:	4b64      	ldr	r3, [pc, #400]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 800499a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499c:	4a63      	ldr	r2, [pc, #396]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 800499e:	f043 0301 	orr.w	r3, r3, #1
 80049a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049a4:	e01c      	b.n	80049e0 <HAL_RCC_OscConfig+0x324>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	2b05      	cmp	r3, #5
 80049ac:	d10c      	bne.n	80049c8 <HAL_RCC_OscConfig+0x30c>
 80049ae:	4b5f      	ldr	r3, [pc, #380]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 80049b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b2:	4a5e      	ldr	r2, [pc, #376]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 80049b4:	f043 0304 	orr.w	r3, r3, #4
 80049b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049ba:	4b5c      	ldr	r3, [pc, #368]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 80049bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049be:	4a5b      	ldr	r2, [pc, #364]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 80049c0:	f043 0301 	orr.w	r3, r3, #1
 80049c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80049c6:	e00b      	b.n	80049e0 <HAL_RCC_OscConfig+0x324>
 80049c8:	4b58      	ldr	r3, [pc, #352]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049cc:	4a57      	ldr	r2, [pc, #348]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 80049ce:	f023 0301 	bic.w	r3, r3, #1
 80049d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80049d4:	4b55      	ldr	r3, [pc, #340]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 80049d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d8:	4a54      	ldr	r2, [pc, #336]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 80049da:	f023 0304 	bic.w	r3, r3, #4
 80049de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d015      	beq.n	8004a14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e8:	f7fd f880 	bl	8001aec <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ee:	e00a      	b.n	8004a06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f0:	f7fd f87c 	bl	8001aec <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e0cb      	b.n	8004b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a06:	4b49      	ldr	r3, [pc, #292]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 8004a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0ee      	beq.n	80049f0 <HAL_RCC_OscConfig+0x334>
 8004a12:	e014      	b.n	8004a3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a14:	f7fd f86a 	bl	8001aec <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a1a:	e00a      	b.n	8004a32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1c:	f7fd f866 	bl	8001aec <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e0b5      	b.n	8004b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a32:	4b3e      	ldr	r3, [pc, #248]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 8004a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1ee      	bne.n	8004a1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a3e:	7dfb      	ldrb	r3, [r7, #23]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d105      	bne.n	8004a50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a44:	4b39      	ldr	r3, [pc, #228]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 8004a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a48:	4a38      	ldr	r2, [pc, #224]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 8004a4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80a1 	beq.w	8004b9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a5a:	4b34      	ldr	r3, [pc, #208]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 030c 	and.w	r3, r3, #12
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d05c      	beq.n	8004b20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d141      	bne.n	8004af2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a6e:	4b31      	ldr	r3, [pc, #196]	@ (8004b34 <HAL_RCC_OscConfig+0x478>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a74:	f7fd f83a 	bl	8001aec <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a7c:	f7fd f836 	bl	8001aec <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e087      	b.n	8004b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a8e:	4b27      	ldr	r3, [pc, #156]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1f0      	bne.n	8004a7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69da      	ldr	r2, [r3, #28]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa8:	019b      	lsls	r3, r3, #6
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab0:	085b      	lsrs	r3, r3, #1
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	041b      	lsls	r3, r3, #16
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abc:	061b      	lsls	r3, r3, #24
 8004abe:	491b      	ldr	r1, [pc, #108]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b34 <HAL_RCC_OscConfig+0x478>)
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aca:	f7fd f80f 	bl	8001aec <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad2:	f7fd f80b 	bl	8001aec <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e05c      	b.n	8004b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae4:	4b11      	ldr	r3, [pc, #68]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0f0      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x416>
 8004af0:	e054      	b.n	8004b9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af2:	4b10      	ldr	r3, [pc, #64]	@ (8004b34 <HAL_RCC_OscConfig+0x478>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af8:	f7fc fff8 	bl	8001aec <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b00:	f7fc fff4 	bl	8001aec <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e045      	b.n	8004b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b12:	4b06      	ldr	r3, [pc, #24]	@ (8004b2c <HAL_RCC_OscConfig+0x470>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1f0      	bne.n	8004b00 <HAL_RCC_OscConfig+0x444>
 8004b1e:	e03d      	b.n	8004b9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d107      	bne.n	8004b38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e038      	b.n	8004b9e <HAL_RCC_OscConfig+0x4e2>
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	40007000 	.word	0x40007000
 8004b34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b38:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba8 <HAL_RCC_OscConfig+0x4ec>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d028      	beq.n	8004b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d121      	bne.n	8004b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d11a      	bne.n	8004b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b68:	4013      	ands	r3, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d111      	bne.n	8004b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7e:	085b      	lsrs	r3, r3, #1
 8004b80:	3b01      	subs	r3, #1
 8004b82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d107      	bne.n	8004b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d001      	beq.n	8004b9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e000      	b.n	8004b9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40023800 	.word	0x40023800

08004bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e0cc      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc0:	4b68      	ldr	r3, [pc, #416]	@ (8004d64 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 030f 	and.w	r3, r3, #15
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d90c      	bls.n	8004be8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bce:	4b65      	ldr	r3, [pc, #404]	@ (8004d64 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd6:	4b63      	ldr	r3, [pc, #396]	@ (8004d64 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d001      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0b8      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d020      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c00:	4b59      	ldr	r3, [pc, #356]	@ (8004d68 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	4a58      	ldr	r2, [pc, #352]	@ (8004d68 <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0308 	and.w	r3, r3, #8
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d005      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c18:	4b53      	ldr	r3, [pc, #332]	@ (8004d68 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	4a52      	ldr	r2, [pc, #328]	@ (8004d68 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c24:	4b50      	ldr	r3, [pc, #320]	@ (8004d68 <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	494d      	ldr	r1, [pc, #308]	@ (8004d68 <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d044      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d107      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4a:	4b47      	ldr	r3, [pc, #284]	@ (8004d68 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d119      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e07f      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d003      	beq.n	8004c6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	d107      	bne.n	8004c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8004d68 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d109      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e06f      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d68 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e067      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c8a:	4b37      	ldr	r3, [pc, #220]	@ (8004d68 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f023 0203 	bic.w	r2, r3, #3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	4934      	ldr	r1, [pc, #208]	@ (8004d68 <HAL_RCC_ClockConfig+0x1bc>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c9c:	f7fc ff26 	bl	8001aec <HAL_GetTick>
 8004ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca2:	e00a      	b.n	8004cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca4:	f7fc ff22 	bl	8001aec <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e04f      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cba:	4b2b      	ldr	r3, [pc, #172]	@ (8004d68 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 020c 	and.w	r2, r3, #12
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d1eb      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ccc:	4b25      	ldr	r3, [pc, #148]	@ (8004d64 <HAL_RCC_ClockConfig+0x1b8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d20c      	bcs.n	8004cf4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cda:	4b22      	ldr	r3, [pc, #136]	@ (8004d64 <HAL_RCC_ClockConfig+0x1b8>)
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce2:	4b20      	ldr	r3, [pc, #128]	@ (8004d64 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d001      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e032      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d008      	beq.n	8004d12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d00:	4b19      	ldr	r3, [pc, #100]	@ (8004d68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	4916      	ldr	r1, [pc, #88]	@ (8004d68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d1e:	4b12      	ldr	r3, [pc, #72]	@ (8004d68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	490e      	ldr	r1, [pc, #56]	@ (8004d68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d32:	f000 f821 	bl	8004d78 <HAL_RCC_GetSysClockFreq>
 8004d36:	4602      	mov	r2, r0
 8004d38:	4b0b      	ldr	r3, [pc, #44]	@ (8004d68 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	091b      	lsrs	r3, r3, #4
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	490a      	ldr	r1, [pc, #40]	@ (8004d6c <HAL_RCC_ClockConfig+0x1c0>)
 8004d44:	5ccb      	ldrb	r3, [r1, r3]
 8004d46:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4a:	4a09      	ldr	r2, [pc, #36]	@ (8004d70 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d4e:	4b09      	ldr	r3, [pc, #36]	@ (8004d74 <HAL_RCC_ClockConfig+0x1c8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fc fe86 	bl	8001a64 <HAL_InitTick>

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40023c00 	.word	0x40023c00
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	08007ff8 	.word	0x08007ff8
 8004d70:	20000004 	.word	0x20000004
 8004d74:	20000008 	.word	0x20000008

08004d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d7c:	b090      	sub	sp, #64	@ 0x40
 8004d7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d90:	4b59      	ldr	r3, [pc, #356]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 030c 	and.w	r3, r3, #12
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d00d      	beq.n	8004db8 <HAL_RCC_GetSysClockFreq+0x40>
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	f200 80a1 	bhi.w	8004ee4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <HAL_RCC_GetSysClockFreq+0x34>
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d003      	beq.n	8004db2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004daa:	e09b      	b.n	8004ee4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dac:	4b53      	ldr	r3, [pc, #332]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x184>)
 8004dae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004db0:	e09b      	b.n	8004eea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004db2:	4b53      	ldr	r3, [pc, #332]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x188>)
 8004db4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004db6:	e098      	b.n	8004eea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004db8:	4b4f      	ldr	r3, [pc, #316]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dc0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dc2:	4b4d      	ldr	r3, [pc, #308]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d028      	beq.n	8004e20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dce:	4b4a      	ldr	r3, [pc, #296]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	099b      	lsrs	r3, r3, #6
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	623b      	str	r3, [r7, #32]
 8004dd8:	627a      	str	r2, [r7, #36]	@ 0x24
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004de0:	2100      	movs	r1, #0
 8004de2:	4b47      	ldr	r3, [pc, #284]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x188>)
 8004de4:	fb03 f201 	mul.w	r2, r3, r1
 8004de8:	2300      	movs	r3, #0
 8004dea:	fb00 f303 	mul.w	r3, r0, r3
 8004dee:	4413      	add	r3, r2
 8004df0:	4a43      	ldr	r2, [pc, #268]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x188>)
 8004df2:	fba0 1202 	umull	r1, r2, r0, r2
 8004df6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004df8:	460a      	mov	r2, r1
 8004dfa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004dfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dfe:	4413      	add	r3, r2
 8004e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e04:	2200      	movs	r2, #0
 8004e06:	61bb      	str	r3, [r7, #24]
 8004e08:	61fa      	str	r2, [r7, #28]
 8004e0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004e12:	f7fb fa3d 	bl	8000290 <__aeabi_uldivmod>
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e1e:	e053      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e20:	4b35      	ldr	r3, [pc, #212]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	099b      	lsrs	r3, r3, #6
 8004e26:	2200      	movs	r2, #0
 8004e28:	613b      	str	r3, [r7, #16]
 8004e2a:	617a      	str	r2, [r7, #20]
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004e32:	f04f 0b00 	mov.w	fp, #0
 8004e36:	4652      	mov	r2, sl
 8004e38:	465b      	mov	r3, fp
 8004e3a:	f04f 0000 	mov.w	r0, #0
 8004e3e:	f04f 0100 	mov.w	r1, #0
 8004e42:	0159      	lsls	r1, r3, #5
 8004e44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e48:	0150      	lsls	r0, r2, #5
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	ebb2 080a 	subs.w	r8, r2, sl
 8004e52:	eb63 090b 	sbc.w	r9, r3, fp
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004e62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004e66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004e6a:	ebb2 0408 	subs.w	r4, r2, r8
 8004e6e:	eb63 0509 	sbc.w	r5, r3, r9
 8004e72:	f04f 0200 	mov.w	r2, #0
 8004e76:	f04f 0300 	mov.w	r3, #0
 8004e7a:	00eb      	lsls	r3, r5, #3
 8004e7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e80:	00e2      	lsls	r2, r4, #3
 8004e82:	4614      	mov	r4, r2
 8004e84:	461d      	mov	r5, r3
 8004e86:	eb14 030a 	adds.w	r3, r4, sl
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	eb45 030b 	adc.w	r3, r5, fp
 8004e90:	607b      	str	r3, [r7, #4]
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	028b      	lsls	r3, r1, #10
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	028a      	lsls	r2, r1, #10
 8004eac:	4610      	mov	r0, r2
 8004eae:	4619      	mov	r1, r3
 8004eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	60fa      	str	r2, [r7, #12]
 8004eb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ebc:	f7fb f9e8 	bl	8000290 <__aeabi_uldivmod>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	0c1b      	lsrs	r3, r3, #16
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004ed8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ee2:	e002      	b.n	8004eea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ee4:	4b05      	ldr	r3, [pc, #20]	@ (8004efc <HAL_RCC_GetSysClockFreq+0x184>)
 8004ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3740      	adds	r7, #64	@ 0x40
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	00f42400 	.word	0x00f42400
 8004f00:	017d7840 	.word	0x017d7840

08004f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f08:	4b03      	ldr	r3, [pc, #12]	@ (8004f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	20000004 	.word	0x20000004

08004f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f20:	f7ff fff0 	bl	8004f04 <HAL_RCC_GetHCLKFreq>
 8004f24:	4602      	mov	r2, r0
 8004f26:	4b05      	ldr	r3, [pc, #20]	@ (8004f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	0a9b      	lsrs	r3, r3, #10
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	4903      	ldr	r1, [pc, #12]	@ (8004f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f32:	5ccb      	ldrb	r3, [r1, r3]
 8004f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	08008008 	.word	0x08008008

08004f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f48:	f7ff ffdc 	bl	8004f04 <HAL_RCC_GetHCLKFreq>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	4b05      	ldr	r3, [pc, #20]	@ (8004f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	0b5b      	lsrs	r3, r3, #13
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	4903      	ldr	r1, [pc, #12]	@ (8004f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f5a:	5ccb      	ldrb	r3, [r1, r3]
 8004f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40023800 	.word	0x40023800
 8004f68:	08008008 	.word	0x08008008

08004f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e041      	b.n	8005002 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fc fbb6 	bl	8001704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f000 fc58 	bl	8005860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b01      	cmp	r3, #1
 800501e:	d001      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e04e      	b.n	80050c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0201 	orr.w	r2, r2, #1
 800503a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a23      	ldr	r2, [pc, #140]	@ (80050d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d022      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800504e:	d01d      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1f      	ldr	r2, [pc, #124]	@ (80050d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d018      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1e      	ldr	r2, [pc, #120]	@ (80050d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d013      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1c      	ldr	r2, [pc, #112]	@ (80050dc <HAL_TIM_Base_Start_IT+0xd0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00e      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a1b      	ldr	r2, [pc, #108]	@ (80050e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d009      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a19      	ldr	r2, [pc, #100]	@ (80050e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d004      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x80>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a18      	ldr	r2, [pc, #96]	@ (80050e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d111      	bne.n	80050b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b06      	cmp	r3, #6
 800509c:	d010      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f042 0201 	orr.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ae:	e007      	b.n	80050c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40010000 	.word	0x40010000
 80050d4:	40000400 	.word	0x40000400
 80050d8:	40000800 	.word	0x40000800
 80050dc:	40000c00 	.word	0x40000c00
 80050e0:	40010400 	.word	0x40010400
 80050e4:	40014000 	.word	0x40014000
 80050e8:	40001800 	.word	0x40001800

080050ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e041      	b.n	8005182 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d106      	bne.n	8005118 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fc fb1e 	bl	8001754 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3304      	adds	r3, #4
 8005128:	4619      	mov	r1, r3
 800512a:	4610      	mov	r0, r2
 800512c:	f000 fb98 	bl	8005860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d109      	bne.n	80051b0 <HAL_TIM_PWM_Start+0x24>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	bf14      	ite	ne
 80051a8:	2301      	movne	r3, #1
 80051aa:	2300      	moveq	r3, #0
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	e022      	b.n	80051f6 <HAL_TIM_PWM_Start+0x6a>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d109      	bne.n	80051ca <HAL_TIM_PWM_Start+0x3e>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b01      	cmp	r3, #1
 80051c0:	bf14      	ite	ne
 80051c2:	2301      	movne	r3, #1
 80051c4:	2300      	moveq	r3, #0
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	e015      	b.n	80051f6 <HAL_TIM_PWM_Start+0x6a>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d109      	bne.n	80051e4 <HAL_TIM_PWM_Start+0x58>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	bf14      	ite	ne
 80051dc:	2301      	movne	r3, #1
 80051de:	2300      	moveq	r3, #0
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	e008      	b.n	80051f6 <HAL_TIM_PWM_Start+0x6a>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	bf14      	ite	ne
 80051f0:	2301      	movne	r3, #1
 80051f2:	2300      	moveq	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e07c      	b.n	80052f8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d104      	bne.n	800520e <HAL_TIM_PWM_Start+0x82>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800520c:	e013      	b.n	8005236 <HAL_TIM_PWM_Start+0xaa>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b04      	cmp	r3, #4
 8005212:	d104      	bne.n	800521e <HAL_TIM_PWM_Start+0x92>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800521c:	e00b      	b.n	8005236 <HAL_TIM_PWM_Start+0xaa>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b08      	cmp	r3, #8
 8005222:	d104      	bne.n	800522e <HAL_TIM_PWM_Start+0xa2>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800522c:	e003      	b.n	8005236 <HAL_TIM_PWM_Start+0xaa>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2201      	movs	r2, #1
 800523c:	6839      	ldr	r1, [r7, #0]
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fe04 	bl	8005e4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a2d      	ldr	r2, [pc, #180]	@ (8005300 <HAL_TIM_PWM_Start+0x174>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d004      	beq.n	8005258 <HAL_TIM_PWM_Start+0xcc>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a2c      	ldr	r2, [pc, #176]	@ (8005304 <HAL_TIM_PWM_Start+0x178>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d101      	bne.n	800525c <HAL_TIM_PWM_Start+0xd0>
 8005258:	2301      	movs	r3, #1
 800525a:	e000      	b.n	800525e <HAL_TIM_PWM_Start+0xd2>
 800525c:	2300      	movs	r3, #0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d007      	beq.n	8005272 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005270:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a22      	ldr	r2, [pc, #136]	@ (8005300 <HAL_TIM_PWM_Start+0x174>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d022      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x136>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005284:	d01d      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x136>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a1f      	ldr	r2, [pc, #124]	@ (8005308 <HAL_TIM_PWM_Start+0x17c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d018      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x136>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a1d      	ldr	r2, [pc, #116]	@ (800530c <HAL_TIM_PWM_Start+0x180>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d013      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x136>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a1c      	ldr	r2, [pc, #112]	@ (8005310 <HAL_TIM_PWM_Start+0x184>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00e      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x136>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a16      	ldr	r2, [pc, #88]	@ (8005304 <HAL_TIM_PWM_Start+0x178>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d009      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x136>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a18      	ldr	r2, [pc, #96]	@ (8005314 <HAL_TIM_PWM_Start+0x188>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d004      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x136>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a16      	ldr	r2, [pc, #88]	@ (8005318 <HAL_TIM_PWM_Start+0x18c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d111      	bne.n	80052e6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b06      	cmp	r3, #6
 80052d2:	d010      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e4:	e007      	b.n	80052f6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0201 	orr.w	r2, r2, #1
 80052f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40010000 	.word	0x40010000
 8005304:	40010400 	.word	0x40010400
 8005308:	40000400 	.word	0x40000400
 800530c:	40000800 	.word	0x40000800
 8005310:	40000c00 	.word	0x40000c00
 8005314:	40014000 	.word	0x40014000
 8005318:	40001800 	.word	0x40001800

0800531c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d020      	beq.n	8005380 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01b      	beq.n	8005380 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0202 	mvn.w	r2, #2
 8005350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fa5b 	bl	8005822 <HAL_TIM_IC_CaptureCallback>
 800536c:	e005      	b.n	800537a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fa4d 	bl	800580e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fa5e 	bl	8005836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f003 0304 	and.w	r3, r3, #4
 8005386:	2b00      	cmp	r3, #0
 8005388:	d020      	beq.n	80053cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01b      	beq.n	80053cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0204 	mvn.w	r2, #4
 800539c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2202      	movs	r2, #2
 80053a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fa35 	bl	8005822 <HAL_TIM_IC_CaptureCallback>
 80053b8:	e005      	b.n	80053c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fa27 	bl	800580e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 fa38 	bl	8005836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d020      	beq.n	8005418 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d01b      	beq.n	8005418 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0208 	mvn.w	r2, #8
 80053e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2204      	movs	r2, #4
 80053ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fa0f 	bl	8005822 <HAL_TIM_IC_CaptureCallback>
 8005404:	e005      	b.n	8005412 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fa01 	bl	800580e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fa12 	bl	8005836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	2b00      	cmp	r3, #0
 8005420:	d020      	beq.n	8005464 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f003 0310 	and.w	r3, r3, #16
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01b      	beq.n	8005464 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0210 	mvn.w	r2, #16
 8005434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2208      	movs	r2, #8
 800543a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f9e9 	bl	8005822 <HAL_TIM_IC_CaptureCallback>
 8005450:	e005      	b.n	800545e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f9db 	bl	800580e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f9ec 	bl	8005836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00c      	beq.n	8005488 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0201 	mvn.w	r2, #1
 8005480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fb fbe8 	bl	8000c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00c      	beq.n	80054ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80054a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fd7c 	bl	8005fa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00c      	beq.n	80054d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f9bd 	bl	800584a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00c      	beq.n	80054f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f003 0320 	and.w	r3, r3, #32
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d007      	beq.n	80054f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0220 	mvn.w	r2, #32
 80054ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fd4e 	bl	8005f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054f4:	bf00      	nop
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005508:	2300      	movs	r3, #0
 800550a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005516:	2302      	movs	r3, #2
 8005518:	e0ae      	b.n	8005678 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b0c      	cmp	r3, #12
 8005526:	f200 809f 	bhi.w	8005668 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800552a:	a201      	add	r2, pc, #4	@ (adr r2, 8005530 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005530:	08005565 	.word	0x08005565
 8005534:	08005669 	.word	0x08005669
 8005538:	08005669 	.word	0x08005669
 800553c:	08005669 	.word	0x08005669
 8005540:	080055a5 	.word	0x080055a5
 8005544:	08005669 	.word	0x08005669
 8005548:	08005669 	.word	0x08005669
 800554c:	08005669 	.word	0x08005669
 8005550:	080055e7 	.word	0x080055e7
 8005554:	08005669 	.word	0x08005669
 8005558:	08005669 	.word	0x08005669
 800555c:	08005669 	.word	0x08005669
 8005560:	08005627 	.word	0x08005627
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fa24 	bl	80059b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699a      	ldr	r2, [r3, #24]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0208 	orr.w	r2, r2, #8
 800557e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699a      	ldr	r2, [r3, #24]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0204 	bic.w	r2, r2, #4
 800558e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6999      	ldr	r1, [r3, #24]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	691a      	ldr	r2, [r3, #16]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	619a      	str	r2, [r3, #24]
      break;
 80055a2:	e064      	b.n	800566e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fa74 	bl	8005a98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6999      	ldr	r1, [r3, #24]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	021a      	lsls	r2, r3, #8
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	619a      	str	r2, [r3, #24]
      break;
 80055e4:	e043      	b.n	800566e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68b9      	ldr	r1, [r7, #8]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 fac9 	bl	8005b84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0208 	orr.w	r2, r2, #8
 8005600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0204 	bic.w	r2, r2, #4
 8005610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69d9      	ldr	r1, [r3, #28]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	61da      	str	r2, [r3, #28]
      break;
 8005624:	e023      	b.n	800566e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	4618      	mov	r0, r3
 800562e:	f000 fb1d 	bl	8005c6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69d9      	ldr	r1, [r3, #28]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	021a      	lsls	r2, r3, #8
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	61da      	str	r2, [r3, #28]
      break;
 8005666:	e002      	b.n	800566e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	75fb      	strb	r3, [r7, #23]
      break;
 800566c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005676:	7dfb      	ldrb	r3, [r7, #23]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_TIM_ConfigClockSource+0x1c>
 8005698:	2302      	movs	r3, #2
 800569a:	e0b4      	b.n	8005806 <HAL_TIM_ConfigClockSource+0x186>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80056ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056d4:	d03e      	beq.n	8005754 <HAL_TIM_ConfigClockSource+0xd4>
 80056d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056da:	f200 8087 	bhi.w	80057ec <HAL_TIM_ConfigClockSource+0x16c>
 80056de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e2:	f000 8086 	beq.w	80057f2 <HAL_TIM_ConfigClockSource+0x172>
 80056e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ea:	d87f      	bhi.n	80057ec <HAL_TIM_ConfigClockSource+0x16c>
 80056ec:	2b70      	cmp	r3, #112	@ 0x70
 80056ee:	d01a      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0xa6>
 80056f0:	2b70      	cmp	r3, #112	@ 0x70
 80056f2:	d87b      	bhi.n	80057ec <HAL_TIM_ConfigClockSource+0x16c>
 80056f4:	2b60      	cmp	r3, #96	@ 0x60
 80056f6:	d050      	beq.n	800579a <HAL_TIM_ConfigClockSource+0x11a>
 80056f8:	2b60      	cmp	r3, #96	@ 0x60
 80056fa:	d877      	bhi.n	80057ec <HAL_TIM_ConfigClockSource+0x16c>
 80056fc:	2b50      	cmp	r3, #80	@ 0x50
 80056fe:	d03c      	beq.n	800577a <HAL_TIM_ConfigClockSource+0xfa>
 8005700:	2b50      	cmp	r3, #80	@ 0x50
 8005702:	d873      	bhi.n	80057ec <HAL_TIM_ConfigClockSource+0x16c>
 8005704:	2b40      	cmp	r3, #64	@ 0x40
 8005706:	d058      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x13a>
 8005708:	2b40      	cmp	r3, #64	@ 0x40
 800570a:	d86f      	bhi.n	80057ec <HAL_TIM_ConfigClockSource+0x16c>
 800570c:	2b30      	cmp	r3, #48	@ 0x30
 800570e:	d064      	beq.n	80057da <HAL_TIM_ConfigClockSource+0x15a>
 8005710:	2b30      	cmp	r3, #48	@ 0x30
 8005712:	d86b      	bhi.n	80057ec <HAL_TIM_ConfigClockSource+0x16c>
 8005714:	2b20      	cmp	r3, #32
 8005716:	d060      	beq.n	80057da <HAL_TIM_ConfigClockSource+0x15a>
 8005718:	2b20      	cmp	r3, #32
 800571a:	d867      	bhi.n	80057ec <HAL_TIM_ConfigClockSource+0x16c>
 800571c:	2b00      	cmp	r3, #0
 800571e:	d05c      	beq.n	80057da <HAL_TIM_ConfigClockSource+0x15a>
 8005720:	2b10      	cmp	r3, #16
 8005722:	d05a      	beq.n	80057da <HAL_TIM_ConfigClockSource+0x15a>
 8005724:	e062      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005736:	f000 fb69 	bl	8005e0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005748:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	609a      	str	r2, [r3, #8]
      break;
 8005752:	e04f      	b.n	80057f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005764:	f000 fb52 	bl	8005e0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689a      	ldr	r2, [r3, #8]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005776:	609a      	str	r2, [r3, #8]
      break;
 8005778:	e03c      	b.n	80057f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005786:	461a      	mov	r2, r3
 8005788:	f000 fac6 	bl	8005d18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2150      	movs	r1, #80	@ 0x50
 8005792:	4618      	mov	r0, r3
 8005794:	f000 fb1f 	bl	8005dd6 <TIM_ITRx_SetConfig>
      break;
 8005798:	e02c      	b.n	80057f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057a6:	461a      	mov	r2, r3
 80057a8:	f000 fae5 	bl	8005d76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2160      	movs	r1, #96	@ 0x60
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fb0f 	bl	8005dd6 <TIM_ITRx_SetConfig>
      break;
 80057b8:	e01c      	b.n	80057f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057c6:	461a      	mov	r2, r3
 80057c8:	f000 faa6 	bl	8005d18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2140      	movs	r1, #64	@ 0x40
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 faff 	bl	8005dd6 <TIM_ITRx_SetConfig>
      break;
 80057d8:	e00c      	b.n	80057f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4619      	mov	r1, r3
 80057e4:	4610      	mov	r0, r2
 80057e6:	f000 faf6 	bl	8005dd6 <TIM_ITRx_SetConfig>
      break;
 80057ea:	e003      	b.n	80057f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
      break;
 80057f0:	e000      	b.n	80057f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005804:	7bfb      	ldrb	r3, [r7, #15]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800582a:	bf00      	nop
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005836:	b480      	push	{r7}
 8005838:	b083      	sub	sp, #12
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800583e:	bf00      	nop
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
	...

08005860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a46      	ldr	r2, [pc, #280]	@ (800598c <TIM_Base_SetConfig+0x12c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d013      	beq.n	80058a0 <TIM_Base_SetConfig+0x40>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800587e:	d00f      	beq.n	80058a0 <TIM_Base_SetConfig+0x40>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a43      	ldr	r2, [pc, #268]	@ (8005990 <TIM_Base_SetConfig+0x130>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00b      	beq.n	80058a0 <TIM_Base_SetConfig+0x40>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a42      	ldr	r2, [pc, #264]	@ (8005994 <TIM_Base_SetConfig+0x134>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d007      	beq.n	80058a0 <TIM_Base_SetConfig+0x40>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a41      	ldr	r2, [pc, #260]	@ (8005998 <TIM_Base_SetConfig+0x138>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_Base_SetConfig+0x40>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a40      	ldr	r2, [pc, #256]	@ (800599c <TIM_Base_SetConfig+0x13c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d108      	bne.n	80058b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a35      	ldr	r2, [pc, #212]	@ (800598c <TIM_Base_SetConfig+0x12c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d02b      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058c0:	d027      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a32      	ldr	r2, [pc, #200]	@ (8005990 <TIM_Base_SetConfig+0x130>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d023      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a31      	ldr	r2, [pc, #196]	@ (8005994 <TIM_Base_SetConfig+0x134>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d01f      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a30      	ldr	r2, [pc, #192]	@ (8005998 <TIM_Base_SetConfig+0x138>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d01b      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a2f      	ldr	r2, [pc, #188]	@ (800599c <TIM_Base_SetConfig+0x13c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d017      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a2e      	ldr	r2, [pc, #184]	@ (80059a0 <TIM_Base_SetConfig+0x140>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d013      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a2d      	ldr	r2, [pc, #180]	@ (80059a4 <TIM_Base_SetConfig+0x144>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00f      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a2c      	ldr	r2, [pc, #176]	@ (80059a8 <TIM_Base_SetConfig+0x148>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00b      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a2b      	ldr	r2, [pc, #172]	@ (80059ac <TIM_Base_SetConfig+0x14c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d007      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a2a      	ldr	r2, [pc, #168]	@ (80059b0 <TIM_Base_SetConfig+0x150>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d003      	beq.n	8005912 <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a29      	ldr	r2, [pc, #164]	@ (80059b4 <TIM_Base_SetConfig+0x154>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d108      	bne.n	8005924 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a10      	ldr	r2, [pc, #64]	@ (800598c <TIM_Base_SetConfig+0x12c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d003      	beq.n	8005958 <TIM_Base_SetConfig+0xf8>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a12      	ldr	r2, [pc, #72]	@ (800599c <TIM_Base_SetConfig+0x13c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d103      	bne.n	8005960 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b01      	cmp	r3, #1
 8005970:	d105      	bne.n	800597e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f023 0201 	bic.w	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	611a      	str	r2, [r3, #16]
  }
}
 800597e:	bf00      	nop
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40010000 	.word	0x40010000
 8005990:	40000400 	.word	0x40000400
 8005994:	40000800 	.word	0x40000800
 8005998:	40000c00 	.word	0x40000c00
 800599c:	40010400 	.word	0x40010400
 80059a0:	40014000 	.word	0x40014000
 80059a4:	40014400 	.word	0x40014400
 80059a8:	40014800 	.word	0x40014800
 80059ac:	40001800 	.word	0x40001800
 80059b0:	40001c00 	.word	0x40001c00
 80059b4:	40002000 	.word	0x40002000

080059b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f023 0201 	bic.w	r2, r3, #1
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0303 	bic.w	r3, r3, #3
 80059ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f023 0302 	bic.w	r3, r3, #2
 8005a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a20      	ldr	r2, [pc, #128]	@ (8005a90 <TIM_OC1_SetConfig+0xd8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d003      	beq.n	8005a1c <TIM_OC1_SetConfig+0x64>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a1f      	ldr	r2, [pc, #124]	@ (8005a94 <TIM_OC1_SetConfig+0xdc>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d10c      	bne.n	8005a36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f023 0308 	bic.w	r3, r3, #8
 8005a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f023 0304 	bic.w	r3, r3, #4
 8005a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a15      	ldr	r2, [pc, #84]	@ (8005a90 <TIM_OC1_SetConfig+0xd8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d003      	beq.n	8005a46 <TIM_OC1_SetConfig+0x8e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a14      	ldr	r2, [pc, #80]	@ (8005a94 <TIM_OC1_SetConfig+0xdc>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d111      	bne.n	8005a6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	621a      	str	r2, [r3, #32]
}
 8005a84:	bf00      	nop
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	40010000 	.word	0x40010000
 8005a94:	40010400 	.word	0x40010400

08005a98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	f023 0210 	bic.w	r2, r3, #16
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	021b      	lsls	r3, r3, #8
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f023 0320 	bic.w	r3, r3, #32
 8005ae2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a22      	ldr	r2, [pc, #136]	@ (8005b7c <TIM_OC2_SetConfig+0xe4>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d003      	beq.n	8005b00 <TIM_OC2_SetConfig+0x68>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a21      	ldr	r2, [pc, #132]	@ (8005b80 <TIM_OC2_SetConfig+0xe8>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d10d      	bne.n	8005b1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a17      	ldr	r2, [pc, #92]	@ (8005b7c <TIM_OC2_SetConfig+0xe4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_OC2_SetConfig+0x94>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a16      	ldr	r2, [pc, #88]	@ (8005b80 <TIM_OC2_SetConfig+0xe8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d113      	bne.n	8005b54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	621a      	str	r2, [r3, #32]
}
 8005b6e:	bf00      	nop
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	40010000 	.word	0x40010000
 8005b80:	40010400 	.word	0x40010400

08005b84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0303 	bic.w	r3, r3, #3
 8005bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	021b      	lsls	r3, r3, #8
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a21      	ldr	r2, [pc, #132]	@ (8005c64 <TIM_OC3_SetConfig+0xe0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d003      	beq.n	8005bea <TIM_OC3_SetConfig+0x66>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a20      	ldr	r2, [pc, #128]	@ (8005c68 <TIM_OC3_SetConfig+0xe4>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d10d      	bne.n	8005c06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	021b      	lsls	r3, r3, #8
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a16      	ldr	r2, [pc, #88]	@ (8005c64 <TIM_OC3_SetConfig+0xe0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d003      	beq.n	8005c16 <TIM_OC3_SetConfig+0x92>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a15      	ldr	r2, [pc, #84]	@ (8005c68 <TIM_OC3_SetConfig+0xe4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d113      	bne.n	8005c3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	621a      	str	r2, [r3, #32]
}
 8005c58:	bf00      	nop
 8005c5a:	371c      	adds	r7, #28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	40010000 	.word	0x40010000
 8005c68:	40010400 	.word	0x40010400

08005c6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	021b      	lsls	r3, r3, #8
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	031b      	lsls	r3, r3, #12
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a12      	ldr	r2, [pc, #72]	@ (8005d10 <TIM_OC4_SetConfig+0xa4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d003      	beq.n	8005cd4 <TIM_OC4_SetConfig+0x68>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a11      	ldr	r2, [pc, #68]	@ (8005d14 <TIM_OC4_SetConfig+0xa8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d109      	bne.n	8005ce8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	019b      	lsls	r3, r3, #6
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	621a      	str	r2, [r3, #32]
}
 8005d02:	bf00      	nop
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40010000 	.word	0x40010000
 8005d14:	40010400 	.word	0x40010400

08005d18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	f023 0201 	bic.w	r2, r3, #1
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f023 030a 	bic.w	r3, r3, #10
 8005d54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	621a      	str	r2, [r3, #32]
}
 8005d6a:	bf00      	nop
 8005d6c:	371c      	adds	r7, #28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b087      	sub	sp, #28
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	f023 0210 	bic.w	r2, r3, #16
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005da0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	031b      	lsls	r3, r3, #12
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005db2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	011b      	lsls	r3, r3, #4
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	621a      	str	r2, [r3, #32]
}
 8005dca:	bf00      	nop
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b085      	sub	sp, #20
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	f043 0307 	orr.w	r3, r3, #7
 8005df8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	609a      	str	r2, [r3, #8]
}
 8005e00:	bf00      	nop
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	021a      	lsls	r2, r3, #8
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	609a      	str	r2, [r3, #8]
}
 8005e40:	bf00      	nop
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f003 031f 	and.w	r3, r3, #31
 8005e5e:	2201      	movs	r2, #1
 8005e60:	fa02 f303 	lsl.w	r3, r2, r3
 8005e64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a1a      	ldr	r2, [r3, #32]
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	43db      	mvns	r3, r3
 8005e6e:	401a      	ands	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6a1a      	ldr	r2, [r3, #32]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f003 031f 	and.w	r3, r3, #31
 8005e7e:	6879      	ldr	r1, [r7, #4]
 8005e80:	fa01 f303 	lsl.w	r3, r1, r3
 8005e84:	431a      	orrs	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	621a      	str	r2, [r3, #32]
}
 8005e8a:	bf00      	nop
 8005e8c:	371c      	adds	r7, #28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
	...

08005e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d101      	bne.n	8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005eac:	2302      	movs	r3, #2
 8005eae:	e05a      	b.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a21      	ldr	r2, [pc, #132]	@ (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d022      	beq.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005efc:	d01d      	beq.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a1d      	ldr	r2, [pc, #116]	@ (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d018      	beq.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d013      	beq.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1a      	ldr	r2, [pc, #104]	@ (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d00e      	beq.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a18      	ldr	r2, [pc, #96]	@ (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d009      	beq.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a17      	ldr	r2, [pc, #92]	@ (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d004      	beq.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a15      	ldr	r2, [pc, #84]	@ (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d10c      	bne.n	8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40010000 	.word	0x40010000
 8005f78:	40000400 	.word	0x40000400
 8005f7c:	40000800 	.word	0x40000800
 8005f80:	40000c00 	.word	0x40000c00
 8005f84:	40010400 	.word	0x40010400
 8005f88:	40014000 	.word	0x40014000
 8005f8c:	40001800 	.word	0x40001800

08005f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e042      	b.n	8006050 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d106      	bne.n	8005fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fb fc3e 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2224      	movs	r2, #36	@ 0x24
 8005fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 ff6d 	bl	8006edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	695a      	ldr	r2, [r3, #20]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68da      	ldr	r2, [r3, #12]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2220      	movs	r2, #32
 800603c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08c      	sub	sp, #48	@ 0x30
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	4613      	mov	r3, r2
 8006064:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b20      	cmp	r3, #32
 8006070:	d156      	bne.n	8006120 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <HAL_UART_Transmit_DMA+0x26>
 8006078:	88fb      	ldrh	r3, [r7, #6]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e04f      	b.n	8006122 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	88fa      	ldrh	r2, [r7, #6]
 800608c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	88fa      	ldrh	r2, [r7, #6]
 8006092:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2221      	movs	r2, #33	@ 0x21
 800609e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a6:	4a21      	ldr	r2, [pc, #132]	@ (800612c <HAL_UART_Transmit_DMA+0xd4>)
 80060a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ae:	4a20      	ldr	r2, [pc, #128]	@ (8006130 <HAL_UART_Transmit_DMA+0xd8>)
 80060b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006134 <HAL_UART_Transmit_DMA+0xdc>)
 80060b8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060be:	2200      	movs	r2, #0
 80060c0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80060c2:	f107 0308 	add.w	r3, r7, #8
 80060c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80060cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ce:	6819      	ldr	r1, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3304      	adds	r3, #4
 80060d6:	461a      	mov	r2, r3
 80060d8:	88fb      	ldrh	r3, [r7, #6]
 80060da:	f7fb fef7 	bl	8001ecc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3314      	adds	r3, #20
 80060ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	e853 3f00 	ldrex	r3, [r3]
 80060f6:	617b      	str	r3, [r7, #20]
   return(result);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3314      	adds	r3, #20
 8006106:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006108:	627a      	str	r2, [r7, #36]	@ 0x24
 800610a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610c:	6a39      	ldr	r1, [r7, #32]
 800610e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006110:	e841 2300 	strex	r3, r2, [r1]
 8006114:	61fb      	str	r3, [r7, #28]
   return(result);
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e5      	bne.n	80060e8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	e000      	b.n	8006122 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006120:	2302      	movs	r3, #2
  }
}
 8006122:	4618      	mov	r0, r3
 8006124:	3730      	adds	r7, #48	@ 0x30
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	08006769 	.word	0x08006769
 8006130:	08006803 	.word	0x08006803
 8006134:	08006987 	.word	0x08006987

08006138 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08c      	sub	sp, #48	@ 0x30
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	4613      	mov	r3, r2
 8006144:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b20      	cmp	r3, #32
 8006150:	d14a      	bne.n	80061e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006158:	88fb      	ldrh	r3, [r7, #6]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e043      	b.n	80061ea <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2201      	movs	r2, #1
 8006166:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	461a      	mov	r2, r3
 8006172:	68b9      	ldr	r1, [r7, #8]
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 fc51 	bl	8006a1c <UART_Start_Receive_DMA>
 800617a:	4603      	mov	r3, r0
 800617c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006180:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006184:	2b00      	cmp	r3, #0
 8006186:	d12c      	bne.n	80061e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800618c:	2b01      	cmp	r3, #1
 800618e:	d125      	bne.n	80061dc <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006190:	2300      	movs	r3, #0
 8006192:	613b      	str	r3, [r7, #16]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	613b      	str	r3, [r7, #16]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	613b      	str	r3, [r7, #16]
 80061a4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	330c      	adds	r3, #12
 80061ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	617b      	str	r3, [r7, #20]
   return(result);
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f043 0310 	orr.w	r3, r3, #16
 80061bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	330c      	adds	r3, #12
 80061c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80061c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6a39      	ldr	r1, [r7, #32]
 80061cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e5      	bne.n	80061a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80061da:	e002      	b.n	80061e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80061e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80061e6:	e000      	b.n	80061ea <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80061e8:	2302      	movs	r3, #2
  }
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3730      	adds	r7, #48	@ 0x30
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
	...

080061f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b0ba      	sub	sp, #232	@ 0xe8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800621a:	2300      	movs	r3, #0
 800621c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006220:	2300      	movs	r3, #0
 8006222:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800622a:	f003 030f 	and.w	r3, r3, #15
 800622e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10f      	bne.n	800625a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800623a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800623e:	f003 0320 	and.w	r3, r3, #32
 8006242:	2b00      	cmp	r3, #0
 8006244:	d009      	beq.n	800625a <HAL_UART_IRQHandler+0x66>
 8006246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800624a:	f003 0320 	and.w	r3, r3, #32
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fd83 	bl	8006d5e <UART_Receive_IT>
      return;
 8006258:	e25b      	b.n	8006712 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800625a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 80de 	beq.w	8006420 <HAL_UART_IRQHandler+0x22c>
 8006264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b00      	cmp	r3, #0
 800626e:	d106      	bne.n	800627e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006274:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 80d1 	beq.w	8006420 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800627e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00b      	beq.n	80062a2 <HAL_UART_IRQHandler+0xae>
 800628a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800628e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006292:	2b00      	cmp	r3, #0
 8006294:	d005      	beq.n	80062a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800629a:	f043 0201 	orr.w	r2, r3, #1
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062a6:	f003 0304 	and.w	r3, r3, #4
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00b      	beq.n	80062c6 <HAL_UART_IRQHandler+0xd2>
 80062ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d005      	beq.n	80062c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062be:	f043 0202 	orr.w	r2, r3, #2
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00b      	beq.n	80062ea <HAL_UART_IRQHandler+0xf6>
 80062d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d005      	beq.n	80062ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e2:	f043 0204 	orr.w	r2, r3, #4
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80062ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ee:	f003 0308 	and.w	r3, r3, #8
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d011      	beq.n	800631a <HAL_UART_IRQHandler+0x126>
 80062f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062fa:	f003 0320 	and.w	r3, r3, #32
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d105      	bne.n	800630e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	d005      	beq.n	800631a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006312:	f043 0208 	orr.w	r2, r3, #8
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 81f2 	beq.w	8006708 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006328:	f003 0320 	and.w	r3, r3, #32
 800632c:	2b00      	cmp	r3, #0
 800632e:	d008      	beq.n	8006342 <HAL_UART_IRQHandler+0x14e>
 8006330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006334:	f003 0320 	and.w	r3, r3, #32
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fd0e 	bl	8006d5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800634c:	2b40      	cmp	r3, #64	@ 0x40
 800634e:	bf0c      	ite	eq
 8006350:	2301      	moveq	r3, #1
 8006352:	2300      	movne	r3, #0
 8006354:	b2db      	uxtb	r3, r3
 8006356:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b00      	cmp	r3, #0
 8006364:	d103      	bne.n	800636e <HAL_UART_IRQHandler+0x17a>
 8006366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800636a:	2b00      	cmp	r3, #0
 800636c:	d04f      	beq.n	800640e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fc16 	bl	8006ba0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800637e:	2b40      	cmp	r3, #64	@ 0x40
 8006380:	d141      	bne.n	8006406 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3314      	adds	r3, #20
 8006388:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006390:	e853 3f00 	ldrex	r3, [r3]
 8006394:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006398:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800639c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3314      	adds	r3, #20
 80063aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063be:	e841 2300 	strex	r3, r2, [r1]
 80063c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80063c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1d9      	bne.n	8006382 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d013      	beq.n	80063fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063da:	4a7e      	ldr	r2, [pc, #504]	@ (80065d4 <HAL_UART_IRQHandler+0x3e0>)
 80063dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fb fe3a 	bl	800205c <HAL_DMA_Abort_IT>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d016      	beq.n	800641c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80063f8:	4610      	mov	r0, r2
 80063fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063fc:	e00e      	b.n	800641c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f9a8 	bl	8006754 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006404:	e00a      	b.n	800641c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f9a4 	bl	8006754 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800640c:	e006      	b.n	800641c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f9a0 	bl	8006754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800641a:	e175      	b.n	8006708 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800641c:	bf00      	nop
    return;
 800641e:	e173      	b.n	8006708 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006424:	2b01      	cmp	r3, #1
 8006426:	f040 814f 	bne.w	80066c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800642a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800642e:	f003 0310 	and.w	r3, r3, #16
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 8148 	beq.w	80066c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800643c:	f003 0310 	and.w	r3, r3, #16
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 8141 	beq.w	80066c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006446:	2300      	movs	r3, #0
 8006448:	60bb      	str	r3, [r7, #8]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	60bb      	str	r3, [r7, #8]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	60bb      	str	r3, [r7, #8]
 800645a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006466:	2b40      	cmp	r3, #64	@ 0x40
 8006468:	f040 80b6 	bne.w	80065d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006478:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 8145 	beq.w	800670c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006486:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800648a:	429a      	cmp	r2, r3
 800648c:	f080 813e 	bcs.w	800670c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006496:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064a2:	f000 8088 	beq.w	80065b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	330c      	adds	r3, #12
 80064ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80064b4:	e853 3f00 	ldrex	r3, [r3]
 80064b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80064bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	330c      	adds	r3, #12
 80064ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80064d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80064d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80064de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80064ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1d9      	bne.n	80064a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3314      	adds	r3, #20
 80064f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064fc:	e853 3f00 	ldrex	r3, [r3]
 8006500:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006502:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006504:	f023 0301 	bic.w	r3, r3, #1
 8006508:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3314      	adds	r3, #20
 8006512:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006516:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800651a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800651e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006528:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e1      	bne.n	80064f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3314      	adds	r3, #20
 8006534:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006536:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006538:	e853 3f00 	ldrex	r3, [r3]
 800653c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800653e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006544:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3314      	adds	r3, #20
 800654e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006552:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006554:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006558:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800655a:	e841 2300 	strex	r3, r2, [r1]
 800655e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006560:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1e3      	bne.n	800652e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2220      	movs	r2, #32
 800656a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	330c      	adds	r3, #12
 800657a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006584:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006586:	f023 0310 	bic.w	r3, r3, #16
 800658a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	330c      	adds	r3, #12
 8006594:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006598:	65ba      	str	r2, [r7, #88]	@ 0x58
 800659a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800659e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065a0:	e841 2300 	strex	r3, r2, [r1]
 80065a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e3      	bne.n	8006574 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fb fce3 	bl	8001f7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2202      	movs	r2, #2
 80065ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	4619      	mov	r1, r3
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f7fa fabd 	bl	8000b4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065d2:	e09b      	b.n	800670c <HAL_UART_IRQHandler+0x518>
 80065d4:	08006c67 	.word	0x08006c67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 808e 	beq.w	8006710 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80065f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 8089 	beq.w	8006710 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	330c      	adds	r3, #12
 8006604:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006608:	e853 3f00 	ldrex	r3, [r3]
 800660c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800660e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006610:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006614:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	330c      	adds	r3, #12
 800661e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006622:	647a      	str	r2, [r7, #68]	@ 0x44
 8006624:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006628:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e3      	bne.n	80065fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3314      	adds	r3, #20
 800663c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	623b      	str	r3, [r7, #32]
   return(result);
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	f023 0301 	bic.w	r3, r3, #1
 800664c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3314      	adds	r3, #20
 8006656:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800665a:	633a      	str	r2, [r7, #48]	@ 0x30
 800665c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006662:	e841 2300 	strex	r3, r2, [r1]
 8006666:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e3      	bne.n	8006636 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2220      	movs	r2, #32
 8006672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	330c      	adds	r3, #12
 8006682:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	e853 3f00 	ldrex	r3, [r3]
 800668a:	60fb      	str	r3, [r7, #12]
   return(result);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f023 0310 	bic.w	r3, r3, #16
 8006692:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	330c      	adds	r3, #12
 800669c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80066a0:	61fa      	str	r2, [r7, #28]
 80066a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a4:	69b9      	ldr	r1, [r7, #24]
 80066a6:	69fa      	ldr	r2, [r7, #28]
 80066a8:	e841 2300 	strex	r3, r2, [r1]
 80066ac:	617b      	str	r3, [r7, #20]
   return(result);
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e3      	bne.n	800667c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7fa fa43 	bl	8000b4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066c6:	e023      	b.n	8006710 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d009      	beq.n	80066e8 <HAL_UART_IRQHandler+0x4f4>
 80066d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fad4 	bl	8006c8e <UART_Transmit_IT>
    return;
 80066e6:	e014      	b.n	8006712 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00e      	beq.n	8006712 <HAL_UART_IRQHandler+0x51e>
 80066f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d008      	beq.n	8006712 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fb14 	bl	8006d2e <UART_EndTransmit_IT>
    return;
 8006706:	e004      	b.n	8006712 <HAL_UART_IRQHandler+0x51e>
    return;
 8006708:	bf00      	nop
 800670a:	e002      	b.n	8006712 <HAL_UART_IRQHandler+0x51e>
      return;
 800670c:	bf00      	nop
 800670e:	e000      	b.n	8006712 <HAL_UART_IRQHandler+0x51e>
      return;
 8006710:	bf00      	nop
  }
}
 8006712:	37e8      	adds	r7, #232	@ 0xe8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b090      	sub	sp, #64	@ 0x40
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006774:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006780:	2b00      	cmp	r3, #0
 8006782:	d137      	bne.n	80067f4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006786:	2200      	movs	r2, #0
 8006788:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800678a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3314      	adds	r3, #20
 8006790:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	623b      	str	r3, [r7, #32]
   return(result);
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3314      	adds	r3, #20
 80067a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80067ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067b2:	e841 2300 	strex	r3, r2, [r1]
 80067b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1e5      	bne.n	800678a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	330c      	adds	r3, #12
 80067c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	e853 3f00 	ldrex	r3, [r3]
 80067cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	330c      	adds	r3, #12
 80067dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067de:	61fa      	str	r2, [r7, #28]
 80067e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e2:	69b9      	ldr	r1, [r7, #24]
 80067e4:	69fa      	ldr	r2, [r7, #28]
 80067e6:	e841 2300 	strex	r3, r2, [r1]
 80067ea:	617b      	str	r3, [r7, #20]
   return(result);
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1e5      	bne.n	80067be <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067f2:	e002      	b.n	80067fa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80067f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80067f6:	f7fa f9d1 	bl	8000b9c <HAL_UART_TxCpltCallback>
}
 80067fa:	bf00      	nop
 80067fc:	3740      	adds	r7, #64	@ 0x40
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800680e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f7ff ff81 	bl	8006718 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006816:	bf00      	nop
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b09c      	sub	sp, #112	@ 0x70
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006836:	2b00      	cmp	r3, #0
 8006838:	d172      	bne.n	8006920 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800683a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800683c:	2200      	movs	r2, #0
 800683e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006840:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	330c      	adds	r3, #12
 8006846:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800684a:	e853 3f00 	ldrex	r3, [r3]
 800684e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006850:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006852:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006856:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006858:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	330c      	adds	r3, #12
 800685e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006860:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006862:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006864:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006866:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006868:	e841 2300 	strex	r3, r2, [r1]
 800686c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800686e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1e5      	bne.n	8006840 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006874:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3314      	adds	r3, #20
 800687a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687e:	e853 3f00 	ldrex	r3, [r3]
 8006882:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006886:	f023 0301 	bic.w	r3, r3, #1
 800688a:	667b      	str	r3, [r7, #100]	@ 0x64
 800688c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3314      	adds	r3, #20
 8006892:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006894:	647a      	str	r2, [r7, #68]	@ 0x44
 8006896:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006898:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800689a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800689c:	e841 2300 	strex	r3, r2, [r1]
 80068a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e5      	bne.n	8006874 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3314      	adds	r3, #20
 80068ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b2:	e853 3f00 	ldrex	r3, [r3]
 80068b6:	623b      	str	r3, [r7, #32]
   return(result);
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068be:	663b      	str	r3, [r7, #96]	@ 0x60
 80068c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3314      	adds	r3, #20
 80068c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80068c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80068ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068d0:	e841 2300 	strex	r3, r2, [r1]
 80068d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1e5      	bne.n	80068a8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068de:	2220      	movs	r2, #32
 80068e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d119      	bne.n	8006920 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	330c      	adds	r3, #12
 80068f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	e853 3f00 	ldrex	r3, [r3]
 80068fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0310 	bic.w	r3, r3, #16
 8006902:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006904:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	330c      	adds	r3, #12
 800690a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800690c:	61fa      	str	r2, [r7, #28]
 800690e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	69b9      	ldr	r1, [r7, #24]
 8006912:	69fa      	ldr	r2, [r7, #28]
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	617b      	str	r3, [r7, #20]
   return(result);
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e5      	bne.n	80068ec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006920:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006922:	2200      	movs	r2, #0
 8006924:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006926:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800692a:	2b01      	cmp	r3, #1
 800692c:	d106      	bne.n	800693c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800692e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006930:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006932:	4619      	mov	r1, r3
 8006934:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006936:	f7fa f909 	bl	8000b4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800693a:	e002      	b.n	8006942 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800693c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800693e:	f7ff fef5 	bl	800672c <HAL_UART_RxCpltCallback>
}
 8006942:	bf00      	nop
 8006944:	3770      	adds	r7, #112	@ 0x70
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b084      	sub	sp, #16
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006956:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2201      	movs	r2, #1
 800695c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006962:	2b01      	cmp	r3, #1
 8006964:	d108      	bne.n	8006978 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800696a:	085b      	lsrs	r3, r3, #1
 800696c:	b29b      	uxth	r3, r3
 800696e:	4619      	mov	r1, r3
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f7fa f8eb 	bl	8000b4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006976:	e002      	b.n	800697e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f7ff fee1 	bl	8006740 <HAL_UART_RxHalfCpltCallback>
}
 800697e:	bf00      	nop
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800698e:	2300      	movs	r3, #0
 8006990:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006996:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069a2:	2b80      	cmp	r3, #128	@ 0x80
 80069a4:	bf0c      	ite	eq
 80069a6:	2301      	moveq	r3, #1
 80069a8:	2300      	movne	r3, #0
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b21      	cmp	r3, #33	@ 0x21
 80069b8:	d108      	bne.n	80069cc <UART_DMAError+0x46>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d005      	beq.n	80069cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2200      	movs	r2, #0
 80069c4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80069c6:	68b8      	ldr	r0, [r7, #8]
 80069c8:	f000 f8c2 	bl	8006b50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d6:	2b40      	cmp	r3, #64	@ 0x40
 80069d8:	bf0c      	ite	eq
 80069da:	2301      	moveq	r3, #1
 80069dc:	2300      	movne	r3, #0
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b22      	cmp	r3, #34	@ 0x22
 80069ec:	d108      	bne.n	8006a00 <UART_DMAError+0x7a>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d005      	beq.n	8006a00 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2200      	movs	r2, #0
 80069f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80069fa:	68b8      	ldr	r0, [r7, #8]
 80069fc:	f000 f8d0 	bl	8006ba0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a04:	f043 0210 	orr.w	r2, r3, #16
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a0c:	68b8      	ldr	r0, [r7, #8]
 8006a0e:	f7ff fea1 	bl	8006754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a12:	bf00      	nop
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b098      	sub	sp, #96	@ 0x60
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	4613      	mov	r3, r2
 8006a28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	88fa      	ldrh	r2, [r7, #6]
 8006a34:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2222      	movs	r2, #34	@ 0x22
 8006a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a48:	4a3e      	ldr	r2, [pc, #248]	@ (8006b44 <UART_Start_Receive_DMA+0x128>)
 8006a4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a50:	4a3d      	ldr	r2, [pc, #244]	@ (8006b48 <UART_Start_Receive_DMA+0x12c>)
 8006a52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a58:	4a3c      	ldr	r2, [pc, #240]	@ (8006b4c <UART_Start_Receive_DMA+0x130>)
 8006a5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a60:	2200      	movs	r2, #0
 8006a62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006a64:	f107 0308 	add.w	r3, r7, #8
 8006a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3304      	adds	r3, #4
 8006a74:	4619      	mov	r1, r3
 8006a76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	f7fb fa26 	bl	8001ecc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006a80:	2300      	movs	r3, #0
 8006a82:	613b      	str	r3, [r7, #16]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	613b      	str	r3, [r7, #16]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	613b      	str	r3, [r7, #16]
 8006a94:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d019      	beq.n	8006ad2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	330c      	adds	r3, #12
 8006aa4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aa8:	e853 3f00 	ldrex	r3, [r3]
 8006aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ab4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	330c      	adds	r3, #12
 8006abc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006abe:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006ac4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1e5      	bne.n	8006a9e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3314      	adds	r3, #20
 8006ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006adc:	e853 3f00 	ldrex	r3, [r3]
 8006ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae4:	f043 0301 	orr.w	r3, r3, #1
 8006ae8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3314      	adds	r3, #20
 8006af0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006af2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006af4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006af8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006afa:	e841 2300 	strex	r3, r2, [r1]
 8006afe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1e5      	bne.n	8006ad2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3314      	adds	r3, #20
 8006b0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	617b      	str	r3, [r7, #20]
   return(result);
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3314      	adds	r3, #20
 8006b24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b26:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	6a39      	ldr	r1, [r7, #32]
 8006b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e5      	bne.n	8006b06 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3760      	adds	r7, #96	@ 0x60
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	0800681f 	.word	0x0800681f
 8006b48:	0800694b 	.word	0x0800694b
 8006b4c:	08006987 	.word	0x08006987

08006b50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b089      	sub	sp, #36	@ 0x24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	330c      	adds	r3, #12
 8006b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006b6e:	61fb      	str	r3, [r7, #28]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	330c      	adds	r3, #12
 8006b76:	69fa      	ldr	r2, [r7, #28]
 8006b78:	61ba      	str	r2, [r7, #24]
 8006b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	6979      	ldr	r1, [r7, #20]
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	613b      	str	r3, [r7, #16]
   return(result);
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e5      	bne.n	8006b58 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006b94:	bf00      	nop
 8006b96:	3724      	adds	r7, #36	@ 0x24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b095      	sub	sp, #84	@ 0x54
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	330c      	adds	r3, #12
 8006bae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	330c      	adds	r3, #12
 8006bc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006bc8:	643a      	str	r2, [r7, #64]	@ 0x40
 8006bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e5      	bne.n	8006ba8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3314      	adds	r3, #20
 8006be2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f023 0301 	bic.w	r3, r3, #1
 8006bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3314      	adds	r3, #20
 8006bfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c04:	e841 2300 	strex	r3, r2, [r1]
 8006c08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e5      	bne.n	8006bdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d119      	bne.n	8006c4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	330c      	adds	r3, #12
 8006c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f023 0310 	bic.w	r3, r3, #16
 8006c2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	330c      	adds	r3, #12
 8006c36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c38:	61ba      	str	r2, [r7, #24]
 8006c3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	6979      	ldr	r1, [r7, #20]
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	613b      	str	r3, [r7, #16]
   return(result);
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e5      	bne.n	8006c18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006c5a:	bf00      	nop
 8006c5c:	3754      	adds	r7, #84	@ 0x54
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b084      	sub	sp, #16
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f7ff fd67 	bl	8006754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c86:	bf00      	nop
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b085      	sub	sp, #20
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b21      	cmp	r3, #33	@ 0x21
 8006ca0:	d13e      	bne.n	8006d20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006caa:	d114      	bne.n	8006cd6 <UART_Transmit_IT+0x48>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d110      	bne.n	8006cd6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	1c9a      	adds	r2, r3, #2
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	621a      	str	r2, [r3, #32]
 8006cd4:	e008      	b.n	8006ce8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	1c59      	adds	r1, r3, #1
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	6211      	str	r1, [r2, #32]
 8006ce0:	781a      	ldrb	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10f      	bne.n	8006d1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	e000      	b.n	8006d22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d20:	2302      	movs	r3, #2
  }
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b082      	sub	sp, #8
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68da      	ldr	r2, [r3, #12]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7f9 ff24 	bl	8000b9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b08c      	sub	sp, #48	@ 0x30
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b22      	cmp	r3, #34	@ 0x22
 8006d70:	f040 80ae 	bne.w	8006ed0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d7c:	d117      	bne.n	8006dae <UART_Receive_IT+0x50>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d113      	bne.n	8006dae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da6:	1c9a      	adds	r2, r3, #2
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	629a      	str	r2, [r3, #40]	@ 0x28
 8006dac:	e026      	b.n	8006dfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dc0:	d007      	beq.n	8006dd2 <UART_Receive_IT+0x74>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10a      	bne.n	8006de0 <UART_Receive_IT+0x82>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d106      	bne.n	8006de0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ddc:	701a      	strb	r2, [r3, #0]
 8006dde:	e008      	b.n	8006df2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d15d      	bne.n	8006ecc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0220 	bic.w	r2, r2, #32
 8006e1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695a      	ldr	r2, [r3, #20]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0201 	bic.w	r2, r2, #1
 8006e3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d135      	bne.n	8006ec2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	330c      	adds	r3, #12
 8006e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	e853 3f00 	ldrex	r3, [r3]
 8006e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f023 0310 	bic.w	r3, r3, #16
 8006e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	330c      	adds	r3, #12
 8006e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e7c:	623a      	str	r2, [r7, #32]
 8006e7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	69f9      	ldr	r1, [r7, #28]
 8006e82:	6a3a      	ldr	r2, [r7, #32]
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e5      	bne.n	8006e5c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0310 	and.w	r3, r3, #16
 8006e9a:	2b10      	cmp	r3, #16
 8006e9c:	d10a      	bne.n	8006eb4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60fb      	str	r3, [r7, #12]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	60fb      	str	r3, [r7, #12]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7f9 fe46 	bl	8000b4c <HAL_UARTEx_RxEventCallback>
 8006ec0:	e002      	b.n	8006ec8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7ff fc32 	bl	800672c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	e002      	b.n	8006ed2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	e000      	b.n	8006ed2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006ed0:	2302      	movs	r3, #2
  }
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3730      	adds	r7, #48	@ 0x30
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ee0:	b0c0      	sub	sp, #256	@ 0x100
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef8:	68d9      	ldr	r1, [r3, #12]
 8006efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	ea40 0301 	orr.w	r3, r0, r1
 8006f04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0a:	689a      	ldr	r2, [r3, #8]
 8006f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	431a      	orrs	r2, r3
 8006f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006f34:	f021 010c 	bic.w	r1, r1, #12
 8006f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f42:	430b      	orrs	r3, r1
 8006f44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f56:	6999      	ldr	r1, [r3, #24]
 8006f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	ea40 0301 	orr.w	r3, r0, r1
 8006f62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	4b8f      	ldr	r3, [pc, #572]	@ (80071a8 <UART_SetConfig+0x2cc>)
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d005      	beq.n	8006f7c <UART_SetConfig+0xa0>
 8006f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	4b8d      	ldr	r3, [pc, #564]	@ (80071ac <UART_SetConfig+0x2d0>)
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d104      	bne.n	8006f86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f7c:	f7fd ffe2 	bl	8004f44 <HAL_RCC_GetPCLK2Freq>
 8006f80:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f84:	e003      	b.n	8006f8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f86:	f7fd ffc9 	bl	8004f1c <HAL_RCC_GetPCLK1Freq>
 8006f8a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f98:	f040 810c 	bne.w	80071b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006fa6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006faa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006fae:	4622      	mov	r2, r4
 8006fb0:	462b      	mov	r3, r5
 8006fb2:	1891      	adds	r1, r2, r2
 8006fb4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006fb6:	415b      	adcs	r3, r3
 8006fb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	eb12 0801 	adds.w	r8, r2, r1
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	eb43 0901 	adc.w	r9, r3, r1
 8006fca:	f04f 0200 	mov.w	r2, #0
 8006fce:	f04f 0300 	mov.w	r3, #0
 8006fd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fde:	4690      	mov	r8, r2
 8006fe0:	4699      	mov	r9, r3
 8006fe2:	4623      	mov	r3, r4
 8006fe4:	eb18 0303 	adds.w	r3, r8, r3
 8006fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fec:	462b      	mov	r3, r5
 8006fee:	eb49 0303 	adc.w	r3, r9, r3
 8006ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007002:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007006:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800700a:	460b      	mov	r3, r1
 800700c:	18db      	adds	r3, r3, r3
 800700e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007010:	4613      	mov	r3, r2
 8007012:	eb42 0303 	adc.w	r3, r2, r3
 8007016:	657b      	str	r3, [r7, #84]	@ 0x54
 8007018:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800701c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007020:	f7f9 f936 	bl	8000290 <__aeabi_uldivmod>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	4b61      	ldr	r3, [pc, #388]	@ (80071b0 <UART_SetConfig+0x2d4>)
 800702a:	fba3 2302 	umull	r2, r3, r3, r2
 800702e:	095b      	lsrs	r3, r3, #5
 8007030:	011c      	lsls	r4, r3, #4
 8007032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007036:	2200      	movs	r2, #0
 8007038:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800703c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007040:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007044:	4642      	mov	r2, r8
 8007046:	464b      	mov	r3, r9
 8007048:	1891      	adds	r1, r2, r2
 800704a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800704c:	415b      	adcs	r3, r3
 800704e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007050:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007054:	4641      	mov	r1, r8
 8007056:	eb12 0a01 	adds.w	sl, r2, r1
 800705a:	4649      	mov	r1, r9
 800705c:	eb43 0b01 	adc.w	fp, r3, r1
 8007060:	f04f 0200 	mov.w	r2, #0
 8007064:	f04f 0300 	mov.w	r3, #0
 8007068:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800706c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007070:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007074:	4692      	mov	sl, r2
 8007076:	469b      	mov	fp, r3
 8007078:	4643      	mov	r3, r8
 800707a:	eb1a 0303 	adds.w	r3, sl, r3
 800707e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007082:	464b      	mov	r3, r9
 8007084:	eb4b 0303 	adc.w	r3, fp, r3
 8007088:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800708c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007098:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800709c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80070a0:	460b      	mov	r3, r1
 80070a2:	18db      	adds	r3, r3, r3
 80070a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80070a6:	4613      	mov	r3, r2
 80070a8:	eb42 0303 	adc.w	r3, r2, r3
 80070ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80070ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80070b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80070b6:	f7f9 f8eb 	bl	8000290 <__aeabi_uldivmod>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	4611      	mov	r1, r2
 80070c0:	4b3b      	ldr	r3, [pc, #236]	@ (80071b0 <UART_SetConfig+0x2d4>)
 80070c2:	fba3 2301 	umull	r2, r3, r3, r1
 80070c6:	095b      	lsrs	r3, r3, #5
 80070c8:	2264      	movs	r2, #100	@ 0x64
 80070ca:	fb02 f303 	mul.w	r3, r2, r3
 80070ce:	1acb      	subs	r3, r1, r3
 80070d0:	00db      	lsls	r3, r3, #3
 80070d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80070d6:	4b36      	ldr	r3, [pc, #216]	@ (80071b0 <UART_SetConfig+0x2d4>)
 80070d8:	fba3 2302 	umull	r2, r3, r3, r2
 80070dc:	095b      	lsrs	r3, r3, #5
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80070e4:	441c      	add	r4, r3
 80070e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80070f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80070f8:	4642      	mov	r2, r8
 80070fa:	464b      	mov	r3, r9
 80070fc:	1891      	adds	r1, r2, r2
 80070fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007100:	415b      	adcs	r3, r3
 8007102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007104:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007108:	4641      	mov	r1, r8
 800710a:	1851      	adds	r1, r2, r1
 800710c:	6339      	str	r1, [r7, #48]	@ 0x30
 800710e:	4649      	mov	r1, r9
 8007110:	414b      	adcs	r3, r1
 8007112:	637b      	str	r3, [r7, #52]	@ 0x34
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007120:	4659      	mov	r1, fp
 8007122:	00cb      	lsls	r3, r1, #3
 8007124:	4651      	mov	r1, sl
 8007126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800712a:	4651      	mov	r1, sl
 800712c:	00ca      	lsls	r2, r1, #3
 800712e:	4610      	mov	r0, r2
 8007130:	4619      	mov	r1, r3
 8007132:	4603      	mov	r3, r0
 8007134:	4642      	mov	r2, r8
 8007136:	189b      	adds	r3, r3, r2
 8007138:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800713c:	464b      	mov	r3, r9
 800713e:	460a      	mov	r2, r1
 8007140:	eb42 0303 	adc.w	r3, r2, r3
 8007144:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007154:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007158:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800715c:	460b      	mov	r3, r1
 800715e:	18db      	adds	r3, r3, r3
 8007160:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007162:	4613      	mov	r3, r2
 8007164:	eb42 0303 	adc.w	r3, r2, r3
 8007168:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800716a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800716e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007172:	f7f9 f88d 	bl	8000290 <__aeabi_uldivmod>
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	4b0d      	ldr	r3, [pc, #52]	@ (80071b0 <UART_SetConfig+0x2d4>)
 800717c:	fba3 1302 	umull	r1, r3, r3, r2
 8007180:	095b      	lsrs	r3, r3, #5
 8007182:	2164      	movs	r1, #100	@ 0x64
 8007184:	fb01 f303 	mul.w	r3, r1, r3
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	00db      	lsls	r3, r3, #3
 800718c:	3332      	adds	r3, #50	@ 0x32
 800718e:	4a08      	ldr	r2, [pc, #32]	@ (80071b0 <UART_SetConfig+0x2d4>)
 8007190:	fba2 2303 	umull	r2, r3, r2, r3
 8007194:	095b      	lsrs	r3, r3, #5
 8007196:	f003 0207 	and.w	r2, r3, #7
 800719a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4422      	add	r2, r4
 80071a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80071a4:	e106      	b.n	80073b4 <UART_SetConfig+0x4d8>
 80071a6:	bf00      	nop
 80071a8:	40011000 	.word	0x40011000
 80071ac:	40011400 	.word	0x40011400
 80071b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071b8:	2200      	movs	r2, #0
 80071ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80071c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80071c6:	4642      	mov	r2, r8
 80071c8:	464b      	mov	r3, r9
 80071ca:	1891      	adds	r1, r2, r2
 80071cc:	6239      	str	r1, [r7, #32]
 80071ce:	415b      	adcs	r3, r3
 80071d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80071d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071d6:	4641      	mov	r1, r8
 80071d8:	1854      	adds	r4, r2, r1
 80071da:	4649      	mov	r1, r9
 80071dc:	eb43 0501 	adc.w	r5, r3, r1
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	f04f 0300 	mov.w	r3, #0
 80071e8:	00eb      	lsls	r3, r5, #3
 80071ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071ee:	00e2      	lsls	r2, r4, #3
 80071f0:	4614      	mov	r4, r2
 80071f2:	461d      	mov	r5, r3
 80071f4:	4643      	mov	r3, r8
 80071f6:	18e3      	adds	r3, r4, r3
 80071f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071fc:	464b      	mov	r3, r9
 80071fe:	eb45 0303 	adc.w	r3, r5, r3
 8007202:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007212:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007216:	f04f 0200 	mov.w	r2, #0
 800721a:	f04f 0300 	mov.w	r3, #0
 800721e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007222:	4629      	mov	r1, r5
 8007224:	008b      	lsls	r3, r1, #2
 8007226:	4621      	mov	r1, r4
 8007228:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800722c:	4621      	mov	r1, r4
 800722e:	008a      	lsls	r2, r1, #2
 8007230:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007234:	f7f9 f82c 	bl	8000290 <__aeabi_uldivmod>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4b60      	ldr	r3, [pc, #384]	@ (80073c0 <UART_SetConfig+0x4e4>)
 800723e:	fba3 2302 	umull	r2, r3, r3, r2
 8007242:	095b      	lsrs	r3, r3, #5
 8007244:	011c      	lsls	r4, r3, #4
 8007246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800724a:	2200      	movs	r2, #0
 800724c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007250:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007254:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007258:	4642      	mov	r2, r8
 800725a:	464b      	mov	r3, r9
 800725c:	1891      	adds	r1, r2, r2
 800725e:	61b9      	str	r1, [r7, #24]
 8007260:	415b      	adcs	r3, r3
 8007262:	61fb      	str	r3, [r7, #28]
 8007264:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007268:	4641      	mov	r1, r8
 800726a:	1851      	adds	r1, r2, r1
 800726c:	6139      	str	r1, [r7, #16]
 800726e:	4649      	mov	r1, r9
 8007270:	414b      	adcs	r3, r1
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	f04f 0200 	mov.w	r2, #0
 8007278:	f04f 0300 	mov.w	r3, #0
 800727c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007280:	4659      	mov	r1, fp
 8007282:	00cb      	lsls	r3, r1, #3
 8007284:	4651      	mov	r1, sl
 8007286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800728a:	4651      	mov	r1, sl
 800728c:	00ca      	lsls	r2, r1, #3
 800728e:	4610      	mov	r0, r2
 8007290:	4619      	mov	r1, r3
 8007292:	4603      	mov	r3, r0
 8007294:	4642      	mov	r2, r8
 8007296:	189b      	adds	r3, r3, r2
 8007298:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800729c:	464b      	mov	r3, r9
 800729e:	460a      	mov	r2, r1
 80072a0:	eb42 0303 	adc.w	r3, r2, r3
 80072a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80072b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80072b4:	f04f 0200 	mov.w	r2, #0
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80072c0:	4649      	mov	r1, r9
 80072c2:	008b      	lsls	r3, r1, #2
 80072c4:	4641      	mov	r1, r8
 80072c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072ca:	4641      	mov	r1, r8
 80072cc:	008a      	lsls	r2, r1, #2
 80072ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80072d2:	f7f8 ffdd 	bl	8000290 <__aeabi_uldivmod>
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	4611      	mov	r1, r2
 80072dc:	4b38      	ldr	r3, [pc, #224]	@ (80073c0 <UART_SetConfig+0x4e4>)
 80072de:	fba3 2301 	umull	r2, r3, r3, r1
 80072e2:	095b      	lsrs	r3, r3, #5
 80072e4:	2264      	movs	r2, #100	@ 0x64
 80072e6:	fb02 f303 	mul.w	r3, r2, r3
 80072ea:	1acb      	subs	r3, r1, r3
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	3332      	adds	r3, #50	@ 0x32
 80072f0:	4a33      	ldr	r2, [pc, #204]	@ (80073c0 <UART_SetConfig+0x4e4>)
 80072f2:	fba2 2303 	umull	r2, r3, r2, r3
 80072f6:	095b      	lsrs	r3, r3, #5
 80072f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072fc:	441c      	add	r4, r3
 80072fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007302:	2200      	movs	r2, #0
 8007304:	673b      	str	r3, [r7, #112]	@ 0x70
 8007306:	677a      	str	r2, [r7, #116]	@ 0x74
 8007308:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800730c:	4642      	mov	r2, r8
 800730e:	464b      	mov	r3, r9
 8007310:	1891      	adds	r1, r2, r2
 8007312:	60b9      	str	r1, [r7, #8]
 8007314:	415b      	adcs	r3, r3
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800731c:	4641      	mov	r1, r8
 800731e:	1851      	adds	r1, r2, r1
 8007320:	6039      	str	r1, [r7, #0]
 8007322:	4649      	mov	r1, r9
 8007324:	414b      	adcs	r3, r1
 8007326:	607b      	str	r3, [r7, #4]
 8007328:	f04f 0200 	mov.w	r2, #0
 800732c:	f04f 0300 	mov.w	r3, #0
 8007330:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007334:	4659      	mov	r1, fp
 8007336:	00cb      	lsls	r3, r1, #3
 8007338:	4651      	mov	r1, sl
 800733a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800733e:	4651      	mov	r1, sl
 8007340:	00ca      	lsls	r2, r1, #3
 8007342:	4610      	mov	r0, r2
 8007344:	4619      	mov	r1, r3
 8007346:	4603      	mov	r3, r0
 8007348:	4642      	mov	r2, r8
 800734a:	189b      	adds	r3, r3, r2
 800734c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800734e:	464b      	mov	r3, r9
 8007350:	460a      	mov	r2, r1
 8007352:	eb42 0303 	adc.w	r3, r2, r3
 8007356:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	663b      	str	r3, [r7, #96]	@ 0x60
 8007362:	667a      	str	r2, [r7, #100]	@ 0x64
 8007364:	f04f 0200 	mov.w	r2, #0
 8007368:	f04f 0300 	mov.w	r3, #0
 800736c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007370:	4649      	mov	r1, r9
 8007372:	008b      	lsls	r3, r1, #2
 8007374:	4641      	mov	r1, r8
 8007376:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800737a:	4641      	mov	r1, r8
 800737c:	008a      	lsls	r2, r1, #2
 800737e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007382:	f7f8 ff85 	bl	8000290 <__aeabi_uldivmod>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4b0d      	ldr	r3, [pc, #52]	@ (80073c0 <UART_SetConfig+0x4e4>)
 800738c:	fba3 1302 	umull	r1, r3, r3, r2
 8007390:	095b      	lsrs	r3, r3, #5
 8007392:	2164      	movs	r1, #100	@ 0x64
 8007394:	fb01 f303 	mul.w	r3, r1, r3
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	011b      	lsls	r3, r3, #4
 800739c:	3332      	adds	r3, #50	@ 0x32
 800739e:	4a08      	ldr	r2, [pc, #32]	@ (80073c0 <UART_SetConfig+0x4e4>)
 80073a0:	fba2 2303 	umull	r2, r3, r2, r3
 80073a4:	095b      	lsrs	r3, r3, #5
 80073a6:	f003 020f 	and.w	r2, r3, #15
 80073aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4422      	add	r2, r4
 80073b2:	609a      	str	r2, [r3, #8]
}
 80073b4:	bf00      	nop
 80073b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80073ba:	46bd      	mov	sp, r7
 80073bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073c0:	51eb851f 	.word	0x51eb851f

080073c4 <sniprintf>:
 80073c4:	b40c      	push	{r2, r3}
 80073c6:	b530      	push	{r4, r5, lr}
 80073c8:	4b17      	ldr	r3, [pc, #92]	@ (8007428 <sniprintf+0x64>)
 80073ca:	1e0c      	subs	r4, r1, #0
 80073cc:	681d      	ldr	r5, [r3, #0]
 80073ce:	b09d      	sub	sp, #116	@ 0x74
 80073d0:	da08      	bge.n	80073e4 <sniprintf+0x20>
 80073d2:	238b      	movs	r3, #139	@ 0x8b
 80073d4:	602b      	str	r3, [r5, #0]
 80073d6:	f04f 30ff 	mov.w	r0, #4294967295
 80073da:	b01d      	add	sp, #116	@ 0x74
 80073dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073e0:	b002      	add	sp, #8
 80073e2:	4770      	bx	lr
 80073e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80073e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80073ec:	bf14      	ite	ne
 80073ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 80073f2:	4623      	moveq	r3, r4
 80073f4:	9304      	str	r3, [sp, #16]
 80073f6:	9307      	str	r3, [sp, #28]
 80073f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80073fc:	9002      	str	r0, [sp, #8]
 80073fe:	9006      	str	r0, [sp, #24]
 8007400:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007404:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007406:	ab21      	add	r3, sp, #132	@ 0x84
 8007408:	a902      	add	r1, sp, #8
 800740a:	4628      	mov	r0, r5
 800740c:	9301      	str	r3, [sp, #4]
 800740e:	f000 f9cf 	bl	80077b0 <_svfiprintf_r>
 8007412:	1c43      	adds	r3, r0, #1
 8007414:	bfbc      	itt	lt
 8007416:	238b      	movlt	r3, #139	@ 0x8b
 8007418:	602b      	strlt	r3, [r5, #0]
 800741a:	2c00      	cmp	r4, #0
 800741c:	d0dd      	beq.n	80073da <sniprintf+0x16>
 800741e:	9b02      	ldr	r3, [sp, #8]
 8007420:	2200      	movs	r2, #0
 8007422:	701a      	strb	r2, [r3, #0]
 8007424:	e7d9      	b.n	80073da <sniprintf+0x16>
 8007426:	bf00      	nop
 8007428:	20000010 	.word	0x20000010

0800742c <_vsniprintf_r>:
 800742c:	b530      	push	{r4, r5, lr}
 800742e:	4614      	mov	r4, r2
 8007430:	2c00      	cmp	r4, #0
 8007432:	b09b      	sub	sp, #108	@ 0x6c
 8007434:	4605      	mov	r5, r0
 8007436:	461a      	mov	r2, r3
 8007438:	da05      	bge.n	8007446 <_vsniprintf_r+0x1a>
 800743a:	238b      	movs	r3, #139	@ 0x8b
 800743c:	6003      	str	r3, [r0, #0]
 800743e:	f04f 30ff 	mov.w	r0, #4294967295
 8007442:	b01b      	add	sp, #108	@ 0x6c
 8007444:	bd30      	pop	{r4, r5, pc}
 8007446:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800744a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800744e:	bf14      	ite	ne
 8007450:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007454:	4623      	moveq	r3, r4
 8007456:	9302      	str	r3, [sp, #8]
 8007458:	9305      	str	r3, [sp, #20]
 800745a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800745e:	9100      	str	r1, [sp, #0]
 8007460:	9104      	str	r1, [sp, #16]
 8007462:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007466:	4669      	mov	r1, sp
 8007468:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800746a:	f000 f9a1 	bl	80077b0 <_svfiprintf_r>
 800746e:	1c43      	adds	r3, r0, #1
 8007470:	bfbc      	itt	lt
 8007472:	238b      	movlt	r3, #139	@ 0x8b
 8007474:	602b      	strlt	r3, [r5, #0]
 8007476:	2c00      	cmp	r4, #0
 8007478:	d0e3      	beq.n	8007442 <_vsniprintf_r+0x16>
 800747a:	9b00      	ldr	r3, [sp, #0]
 800747c:	2200      	movs	r2, #0
 800747e:	701a      	strb	r2, [r3, #0]
 8007480:	e7df      	b.n	8007442 <_vsniprintf_r+0x16>
	...

08007484 <vsniprintf>:
 8007484:	b507      	push	{r0, r1, r2, lr}
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	4613      	mov	r3, r2
 800748a:	460a      	mov	r2, r1
 800748c:	4601      	mov	r1, r0
 800748e:	4803      	ldr	r0, [pc, #12]	@ (800749c <vsniprintf+0x18>)
 8007490:	6800      	ldr	r0, [r0, #0]
 8007492:	f7ff ffcb 	bl	800742c <_vsniprintf_r>
 8007496:	b003      	add	sp, #12
 8007498:	f85d fb04 	ldr.w	pc, [sp], #4
 800749c:	20000010 	.word	0x20000010

080074a0 <memset>:
 80074a0:	4402      	add	r2, r0
 80074a2:	4603      	mov	r3, r0
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d100      	bne.n	80074aa <memset+0xa>
 80074a8:	4770      	bx	lr
 80074aa:	f803 1b01 	strb.w	r1, [r3], #1
 80074ae:	e7f9      	b.n	80074a4 <memset+0x4>

080074b0 <__errno>:
 80074b0:	4b01      	ldr	r3, [pc, #4]	@ (80074b8 <__errno+0x8>)
 80074b2:	6818      	ldr	r0, [r3, #0]
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	20000010 	.word	0x20000010

080074bc <__libc_init_array>:
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	4d0d      	ldr	r5, [pc, #52]	@ (80074f4 <__libc_init_array+0x38>)
 80074c0:	4c0d      	ldr	r4, [pc, #52]	@ (80074f8 <__libc_init_array+0x3c>)
 80074c2:	1b64      	subs	r4, r4, r5
 80074c4:	10a4      	asrs	r4, r4, #2
 80074c6:	2600      	movs	r6, #0
 80074c8:	42a6      	cmp	r6, r4
 80074ca:	d109      	bne.n	80074e0 <__libc_init_array+0x24>
 80074cc:	4d0b      	ldr	r5, [pc, #44]	@ (80074fc <__libc_init_array+0x40>)
 80074ce:	4c0c      	ldr	r4, [pc, #48]	@ (8007500 <__libc_init_array+0x44>)
 80074d0:	f000 fc66 	bl	8007da0 <_init>
 80074d4:	1b64      	subs	r4, r4, r5
 80074d6:	10a4      	asrs	r4, r4, #2
 80074d8:	2600      	movs	r6, #0
 80074da:	42a6      	cmp	r6, r4
 80074dc:	d105      	bne.n	80074ea <__libc_init_array+0x2e>
 80074de:	bd70      	pop	{r4, r5, r6, pc}
 80074e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074e4:	4798      	blx	r3
 80074e6:	3601      	adds	r6, #1
 80074e8:	e7ee      	b.n	80074c8 <__libc_init_array+0xc>
 80074ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ee:	4798      	blx	r3
 80074f0:	3601      	adds	r6, #1
 80074f2:	e7f2      	b.n	80074da <__libc_init_array+0x1e>
 80074f4:	08008054 	.word	0x08008054
 80074f8:	08008054 	.word	0x08008054
 80074fc:	08008054 	.word	0x08008054
 8007500:	08008058 	.word	0x08008058

08007504 <__retarget_lock_acquire_recursive>:
 8007504:	4770      	bx	lr

08007506 <__retarget_lock_release_recursive>:
 8007506:	4770      	bx	lr

08007508 <_free_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	4605      	mov	r5, r0
 800750c:	2900      	cmp	r1, #0
 800750e:	d041      	beq.n	8007594 <_free_r+0x8c>
 8007510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007514:	1f0c      	subs	r4, r1, #4
 8007516:	2b00      	cmp	r3, #0
 8007518:	bfb8      	it	lt
 800751a:	18e4      	addlt	r4, r4, r3
 800751c:	f000 f8e0 	bl	80076e0 <__malloc_lock>
 8007520:	4a1d      	ldr	r2, [pc, #116]	@ (8007598 <_free_r+0x90>)
 8007522:	6813      	ldr	r3, [r2, #0]
 8007524:	b933      	cbnz	r3, 8007534 <_free_r+0x2c>
 8007526:	6063      	str	r3, [r4, #4]
 8007528:	6014      	str	r4, [r2, #0]
 800752a:	4628      	mov	r0, r5
 800752c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007530:	f000 b8dc 	b.w	80076ec <__malloc_unlock>
 8007534:	42a3      	cmp	r3, r4
 8007536:	d908      	bls.n	800754a <_free_r+0x42>
 8007538:	6820      	ldr	r0, [r4, #0]
 800753a:	1821      	adds	r1, r4, r0
 800753c:	428b      	cmp	r3, r1
 800753e:	bf01      	itttt	eq
 8007540:	6819      	ldreq	r1, [r3, #0]
 8007542:	685b      	ldreq	r3, [r3, #4]
 8007544:	1809      	addeq	r1, r1, r0
 8007546:	6021      	streq	r1, [r4, #0]
 8007548:	e7ed      	b.n	8007526 <_free_r+0x1e>
 800754a:	461a      	mov	r2, r3
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	b10b      	cbz	r3, 8007554 <_free_r+0x4c>
 8007550:	42a3      	cmp	r3, r4
 8007552:	d9fa      	bls.n	800754a <_free_r+0x42>
 8007554:	6811      	ldr	r1, [r2, #0]
 8007556:	1850      	adds	r0, r2, r1
 8007558:	42a0      	cmp	r0, r4
 800755a:	d10b      	bne.n	8007574 <_free_r+0x6c>
 800755c:	6820      	ldr	r0, [r4, #0]
 800755e:	4401      	add	r1, r0
 8007560:	1850      	adds	r0, r2, r1
 8007562:	4283      	cmp	r3, r0
 8007564:	6011      	str	r1, [r2, #0]
 8007566:	d1e0      	bne.n	800752a <_free_r+0x22>
 8007568:	6818      	ldr	r0, [r3, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	6053      	str	r3, [r2, #4]
 800756e:	4408      	add	r0, r1
 8007570:	6010      	str	r0, [r2, #0]
 8007572:	e7da      	b.n	800752a <_free_r+0x22>
 8007574:	d902      	bls.n	800757c <_free_r+0x74>
 8007576:	230c      	movs	r3, #12
 8007578:	602b      	str	r3, [r5, #0]
 800757a:	e7d6      	b.n	800752a <_free_r+0x22>
 800757c:	6820      	ldr	r0, [r4, #0]
 800757e:	1821      	adds	r1, r4, r0
 8007580:	428b      	cmp	r3, r1
 8007582:	bf04      	itt	eq
 8007584:	6819      	ldreq	r1, [r3, #0]
 8007586:	685b      	ldreq	r3, [r3, #4]
 8007588:	6063      	str	r3, [r4, #4]
 800758a:	bf04      	itt	eq
 800758c:	1809      	addeq	r1, r1, r0
 800758e:	6021      	streq	r1, [r4, #0]
 8007590:	6054      	str	r4, [r2, #4]
 8007592:	e7ca      	b.n	800752a <_free_r+0x22>
 8007594:	bd38      	pop	{r3, r4, r5, pc}
 8007596:	bf00      	nop
 8007598:	200006dc 	.word	0x200006dc

0800759c <sbrk_aligned>:
 800759c:	b570      	push	{r4, r5, r6, lr}
 800759e:	4e0f      	ldr	r6, [pc, #60]	@ (80075dc <sbrk_aligned+0x40>)
 80075a0:	460c      	mov	r4, r1
 80075a2:	6831      	ldr	r1, [r6, #0]
 80075a4:	4605      	mov	r5, r0
 80075a6:	b911      	cbnz	r1, 80075ae <sbrk_aligned+0x12>
 80075a8:	f000 fba6 	bl	8007cf8 <_sbrk_r>
 80075ac:	6030      	str	r0, [r6, #0]
 80075ae:	4621      	mov	r1, r4
 80075b0:	4628      	mov	r0, r5
 80075b2:	f000 fba1 	bl	8007cf8 <_sbrk_r>
 80075b6:	1c43      	adds	r3, r0, #1
 80075b8:	d103      	bne.n	80075c2 <sbrk_aligned+0x26>
 80075ba:	f04f 34ff 	mov.w	r4, #4294967295
 80075be:	4620      	mov	r0, r4
 80075c0:	bd70      	pop	{r4, r5, r6, pc}
 80075c2:	1cc4      	adds	r4, r0, #3
 80075c4:	f024 0403 	bic.w	r4, r4, #3
 80075c8:	42a0      	cmp	r0, r4
 80075ca:	d0f8      	beq.n	80075be <sbrk_aligned+0x22>
 80075cc:	1a21      	subs	r1, r4, r0
 80075ce:	4628      	mov	r0, r5
 80075d0:	f000 fb92 	bl	8007cf8 <_sbrk_r>
 80075d4:	3001      	adds	r0, #1
 80075d6:	d1f2      	bne.n	80075be <sbrk_aligned+0x22>
 80075d8:	e7ef      	b.n	80075ba <sbrk_aligned+0x1e>
 80075da:	bf00      	nop
 80075dc:	200006d8 	.word	0x200006d8

080075e0 <_malloc_r>:
 80075e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075e4:	1ccd      	adds	r5, r1, #3
 80075e6:	f025 0503 	bic.w	r5, r5, #3
 80075ea:	3508      	adds	r5, #8
 80075ec:	2d0c      	cmp	r5, #12
 80075ee:	bf38      	it	cc
 80075f0:	250c      	movcc	r5, #12
 80075f2:	2d00      	cmp	r5, #0
 80075f4:	4606      	mov	r6, r0
 80075f6:	db01      	blt.n	80075fc <_malloc_r+0x1c>
 80075f8:	42a9      	cmp	r1, r5
 80075fa:	d904      	bls.n	8007606 <_malloc_r+0x26>
 80075fc:	230c      	movs	r3, #12
 80075fe:	6033      	str	r3, [r6, #0]
 8007600:	2000      	movs	r0, #0
 8007602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007606:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80076dc <_malloc_r+0xfc>
 800760a:	f000 f869 	bl	80076e0 <__malloc_lock>
 800760e:	f8d8 3000 	ldr.w	r3, [r8]
 8007612:	461c      	mov	r4, r3
 8007614:	bb44      	cbnz	r4, 8007668 <_malloc_r+0x88>
 8007616:	4629      	mov	r1, r5
 8007618:	4630      	mov	r0, r6
 800761a:	f7ff ffbf 	bl	800759c <sbrk_aligned>
 800761e:	1c43      	adds	r3, r0, #1
 8007620:	4604      	mov	r4, r0
 8007622:	d158      	bne.n	80076d6 <_malloc_r+0xf6>
 8007624:	f8d8 4000 	ldr.w	r4, [r8]
 8007628:	4627      	mov	r7, r4
 800762a:	2f00      	cmp	r7, #0
 800762c:	d143      	bne.n	80076b6 <_malloc_r+0xd6>
 800762e:	2c00      	cmp	r4, #0
 8007630:	d04b      	beq.n	80076ca <_malloc_r+0xea>
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	4639      	mov	r1, r7
 8007636:	4630      	mov	r0, r6
 8007638:	eb04 0903 	add.w	r9, r4, r3
 800763c:	f000 fb5c 	bl	8007cf8 <_sbrk_r>
 8007640:	4581      	cmp	r9, r0
 8007642:	d142      	bne.n	80076ca <_malloc_r+0xea>
 8007644:	6821      	ldr	r1, [r4, #0]
 8007646:	1a6d      	subs	r5, r5, r1
 8007648:	4629      	mov	r1, r5
 800764a:	4630      	mov	r0, r6
 800764c:	f7ff ffa6 	bl	800759c <sbrk_aligned>
 8007650:	3001      	adds	r0, #1
 8007652:	d03a      	beq.n	80076ca <_malloc_r+0xea>
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	442b      	add	r3, r5
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	f8d8 3000 	ldr.w	r3, [r8]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	bb62      	cbnz	r2, 80076bc <_malloc_r+0xdc>
 8007662:	f8c8 7000 	str.w	r7, [r8]
 8007666:	e00f      	b.n	8007688 <_malloc_r+0xa8>
 8007668:	6822      	ldr	r2, [r4, #0]
 800766a:	1b52      	subs	r2, r2, r5
 800766c:	d420      	bmi.n	80076b0 <_malloc_r+0xd0>
 800766e:	2a0b      	cmp	r2, #11
 8007670:	d917      	bls.n	80076a2 <_malloc_r+0xc2>
 8007672:	1961      	adds	r1, r4, r5
 8007674:	42a3      	cmp	r3, r4
 8007676:	6025      	str	r5, [r4, #0]
 8007678:	bf18      	it	ne
 800767a:	6059      	strne	r1, [r3, #4]
 800767c:	6863      	ldr	r3, [r4, #4]
 800767e:	bf08      	it	eq
 8007680:	f8c8 1000 	streq.w	r1, [r8]
 8007684:	5162      	str	r2, [r4, r5]
 8007686:	604b      	str	r3, [r1, #4]
 8007688:	4630      	mov	r0, r6
 800768a:	f000 f82f 	bl	80076ec <__malloc_unlock>
 800768e:	f104 000b 	add.w	r0, r4, #11
 8007692:	1d23      	adds	r3, r4, #4
 8007694:	f020 0007 	bic.w	r0, r0, #7
 8007698:	1ac2      	subs	r2, r0, r3
 800769a:	bf1c      	itt	ne
 800769c:	1a1b      	subne	r3, r3, r0
 800769e:	50a3      	strne	r3, [r4, r2]
 80076a0:	e7af      	b.n	8007602 <_malloc_r+0x22>
 80076a2:	6862      	ldr	r2, [r4, #4]
 80076a4:	42a3      	cmp	r3, r4
 80076a6:	bf0c      	ite	eq
 80076a8:	f8c8 2000 	streq.w	r2, [r8]
 80076ac:	605a      	strne	r2, [r3, #4]
 80076ae:	e7eb      	b.n	8007688 <_malloc_r+0xa8>
 80076b0:	4623      	mov	r3, r4
 80076b2:	6864      	ldr	r4, [r4, #4]
 80076b4:	e7ae      	b.n	8007614 <_malloc_r+0x34>
 80076b6:	463c      	mov	r4, r7
 80076b8:	687f      	ldr	r7, [r7, #4]
 80076ba:	e7b6      	b.n	800762a <_malloc_r+0x4a>
 80076bc:	461a      	mov	r2, r3
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	42a3      	cmp	r3, r4
 80076c2:	d1fb      	bne.n	80076bc <_malloc_r+0xdc>
 80076c4:	2300      	movs	r3, #0
 80076c6:	6053      	str	r3, [r2, #4]
 80076c8:	e7de      	b.n	8007688 <_malloc_r+0xa8>
 80076ca:	230c      	movs	r3, #12
 80076cc:	6033      	str	r3, [r6, #0]
 80076ce:	4630      	mov	r0, r6
 80076d0:	f000 f80c 	bl	80076ec <__malloc_unlock>
 80076d4:	e794      	b.n	8007600 <_malloc_r+0x20>
 80076d6:	6005      	str	r5, [r0, #0]
 80076d8:	e7d6      	b.n	8007688 <_malloc_r+0xa8>
 80076da:	bf00      	nop
 80076dc:	200006dc 	.word	0x200006dc

080076e0 <__malloc_lock>:
 80076e0:	4801      	ldr	r0, [pc, #4]	@ (80076e8 <__malloc_lock+0x8>)
 80076e2:	f7ff bf0f 	b.w	8007504 <__retarget_lock_acquire_recursive>
 80076e6:	bf00      	nop
 80076e8:	200006d4 	.word	0x200006d4

080076ec <__malloc_unlock>:
 80076ec:	4801      	ldr	r0, [pc, #4]	@ (80076f4 <__malloc_unlock+0x8>)
 80076ee:	f7ff bf0a 	b.w	8007506 <__retarget_lock_release_recursive>
 80076f2:	bf00      	nop
 80076f4:	200006d4 	.word	0x200006d4

080076f8 <__ssputs_r>:
 80076f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076fc:	688e      	ldr	r6, [r1, #8]
 80076fe:	461f      	mov	r7, r3
 8007700:	42be      	cmp	r6, r7
 8007702:	680b      	ldr	r3, [r1, #0]
 8007704:	4682      	mov	sl, r0
 8007706:	460c      	mov	r4, r1
 8007708:	4690      	mov	r8, r2
 800770a:	d82d      	bhi.n	8007768 <__ssputs_r+0x70>
 800770c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007710:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007714:	d026      	beq.n	8007764 <__ssputs_r+0x6c>
 8007716:	6965      	ldr	r5, [r4, #20]
 8007718:	6909      	ldr	r1, [r1, #16]
 800771a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800771e:	eba3 0901 	sub.w	r9, r3, r1
 8007722:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007726:	1c7b      	adds	r3, r7, #1
 8007728:	444b      	add	r3, r9
 800772a:	106d      	asrs	r5, r5, #1
 800772c:	429d      	cmp	r5, r3
 800772e:	bf38      	it	cc
 8007730:	461d      	movcc	r5, r3
 8007732:	0553      	lsls	r3, r2, #21
 8007734:	d527      	bpl.n	8007786 <__ssputs_r+0x8e>
 8007736:	4629      	mov	r1, r5
 8007738:	f7ff ff52 	bl	80075e0 <_malloc_r>
 800773c:	4606      	mov	r6, r0
 800773e:	b360      	cbz	r0, 800779a <__ssputs_r+0xa2>
 8007740:	6921      	ldr	r1, [r4, #16]
 8007742:	464a      	mov	r2, r9
 8007744:	f000 fae8 	bl	8007d18 <memcpy>
 8007748:	89a3      	ldrh	r3, [r4, #12]
 800774a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800774e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007752:	81a3      	strh	r3, [r4, #12]
 8007754:	6126      	str	r6, [r4, #16]
 8007756:	6165      	str	r5, [r4, #20]
 8007758:	444e      	add	r6, r9
 800775a:	eba5 0509 	sub.w	r5, r5, r9
 800775e:	6026      	str	r6, [r4, #0]
 8007760:	60a5      	str	r5, [r4, #8]
 8007762:	463e      	mov	r6, r7
 8007764:	42be      	cmp	r6, r7
 8007766:	d900      	bls.n	800776a <__ssputs_r+0x72>
 8007768:	463e      	mov	r6, r7
 800776a:	6820      	ldr	r0, [r4, #0]
 800776c:	4632      	mov	r2, r6
 800776e:	4641      	mov	r1, r8
 8007770:	f000 faa8 	bl	8007cc4 <memmove>
 8007774:	68a3      	ldr	r3, [r4, #8]
 8007776:	1b9b      	subs	r3, r3, r6
 8007778:	60a3      	str	r3, [r4, #8]
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	4433      	add	r3, r6
 800777e:	6023      	str	r3, [r4, #0]
 8007780:	2000      	movs	r0, #0
 8007782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007786:	462a      	mov	r2, r5
 8007788:	f000 fad4 	bl	8007d34 <_realloc_r>
 800778c:	4606      	mov	r6, r0
 800778e:	2800      	cmp	r0, #0
 8007790:	d1e0      	bne.n	8007754 <__ssputs_r+0x5c>
 8007792:	6921      	ldr	r1, [r4, #16]
 8007794:	4650      	mov	r0, sl
 8007796:	f7ff feb7 	bl	8007508 <_free_r>
 800779a:	230c      	movs	r3, #12
 800779c:	f8ca 3000 	str.w	r3, [sl]
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077a6:	81a3      	strh	r3, [r4, #12]
 80077a8:	f04f 30ff 	mov.w	r0, #4294967295
 80077ac:	e7e9      	b.n	8007782 <__ssputs_r+0x8a>
	...

080077b0 <_svfiprintf_r>:
 80077b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b4:	4698      	mov	r8, r3
 80077b6:	898b      	ldrh	r3, [r1, #12]
 80077b8:	061b      	lsls	r3, r3, #24
 80077ba:	b09d      	sub	sp, #116	@ 0x74
 80077bc:	4607      	mov	r7, r0
 80077be:	460d      	mov	r5, r1
 80077c0:	4614      	mov	r4, r2
 80077c2:	d510      	bpl.n	80077e6 <_svfiprintf_r+0x36>
 80077c4:	690b      	ldr	r3, [r1, #16]
 80077c6:	b973      	cbnz	r3, 80077e6 <_svfiprintf_r+0x36>
 80077c8:	2140      	movs	r1, #64	@ 0x40
 80077ca:	f7ff ff09 	bl	80075e0 <_malloc_r>
 80077ce:	6028      	str	r0, [r5, #0]
 80077d0:	6128      	str	r0, [r5, #16]
 80077d2:	b930      	cbnz	r0, 80077e2 <_svfiprintf_r+0x32>
 80077d4:	230c      	movs	r3, #12
 80077d6:	603b      	str	r3, [r7, #0]
 80077d8:	f04f 30ff 	mov.w	r0, #4294967295
 80077dc:	b01d      	add	sp, #116	@ 0x74
 80077de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e2:	2340      	movs	r3, #64	@ 0x40
 80077e4:	616b      	str	r3, [r5, #20]
 80077e6:	2300      	movs	r3, #0
 80077e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80077ea:	2320      	movs	r3, #32
 80077ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80077f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80077f4:	2330      	movs	r3, #48	@ 0x30
 80077f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007994 <_svfiprintf_r+0x1e4>
 80077fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80077fe:	f04f 0901 	mov.w	r9, #1
 8007802:	4623      	mov	r3, r4
 8007804:	469a      	mov	sl, r3
 8007806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800780a:	b10a      	cbz	r2, 8007810 <_svfiprintf_r+0x60>
 800780c:	2a25      	cmp	r2, #37	@ 0x25
 800780e:	d1f9      	bne.n	8007804 <_svfiprintf_r+0x54>
 8007810:	ebba 0b04 	subs.w	fp, sl, r4
 8007814:	d00b      	beq.n	800782e <_svfiprintf_r+0x7e>
 8007816:	465b      	mov	r3, fp
 8007818:	4622      	mov	r2, r4
 800781a:	4629      	mov	r1, r5
 800781c:	4638      	mov	r0, r7
 800781e:	f7ff ff6b 	bl	80076f8 <__ssputs_r>
 8007822:	3001      	adds	r0, #1
 8007824:	f000 80a7 	beq.w	8007976 <_svfiprintf_r+0x1c6>
 8007828:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800782a:	445a      	add	r2, fp
 800782c:	9209      	str	r2, [sp, #36]	@ 0x24
 800782e:	f89a 3000 	ldrb.w	r3, [sl]
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 809f 	beq.w	8007976 <_svfiprintf_r+0x1c6>
 8007838:	2300      	movs	r3, #0
 800783a:	f04f 32ff 	mov.w	r2, #4294967295
 800783e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007842:	f10a 0a01 	add.w	sl, sl, #1
 8007846:	9304      	str	r3, [sp, #16]
 8007848:	9307      	str	r3, [sp, #28]
 800784a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800784e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007850:	4654      	mov	r4, sl
 8007852:	2205      	movs	r2, #5
 8007854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007858:	484e      	ldr	r0, [pc, #312]	@ (8007994 <_svfiprintf_r+0x1e4>)
 800785a:	f7f8 fcc9 	bl	80001f0 <memchr>
 800785e:	9a04      	ldr	r2, [sp, #16]
 8007860:	b9d8      	cbnz	r0, 800789a <_svfiprintf_r+0xea>
 8007862:	06d0      	lsls	r0, r2, #27
 8007864:	bf44      	itt	mi
 8007866:	2320      	movmi	r3, #32
 8007868:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800786c:	0711      	lsls	r1, r2, #28
 800786e:	bf44      	itt	mi
 8007870:	232b      	movmi	r3, #43	@ 0x2b
 8007872:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007876:	f89a 3000 	ldrb.w	r3, [sl]
 800787a:	2b2a      	cmp	r3, #42	@ 0x2a
 800787c:	d015      	beq.n	80078aa <_svfiprintf_r+0xfa>
 800787e:	9a07      	ldr	r2, [sp, #28]
 8007880:	4654      	mov	r4, sl
 8007882:	2000      	movs	r0, #0
 8007884:	f04f 0c0a 	mov.w	ip, #10
 8007888:	4621      	mov	r1, r4
 800788a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800788e:	3b30      	subs	r3, #48	@ 0x30
 8007890:	2b09      	cmp	r3, #9
 8007892:	d94b      	bls.n	800792c <_svfiprintf_r+0x17c>
 8007894:	b1b0      	cbz	r0, 80078c4 <_svfiprintf_r+0x114>
 8007896:	9207      	str	r2, [sp, #28]
 8007898:	e014      	b.n	80078c4 <_svfiprintf_r+0x114>
 800789a:	eba0 0308 	sub.w	r3, r0, r8
 800789e:	fa09 f303 	lsl.w	r3, r9, r3
 80078a2:	4313      	orrs	r3, r2
 80078a4:	9304      	str	r3, [sp, #16]
 80078a6:	46a2      	mov	sl, r4
 80078a8:	e7d2      	b.n	8007850 <_svfiprintf_r+0xa0>
 80078aa:	9b03      	ldr	r3, [sp, #12]
 80078ac:	1d19      	adds	r1, r3, #4
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	9103      	str	r1, [sp, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	bfbb      	ittet	lt
 80078b6:	425b      	neglt	r3, r3
 80078b8:	f042 0202 	orrlt.w	r2, r2, #2
 80078bc:	9307      	strge	r3, [sp, #28]
 80078be:	9307      	strlt	r3, [sp, #28]
 80078c0:	bfb8      	it	lt
 80078c2:	9204      	strlt	r2, [sp, #16]
 80078c4:	7823      	ldrb	r3, [r4, #0]
 80078c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80078c8:	d10a      	bne.n	80078e0 <_svfiprintf_r+0x130>
 80078ca:	7863      	ldrb	r3, [r4, #1]
 80078cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80078ce:	d132      	bne.n	8007936 <_svfiprintf_r+0x186>
 80078d0:	9b03      	ldr	r3, [sp, #12]
 80078d2:	1d1a      	adds	r2, r3, #4
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	9203      	str	r2, [sp, #12]
 80078d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80078dc:	3402      	adds	r4, #2
 80078de:	9305      	str	r3, [sp, #20]
 80078e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80079a4 <_svfiprintf_r+0x1f4>
 80078e4:	7821      	ldrb	r1, [r4, #0]
 80078e6:	2203      	movs	r2, #3
 80078e8:	4650      	mov	r0, sl
 80078ea:	f7f8 fc81 	bl	80001f0 <memchr>
 80078ee:	b138      	cbz	r0, 8007900 <_svfiprintf_r+0x150>
 80078f0:	9b04      	ldr	r3, [sp, #16]
 80078f2:	eba0 000a 	sub.w	r0, r0, sl
 80078f6:	2240      	movs	r2, #64	@ 0x40
 80078f8:	4082      	lsls	r2, r0
 80078fa:	4313      	orrs	r3, r2
 80078fc:	3401      	adds	r4, #1
 80078fe:	9304      	str	r3, [sp, #16]
 8007900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007904:	4824      	ldr	r0, [pc, #144]	@ (8007998 <_svfiprintf_r+0x1e8>)
 8007906:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800790a:	2206      	movs	r2, #6
 800790c:	f7f8 fc70 	bl	80001f0 <memchr>
 8007910:	2800      	cmp	r0, #0
 8007912:	d036      	beq.n	8007982 <_svfiprintf_r+0x1d2>
 8007914:	4b21      	ldr	r3, [pc, #132]	@ (800799c <_svfiprintf_r+0x1ec>)
 8007916:	bb1b      	cbnz	r3, 8007960 <_svfiprintf_r+0x1b0>
 8007918:	9b03      	ldr	r3, [sp, #12]
 800791a:	3307      	adds	r3, #7
 800791c:	f023 0307 	bic.w	r3, r3, #7
 8007920:	3308      	adds	r3, #8
 8007922:	9303      	str	r3, [sp, #12]
 8007924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007926:	4433      	add	r3, r6
 8007928:	9309      	str	r3, [sp, #36]	@ 0x24
 800792a:	e76a      	b.n	8007802 <_svfiprintf_r+0x52>
 800792c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007930:	460c      	mov	r4, r1
 8007932:	2001      	movs	r0, #1
 8007934:	e7a8      	b.n	8007888 <_svfiprintf_r+0xd8>
 8007936:	2300      	movs	r3, #0
 8007938:	3401      	adds	r4, #1
 800793a:	9305      	str	r3, [sp, #20]
 800793c:	4619      	mov	r1, r3
 800793e:	f04f 0c0a 	mov.w	ip, #10
 8007942:	4620      	mov	r0, r4
 8007944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007948:	3a30      	subs	r2, #48	@ 0x30
 800794a:	2a09      	cmp	r2, #9
 800794c:	d903      	bls.n	8007956 <_svfiprintf_r+0x1a6>
 800794e:	2b00      	cmp	r3, #0
 8007950:	d0c6      	beq.n	80078e0 <_svfiprintf_r+0x130>
 8007952:	9105      	str	r1, [sp, #20]
 8007954:	e7c4      	b.n	80078e0 <_svfiprintf_r+0x130>
 8007956:	fb0c 2101 	mla	r1, ip, r1, r2
 800795a:	4604      	mov	r4, r0
 800795c:	2301      	movs	r3, #1
 800795e:	e7f0      	b.n	8007942 <_svfiprintf_r+0x192>
 8007960:	ab03      	add	r3, sp, #12
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	462a      	mov	r2, r5
 8007966:	4b0e      	ldr	r3, [pc, #56]	@ (80079a0 <_svfiprintf_r+0x1f0>)
 8007968:	a904      	add	r1, sp, #16
 800796a:	4638      	mov	r0, r7
 800796c:	f3af 8000 	nop.w
 8007970:	1c42      	adds	r2, r0, #1
 8007972:	4606      	mov	r6, r0
 8007974:	d1d6      	bne.n	8007924 <_svfiprintf_r+0x174>
 8007976:	89ab      	ldrh	r3, [r5, #12]
 8007978:	065b      	lsls	r3, r3, #25
 800797a:	f53f af2d 	bmi.w	80077d8 <_svfiprintf_r+0x28>
 800797e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007980:	e72c      	b.n	80077dc <_svfiprintf_r+0x2c>
 8007982:	ab03      	add	r3, sp, #12
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	462a      	mov	r2, r5
 8007988:	4b05      	ldr	r3, [pc, #20]	@ (80079a0 <_svfiprintf_r+0x1f0>)
 800798a:	a904      	add	r1, sp, #16
 800798c:	4638      	mov	r0, r7
 800798e:	f000 f879 	bl	8007a84 <_printf_i>
 8007992:	e7ed      	b.n	8007970 <_svfiprintf_r+0x1c0>
 8007994:	08008018 	.word	0x08008018
 8007998:	08008022 	.word	0x08008022
 800799c:	00000000 	.word	0x00000000
 80079a0:	080076f9 	.word	0x080076f9
 80079a4:	0800801e 	.word	0x0800801e

080079a8 <_printf_common>:
 80079a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079ac:	4616      	mov	r6, r2
 80079ae:	4698      	mov	r8, r3
 80079b0:	688a      	ldr	r2, [r1, #8]
 80079b2:	690b      	ldr	r3, [r1, #16]
 80079b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079b8:	4293      	cmp	r3, r2
 80079ba:	bfb8      	it	lt
 80079bc:	4613      	movlt	r3, r2
 80079be:	6033      	str	r3, [r6, #0]
 80079c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80079c4:	4607      	mov	r7, r0
 80079c6:	460c      	mov	r4, r1
 80079c8:	b10a      	cbz	r2, 80079ce <_printf_common+0x26>
 80079ca:	3301      	adds	r3, #1
 80079cc:	6033      	str	r3, [r6, #0]
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	0699      	lsls	r1, r3, #26
 80079d2:	bf42      	ittt	mi
 80079d4:	6833      	ldrmi	r3, [r6, #0]
 80079d6:	3302      	addmi	r3, #2
 80079d8:	6033      	strmi	r3, [r6, #0]
 80079da:	6825      	ldr	r5, [r4, #0]
 80079dc:	f015 0506 	ands.w	r5, r5, #6
 80079e0:	d106      	bne.n	80079f0 <_printf_common+0x48>
 80079e2:	f104 0a19 	add.w	sl, r4, #25
 80079e6:	68e3      	ldr	r3, [r4, #12]
 80079e8:	6832      	ldr	r2, [r6, #0]
 80079ea:	1a9b      	subs	r3, r3, r2
 80079ec:	42ab      	cmp	r3, r5
 80079ee:	dc26      	bgt.n	8007a3e <_printf_common+0x96>
 80079f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80079f4:	6822      	ldr	r2, [r4, #0]
 80079f6:	3b00      	subs	r3, #0
 80079f8:	bf18      	it	ne
 80079fa:	2301      	movne	r3, #1
 80079fc:	0692      	lsls	r2, r2, #26
 80079fe:	d42b      	bmi.n	8007a58 <_printf_common+0xb0>
 8007a00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a04:	4641      	mov	r1, r8
 8007a06:	4638      	mov	r0, r7
 8007a08:	47c8      	blx	r9
 8007a0a:	3001      	adds	r0, #1
 8007a0c:	d01e      	beq.n	8007a4c <_printf_common+0xa4>
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	6922      	ldr	r2, [r4, #16]
 8007a12:	f003 0306 	and.w	r3, r3, #6
 8007a16:	2b04      	cmp	r3, #4
 8007a18:	bf02      	ittt	eq
 8007a1a:	68e5      	ldreq	r5, [r4, #12]
 8007a1c:	6833      	ldreq	r3, [r6, #0]
 8007a1e:	1aed      	subeq	r5, r5, r3
 8007a20:	68a3      	ldr	r3, [r4, #8]
 8007a22:	bf0c      	ite	eq
 8007a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a28:	2500      	movne	r5, #0
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	bfc4      	itt	gt
 8007a2e:	1a9b      	subgt	r3, r3, r2
 8007a30:	18ed      	addgt	r5, r5, r3
 8007a32:	2600      	movs	r6, #0
 8007a34:	341a      	adds	r4, #26
 8007a36:	42b5      	cmp	r5, r6
 8007a38:	d11a      	bne.n	8007a70 <_printf_common+0xc8>
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	e008      	b.n	8007a50 <_printf_common+0xa8>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	4652      	mov	r2, sl
 8007a42:	4641      	mov	r1, r8
 8007a44:	4638      	mov	r0, r7
 8007a46:	47c8      	blx	r9
 8007a48:	3001      	adds	r0, #1
 8007a4a:	d103      	bne.n	8007a54 <_printf_common+0xac>
 8007a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a54:	3501      	adds	r5, #1
 8007a56:	e7c6      	b.n	80079e6 <_printf_common+0x3e>
 8007a58:	18e1      	adds	r1, r4, r3
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	2030      	movs	r0, #48	@ 0x30
 8007a5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a62:	4422      	add	r2, r4
 8007a64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a6c:	3302      	adds	r3, #2
 8007a6e:	e7c7      	b.n	8007a00 <_printf_common+0x58>
 8007a70:	2301      	movs	r3, #1
 8007a72:	4622      	mov	r2, r4
 8007a74:	4641      	mov	r1, r8
 8007a76:	4638      	mov	r0, r7
 8007a78:	47c8      	blx	r9
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	d0e6      	beq.n	8007a4c <_printf_common+0xa4>
 8007a7e:	3601      	adds	r6, #1
 8007a80:	e7d9      	b.n	8007a36 <_printf_common+0x8e>
	...

08007a84 <_printf_i>:
 8007a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a88:	7e0f      	ldrb	r7, [r1, #24]
 8007a8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a8c:	2f78      	cmp	r7, #120	@ 0x78
 8007a8e:	4691      	mov	r9, r2
 8007a90:	4680      	mov	r8, r0
 8007a92:	460c      	mov	r4, r1
 8007a94:	469a      	mov	sl, r3
 8007a96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a9a:	d807      	bhi.n	8007aac <_printf_i+0x28>
 8007a9c:	2f62      	cmp	r7, #98	@ 0x62
 8007a9e:	d80a      	bhi.n	8007ab6 <_printf_i+0x32>
 8007aa0:	2f00      	cmp	r7, #0
 8007aa2:	f000 80d2 	beq.w	8007c4a <_printf_i+0x1c6>
 8007aa6:	2f58      	cmp	r7, #88	@ 0x58
 8007aa8:	f000 80b9 	beq.w	8007c1e <_printf_i+0x19a>
 8007aac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ab0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ab4:	e03a      	b.n	8007b2c <_printf_i+0xa8>
 8007ab6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007aba:	2b15      	cmp	r3, #21
 8007abc:	d8f6      	bhi.n	8007aac <_printf_i+0x28>
 8007abe:	a101      	add	r1, pc, #4	@ (adr r1, 8007ac4 <_printf_i+0x40>)
 8007ac0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ac4:	08007b1d 	.word	0x08007b1d
 8007ac8:	08007b31 	.word	0x08007b31
 8007acc:	08007aad 	.word	0x08007aad
 8007ad0:	08007aad 	.word	0x08007aad
 8007ad4:	08007aad 	.word	0x08007aad
 8007ad8:	08007aad 	.word	0x08007aad
 8007adc:	08007b31 	.word	0x08007b31
 8007ae0:	08007aad 	.word	0x08007aad
 8007ae4:	08007aad 	.word	0x08007aad
 8007ae8:	08007aad 	.word	0x08007aad
 8007aec:	08007aad 	.word	0x08007aad
 8007af0:	08007c31 	.word	0x08007c31
 8007af4:	08007b5b 	.word	0x08007b5b
 8007af8:	08007beb 	.word	0x08007beb
 8007afc:	08007aad 	.word	0x08007aad
 8007b00:	08007aad 	.word	0x08007aad
 8007b04:	08007c53 	.word	0x08007c53
 8007b08:	08007aad 	.word	0x08007aad
 8007b0c:	08007b5b 	.word	0x08007b5b
 8007b10:	08007aad 	.word	0x08007aad
 8007b14:	08007aad 	.word	0x08007aad
 8007b18:	08007bf3 	.word	0x08007bf3
 8007b1c:	6833      	ldr	r3, [r6, #0]
 8007b1e:	1d1a      	adds	r2, r3, #4
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6032      	str	r2, [r6, #0]
 8007b24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e09d      	b.n	8007c6c <_printf_i+0x1e8>
 8007b30:	6833      	ldr	r3, [r6, #0]
 8007b32:	6820      	ldr	r0, [r4, #0]
 8007b34:	1d19      	adds	r1, r3, #4
 8007b36:	6031      	str	r1, [r6, #0]
 8007b38:	0606      	lsls	r6, r0, #24
 8007b3a:	d501      	bpl.n	8007b40 <_printf_i+0xbc>
 8007b3c:	681d      	ldr	r5, [r3, #0]
 8007b3e:	e003      	b.n	8007b48 <_printf_i+0xc4>
 8007b40:	0645      	lsls	r5, r0, #25
 8007b42:	d5fb      	bpl.n	8007b3c <_printf_i+0xb8>
 8007b44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b48:	2d00      	cmp	r5, #0
 8007b4a:	da03      	bge.n	8007b54 <_printf_i+0xd0>
 8007b4c:	232d      	movs	r3, #45	@ 0x2d
 8007b4e:	426d      	negs	r5, r5
 8007b50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b54:	4859      	ldr	r0, [pc, #356]	@ (8007cbc <_printf_i+0x238>)
 8007b56:	230a      	movs	r3, #10
 8007b58:	e011      	b.n	8007b7e <_printf_i+0xfa>
 8007b5a:	6821      	ldr	r1, [r4, #0]
 8007b5c:	6833      	ldr	r3, [r6, #0]
 8007b5e:	0608      	lsls	r0, r1, #24
 8007b60:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b64:	d402      	bmi.n	8007b6c <_printf_i+0xe8>
 8007b66:	0649      	lsls	r1, r1, #25
 8007b68:	bf48      	it	mi
 8007b6a:	b2ad      	uxthmi	r5, r5
 8007b6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b6e:	4853      	ldr	r0, [pc, #332]	@ (8007cbc <_printf_i+0x238>)
 8007b70:	6033      	str	r3, [r6, #0]
 8007b72:	bf14      	ite	ne
 8007b74:	230a      	movne	r3, #10
 8007b76:	2308      	moveq	r3, #8
 8007b78:	2100      	movs	r1, #0
 8007b7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b7e:	6866      	ldr	r6, [r4, #4]
 8007b80:	60a6      	str	r6, [r4, #8]
 8007b82:	2e00      	cmp	r6, #0
 8007b84:	bfa2      	ittt	ge
 8007b86:	6821      	ldrge	r1, [r4, #0]
 8007b88:	f021 0104 	bicge.w	r1, r1, #4
 8007b8c:	6021      	strge	r1, [r4, #0]
 8007b8e:	b90d      	cbnz	r5, 8007b94 <_printf_i+0x110>
 8007b90:	2e00      	cmp	r6, #0
 8007b92:	d04b      	beq.n	8007c2c <_printf_i+0x1a8>
 8007b94:	4616      	mov	r6, r2
 8007b96:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b9a:	fb03 5711 	mls	r7, r3, r1, r5
 8007b9e:	5dc7      	ldrb	r7, [r0, r7]
 8007ba0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ba4:	462f      	mov	r7, r5
 8007ba6:	42bb      	cmp	r3, r7
 8007ba8:	460d      	mov	r5, r1
 8007baa:	d9f4      	bls.n	8007b96 <_printf_i+0x112>
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d10b      	bne.n	8007bc8 <_printf_i+0x144>
 8007bb0:	6823      	ldr	r3, [r4, #0]
 8007bb2:	07df      	lsls	r7, r3, #31
 8007bb4:	d508      	bpl.n	8007bc8 <_printf_i+0x144>
 8007bb6:	6923      	ldr	r3, [r4, #16]
 8007bb8:	6861      	ldr	r1, [r4, #4]
 8007bba:	4299      	cmp	r1, r3
 8007bbc:	bfde      	ittt	le
 8007bbe:	2330      	movle	r3, #48	@ 0x30
 8007bc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007bc8:	1b92      	subs	r2, r2, r6
 8007bca:	6122      	str	r2, [r4, #16]
 8007bcc:	f8cd a000 	str.w	sl, [sp]
 8007bd0:	464b      	mov	r3, r9
 8007bd2:	aa03      	add	r2, sp, #12
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	f7ff fee6 	bl	80079a8 <_printf_common>
 8007bdc:	3001      	adds	r0, #1
 8007bde:	d14a      	bne.n	8007c76 <_printf_i+0x1f2>
 8007be0:	f04f 30ff 	mov.w	r0, #4294967295
 8007be4:	b004      	add	sp, #16
 8007be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	f043 0320 	orr.w	r3, r3, #32
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	4833      	ldr	r0, [pc, #204]	@ (8007cc0 <_printf_i+0x23c>)
 8007bf4:	2778      	movs	r7, #120	@ 0x78
 8007bf6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	6831      	ldr	r1, [r6, #0]
 8007bfe:	061f      	lsls	r7, r3, #24
 8007c00:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c04:	d402      	bmi.n	8007c0c <_printf_i+0x188>
 8007c06:	065f      	lsls	r7, r3, #25
 8007c08:	bf48      	it	mi
 8007c0a:	b2ad      	uxthmi	r5, r5
 8007c0c:	6031      	str	r1, [r6, #0]
 8007c0e:	07d9      	lsls	r1, r3, #31
 8007c10:	bf44      	itt	mi
 8007c12:	f043 0320 	orrmi.w	r3, r3, #32
 8007c16:	6023      	strmi	r3, [r4, #0]
 8007c18:	b11d      	cbz	r5, 8007c22 <_printf_i+0x19e>
 8007c1a:	2310      	movs	r3, #16
 8007c1c:	e7ac      	b.n	8007b78 <_printf_i+0xf4>
 8007c1e:	4827      	ldr	r0, [pc, #156]	@ (8007cbc <_printf_i+0x238>)
 8007c20:	e7e9      	b.n	8007bf6 <_printf_i+0x172>
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	f023 0320 	bic.w	r3, r3, #32
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	e7f6      	b.n	8007c1a <_printf_i+0x196>
 8007c2c:	4616      	mov	r6, r2
 8007c2e:	e7bd      	b.n	8007bac <_printf_i+0x128>
 8007c30:	6833      	ldr	r3, [r6, #0]
 8007c32:	6825      	ldr	r5, [r4, #0]
 8007c34:	6961      	ldr	r1, [r4, #20]
 8007c36:	1d18      	adds	r0, r3, #4
 8007c38:	6030      	str	r0, [r6, #0]
 8007c3a:	062e      	lsls	r6, r5, #24
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	d501      	bpl.n	8007c44 <_printf_i+0x1c0>
 8007c40:	6019      	str	r1, [r3, #0]
 8007c42:	e002      	b.n	8007c4a <_printf_i+0x1c6>
 8007c44:	0668      	lsls	r0, r5, #25
 8007c46:	d5fb      	bpl.n	8007c40 <_printf_i+0x1bc>
 8007c48:	8019      	strh	r1, [r3, #0]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	6123      	str	r3, [r4, #16]
 8007c4e:	4616      	mov	r6, r2
 8007c50:	e7bc      	b.n	8007bcc <_printf_i+0x148>
 8007c52:	6833      	ldr	r3, [r6, #0]
 8007c54:	1d1a      	adds	r2, r3, #4
 8007c56:	6032      	str	r2, [r6, #0]
 8007c58:	681e      	ldr	r6, [r3, #0]
 8007c5a:	6862      	ldr	r2, [r4, #4]
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	4630      	mov	r0, r6
 8007c60:	f7f8 fac6 	bl	80001f0 <memchr>
 8007c64:	b108      	cbz	r0, 8007c6a <_printf_i+0x1e6>
 8007c66:	1b80      	subs	r0, r0, r6
 8007c68:	6060      	str	r0, [r4, #4]
 8007c6a:	6863      	ldr	r3, [r4, #4]
 8007c6c:	6123      	str	r3, [r4, #16]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c74:	e7aa      	b.n	8007bcc <_printf_i+0x148>
 8007c76:	6923      	ldr	r3, [r4, #16]
 8007c78:	4632      	mov	r2, r6
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	47d0      	blx	sl
 8007c80:	3001      	adds	r0, #1
 8007c82:	d0ad      	beq.n	8007be0 <_printf_i+0x15c>
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	079b      	lsls	r3, r3, #30
 8007c88:	d413      	bmi.n	8007cb2 <_printf_i+0x22e>
 8007c8a:	68e0      	ldr	r0, [r4, #12]
 8007c8c:	9b03      	ldr	r3, [sp, #12]
 8007c8e:	4298      	cmp	r0, r3
 8007c90:	bfb8      	it	lt
 8007c92:	4618      	movlt	r0, r3
 8007c94:	e7a6      	b.n	8007be4 <_printf_i+0x160>
 8007c96:	2301      	movs	r3, #1
 8007c98:	4632      	mov	r2, r6
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	4640      	mov	r0, r8
 8007c9e:	47d0      	blx	sl
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	d09d      	beq.n	8007be0 <_printf_i+0x15c>
 8007ca4:	3501      	adds	r5, #1
 8007ca6:	68e3      	ldr	r3, [r4, #12]
 8007ca8:	9903      	ldr	r1, [sp, #12]
 8007caa:	1a5b      	subs	r3, r3, r1
 8007cac:	42ab      	cmp	r3, r5
 8007cae:	dcf2      	bgt.n	8007c96 <_printf_i+0x212>
 8007cb0:	e7eb      	b.n	8007c8a <_printf_i+0x206>
 8007cb2:	2500      	movs	r5, #0
 8007cb4:	f104 0619 	add.w	r6, r4, #25
 8007cb8:	e7f5      	b.n	8007ca6 <_printf_i+0x222>
 8007cba:	bf00      	nop
 8007cbc:	08008029 	.word	0x08008029
 8007cc0:	0800803a 	.word	0x0800803a

08007cc4 <memmove>:
 8007cc4:	4288      	cmp	r0, r1
 8007cc6:	b510      	push	{r4, lr}
 8007cc8:	eb01 0402 	add.w	r4, r1, r2
 8007ccc:	d902      	bls.n	8007cd4 <memmove+0x10>
 8007cce:	4284      	cmp	r4, r0
 8007cd0:	4623      	mov	r3, r4
 8007cd2:	d807      	bhi.n	8007ce4 <memmove+0x20>
 8007cd4:	1e43      	subs	r3, r0, #1
 8007cd6:	42a1      	cmp	r1, r4
 8007cd8:	d008      	beq.n	8007cec <memmove+0x28>
 8007cda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ce2:	e7f8      	b.n	8007cd6 <memmove+0x12>
 8007ce4:	4402      	add	r2, r0
 8007ce6:	4601      	mov	r1, r0
 8007ce8:	428a      	cmp	r2, r1
 8007cea:	d100      	bne.n	8007cee <memmove+0x2a>
 8007cec:	bd10      	pop	{r4, pc}
 8007cee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cf6:	e7f7      	b.n	8007ce8 <memmove+0x24>

08007cf8 <_sbrk_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	4d06      	ldr	r5, [pc, #24]	@ (8007d14 <_sbrk_r+0x1c>)
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	4604      	mov	r4, r0
 8007d00:	4608      	mov	r0, r1
 8007d02:	602b      	str	r3, [r5, #0]
 8007d04:	f7f9 fc0e 	bl	8001524 <_sbrk>
 8007d08:	1c43      	adds	r3, r0, #1
 8007d0a:	d102      	bne.n	8007d12 <_sbrk_r+0x1a>
 8007d0c:	682b      	ldr	r3, [r5, #0]
 8007d0e:	b103      	cbz	r3, 8007d12 <_sbrk_r+0x1a>
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	bd38      	pop	{r3, r4, r5, pc}
 8007d14:	200006d0 	.word	0x200006d0

08007d18 <memcpy>:
 8007d18:	440a      	add	r2, r1
 8007d1a:	4291      	cmp	r1, r2
 8007d1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d20:	d100      	bne.n	8007d24 <memcpy+0xc>
 8007d22:	4770      	bx	lr
 8007d24:	b510      	push	{r4, lr}
 8007d26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d2e:	4291      	cmp	r1, r2
 8007d30:	d1f9      	bne.n	8007d26 <memcpy+0xe>
 8007d32:	bd10      	pop	{r4, pc}

08007d34 <_realloc_r>:
 8007d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d38:	4680      	mov	r8, r0
 8007d3a:	4615      	mov	r5, r2
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	b921      	cbnz	r1, 8007d4a <_realloc_r+0x16>
 8007d40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d44:	4611      	mov	r1, r2
 8007d46:	f7ff bc4b 	b.w	80075e0 <_malloc_r>
 8007d4a:	b92a      	cbnz	r2, 8007d58 <_realloc_r+0x24>
 8007d4c:	f7ff fbdc 	bl	8007508 <_free_r>
 8007d50:	2400      	movs	r4, #0
 8007d52:	4620      	mov	r0, r4
 8007d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d58:	f000 f81a 	bl	8007d90 <_malloc_usable_size_r>
 8007d5c:	4285      	cmp	r5, r0
 8007d5e:	4606      	mov	r6, r0
 8007d60:	d802      	bhi.n	8007d68 <_realloc_r+0x34>
 8007d62:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007d66:	d8f4      	bhi.n	8007d52 <_realloc_r+0x1e>
 8007d68:	4629      	mov	r1, r5
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	f7ff fc38 	bl	80075e0 <_malloc_r>
 8007d70:	4607      	mov	r7, r0
 8007d72:	2800      	cmp	r0, #0
 8007d74:	d0ec      	beq.n	8007d50 <_realloc_r+0x1c>
 8007d76:	42b5      	cmp	r5, r6
 8007d78:	462a      	mov	r2, r5
 8007d7a:	4621      	mov	r1, r4
 8007d7c:	bf28      	it	cs
 8007d7e:	4632      	movcs	r2, r6
 8007d80:	f7ff ffca 	bl	8007d18 <memcpy>
 8007d84:	4621      	mov	r1, r4
 8007d86:	4640      	mov	r0, r8
 8007d88:	f7ff fbbe 	bl	8007508 <_free_r>
 8007d8c:	463c      	mov	r4, r7
 8007d8e:	e7e0      	b.n	8007d52 <_realloc_r+0x1e>

08007d90 <_malloc_usable_size_r>:
 8007d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d94:	1f18      	subs	r0, r3, #4
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	bfbc      	itt	lt
 8007d9a:	580b      	ldrlt	r3, [r1, r0]
 8007d9c:	18c0      	addlt	r0, r0, r3
 8007d9e:	4770      	bx	lr

08007da0 <_init>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	bf00      	nop
 8007da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da6:	bc08      	pop	{r3}
 8007da8:	469e      	mov	lr, r3
 8007daa:	4770      	bx	lr

08007dac <_fini>:
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dae:	bf00      	nop
 8007db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db2:	bc08      	pop	{r3}
 8007db4:	469e      	mov	lr, r3
 8007db6:	4770      	bx	lr
