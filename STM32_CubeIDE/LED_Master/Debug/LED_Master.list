
LED_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f08  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080050b8  080050b8  000060b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005214  08005214  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005214  08005214  00006214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800521c  0800521c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800521c  0800521c  0000621c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005220  08005220  00006220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005224  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          00000b68  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bc4  20000bc4  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001066f  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c1d  00000000  00000000  000176fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb8  00000000  00000000  0001a318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b47  00000000  00000000  0001b1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000254ad  00000000  00000000  0001bd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014167  00000000  00000000  000411c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000daf6d  00000000  00000000  0005532b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00130298  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f84  00000000  00000000  001302dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00134260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080050a0 	.word	0x080050a0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	080050a0 	.word	0x080050a0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_TIM_PeriodElapsedCallback>:
{
	return timestamp1ms;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	if(GLOBAL_TIMER == htim)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a0f      	ldr	r2, [pc, #60]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d105      	bne.n	800059c <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		timestamp1ms++;
 8000590:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3301      	adds	r3, #1
 8000596:	4a0d      	ldr	r2, [pc, #52]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000598:	6013      	str	r3, [r2, #0]
	{
		timestamp1000ms++;
		SET_1000MS_TASK;
	}

}
 800059a:	e00e      	b.n	80005ba <HAL_TIM_PeriodElapsedCallback+0x3a>
	else if (PRINT_TIMER == htim)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a0c      	ldr	r2, [pc, #48]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d10a      	bne.n	80005ba <HAL_TIM_PeriodElapsedCallback+0x3a>
		timestamp1000ms++;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	4a0a      	ldr	r2, [pc, #40]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80005ac:	6013      	str	r3, [r2, #0]
		SET_1000MS_TASK;
 80005ae:	4b0a      	ldr	r3, [pc, #40]	@ (80005d8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005b6:	4a08      	ldr	r2, [pc, #32]	@ (80005d8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80005b8:	6013      	str	r3, [r2, #0]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000928 	.word	0x20000928
 80005cc:	20000078 	.word	0x20000078
 80005d0:	200008e0 	.word	0x200008e0
 80005d4:	2000007c 	.word	0x2000007c
 80005d8:	20000080 	.word	0x20000080

080005dc <HAL_GPIO_EXTI_Callback>:
 */
#include "led_bsp.h"
#include "key_bsp.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	80fb      	strh	r3, [r7, #6]
	if(KEY2_Pin == GPIO_Pin)
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005ec:	d101      	bne.n	80005f2 <HAL_GPIO_EXTI_Callback+0x16>
	{
		Led_BlueFlip();
 80005ee:	f000 f811 	bl	8000614 <Led_BlueFlip>
	}
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <Led_RedFlip>:
 *      Author: 18283
 */
#include "led_bsp.h"

void Led_RedFlip(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000600:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000604:	4802      	ldr	r0, [pc, #8]	@ (8000610 <Led_RedFlip+0x14>)
 8000606:	f001 fd10 	bl	800202a <HAL_GPIO_TogglePin>
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40021c00 	.word	0x40021c00

08000614 <Led_BlueFlip>:
{
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
}

void Led_BlueFlip(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000618:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800061c:	4802      	ldr	r0, [pc, #8]	@ (8000628 <Led_BlueFlip+0x14>)
 800061e:	f001 fd04 	bl	800202a <HAL_GPIO_TogglePin>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40021c00 	.word	0x40021c00

0800062c <Led_task>:
#include "task_bsp.h"

volatile uint32_t Task_Cmd;

void Led_task(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	Led_RedFlip();
 8000630:	f7ff ffe4 	bl	80005fc <Led_RedFlip>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}

08000638 <Task_1ms_Entry>:

void Task_1ms_Entry(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 1ms message\n");
 800063c:	4805      	ldr	r0, [pc, #20]	@ (8000654 <Task_1ms_Entry+0x1c>)
 800063e:	f000 f8ef 	bl	8000820 <DEBUG_PRINTF>
	RESET_1MS_TASK;
 8000642:	4b05      	ldr	r3, [pc, #20]	@ (8000658 <Task_1ms_Entry+0x20>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 0301 	bic.w	r3, r3, #1
 800064a:	4a03      	ldr	r2, [pc, #12]	@ (8000658 <Task_1ms_Entry+0x20>)
 800064c:	6013      	str	r3, [r2, #0]
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	080050b8 	.word	0x080050b8
 8000658:	20000080 	.word	0x20000080

0800065c <Task_5ms_Entry>:

void Task_5ms_Entry(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 5ms message\n");
 8000660:	4805      	ldr	r0, [pc, #20]	@ (8000678 <Task_5ms_Entry+0x1c>)
 8000662:	f000 f8dd 	bl	8000820 <DEBUG_PRINTF>
	RESET_5MS_TASK;
 8000666:	4b05      	ldr	r3, [pc, #20]	@ (800067c <Task_5ms_Entry+0x20>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f023 0302 	bic.w	r3, r3, #2
 800066e:	4a03      	ldr	r2, [pc, #12]	@ (800067c <Task_5ms_Entry+0x20>)
 8000670:	6013      	str	r3, [r2, #0]
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	080050dc 	.word	0x080050dc
 800067c:	20000080 	.word	0x20000080

08000680 <Task_10ms_Entry>:

void Task_10ms_Entry(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 10ms message\n");
 8000684:	4805      	ldr	r0, [pc, #20]	@ (800069c <Task_10ms_Entry+0x1c>)
 8000686:	f000 f8cb 	bl	8000820 <DEBUG_PRINTF>
	RESET_10MS_TASK;
 800068a:	4b05      	ldr	r3, [pc, #20]	@ (80006a0 <Task_10ms_Entry+0x20>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f023 0304 	bic.w	r3, r3, #4
 8000692:	4a03      	ldr	r2, [pc, #12]	@ (80006a0 <Task_10ms_Entry+0x20>)
 8000694:	6013      	str	r3, [r2, #0]
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	08005100 	.word	0x08005100
 80006a0:	20000080 	.word	0x20000080

080006a4 <Task_50ms_Entry>:

void Task_50ms_Entry(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 50ms message\n");
 80006a8:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <Task_50ms_Entry+0x1c>)
 80006aa:	f000 f8b9 	bl	8000820 <DEBUG_PRINTF>
	RESET_50MS_TASK;
 80006ae:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <Task_50ms_Entry+0x20>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f023 0308 	bic.w	r3, r3, #8
 80006b6:	4a03      	ldr	r2, [pc, #12]	@ (80006c4 <Task_50ms_Entry+0x20>)
 80006b8:	6013      	str	r3, [r2, #0]
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	08005124 	.word	0x08005124
 80006c4:	20000080 	.word	0x20000080

080006c8 <Task_100ms_Entry>:

void Task_100ms_Entry(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 100ms message\n");
 80006cc:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <Task_100ms_Entry+0x1c>)
 80006ce:	f000 f8a7 	bl	8000820 <DEBUG_PRINTF>
	RESET_100MS_TASK;
 80006d2:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <Task_100ms_Entry+0x20>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f023 0310 	bic.w	r3, r3, #16
 80006da:	4a03      	ldr	r2, [pc, #12]	@ (80006e8 <Task_100ms_Entry+0x20>)
 80006dc:	6013      	str	r3, [r2, #0]
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	08005148 	.word	0x08005148
 80006e8:	20000080 	.word	0x20000080

080006ec <Task_500ms_Entry>:

void Task_500ms_Entry(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 500ms message\n");
 80006f0:	4805      	ldr	r0, [pc, #20]	@ (8000708 <Task_500ms_Entry+0x1c>)
 80006f2:	f000 f895 	bl	8000820 <DEBUG_PRINTF>
	RESET_500MS_TASK;
 80006f6:	4b05      	ldr	r3, [pc, #20]	@ (800070c <Task_500ms_Entry+0x20>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f023 0320 	bic.w	r3, r3, #32
 80006fe:	4a03      	ldr	r2, [pc, #12]	@ (800070c <Task_500ms_Entry+0x20>)
 8000700:	6013      	str	r3, [r2, #0]
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	0800516c 	.word	0x0800516c
 800070c:	20000080 	.word	0x20000080

08000710 <Task_1000ms_Entry>:

void Task_1000ms_Entry(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 1000ms message\n");
 8000714:	4806      	ldr	r0, [pc, #24]	@ (8000730 <Task_1000ms_Entry+0x20>)
 8000716:	f000 f883 	bl	8000820 <DEBUG_PRINTF>
	Led_task();
 800071a:	f7ff ff87 	bl	800062c <Led_task>
	RESET_1000MS_TASK;
 800071e:	4b05      	ldr	r3, [pc, #20]	@ (8000734 <Task_1000ms_Entry+0x24>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000726:	4a03      	ldr	r2, [pc, #12]	@ (8000734 <Task_1000ms_Entry+0x24>)
 8000728:	6013      	str	r3, [r2, #0]
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	08005190 	.word	0x08005190
 8000734:	20000080 	.word	0x20000080

08000738 <OS_Init>:

void OS_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	Msg_Init();
 800073c:	f000 f854 	bl	80007e8 <Msg_Init>
	HAL_TIM_Base_Start_IT(PRINT_TIMER);
 8000740:	4806      	ldr	r0, [pc, #24]	@ (800075c <OS_Init+0x24>)
 8000742:	f002 f99d 	bl	8002a80 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(GLOBAL_TIMER);
 8000746:	4806      	ldr	r0, [pc, #24]	@ (8000760 <OS_Init+0x28>)
 8000748:	f002 f99a 	bl	8002a80 <HAL_TIM_Base_Start_IT>
	HAL_UARTEx_ReceiveToIdle_DMA(RECEIVE_COMPORT, RxMsg, RX_MESSAGE_LEN);
 800074c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000750:	4904      	ldr	r1, [pc, #16]	@ (8000764 <OS_Init+0x2c>)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <OS_Init+0x30>)
 8000754:	f002 fe7a 	bl	800344c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200008e0 	.word	0x200008e0
 8000760:	20000928 	.word	0x20000928
 8000764:	20000184 	.word	0x20000184
 8000768:	20000970 	.word	0x20000970

0800076c <Start_OS>:

void Start_OS(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	while(1)
	{
		if(GET_1MS_TASK)
 8000770:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <Start_OS+0x78>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	2b01      	cmp	r3, #1
 800077a:	d101      	bne.n	8000780 <Start_OS+0x14>
		{
			Task_1ms_Entry();
 800077c:	f7ff ff5c 	bl	8000638 <Task_1ms_Entry>
		}
		if(GET_5MS_TASK)
 8000780:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <Start_OS+0x78>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f003 0302 	and.w	r3, r3, #2
 8000788:	2b02      	cmp	r3, #2
 800078a:	d101      	bne.n	8000790 <Start_OS+0x24>
		{
			Task_5ms_Entry();
 800078c:	f7ff ff66 	bl	800065c <Task_5ms_Entry>
		}
		if(GET_10MS_TASK)
 8000790:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <Start_OS+0x78>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	2b04      	cmp	r3, #4
 800079a:	d101      	bne.n	80007a0 <Start_OS+0x34>
		{
			Task_10ms_Entry();
 800079c:	f7ff ff70 	bl	8000680 <Task_10ms_Entry>
		}
		if(GET_50MS_TASK)
 80007a0:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <Start_OS+0x78>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f003 0308 	and.w	r3, r3, #8
 80007a8:	2b08      	cmp	r3, #8
 80007aa:	d101      	bne.n	80007b0 <Start_OS+0x44>
		{
			Task_50ms_Entry();
 80007ac:	f7ff ff7a 	bl	80006a4 <Task_50ms_Entry>
		}
		if(GET_100MS_TASK)
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <Start_OS+0x78>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f003 0310 	and.w	r3, r3, #16
 80007b8:	2b10      	cmp	r3, #16
 80007ba:	d101      	bne.n	80007c0 <Start_OS+0x54>
		{
			Task_100ms_Entry();
 80007bc:	f7ff ff84 	bl	80006c8 <Task_100ms_Entry>
		}
		if(GET_500MS_TASK)
 80007c0:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <Start_OS+0x78>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f003 0320 	and.w	r3, r3, #32
 80007c8:	2b20      	cmp	r3, #32
 80007ca:	d101      	bne.n	80007d0 <Start_OS+0x64>
		{
			Task_500ms_Entry();
 80007cc:	f7ff ff8e 	bl	80006ec <Task_500ms_Entry>
		}
		if(GET_1000MS_TASK)
 80007d0:	4b04      	ldr	r3, [pc, #16]	@ (80007e4 <Start_OS+0x78>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007d8:	2b40      	cmp	r3, #64	@ 0x40
 80007da:	d1c9      	bne.n	8000770 <Start_OS+0x4>
		{
			Task_1000ms_Entry();
 80007dc:	f7ff ff98 	bl	8000710 <Task_1000ms_Entry>
		if(GET_1MS_TASK)
 80007e0:	e7c6      	b.n	8000770 <Start_OS+0x4>
 80007e2:	bf00      	nop
 80007e4:	20000080 	.word	0x20000080

080007e8 <Msg_Init>:
char RxMsg[RX_MESSAGE_LEN];
char msg_log[MSGLOG_LEN];
MsgLog msg;

void Msg_Init(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
	msg.msgptr = msg_log;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <Msg_Init+0x30>)
 80007ee:	4a0b      	ldr	r2, [pc, #44]	@ (800081c <Msg_Init+0x34>)
 80007f0:	601a      	str	r2, [r3, #0]
	msg.msglen = 0;
 80007f2:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <Msg_Init+0x30>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	809a      	strh	r2, [r3, #4]
	msg.msghead = 0;
 80007f8:	4b07      	ldr	r3, [pc, #28]	@ (8000818 <Msg_Init+0x30>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	80da      	strh	r2, [r3, #6]
	msg.msgtail = 0;
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <Msg_Init+0x30>)
 8000800:	2200      	movs	r2, #0
 8000802:	811a      	strh	r2, [r3, #8]
	msg.emptylen = MSGLOG_LEN;
 8000804:	4b04      	ldr	r3, [pc, #16]	@ (8000818 <Msg_Init+0x30>)
 8000806:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 800080a:	815a      	strh	r2, [r3, #10]
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000870 	.word	0x20000870
 800081c:	20000284 	.word	0x20000284

08000820 <DEBUG_PRINTF>:
		msg.msglen = 0;
		msg.emptylen = MSGLOG_LEN;
	}
}

uint32_t DEBUG_PRINTF(const char *format, ...) {
 8000820:	b40f      	push	{r0, r1, r2, r3}
 8000822:	b580      	push	{r7, lr}
 8000824:	b086      	sub	sp, #24
 8000826:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, format);
 8000828:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800082c:	603b      	str	r3, [r7, #0]

    uint8_t ret = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	74fb      	strb	r3, [r7, #19]
    uint32_t tsLen = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
    uint32_t msgLen = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
    uint32_t totalLen = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]

    uint32_t currentTime = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]

    currentTime = HAL_GetTick();
 8000842:	f000 fd0d 	bl	8001260 <HAL_GetTick>
 8000846:	6078      	str	r0, [r7, #4]
	tsLen = snprintf(TxMsg, sizeof(TxMsg), "%010u", currentTime);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a18      	ldr	r2, [pc, #96]	@ (80008ac <DEBUG_PRINTF+0x8c>)
 800084c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000850:	4817      	ldr	r0, [pc, #92]	@ (80008b0 <DEBUG_PRINTF+0x90>)
 8000852:	f003 ff37 	bl	80046c4 <sniprintf>
 8000856:	4603      	mov	r3, r0
 8000858:	60fb      	str	r3, [r7, #12]
	msgLen = vsnprintf(TxMsg+tsLen, sizeof(TxMsg), format, args);
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	4a14      	ldr	r2, [pc, #80]	@ (80008b0 <DEBUG_PRINTF+0x90>)
 800085e:	1898      	adds	r0, r3, r2
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	6a3a      	ldr	r2, [r7, #32]
 8000864:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000868:	f003 ff8c 	bl	8004784 <vsniprintf>
 800086c:	4603      	mov	r3, r0
 800086e:	60bb      	str	r3, [r7, #8]
	totalLen = tsLen + msgLen;
 8000870:	68fa      	ldr	r2, [r7, #12]
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	4413      	add	r3, r2
 8000876:	617b      	str	r3, [r7, #20]

    va_end(args);

    if (totalLen == sizeof(TxMsg))
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800087e:	d101      	bne.n	8000884 <DEBUG_PRINTF+0x64>
    {
    	totalLen = sizeof(TxMsg) - 1;
 8000880:	23ff      	movs	r3, #255	@ 0xff
 8000882:	617b      	str	r3, [r7, #20]
    }
#if (MSG_PRINT_METHOD == PRINT_IMM)
#if (TRANSMIT_METHOD == POLLING)
    ret = HAL_UART_Transmit(TRANSMIT_COMPORT, (const uint8_t *)TxMsg, totalLen, TRANSMIT_TIMEOUT);
#elif (TRANSMIT_METHOD == DMA)
    ret = HAL_UART_Transmit_DMA(TRANSMIT_COMPORT, (const uint8_t *)TxMsg, totalLen);
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	b29b      	uxth	r3, r3
 8000888:	461a      	mov	r2, r3
 800088a:	4909      	ldr	r1, [pc, #36]	@ (80008b0 <DEBUG_PRINTF+0x90>)
 800088c:	4809      	ldr	r0, [pc, #36]	@ (80008b4 <DEBUG_PRINTF+0x94>)
 800088e:	f002 fd6d 	bl	800336c <HAL_UART_Transmit_DMA>
 8000892:	4603      	mov	r3, r0
 8000894:	74fb      	strb	r3, [r7, #19]
    ret = HAL_UART_Transmit_IT(TRANSMIT_COMPORT, (const uint8_t *)TxMsg, totalLen);
#endif
#elif (MSG_PRINT_METHOD == PRINT_TASK)
    Msg_Copy(TxMsg, totalLen);
#endif
    return ((totalLen<< 2) | ret);
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	009a      	lsls	r2, r3, #2
 800089a:	7cfb      	ldrb	r3, [r7, #19]
 800089c:	4313      	orrs	r3, r2
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr
 80008ac:	080051b8 	.word	0x080051b8
 80008b0:	20000084 	.word	0x20000084
 80008b4:	20000970 	.word	0x20000970

080008b8 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	807b      	strh	r3, [r7, #2]
	if(RECEIVE_COMPORT == huart)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a0d      	ldr	r2, [pc, #52]	@ (80008fc <HAL_UARTEx_RxEventCallback+0x44>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d113      	bne.n	80008f4 <HAL_UARTEx_RxEventCallback+0x3c>
	{
		HAL_UART_Transmit_DMA(TRANSMIT_COMPORT, (const uint8_t *)RxMsg, Size);
 80008cc:	887b      	ldrh	r3, [r7, #2]
 80008ce:	461a      	mov	r2, r3
 80008d0:	490b      	ldr	r1, [pc, #44]	@ (8000900 <HAL_UARTEx_RxEventCallback+0x48>)
 80008d2:	480a      	ldr	r0, [pc, #40]	@ (80008fc <HAL_UARTEx_RxEventCallback+0x44>)
 80008d4:	f002 fd4a 	bl	800336c <HAL_UART_Transmit_DMA>
		HAL_UARTEx_ReceiveToIdle_DMA(RECEIVE_COMPORT, RxMsg, RX_MESSAGE_LEN);
 80008d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008dc:	4908      	ldr	r1, [pc, #32]	@ (8000900 <HAL_UARTEx_RxEventCallback+0x48>)
 80008de:	4807      	ldr	r0, [pc, #28]	@ (80008fc <HAL_UARTEx_RxEventCallback+0x44>)
 80008e0:	f002 fdb4 	bl	800344c <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(RECEIVE_DMA, DMA_IT_HT);
 80008e4:	4b07      	ldr	r3, [pc, #28]	@ (8000904 <HAL_UARTEx_RxEventCallback+0x4c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <HAL_UARTEx_RxEventCallback+0x4c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f022 0208 	bic.w	r2, r2, #8
 80008f2:	601a      	str	r2, [r3, #0]
	}
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000970 	.word	0x20000970
 8000900:	20000184 	.word	0x20000184
 8000904:	200009b8 	.word	0x200009b8

08000908 <HAL_UART_TxCpltCallback>:
 */
#include "usart_bsp.h"
#include "usart.h"

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b2c      	ldr	r3, [pc, #176]	@ (80009ec <MX_DMA_Init+0xbc>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a2b      	ldr	r2, [pc, #172]	@ (80009ec <MX_DMA_Init+0xbc>)
 8000940:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b29      	ldr	r3, [pc, #164]	@ (80009ec <MX_DMA_Init+0xbc>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000952:	4b27      	ldr	r3, [pc, #156]	@ (80009f0 <MX_DMA_Init+0xc0>)
 8000954:	4a27      	ldr	r2, [pc, #156]	@ (80009f4 <MX_DMA_Init+0xc4>)
 8000956:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000958:	4b25      	ldr	r3, [pc, #148]	@ (80009f0 <MX_DMA_Init+0xc0>)
 800095a:	2200      	movs	r2, #0
 800095c:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800095e:	4b24      	ldr	r3, [pc, #144]	@ (80009f0 <MX_DMA_Init+0xc0>)
 8000960:	2280      	movs	r2, #128	@ 0x80
 8000962:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000964:	4b22      	ldr	r3, [pc, #136]	@ (80009f0 <MX_DMA_Init+0xc0>)
 8000966:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800096a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800096c:	4b20      	ldr	r3, [pc, #128]	@ (80009f0 <MX_DMA_Init+0xc0>)
 800096e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000972:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000974:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <MX_DMA_Init+0xc0>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800097a:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <MX_DMA_Init+0xc0>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000980:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <MX_DMA_Init+0xc0>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000986:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <MX_DMA_Init+0xc0>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800098c:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <MX_DMA_Init+0xc0>)
 800098e:	2204      	movs	r2, #4
 8000990:	625a      	str	r2, [r3, #36]	@ 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000992:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <MX_DMA_Init+0xc0>)
 8000994:	2203      	movs	r2, #3
 8000996:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000998:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <MX_DMA_Init+0xc0>)
 800099a:	2200      	movs	r2, #0
 800099c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800099e:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_DMA_Init+0xc0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80009a4:	4812      	ldr	r0, [pc, #72]	@ (80009f0 <MX_DMA_Init+0xc0>)
 80009a6:	f000 fd79 	bl	800149c <HAL_DMA_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_DMA_Init+0x84>
  {
    Error_Handler();
 80009b0:	f000 f912 	bl	8000bd8 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 13, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	210d      	movs	r1, #13
 80009b8:	2038      	movs	r0, #56	@ 0x38
 80009ba:	f000 fd38 	bl	800142e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009be:	2038      	movs	r0, #56	@ 0x38
 80009c0:	f000 fd51 	bl	8001466 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 15, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	210f      	movs	r1, #15
 80009c8:	203a      	movs	r0, #58	@ 0x3a
 80009ca:	f000 fd30 	bl	800142e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80009ce:	203a      	movs	r0, #58	@ 0x3a
 80009d0:	f000 fd49 	bl	8001466 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 15, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	210f      	movs	r1, #15
 80009d8:	2046      	movs	r0, #70	@ 0x46
 80009da:	f000 fd28 	bl	800142e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80009de:	2046      	movs	r0, #70	@ 0x46
 80009e0:	f000 fd41 	bl	8001466 <HAL_NVIC_EnableIRQ>

}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	2000087c 	.word	0x2000087c
 80009f4:	40026410 	.word	0x40026410

080009f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac0 <MX_GPIO_Init+0xc8>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a2a      	ldr	r2, [pc, #168]	@ (8000ac0 <MX_GPIO_Init+0xc8>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b28      	ldr	r3, [pc, #160]	@ (8000ac0 <MX_GPIO_Init+0xc8>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b24      	ldr	r3, [pc, #144]	@ (8000ac0 <MX_GPIO_Init+0xc8>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a23      	ldr	r2, [pc, #140]	@ (8000ac0 <MX_GPIO_Init+0xc8>)
 8000a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ac0 <MX_GPIO_Init+0xc8>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac0 <MX_GPIO_Init+0xc8>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac0 <MX_GPIO_Init+0xc8>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <MX_GPIO_Init+0xc8>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8000a68:	4816      	ldr	r0, [pc, #88]	@ (8000ac4 <MX_GPIO_Init+0xcc>)
 8000a6a:	f001 fac5 	bl	8001ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KEY2_Pin */
  GPIO_InitStruct.Pin = KEY2_Pin;
 8000a6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a74:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4619      	mov	r1, r3
 8000a84:	4810      	ldr	r0, [pc, #64]	@ (8000ac8 <MX_GPIO_Init+0xd0>)
 8000a86:	f001 f90b 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 8000a8a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4808      	ldr	r0, [pc, #32]	@ (8000ac4 <MX_GPIO_Init+0xcc>)
 8000aa4:	f001 f8fc 	bl	8001ca0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 14, 0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	210e      	movs	r1, #14
 8000aac:	2028      	movs	r0, #40	@ 0x28
 8000aae:	f000 fcbe 	bl	800142e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ab2:	2028      	movs	r0, #40	@ 0x28
 8000ab4:	f000 fcd7 	bl	8001466 <HAL_NVIC_EnableIRQ>

}
 8000ab8:	bf00      	nop
 8000aba:	3720      	adds	r7, #32
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40021c00 	.word	0x40021c00
 8000ac8:	40020800 	.word	0x40020800

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad0:	f000 fb60 	bl	8001194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad4:	f000 f810 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad8:	f7ff ff8e 	bl	80009f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000adc:	f7ff ff28 	bl	8000930 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000ae0:	f000 fa46 	bl	8000f70 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000ae4:	f000 f9b0 	bl	8000e48 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000ae8:	f000 f960 	bl	8000dac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  OS_Init();
 8000aec:	f7ff fe24 	bl	8000738 <OS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Start_OS();
 8000af0:	f7ff fe3c 	bl	800076c <Start_OS>
 8000af4:	e7fc      	b.n	8000af0 <main+0x24>
	...

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	@ 0x50
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	2230      	movs	r2, #48	@ 0x30
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f003 fe4a 	bl	80047a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd0 <SystemClock_Config+0xd8>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	4a2a      	ldr	r2, [pc, #168]	@ (8000bd0 <SystemClock_Config+0xd8>)
 8000b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2c:	4b28      	ldr	r3, [pc, #160]	@ (8000bd0 <SystemClock_Config+0xd8>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	4b25      	ldr	r3, [pc, #148]	@ (8000bd4 <SystemClock_Config+0xdc>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a24      	ldr	r2, [pc, #144]	@ (8000bd4 <SystemClock_Config+0xdc>)
 8000b42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b22      	ldr	r3, [pc, #136]	@ (8000bd4 <SystemClock_Config+0xdc>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b54:	2302      	movs	r3, #2
 8000b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5c:	2310      	movs	r3, #16
 8000b5e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b60:	2302      	movs	r3, #2
 8000b62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b64:	2300      	movs	r3, #0
 8000b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000b6c:	23b4      	movs	r3, #180	@ 0xb4
 8000b6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b74:	2304      	movs	r3, #4
 8000b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b78:	f107 0320 	add.w	r3, r7, #32
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f001 fad7 	bl	8002130 <HAL_RCC_OscConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b88:	f000 f826 	bl	8000bd8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b8c:	f001 fa80 	bl	8002090 <HAL_PWREx_EnableOverDrive>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b96:	f000 f81f 	bl	8000bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b9a:	230f      	movs	r3, #15
 8000b9c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ba6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000baa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	2105      	movs	r1, #5
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 fd31 	bl	8002620 <HAL_RCC_ClockConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000bc4:	f000 f808 	bl	8000bd8 <Error_Handler>
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3750      	adds	r7, #80	@ 0x50
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40007000 	.word	0x40007000

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <Error_Handler+0x8>

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000bf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	4a08      	ldr	r2, [pc, #32]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <NMI_Handler+0x4>

08000c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8a:	f000 fad5 	bl	8001238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <TIM3_IRQHandler+0x10>)
 8000c9a:	f001 ff61 	bl	8002b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200008e0 	.word	0x200008e0

08000ca8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000cac:	4802      	ldr	r0, [pc, #8]	@ (8000cb8 <TIM4_IRQHandler+0x10>)
 8000cae:	f001 ff57 	bl	8002b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000928 	.word	0x20000928

08000cbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cc0:	4802      	ldr	r0, [pc, #8]	@ (8000ccc <USART1_IRQHandler+0x10>)
 8000cc2:	f002 fc21 	bl	8003508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000970 	.word	0x20000970

08000cd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY2_Pin);
 8000cd4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cd8:	f001 f9c2 	bl	8002060 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8000ce4:	4802      	ldr	r0, [pc, #8]	@ (8000cf0 <DMA2_Stream0_IRQHandler+0x10>)
 8000ce6:	f000 fd71 	bl	80017cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000087c 	.word	0x2000087c

08000cf4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000cf8:	4802      	ldr	r0, [pc, #8]	@ (8000d04 <DMA2_Stream2_IRQHandler+0x10>)
 8000cfa:	f000 fd67 	bl	80017cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200009b8 	.word	0x200009b8

08000d08 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000d0c:	4802      	ldr	r0, [pc, #8]	@ (8000d18 <DMA2_Stream7_IRQHandler+0x10>)
 8000d0e:	f000 fd5d 	bl	80017cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000a18 	.word	0x20000a18

08000d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d24:	4a14      	ldr	r2, [pc, #80]	@ (8000d78 <_sbrk+0x5c>)
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <_sbrk+0x60>)
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d30:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d38:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <_sbrk+0x64>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	@ (8000d84 <_sbrk+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3e:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d207      	bcs.n	8000d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d4c:	f003 fd30 	bl	80047b0 <__errno>
 8000d50:	4603      	mov	r3, r0
 8000d52:	220c      	movs	r2, #12
 8000d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	e009      	b.n	8000d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d62:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a05      	ldr	r2, [pc, #20]	@ (8000d80 <_sbrk+0x64>)
 8000d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20030000 	.word	0x20030000
 8000d7c:	00000400 	.word	0x00000400
 8000d80:	200008dc 	.word	0x200008dc
 8000d84:	20000bc8 	.word	0x20000bc8

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	@ (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db2:	f107 0308 	add.w	r3, r7, #8
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <MX_TIM3_Init+0x94>)
 8000dca:	4a1e      	ldr	r2, [pc, #120]	@ (8000e44 <MX_TIM3_Init+0x98>)
 8000dcc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9000-1;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	@ (8000e40 <MX_TIM3_Init+0x94>)
 8000dd0:	f242 3227 	movw	r2, #8999	@ 0x2327
 8000dd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <MX_TIM3_Init+0x94>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000ddc:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <MX_TIM3_Init+0x94>)
 8000dde:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000de2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de4:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <MX_TIM3_Init+0x94>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <MX_TIM3_Init+0x94>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000df0:	4813      	ldr	r0, [pc, #76]	@ (8000e40 <MX_TIM3_Init+0x94>)
 8000df2:	f001 fdf5 	bl	80029e0 <HAL_TIM_Base_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000dfc:	f7ff feec 	bl	8000bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480c      	ldr	r0, [pc, #48]	@ (8000e40 <MX_TIM3_Init+0x94>)
 8000e0e:	f001 ff97 	bl	8002d40 <HAL_TIM_ConfigClockSource>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e18:	f7ff fede 	bl	8000bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <MX_TIM3_Init+0x94>)
 8000e2a:	f002 f9bf 	bl	80031ac <HAL_TIMEx_MasterConfigSynchronization>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e34:	f7ff fed0 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200008e0 	.word	0x200008e0
 8000e44:	40000400 	.word	0x40000400

08000e48 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e64:	4b1d      	ldr	r3, [pc, #116]	@ (8000edc <MX_TIM4_Init+0x94>)
 8000e66:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee0 <MX_TIM4_Init+0x98>)
 8000e68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 900-1;
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000edc <MX_TIM4_Init+0x94>)
 8000e6c:	f240 3283 	movw	r2, #899	@ 0x383
 8000e70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e72:	4b1a      	ldr	r3, [pc, #104]	@ (8000edc <MX_TIM4_Init+0x94>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000e78:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <MX_TIM4_Init+0x94>)
 8000e7a:	2263      	movs	r2, #99	@ 0x63
 8000e7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7e:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <MX_TIM4_Init+0x94>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e84:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <MX_TIM4_Init+0x94>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e8a:	4814      	ldr	r0, [pc, #80]	@ (8000edc <MX_TIM4_Init+0x94>)
 8000e8c:	f001 fda8 	bl	80029e0 <HAL_TIM_Base_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000e96:	f7ff fe9f 	bl	8000bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480d      	ldr	r0, [pc, #52]	@ (8000edc <MX_TIM4_Init+0x94>)
 8000ea8:	f001 ff4a 	bl	8002d40 <HAL_TIM_ConfigClockSource>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000eb2:	f7ff fe91 	bl	8000bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4806      	ldr	r0, [pc, #24]	@ (8000edc <MX_TIM4_Init+0x94>)
 8000ec4:	f002 f972 	bl	80031ac <HAL_TIMEx_MasterConfigSynchronization>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000ece:	f7ff fe83 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000928 	.word	0x20000928
 8000ee0:	40000800 	.word	0x40000800

08000ee4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8000f64 <HAL_TIM_Base_MspInit+0x80>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d116      	bne.n	8000f24 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b1b      	ldr	r3, [pc, #108]	@ (8000f68 <HAL_TIM_Base_MspInit+0x84>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	4a1a      	ldr	r2, [pc, #104]	@ (8000f68 <HAL_TIM_Base_MspInit+0x84>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f06:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <HAL_TIM_Base_MspInit+0x84>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2101      	movs	r1, #1
 8000f16:	201d      	movs	r0, #29
 8000f18:	f000 fa89 	bl	800142e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f1c:	201d      	movs	r0, #29
 8000f1e:	f000 faa2 	bl	8001466 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000f22:	e01a      	b.n	8000f5a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a10      	ldr	r2, [pc, #64]	@ (8000f6c <HAL_TIM_Base_MspInit+0x88>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d115      	bne.n	8000f5a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	4b0d      	ldr	r3, [pc, #52]	@ (8000f68 <HAL_TIM_Base_MspInit+0x84>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	4a0c      	ldr	r2, [pc, #48]	@ (8000f68 <HAL_TIM_Base_MspInit+0x84>)
 8000f38:	f043 0304 	orr.w	r3, r3, #4
 8000f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <HAL_TIM_Base_MspInit+0x84>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2105      	movs	r1, #5
 8000f4e:	201e      	movs	r0, #30
 8000f50:	f000 fa6d 	bl	800142e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f54:	201e      	movs	r0, #30
 8000f56:	f000 fa86 	bl	8001466 <HAL_NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40000400 	.word	0x40000400
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40000800 	.word	0x40000800

08000f70 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <MX_USART1_UART_Init+0x4c>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	@ (8000fc0 <MX_USART1_UART_Init+0x50>)
 8000f78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <MX_USART1_UART_Init+0x4c>)
 8000f7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <MX_USART1_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <MX_USART1_UART_Init+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <MX_USART1_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f94:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <MX_USART1_UART_Init+0x4c>)
 8000f96:	220c      	movs	r2, #12
 8000f98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <MX_USART1_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <MX_USART1_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <MX_USART1_UART_Init+0x4c>)
 8000fa8:	f002 f990 	bl	80032cc <HAL_UART_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fb2:	f7ff fe11 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000970 	.word	0x20000970
 8000fc0:	40011000 	.word	0x40011000

08000fc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	@ 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a50      	ldr	r2, [pc, #320]	@ (8001124 <HAL_UART_MspInit+0x160>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	f040 809a 	bne.w	800111c <HAL_UART_MspInit+0x158>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	4b4e      	ldr	r3, [pc, #312]	@ (8001128 <HAL_UART_MspInit+0x164>)
 8000fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff0:	4a4d      	ldr	r2, [pc, #308]	@ (8001128 <HAL_UART_MspInit+0x164>)
 8000ff2:	f043 0310 	orr.w	r3, r3, #16
 8000ff6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ff8:	4b4b      	ldr	r3, [pc, #300]	@ (8001128 <HAL_UART_MspInit+0x164>)
 8000ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffc:	f003 0310 	and.w	r3, r3, #16
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	4b47      	ldr	r3, [pc, #284]	@ (8001128 <HAL_UART_MspInit+0x164>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100c:	4a46      	ldr	r2, [pc, #280]	@ (8001128 <HAL_UART_MspInit+0x164>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6313      	str	r3, [r2, #48]	@ 0x30
 8001014:	4b44      	ldr	r3, [pc, #272]	@ (8001128 <HAL_UART_MspInit+0x164>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USBUART_TX_Pin|USBUART_RX_Pin;
 8001020:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001032:	2307      	movs	r3, #7
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	483b      	ldr	r0, [pc, #236]	@ (800112c <HAL_UART_MspInit+0x168>)
 800103e:	f000 fe2f 	bl	8001ca0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001042:	4b3b      	ldr	r3, [pc, #236]	@ (8001130 <HAL_UART_MspInit+0x16c>)
 8001044:	4a3b      	ldr	r2, [pc, #236]	@ (8001134 <HAL_UART_MspInit+0x170>)
 8001046:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001048:	4b39      	ldr	r3, [pc, #228]	@ (8001130 <HAL_UART_MspInit+0x16c>)
 800104a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800104e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001050:	4b37      	ldr	r3, [pc, #220]	@ (8001130 <HAL_UART_MspInit+0x16c>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001056:	4b36      	ldr	r3, [pc, #216]	@ (8001130 <HAL_UART_MspInit+0x16c>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800105c:	4b34      	ldr	r3, [pc, #208]	@ (8001130 <HAL_UART_MspInit+0x16c>)
 800105e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001062:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001064:	4b32      	ldr	r3, [pc, #200]	@ (8001130 <HAL_UART_MspInit+0x16c>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800106a:	4b31      	ldr	r3, [pc, #196]	@ (8001130 <HAL_UART_MspInit+0x16c>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001070:	4b2f      	ldr	r3, [pc, #188]	@ (8001130 <HAL_UART_MspInit+0x16c>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001076:	4b2e      	ldr	r3, [pc, #184]	@ (8001130 <HAL_UART_MspInit+0x16c>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800107c:	4b2c      	ldr	r3, [pc, #176]	@ (8001130 <HAL_UART_MspInit+0x16c>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001082:	482b      	ldr	r0, [pc, #172]	@ (8001130 <HAL_UART_MspInit+0x16c>)
 8001084:	f000 fa0a 	bl	800149c <HAL_DMA_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800108e:	f7ff fda3 	bl	8000bd8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a26      	ldr	r2, [pc, #152]	@ (8001130 <HAL_UART_MspInit+0x16c>)
 8001096:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001098:	4a25      	ldr	r2, [pc, #148]	@ (8001130 <HAL_UART_MspInit+0x16c>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800109e:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <HAL_UART_MspInit+0x174>)
 80010a0:	4a26      	ldr	r2, [pc, #152]	@ (800113c <HAL_UART_MspInit+0x178>)
 80010a2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80010a4:	4b24      	ldr	r3, [pc, #144]	@ (8001138 <HAL_UART_MspInit+0x174>)
 80010a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010aa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010ac:	4b22      	ldr	r3, [pc, #136]	@ (8001138 <HAL_UART_MspInit+0x174>)
 80010ae:	2240      	movs	r2, #64	@ 0x40
 80010b0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b2:	4b21      	ldr	r3, [pc, #132]	@ (8001138 <HAL_UART_MspInit+0x174>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001138 <HAL_UART_MspInit+0x174>)
 80010ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010be:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <HAL_UART_MspInit+0x174>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001138 <HAL_UART_MspInit+0x174>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001138 <HAL_UART_MspInit+0x174>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010d2:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <HAL_UART_MspInit+0x174>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80010d8:	4b17      	ldr	r3, [pc, #92]	@ (8001138 <HAL_UART_MspInit+0x174>)
 80010da:	2204      	movs	r2, #4
 80010dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80010de:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <HAL_UART_MspInit+0x174>)
 80010e0:	2203      	movs	r2, #3
 80010e2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80010e4:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <HAL_UART_MspInit+0x174>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80010ea:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <HAL_UART_MspInit+0x174>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80010f0:	4811      	ldr	r0, [pc, #68]	@ (8001138 <HAL_UART_MspInit+0x174>)
 80010f2:	f000 f9d3 	bl	800149c <HAL_DMA_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 80010fc:	f7ff fd6c 	bl	8000bd8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a0d      	ldr	r2, [pc, #52]	@ (8001138 <HAL_UART_MspInit+0x174>)
 8001104:	639a      	str	r2, [r3, #56]	@ 0x38
 8001106:	4a0c      	ldr	r2, [pc, #48]	@ (8001138 <HAL_UART_MspInit+0x174>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	210e      	movs	r1, #14
 8001110:	2025      	movs	r0, #37	@ 0x25
 8001112:	f000 f98c 	bl	800142e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001116:	2025      	movs	r0, #37	@ 0x25
 8001118:	f000 f9a5 	bl	8001466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	@ 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40011000 	.word	0x40011000
 8001128:	40023800 	.word	0x40023800
 800112c:	40020000 	.word	0x40020000
 8001130:	200009b8 	.word	0x200009b8
 8001134:	40026440 	.word	0x40026440
 8001138:	20000a18 	.word	0x20000a18
 800113c:	400264b8 	.word	0x400264b8

08001140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001140:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001178 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001144:	f7ff fe20 	bl	8000d88 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001148:	480c      	ldr	r0, [pc, #48]	@ (800117c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800114a:	490d      	ldr	r1, [pc, #52]	@ (8001180 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800114c:	4a0d      	ldr	r2, [pc, #52]	@ (8001184 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001150:	e002      	b.n	8001158 <LoopCopyDataInit>

08001152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001156:	3304      	adds	r3, #4

08001158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800115c:	d3f9      	bcc.n	8001152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115e:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001160:	4c0a      	ldr	r4, [pc, #40]	@ (800118c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001164:	e001      	b.n	800116a <LoopFillZerobss>

08001166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001168:	3204      	adds	r2, #4

0800116a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800116c:	d3fb      	bcc.n	8001166 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800116e:	f003 fb25 	bl	80047bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001172:	f7ff fcab 	bl	8000acc <main>
  bx  lr    
 8001176:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001178:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001180:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001184:	08005224 	.word	0x08005224
  ldr r2, =_sbss
 8001188:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800118c:	20000bc4 	.word	0x20000bc4

08001190 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC_IRQHandler>
	...

08001194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001198:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0d      	ldr	r2, [pc, #52]	@ (80011d4 <HAL_Init+0x40>)
 800119e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <HAL_Init+0x40>)
 80011aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b0:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a07      	ldr	r2, [pc, #28]	@ (80011d4 <HAL_Init+0x40>)
 80011b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011bc:	2003      	movs	r0, #3
 80011be:	f000 f92b 	bl	8001418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c2:	200f      	movs	r0, #15
 80011c4:	f000 f808 	bl	80011d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c8:	f7ff fd0c 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023c00 	.word	0x40023c00

080011d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <HAL_InitTick+0x54>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <HAL_InitTick+0x58>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f943 	bl	8001482 <HAL_SYSTICK_Config>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e00e      	b.n	8001224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d80a      	bhi.n	8001222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120c:	2200      	movs	r2, #0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f000 f90b 	bl	800142e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001218:	4a06      	ldr	r2, [pc, #24]	@ (8001234 <HAL_InitTick+0x5c>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000000 	.word	0x20000000
 8001230:	20000008 	.word	0x20000008
 8001234:	20000004 	.word	0x20000004

08001238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800123c:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <HAL_IncTick+0x20>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_IncTick+0x24>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a04      	ldr	r2, [pc, #16]	@ (800125c <HAL_IncTick+0x24>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000008 	.word	0x20000008
 800125c:	20000a78 	.word	0x20000a78

08001260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b03      	ldr	r3, [pc, #12]	@ (8001274 <HAL_GetTick+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000a78 	.word	0x20000a78

08001278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012aa:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	60d3      	str	r3, [r2, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	db0b      	blt.n	8001306 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	f003 021f 	and.w	r2, r3, #31
 80012f4:	4907      	ldr	r1, [pc, #28]	@ (8001314 <__NVIC_EnableIRQ+0x38>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	2001      	movs	r0, #1
 80012fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000e100 	.word	0xe000e100

08001318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	db0a      	blt.n	8001342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	490c      	ldr	r1, [pc, #48]	@ (8001364 <__NVIC_SetPriority+0x4c>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	0112      	lsls	r2, r2, #4
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	440b      	add	r3, r1
 800133c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001340:	e00a      	b.n	8001358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4908      	ldr	r1, [pc, #32]	@ (8001368 <__NVIC_SetPriority+0x50>)
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	3b04      	subs	r3, #4
 8001350:	0112      	lsls	r2, r2, #4
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	440b      	add	r3, r1
 8001356:	761a      	strb	r2, [r3, #24]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000e100 	.word	0xe000e100
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	@ 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f1c3 0307 	rsb	r3, r3, #7
 8001386:	2b04      	cmp	r3, #4
 8001388:	bf28      	it	cs
 800138a:	2304      	movcs	r3, #4
 800138c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3304      	adds	r3, #4
 8001392:	2b06      	cmp	r3, #6
 8001394:	d902      	bls.n	800139c <NVIC_EncodePriority+0x30>
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3b03      	subs	r3, #3
 800139a:	e000      	b.n	800139e <NVIC_EncodePriority+0x32>
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	f04f 32ff 	mov.w	r2, #4294967295
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	401a      	ands	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b4:	f04f 31ff 	mov.w	r1, #4294967295
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	43d9      	mvns	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	4313      	orrs	r3, r2
         );
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3724      	adds	r7, #36	@ 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013e4:	d301      	bcc.n	80013ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00f      	b.n	800140a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <SysTick_Config+0x40>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f2:	210f      	movs	r1, #15
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f7ff ff8e 	bl	8001318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013fc:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <SysTick_Config+0x40>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001402:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <SysTick_Config+0x40>)
 8001404:	2207      	movs	r2, #7
 8001406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	e000e010 	.word	0xe000e010

08001418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff29 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001440:	f7ff ff3e 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 8001444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	6978      	ldr	r0, [r7, #20]
 800144c:	f7ff ff8e 	bl	800136c <NVIC_EncodePriority>
 8001450:	4602      	mov	r2, r0
 8001452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff5d 	bl	8001318 <__NVIC_SetPriority>
}
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff31 	bl	80012dc <__NVIC_EnableIRQ>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ffa2 	bl	80013d4 <SysTick_Config>
 8001490:	4603      	mov	r3, r0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff feda 	bl	8001260 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e099      	b.n	80015ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2202      	movs	r2, #2
 80014bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014d8:	e00f      	b.n	80014fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014da:	f7ff fec1 	bl	8001260 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b05      	cmp	r3, #5
 80014e6:	d908      	bls.n	80014fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2220      	movs	r2, #32
 80014ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2203      	movs	r2, #3
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e078      	b.n	80015ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1e8      	bne.n	80014da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	4b38      	ldr	r3, [pc, #224]	@ (80015f4 <HAL_DMA_Init+0x158>)
 8001514:	4013      	ands	r3, r2
 8001516:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001526:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800153e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	4313      	orrs	r3, r2
 800154a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001550:	2b04      	cmp	r3, #4
 8001552:	d107      	bne.n	8001564 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155c:	4313      	orrs	r3, r2
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	4313      	orrs	r3, r2
 8001562:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f023 0307 	bic.w	r3, r3, #7
 800157a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	4313      	orrs	r3, r2
 8001584:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158a:	2b04      	cmp	r3, #4
 800158c:	d117      	bne.n	80015be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4313      	orrs	r3, r2
 8001596:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00e      	beq.n	80015be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fb01 	bl	8001ba8 <DMA_CheckFifoParam>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d008      	beq.n	80015be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2240      	movs	r2, #64	@ 0x40
 80015b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80015ba:	2301      	movs	r3, #1
 80015bc:	e016      	b.n	80015ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fab8 	bl	8001b3c <DMA_CalcBaseAndBitshift>
 80015cc:	4603      	mov	r3, r0
 80015ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d4:	223f      	movs	r2, #63	@ 0x3f
 80015d6:	409a      	lsls	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	f010803f 	.word	0xf010803f

080015f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_DMA_Start_IT+0x26>
 800161a:	2302      	movs	r3, #2
 800161c:	e040      	b.n	80016a0 <HAL_DMA_Start_IT+0xa8>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b01      	cmp	r3, #1
 8001630:	d12f      	bne.n	8001692 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2202      	movs	r2, #2
 8001636:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 fa4a 	bl	8001ae0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001650:	223f      	movs	r2, #63	@ 0x3f
 8001652:	409a      	lsls	r2, r3
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0216 	orr.w	r2, r2, #22
 8001666:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166c:	2b00      	cmp	r3, #0
 800166e:	d007      	beq.n	8001680 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0208 	orr.w	r2, r2, #8
 800167e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0201 	orr.w	r2, r2, #1
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	e005      	b.n	800169e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800169a:	2302      	movs	r3, #2
 800169c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800169e:	7dfb      	ldrb	r3, [r7, #23]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016b6:	f7ff fdd3 	bl	8001260 <HAL_GetTick>
 80016ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d008      	beq.n	80016da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2280      	movs	r2, #128	@ 0x80
 80016cc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e052      	b.n	8001780 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0216 	bic.w	r2, r2, #22
 80016e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d103      	bne.n	800170a <HAL_DMA_Abort+0x62>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001706:	2b00      	cmp	r3, #0
 8001708:	d007      	beq.n	800171a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0208 	bic.w	r2, r2, #8
 8001718:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0201 	bic.w	r2, r2, #1
 8001728:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800172a:	e013      	b.n	8001754 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800172c:	f7ff fd98 	bl	8001260 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b05      	cmp	r3, #5
 8001738:	d90c      	bls.n	8001754 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2220      	movs	r2, #32
 800173e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2203      	movs	r2, #3
 8001744:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e015      	b.n	8001780 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1e4      	bne.n	800172c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001766:	223f      	movs	r2, #63	@ 0x3f
 8001768:	409a      	lsls	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d004      	beq.n	80017a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2280      	movs	r2, #128	@ 0x80
 80017a0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00c      	b.n	80017c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2205      	movs	r2, #5
 80017aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0201 	bic.w	r2, r2, #1
 80017bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017d8:	4b8e      	ldr	r3, [pc, #568]	@ (8001a14 <HAL_DMA_IRQHandler+0x248>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a8e      	ldr	r2, [pc, #568]	@ (8001a18 <HAL_DMA_IRQHandler+0x24c>)
 80017de:	fba2 2303 	umull	r2, r3, r2, r3
 80017e2:	0a9b      	lsrs	r3, r3, #10
 80017e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f6:	2208      	movs	r2, #8
 80017f8:	409a      	lsls	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d01a      	beq.n	8001838 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d013      	beq.n	8001838 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0204 	bic.w	r2, r2, #4
 800181e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001824:	2208      	movs	r2, #8
 8001826:	409a      	lsls	r2, r3
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001830:	f043 0201 	orr.w	r2, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800183c:	2201      	movs	r2, #1
 800183e:	409a      	lsls	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d012      	beq.n	800186e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800185a:	2201      	movs	r2, #1
 800185c:	409a      	lsls	r2, r3
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001866:	f043 0202 	orr.w	r2, r3, #2
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001872:	2204      	movs	r2, #4
 8001874:	409a      	lsls	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4013      	ands	r3, r2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d012      	beq.n	80018a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00b      	beq.n	80018a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001890:	2204      	movs	r2, #4
 8001892:	409a      	lsls	r2, r3
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800189c:	f043 0204 	orr.w	r2, r3, #4
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a8:	2210      	movs	r2, #16
 80018aa:	409a      	lsls	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d043      	beq.n	800193c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d03c      	beq.n	800193c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c6:	2210      	movs	r2, #16
 80018c8:	409a      	lsls	r2, r3
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d018      	beq.n	800190e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d108      	bne.n	80018fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d024      	beq.n	800193c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	4798      	blx	r3
 80018fa:	e01f      	b.n	800193c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001900:	2b00      	cmp	r3, #0
 8001902:	d01b      	beq.n	800193c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	4798      	blx	r3
 800190c:	e016      	b.n	800193c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001918:	2b00      	cmp	r3, #0
 800191a:	d107      	bne.n	800192c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0208 	bic.w	r2, r2, #8
 800192a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001940:	2220      	movs	r2, #32
 8001942:	409a      	lsls	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4013      	ands	r3, r2
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 808f 	beq.w	8001a6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 8087 	beq.w	8001a6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001962:	2220      	movs	r2, #32
 8001964:	409a      	lsls	r2, r3
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b05      	cmp	r3, #5
 8001974:	d136      	bne.n	80019e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0216 	bic.w	r2, r2, #22
 8001984:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695a      	ldr	r2, [r3, #20]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001994:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	2b00      	cmp	r3, #0
 800199c:	d103      	bne.n	80019a6 <HAL_DMA_IRQHandler+0x1da>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d007      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0208 	bic.w	r2, r2, #8
 80019b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ba:	223f      	movs	r2, #63	@ 0x3f
 80019bc:	409a      	lsls	r2, r3
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d07e      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	4798      	blx	r3
        }
        return;
 80019e2:	e079      	b.n	8001ad8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d01d      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10d      	bne.n	8001a1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d031      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	4798      	blx	r3
 8001a10:	e02c      	b.n	8001a6c <HAL_DMA_IRQHandler+0x2a0>
 8001a12:	bf00      	nop
 8001a14:	20000000 	.word	0x20000000
 8001a18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d023      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	4798      	blx	r3
 8001a2c:	e01e      	b.n	8001a6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10f      	bne.n	8001a5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0210 	bic.w	r2, r2, #16
 8001a4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d032      	beq.n	8001ada <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d022      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2205      	movs	r2, #5
 8001a84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d307      	bcc.n	8001ab4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f2      	bne.n	8001a98 <HAL_DMA_IRQHandler+0x2cc>
 8001ab2:	e000      	b.n	8001ab6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ab4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	4798      	blx	r3
 8001ad6:	e000      	b.n	8001ada <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ad8:	bf00      	nop
    }
  }
}
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001afc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2b40      	cmp	r3, #64	@ 0x40
 8001b0c:	d108      	bne.n	8001b20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b1e:	e007      	b.n	8001b30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	60da      	str	r2, [r3, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	3b10      	subs	r3, #16
 8001b4c:	4a14      	ldr	r2, [pc, #80]	@ (8001ba0 <DMA_CalcBaseAndBitshift+0x64>)
 8001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b52:	091b      	lsrs	r3, r3, #4
 8001b54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b56:	4a13      	ldr	r2, [pc, #76]	@ (8001ba4 <DMA_CalcBaseAndBitshift+0x68>)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d909      	bls.n	8001b7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b72:	f023 0303 	bic.w	r3, r3, #3
 8001b76:	1d1a      	adds	r2, r3, #4
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b7c:	e007      	b.n	8001b8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b86:	f023 0303 	bic.w	r3, r3, #3
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	aaaaaaab 	.word	0xaaaaaaab
 8001ba4:	080051d8 	.word	0x080051d8

08001ba8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d11f      	bne.n	8001c02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d856      	bhi.n	8001c76 <DMA_CheckFifoParam+0xce>
 8001bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8001bd0 <DMA_CheckFifoParam+0x28>)
 8001bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bce:	bf00      	nop
 8001bd0:	08001be1 	.word	0x08001be1
 8001bd4:	08001bf3 	.word	0x08001bf3
 8001bd8:	08001be1 	.word	0x08001be1
 8001bdc:	08001c77 	.word	0x08001c77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d046      	beq.n	8001c7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bf0:	e043      	b.n	8001c7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001bfa:	d140      	bne.n	8001c7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c00:	e03d      	b.n	8001c7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c0a:	d121      	bne.n	8001c50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d837      	bhi.n	8001c82 <DMA_CheckFifoParam+0xda>
 8001c12:	a201      	add	r2, pc, #4	@ (adr r2, 8001c18 <DMA_CheckFifoParam+0x70>)
 8001c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c18:	08001c29 	.word	0x08001c29
 8001c1c:	08001c2f 	.word	0x08001c2f
 8001c20:	08001c29 	.word	0x08001c29
 8001c24:	08001c41 	.word	0x08001c41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c2c:	e030      	b.n	8001c90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d025      	beq.n	8001c86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c3e:	e022      	b.n	8001c86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c44:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c48:	d11f      	bne.n	8001c8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c4e:	e01c      	b.n	8001c8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d903      	bls.n	8001c5e <DMA_CheckFifoParam+0xb6>
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d003      	beq.n	8001c64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c5c:	e018      	b.n	8001c90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	73fb      	strb	r3, [r7, #15]
      break;
 8001c62:	e015      	b.n	8001c90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00e      	beq.n	8001c8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
      break;
 8001c74:	e00b      	b.n	8001c8e <DMA_CheckFifoParam+0xe6>
      break;
 8001c76:	bf00      	nop
 8001c78:	e00a      	b.n	8001c90 <DMA_CheckFifoParam+0xe8>
      break;
 8001c7a:	bf00      	nop
 8001c7c:	e008      	b.n	8001c90 <DMA_CheckFifoParam+0xe8>
      break;
 8001c7e:	bf00      	nop
 8001c80:	e006      	b.n	8001c90 <DMA_CheckFifoParam+0xe8>
      break;
 8001c82:	bf00      	nop
 8001c84:	e004      	b.n	8001c90 <DMA_CheckFifoParam+0xe8>
      break;
 8001c86:	bf00      	nop
 8001c88:	e002      	b.n	8001c90 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c8a:	bf00      	nop
 8001c8c:	e000      	b.n	8001c90 <DMA_CheckFifoParam+0xe8>
      break;
 8001c8e:	bf00      	nop
    }
  } 
  
  return status; 
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop

08001ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	@ 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	e177      	b.n	8001fac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	f040 8166 	bne.w	8001fa6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d005      	beq.n	8001cf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d130      	bne.n	8001d54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d28:	2201      	movs	r2, #1
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 0201 	and.w	r2, r3, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d017      	beq.n	8001d90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d123      	bne.n	8001de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	08da      	lsrs	r2, r3, #3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3208      	adds	r2, #8
 8001da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	220f      	movs	r2, #15
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	08da      	lsrs	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3208      	adds	r2, #8
 8001dde:	69b9      	ldr	r1, [r7, #24]
 8001de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	2203      	movs	r2, #3
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0203 	and.w	r2, r3, #3
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80c0 	beq.w	8001fa6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	4b66      	ldr	r3, [pc, #408]	@ (8001fc4 <HAL_GPIO_Init+0x324>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2e:	4a65      	ldr	r2, [pc, #404]	@ (8001fc4 <HAL_GPIO_Init+0x324>)
 8001e30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e36:	4b63      	ldr	r3, [pc, #396]	@ (8001fc4 <HAL_GPIO_Init+0x324>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e42:	4a61      	ldr	r2, [pc, #388]	@ (8001fc8 <HAL_GPIO_Init+0x328>)
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	3302      	adds	r3, #2
 8001e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	220f      	movs	r2, #15
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a58      	ldr	r2, [pc, #352]	@ (8001fcc <HAL_GPIO_Init+0x32c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d037      	beq.n	8001ede <HAL_GPIO_Init+0x23e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a57      	ldr	r2, [pc, #348]	@ (8001fd0 <HAL_GPIO_Init+0x330>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d031      	beq.n	8001eda <HAL_GPIO_Init+0x23a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a56      	ldr	r2, [pc, #344]	@ (8001fd4 <HAL_GPIO_Init+0x334>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d02b      	beq.n	8001ed6 <HAL_GPIO_Init+0x236>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a55      	ldr	r2, [pc, #340]	@ (8001fd8 <HAL_GPIO_Init+0x338>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d025      	beq.n	8001ed2 <HAL_GPIO_Init+0x232>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a54      	ldr	r2, [pc, #336]	@ (8001fdc <HAL_GPIO_Init+0x33c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d01f      	beq.n	8001ece <HAL_GPIO_Init+0x22e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a53      	ldr	r2, [pc, #332]	@ (8001fe0 <HAL_GPIO_Init+0x340>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d019      	beq.n	8001eca <HAL_GPIO_Init+0x22a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a52      	ldr	r2, [pc, #328]	@ (8001fe4 <HAL_GPIO_Init+0x344>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_GPIO_Init+0x226>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a51      	ldr	r2, [pc, #324]	@ (8001fe8 <HAL_GPIO_Init+0x348>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00d      	beq.n	8001ec2 <HAL_GPIO_Init+0x222>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a50      	ldr	r2, [pc, #320]	@ (8001fec <HAL_GPIO_Init+0x34c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <HAL_GPIO_Init+0x21e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a4f      	ldr	r2, [pc, #316]	@ (8001ff0 <HAL_GPIO_Init+0x350>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d101      	bne.n	8001eba <HAL_GPIO_Init+0x21a>
 8001eb6:	2309      	movs	r3, #9
 8001eb8:	e012      	b.n	8001ee0 <HAL_GPIO_Init+0x240>
 8001eba:	230a      	movs	r3, #10
 8001ebc:	e010      	b.n	8001ee0 <HAL_GPIO_Init+0x240>
 8001ebe:	2308      	movs	r3, #8
 8001ec0:	e00e      	b.n	8001ee0 <HAL_GPIO_Init+0x240>
 8001ec2:	2307      	movs	r3, #7
 8001ec4:	e00c      	b.n	8001ee0 <HAL_GPIO_Init+0x240>
 8001ec6:	2306      	movs	r3, #6
 8001ec8:	e00a      	b.n	8001ee0 <HAL_GPIO_Init+0x240>
 8001eca:	2305      	movs	r3, #5
 8001ecc:	e008      	b.n	8001ee0 <HAL_GPIO_Init+0x240>
 8001ece:	2304      	movs	r3, #4
 8001ed0:	e006      	b.n	8001ee0 <HAL_GPIO_Init+0x240>
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e004      	b.n	8001ee0 <HAL_GPIO_Init+0x240>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e002      	b.n	8001ee0 <HAL_GPIO_Init+0x240>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_GPIO_Init+0x240>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	69fa      	ldr	r2, [r7, #28]
 8001ee2:	f002 0203 	and.w	r2, r2, #3
 8001ee6:	0092      	lsls	r2, r2, #2
 8001ee8:	4093      	lsls	r3, r2
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ef0:	4935      	ldr	r1, [pc, #212]	@ (8001fc8 <HAL_GPIO_Init+0x328>)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	089b      	lsrs	r3, r3, #2
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001efe:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff4 <HAL_GPIO_Init+0x354>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f22:	4a34      	ldr	r2, [pc, #208]	@ (8001ff4 <HAL_GPIO_Init+0x354>)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f28:	4b32      	ldr	r3, [pc, #200]	@ (8001ff4 <HAL_GPIO_Init+0x354>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f4c:	4a29      	ldr	r2, [pc, #164]	@ (8001ff4 <HAL_GPIO_Init+0x354>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f52:	4b28      	ldr	r3, [pc, #160]	@ (8001ff4 <HAL_GPIO_Init+0x354>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f76:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff4 <HAL_GPIO_Init+0x354>)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff4 <HAL_GPIO_Init+0x354>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fa0:	4a14      	ldr	r2, [pc, #80]	@ (8001ff4 <HAL_GPIO_Init+0x354>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	2b0f      	cmp	r3, #15
 8001fb0:	f67f ae84 	bls.w	8001cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3724      	adds	r7, #36	@ 0x24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40013800 	.word	0x40013800
 8001fcc:	40020000 	.word	0x40020000
 8001fd0:	40020400 	.word	0x40020400
 8001fd4:	40020800 	.word	0x40020800
 8001fd8:	40020c00 	.word	0x40020c00
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40021400 	.word	0x40021400
 8001fe4:	40021800 	.word	0x40021800
 8001fe8:	40021c00 	.word	0x40021c00
 8001fec:	40022000 	.word	0x40022000
 8001ff0:	40022400 	.word	0x40022400
 8001ff4:	40013c00 	.word	0x40013c00

08001ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	807b      	strh	r3, [r7, #2]
 8002004:	4613      	mov	r3, r2
 8002006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002008:	787b      	ldrb	r3, [r7, #1]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800200e:	887a      	ldrh	r2, [r7, #2]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002014:	e003      	b.n	800201e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002016:	887b      	ldrh	r3, [r7, #2]
 8002018:	041a      	lsls	r2, r3, #16
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	619a      	str	r2, [r3, #24]
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800202a:	b480      	push	{r7}
 800202c:	b085      	sub	sp, #20
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800203c:	887a      	ldrh	r2, [r7, #2]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4013      	ands	r3, r2
 8002042:	041a      	lsls	r2, r3, #16
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	43d9      	mvns	r1, r3
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	400b      	ands	r3, r1
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	619a      	str	r2, [r3, #24]
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800206a:	4b08      	ldr	r3, [pc, #32]	@ (800208c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	4013      	ands	r3, r2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d006      	beq.n	8002084 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002076:	4a05      	ldr	r2, [pc, #20]	@ (800208c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe faac 	bl	80005dc <HAL_GPIO_EXTI_Callback>
  }
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40013c00 	.word	0x40013c00

08002090 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	4b20      	ldr	r3, [pc, #128]	@ (8002120 <HAL_PWREx_EnableOverDrive+0x90>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002120 <HAL_PWREx_EnableOverDrive+0x90>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <HAL_PWREx_EnableOverDrive+0x90>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002124 <HAL_PWREx_EnableOverDrive+0x94>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020bc:	f7ff f8d0 	bl	8001260 <HAL_GetTick>
 80020c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020c2:	e009      	b.n	80020d8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020c4:	f7ff f8cc 	bl	8001260 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020d2:	d901      	bls.n	80020d8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e01f      	b.n	8002118 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020d8:	4b13      	ldr	r3, [pc, #76]	@ (8002128 <HAL_PWREx_EnableOverDrive+0x98>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020e4:	d1ee      	bne.n	80020c4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020e6:	4b11      	ldr	r3, [pc, #68]	@ (800212c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ec:	f7ff f8b8 	bl	8001260 <HAL_GetTick>
 80020f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020f2:	e009      	b.n	8002108 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020f4:	f7ff f8b4 	bl	8001260 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002102:	d901      	bls.n	8002108 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e007      	b.n	8002118 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002108:	4b07      	ldr	r3, [pc, #28]	@ (8002128 <HAL_PWREx_EnableOverDrive+0x98>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002110:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002114:	d1ee      	bne.n	80020f4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40023800 	.word	0x40023800
 8002124:	420e0040 	.word	0x420e0040
 8002128:	40007000 	.word	0x40007000
 800212c:	420e0044 	.word	0x420e0044

08002130 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e267      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d075      	beq.n	800223a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800214e:	4b88      	ldr	r3, [pc, #544]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b04      	cmp	r3, #4
 8002158:	d00c      	beq.n	8002174 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800215a:	4b85      	ldr	r3, [pc, #532]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002162:	2b08      	cmp	r3, #8
 8002164:	d112      	bne.n	800218c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002166:	4b82      	ldr	r3, [pc, #520]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800216e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002172:	d10b      	bne.n	800218c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002174:	4b7e      	ldr	r3, [pc, #504]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d05b      	beq.n	8002238 <HAL_RCC_OscConfig+0x108>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d157      	bne.n	8002238 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e242      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002194:	d106      	bne.n	80021a4 <HAL_RCC_OscConfig+0x74>
 8002196:	4b76      	ldr	r3, [pc, #472]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a75      	ldr	r2, [pc, #468]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 800219c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e01d      	b.n	80021e0 <HAL_RCC_OscConfig+0xb0>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021ac:	d10c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x98>
 80021ae:	4b70      	ldr	r3, [pc, #448]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a6f      	ldr	r2, [pc, #444]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80021b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a6c      	ldr	r2, [pc, #432]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80021c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e00b      	b.n	80021e0 <HAL_RCC_OscConfig+0xb0>
 80021c8:	4b69      	ldr	r3, [pc, #420]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a68      	ldr	r2, [pc, #416]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80021ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	4b66      	ldr	r3, [pc, #408]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a65      	ldr	r2, [pc, #404]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80021da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d013      	beq.n	8002210 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7ff f83a 	bl	8001260 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f0:	f7ff f836 	bl	8001260 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	@ 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e207      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	4b5b      	ldr	r3, [pc, #364]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0xc0>
 800220e:	e014      	b.n	800223a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7ff f826 	bl	8001260 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002218:	f7ff f822 	bl	8001260 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	@ 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e1f3      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222a:	4b51      	ldr	r3, [pc, #324]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0xe8>
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d063      	beq.n	800230e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002246:	4b4a      	ldr	r3, [pc, #296]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00b      	beq.n	800226a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002252:	4b47      	ldr	r3, [pc, #284]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800225a:	2b08      	cmp	r3, #8
 800225c:	d11c      	bne.n	8002298 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225e:	4b44      	ldr	r3, [pc, #272]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d116      	bne.n	8002298 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226a:	4b41      	ldr	r3, [pc, #260]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <HAL_RCC_OscConfig+0x152>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d001      	beq.n	8002282 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e1c7      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002282:	4b3b      	ldr	r3, [pc, #236]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4937      	ldr	r1, [pc, #220]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002296:	e03a      	b.n	800230e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d020      	beq.n	80022e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a0:	4b34      	ldr	r3, [pc, #208]	@ (8002374 <HAL_RCC_OscConfig+0x244>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7fe ffdb 	bl	8001260 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ae:	f7fe ffd7 	bl	8001260 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e1a8      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022cc:	4b28      	ldr	r3, [pc, #160]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4925      	ldr	r1, [pc, #148]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]
 80022e0:	e015      	b.n	800230e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e2:	4b24      	ldr	r3, [pc, #144]	@ (8002374 <HAL_RCC_OscConfig+0x244>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe ffba 	bl	8001260 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f0:	f7fe ffb6 	bl	8001260 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e187      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002302:	4b1b      	ldr	r3, [pc, #108]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d036      	beq.n	8002388 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d016      	beq.n	8002350 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002322:	4b15      	ldr	r3, [pc, #84]	@ (8002378 <HAL_RCC_OscConfig+0x248>)
 8002324:	2201      	movs	r2, #1
 8002326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002328:	f7fe ff9a 	bl	8001260 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002330:	f7fe ff96 	bl	8001260 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e167      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002342:	4b0b      	ldr	r3, [pc, #44]	@ (8002370 <HAL_RCC_OscConfig+0x240>)
 8002344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0x200>
 800234e:	e01b      	b.n	8002388 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002350:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <HAL_RCC_OscConfig+0x248>)
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002356:	f7fe ff83 	bl	8001260 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235c:	e00e      	b.n	800237c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800235e:	f7fe ff7f 	bl	8001260 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d907      	bls.n	800237c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e150      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
 8002370:	40023800 	.word	0x40023800
 8002374:	42470000 	.word	0x42470000
 8002378:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237c:	4b88      	ldr	r3, [pc, #544]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 800237e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1ea      	bne.n	800235e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 8097 	beq.w	80024c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239a:	4b81      	ldr	r3, [pc, #516]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10f      	bne.n	80023c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	4b7d      	ldr	r3, [pc, #500]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	4a7c      	ldr	r2, [pc, #496]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 80023b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023b6:	4b7a      	ldr	r3, [pc, #488]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c2:	2301      	movs	r3, #1
 80023c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	4b77      	ldr	r3, [pc, #476]	@ (80025a4 <HAL_RCC_OscConfig+0x474>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d118      	bne.n	8002404 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d2:	4b74      	ldr	r3, [pc, #464]	@ (80025a4 <HAL_RCC_OscConfig+0x474>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a73      	ldr	r2, [pc, #460]	@ (80025a4 <HAL_RCC_OscConfig+0x474>)
 80023d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023de:	f7fe ff3f 	bl	8001260 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e6:	f7fe ff3b 	bl	8001260 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e10c      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	4b6a      	ldr	r3, [pc, #424]	@ (80025a4 <HAL_RCC_OscConfig+0x474>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x2ea>
 800240c:	4b64      	ldr	r3, [pc, #400]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002410:	4a63      	ldr	r2, [pc, #396]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6713      	str	r3, [r2, #112]	@ 0x70
 8002418:	e01c      	b.n	8002454 <HAL_RCC_OscConfig+0x324>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b05      	cmp	r3, #5
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0x30c>
 8002422:	4b5f      	ldr	r3, [pc, #380]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002426:	4a5e      	ldr	r2, [pc, #376]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 8002428:	f043 0304 	orr.w	r3, r3, #4
 800242c:	6713      	str	r3, [r2, #112]	@ 0x70
 800242e:	4b5c      	ldr	r3, [pc, #368]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002432:	4a5b      	ldr	r2, [pc, #364]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6713      	str	r3, [r2, #112]	@ 0x70
 800243a:	e00b      	b.n	8002454 <HAL_RCC_OscConfig+0x324>
 800243c:	4b58      	ldr	r3, [pc, #352]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002440:	4a57      	ldr	r2, [pc, #348]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 8002442:	f023 0301 	bic.w	r3, r3, #1
 8002446:	6713      	str	r3, [r2, #112]	@ 0x70
 8002448:	4b55      	ldr	r3, [pc, #340]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 800244a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800244c:	4a54      	ldr	r2, [pc, #336]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 800244e:	f023 0304 	bic.w	r3, r3, #4
 8002452:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d015      	beq.n	8002488 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245c:	f7fe ff00 	bl	8001260 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002462:	e00a      	b.n	800247a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002464:	f7fe fefc 	bl	8001260 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e0cb      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247a:	4b49      	ldr	r3, [pc, #292]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0ee      	beq.n	8002464 <HAL_RCC_OscConfig+0x334>
 8002486:	e014      	b.n	80024b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002488:	f7fe feea 	bl	8001260 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002490:	f7fe fee6 	bl	8001260 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e0b5      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a6:	4b3e      	ldr	r3, [pc, #248]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 80024a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1ee      	bne.n	8002490 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d105      	bne.n	80024c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b8:	4b39      	ldr	r3, [pc, #228]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	4a38      	ldr	r2, [pc, #224]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 80024be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80a1 	beq.w	8002610 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024ce:	4b34      	ldr	r3, [pc, #208]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d05c      	beq.n	8002594 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d141      	bne.n	8002566 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	4b31      	ldr	r3, [pc, #196]	@ (80025a8 <HAL_RCC_OscConfig+0x478>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7fe feba 	bl	8001260 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe feb6 	bl	8001260 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e087      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002502:	4b27      	ldr	r3, [pc, #156]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69da      	ldr	r2, [r3, #28]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251c:	019b      	lsls	r3, r3, #6
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	3b01      	subs	r3, #1
 8002528:	041b      	lsls	r3, r3, #16
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002530:	061b      	lsls	r3, r3, #24
 8002532:	491b      	ldr	r1, [pc, #108]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002538:	4b1b      	ldr	r3, [pc, #108]	@ (80025a8 <HAL_RCC_OscConfig+0x478>)
 800253a:	2201      	movs	r2, #1
 800253c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253e:	f7fe fe8f 	bl	8001260 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002546:	f7fe fe8b 	bl	8001260 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e05c      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002558:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x416>
 8002564:	e054      	b.n	8002610 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002566:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <HAL_RCC_OscConfig+0x478>)
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe fe78 	bl	8001260 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002574:	f7fe fe74 	bl	8001260 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e045      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002586:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <HAL_RCC_OscConfig+0x470>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x444>
 8002592:	e03d      	b.n	8002610 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d107      	bne.n	80025ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e038      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40007000 	.word	0x40007000
 80025a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025ac:	4b1b      	ldr	r3, [pc, #108]	@ (800261c <HAL_RCC_OscConfig+0x4ec>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d028      	beq.n	800260c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d121      	bne.n	800260c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d11a      	bne.n	800260c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025dc:	4013      	ands	r3, r2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d111      	bne.n	800260c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f2:	085b      	lsrs	r3, r3, #1
 80025f4:	3b01      	subs	r3, #1
 80025f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d107      	bne.n	800260c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002606:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800

08002620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0cc      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002634:	4b68      	ldr	r3, [pc, #416]	@ (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d90c      	bls.n	800265c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	4b65      	ldr	r3, [pc, #404]	@ (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b63      	ldr	r3, [pc, #396]	@ (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0b8      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d020      	beq.n	80026aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002674:	4b59      	ldr	r3, [pc, #356]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	4a58      	ldr	r2, [pc, #352]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800267e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800268c:	4b53      	ldr	r3, [pc, #332]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4a52      	ldr	r2, [pc, #328]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002698:	4b50      	ldr	r3, [pc, #320]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	494d      	ldr	r1, [pc, #308]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d044      	beq.n	8002740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	4b47      	ldr	r3, [pc, #284]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d119      	bne.n	80026fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e07f      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d003      	beq.n	80026de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026de:	4b3f      	ldr	r3, [pc, #252]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e06f      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ee:	4b3b      	ldr	r3, [pc, #236]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e067      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fe:	4b37      	ldr	r3, [pc, #220]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f023 0203 	bic.w	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4934      	ldr	r1, [pc, #208]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	4313      	orrs	r3, r2
 800270e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002710:	f7fe fda6 	bl	8001260 <HAL_GetTick>
 8002714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002716:	e00a      	b.n	800272e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002718:	f7fe fda2 	bl	8001260 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e04f      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	4b2b      	ldr	r3, [pc, #172]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 020c 	and.w	r2, r3, #12
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	429a      	cmp	r2, r3
 800273e:	d1eb      	bne.n	8002718 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002740:	4b25      	ldr	r3, [pc, #148]	@ (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d20c      	bcs.n	8002768 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b22      	ldr	r3, [pc, #136]	@ (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b20      	ldr	r3, [pc, #128]	@ (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e032      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002774:	4b19      	ldr	r3, [pc, #100]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4916      	ldr	r1, [pc, #88]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002792:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	490e      	ldr	r1, [pc, #56]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027a6:	f000 f821 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 80027aa:	4602      	mov	r2, r0
 80027ac:	4b0b      	ldr	r3, [pc, #44]	@ (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	490a      	ldr	r1, [pc, #40]	@ (80027e0 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	5ccb      	ldrb	r3, [r1, r3]
 80027ba:	fa22 f303 	lsr.w	r3, r2, r3
 80027be:	4a09      	ldr	r2, [pc, #36]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80027c2:	4b09      	ldr	r3, [pc, #36]	@ (80027e8 <HAL_RCC_ClockConfig+0x1c8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe fd06 	bl	80011d8 <HAL_InitTick>

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023c00 	.word	0x40023c00
 80027dc:	40023800 	.word	0x40023800
 80027e0:	080051c0 	.word	0x080051c0
 80027e4:	20000000 	.word	0x20000000
 80027e8:	20000004 	.word	0x20000004

080027ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027f0:	b090      	sub	sp, #64	@ 0x40
 80027f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002804:	4b59      	ldr	r3, [pc, #356]	@ (800296c <HAL_RCC_GetSysClockFreq+0x180>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 030c 	and.w	r3, r3, #12
 800280c:	2b08      	cmp	r3, #8
 800280e:	d00d      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x40>
 8002810:	2b08      	cmp	r3, #8
 8002812:	f200 80a1 	bhi.w	8002958 <HAL_RCC_GetSysClockFreq+0x16c>
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x34>
 800281a:	2b04      	cmp	r3, #4
 800281c:	d003      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0x3a>
 800281e:	e09b      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002820:	4b53      	ldr	r3, [pc, #332]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x184>)
 8002822:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002824:	e09b      	b.n	800295e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002826:	4b53      	ldr	r3, [pc, #332]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x188>)
 8002828:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800282a:	e098      	b.n	800295e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800282c:	4b4f      	ldr	r3, [pc, #316]	@ (800296c <HAL_RCC_GetSysClockFreq+0x180>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002834:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002836:	4b4d      	ldr	r3, [pc, #308]	@ (800296c <HAL_RCC_GetSysClockFreq+0x180>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d028      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002842:	4b4a      	ldr	r3, [pc, #296]	@ (800296c <HAL_RCC_GetSysClockFreq+0x180>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	099b      	lsrs	r3, r3, #6
 8002848:	2200      	movs	r2, #0
 800284a:	623b      	str	r3, [r7, #32]
 800284c:	627a      	str	r2, [r7, #36]	@ 0x24
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002854:	2100      	movs	r1, #0
 8002856:	4b47      	ldr	r3, [pc, #284]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x188>)
 8002858:	fb03 f201 	mul.w	r2, r3, r1
 800285c:	2300      	movs	r3, #0
 800285e:	fb00 f303 	mul.w	r3, r0, r3
 8002862:	4413      	add	r3, r2
 8002864:	4a43      	ldr	r2, [pc, #268]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x188>)
 8002866:	fba0 1202 	umull	r1, r2, r0, r2
 800286a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800286c:	460a      	mov	r2, r1
 800286e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002872:	4413      	add	r3, r2
 8002874:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002878:	2200      	movs	r2, #0
 800287a:	61bb      	str	r3, [r7, #24]
 800287c:	61fa      	str	r2, [r7, #28]
 800287e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002882:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002886:	f7fd fd03 	bl	8000290 <__aeabi_uldivmod>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4613      	mov	r3, r2
 8002890:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002892:	e053      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002894:	4b35      	ldr	r3, [pc, #212]	@ (800296c <HAL_RCC_GetSysClockFreq+0x180>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	099b      	lsrs	r3, r3, #6
 800289a:	2200      	movs	r2, #0
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	617a      	str	r2, [r7, #20]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028a6:	f04f 0b00 	mov.w	fp, #0
 80028aa:	4652      	mov	r2, sl
 80028ac:	465b      	mov	r3, fp
 80028ae:	f04f 0000 	mov.w	r0, #0
 80028b2:	f04f 0100 	mov.w	r1, #0
 80028b6:	0159      	lsls	r1, r3, #5
 80028b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028bc:	0150      	lsls	r0, r2, #5
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	ebb2 080a 	subs.w	r8, r2, sl
 80028c6:	eb63 090b 	sbc.w	r9, r3, fp
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028de:	ebb2 0408 	subs.w	r4, r2, r8
 80028e2:	eb63 0509 	sbc.w	r5, r3, r9
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	00eb      	lsls	r3, r5, #3
 80028f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028f4:	00e2      	lsls	r2, r4, #3
 80028f6:	4614      	mov	r4, r2
 80028f8:	461d      	mov	r5, r3
 80028fa:	eb14 030a 	adds.w	r3, r4, sl
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	eb45 030b 	adc.w	r3, r5, fp
 8002904:	607b      	str	r3, [r7, #4]
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002912:	4629      	mov	r1, r5
 8002914:	028b      	lsls	r3, r1, #10
 8002916:	4621      	mov	r1, r4
 8002918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800291c:	4621      	mov	r1, r4
 800291e:	028a      	lsls	r2, r1, #10
 8002920:	4610      	mov	r0, r2
 8002922:	4619      	mov	r1, r3
 8002924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002926:	2200      	movs	r2, #0
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	60fa      	str	r2, [r7, #12]
 800292c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002930:	f7fd fcae 	bl	8000290 <__aeabi_uldivmod>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4613      	mov	r3, r2
 800293a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800293c:	4b0b      	ldr	r3, [pc, #44]	@ (800296c <HAL_RCC_GetSysClockFreq+0x180>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	3301      	adds	r3, #1
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800294c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800294e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002950:	fbb2 f3f3 	udiv	r3, r2, r3
 8002954:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002956:	e002      	b.n	800295e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x184>)
 800295a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800295c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800295e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002960:	4618      	mov	r0, r3
 8002962:	3740      	adds	r7, #64	@ 0x40
 8002964:	46bd      	mov	sp, r7
 8002966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800
 8002970:	00f42400 	.word	0x00f42400
 8002974:	017d7840 	.word	0x017d7840

08002978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800297c:	4b03      	ldr	r3, [pc, #12]	@ (800298c <HAL_RCC_GetHCLKFreq+0x14>)
 800297e:	681b      	ldr	r3, [r3, #0]
}
 8002980:	4618      	mov	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000000 	.word	0x20000000

08002990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002994:	f7ff fff0 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 8002998:	4602      	mov	r2, r0
 800299a:	4b05      	ldr	r3, [pc, #20]	@ (80029b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	0a9b      	lsrs	r3, r3, #10
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	4903      	ldr	r1, [pc, #12]	@ (80029b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40023800 	.word	0x40023800
 80029b4:	080051d0 	.word	0x080051d0

080029b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029bc:	f7ff ffdc 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 80029c0:	4602      	mov	r2, r0
 80029c2:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	0b5b      	lsrs	r3, r3, #13
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	4903      	ldr	r1, [pc, #12]	@ (80029dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ce:	5ccb      	ldrb	r3, [r1, r3]
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40023800 	.word	0x40023800
 80029dc:	080051d0 	.word	0x080051d0

080029e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e041      	b.n	8002a76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe fa6c 	bl	8000ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	f000 fa7e 	bl	8002f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d001      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e04e      	b.n	8002b36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a23      	ldr	r2, [pc, #140]	@ (8002b44 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d022      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x80>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ac2:	d01d      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x80>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b48 <HAL_TIM_Base_Start_IT+0xc8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d018      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x80>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b4c <HAL_TIM_Base_Start_IT+0xcc>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d013      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x80>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1c      	ldr	r2, [pc, #112]	@ (8002b50 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00e      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x80>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8002b54 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d009      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x80>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a19      	ldr	r2, [pc, #100]	@ (8002b58 <HAL_TIM_Base_Start_IT+0xd8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d004      	beq.n	8002b00 <HAL_TIM_Base_Start_IT+0x80>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a18      	ldr	r2, [pc, #96]	@ (8002b5c <HAL_TIM_Base_Start_IT+0xdc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d111      	bne.n	8002b24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d010      	beq.n	8002b34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b22:	e007      	b.n	8002b34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40010000 	.word	0x40010000
 8002b48:	40000400 	.word	0x40000400
 8002b4c:	40000800 	.word	0x40000800
 8002b50:	40000c00 	.word	0x40000c00
 8002b54:	40010400 	.word	0x40010400
 8002b58:	40014000 	.word	0x40014000
 8002b5c:	40001800 	.word	0x40001800

08002b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d020      	beq.n	8002bc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d01b      	beq.n	8002bc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0202 	mvn.w	r2, #2
 8002b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f999 	bl	8002ee2 <HAL_TIM_IC_CaptureCallback>
 8002bb0:	e005      	b.n	8002bbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f98b 	bl	8002ece <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f99c 	bl	8002ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d020      	beq.n	8002c10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01b      	beq.n	8002c10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0204 	mvn.w	r2, #4
 8002be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f973 	bl	8002ee2 <HAL_TIM_IC_CaptureCallback>
 8002bfc:	e005      	b.n	8002c0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f965 	bl	8002ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f976 	bl	8002ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d020      	beq.n	8002c5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01b      	beq.n	8002c5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0208 	mvn.w	r2, #8
 8002c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2204      	movs	r2, #4
 8002c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f94d 	bl	8002ee2 <HAL_TIM_IC_CaptureCallback>
 8002c48:	e005      	b.n	8002c56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f93f 	bl	8002ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f950 	bl	8002ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d020      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d01b      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0210 	mvn.w	r2, #16
 8002c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f927 	bl	8002ee2 <HAL_TIM_IC_CaptureCallback>
 8002c94:	e005      	b.n	8002ca2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f919 	bl	8002ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f92a 	bl	8002ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00c      	beq.n	8002ccc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d007      	beq.n	8002ccc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0201 	mvn.w	r2, #1
 8002cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fd fc5a 	bl	8000580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00c      	beq.n	8002cf0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fae4 	bl	80032b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00c      	beq.n	8002d14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d007      	beq.n	8002d14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f8fb 	bl	8002f0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00c      	beq.n	8002d38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d007      	beq.n	8002d38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f06f 0220 	mvn.w	r2, #32
 8002d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fab6 	bl	80032a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_TIM_ConfigClockSource+0x1c>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e0b4      	b.n	8002ec6 <HAL_TIM_ConfigClockSource+0x186>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d94:	d03e      	beq.n	8002e14 <HAL_TIM_ConfigClockSource+0xd4>
 8002d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d9a:	f200 8087 	bhi.w	8002eac <HAL_TIM_ConfigClockSource+0x16c>
 8002d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002da2:	f000 8086 	beq.w	8002eb2 <HAL_TIM_ConfigClockSource+0x172>
 8002da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002daa:	d87f      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x16c>
 8002dac:	2b70      	cmp	r3, #112	@ 0x70
 8002dae:	d01a      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0xa6>
 8002db0:	2b70      	cmp	r3, #112	@ 0x70
 8002db2:	d87b      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x16c>
 8002db4:	2b60      	cmp	r3, #96	@ 0x60
 8002db6:	d050      	beq.n	8002e5a <HAL_TIM_ConfigClockSource+0x11a>
 8002db8:	2b60      	cmp	r3, #96	@ 0x60
 8002dba:	d877      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x16c>
 8002dbc:	2b50      	cmp	r3, #80	@ 0x50
 8002dbe:	d03c      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0xfa>
 8002dc0:	2b50      	cmp	r3, #80	@ 0x50
 8002dc2:	d873      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x16c>
 8002dc4:	2b40      	cmp	r3, #64	@ 0x40
 8002dc6:	d058      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x13a>
 8002dc8:	2b40      	cmp	r3, #64	@ 0x40
 8002dca:	d86f      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x16c>
 8002dcc:	2b30      	cmp	r3, #48	@ 0x30
 8002dce:	d064      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0x15a>
 8002dd0:	2b30      	cmp	r3, #48	@ 0x30
 8002dd2:	d86b      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x16c>
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d060      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0x15a>
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d867      	bhi.n	8002eac <HAL_TIM_ConfigClockSource+0x16c>
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d05c      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0x15a>
 8002de0:	2b10      	cmp	r3, #16
 8002de2:	d05a      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0x15a>
 8002de4:	e062      	b.n	8002eac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002df6:	f000 f9b9 	bl	800316c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	609a      	str	r2, [r3, #8]
      break;
 8002e12:	e04f      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e24:	f000 f9a2 	bl	800316c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e36:	609a      	str	r2, [r3, #8]
      break;
 8002e38:	e03c      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e46:	461a      	mov	r2, r3
 8002e48:	f000 f916 	bl	8003078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2150      	movs	r1, #80	@ 0x50
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f96f 	bl	8003136 <TIM_ITRx_SetConfig>
      break;
 8002e58:	e02c      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e66:	461a      	mov	r2, r3
 8002e68:	f000 f935 	bl	80030d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2160      	movs	r1, #96	@ 0x60
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 f95f 	bl	8003136 <TIM_ITRx_SetConfig>
      break;
 8002e78:	e01c      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e86:	461a      	mov	r2, r3
 8002e88:	f000 f8f6 	bl	8003078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2140      	movs	r1, #64	@ 0x40
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 f94f 	bl	8003136 <TIM_ITRx_SetConfig>
      break;
 8002e98:	e00c      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	f000 f946 	bl	8003136 <TIM_ITRx_SetConfig>
      break;
 8002eaa:	e003      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb0:	e000      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002eb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a46      	ldr	r2, [pc, #280]	@ (800304c <TIM_Base_SetConfig+0x12c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d013      	beq.n	8002f60 <TIM_Base_SetConfig+0x40>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f3e:	d00f      	beq.n	8002f60 <TIM_Base_SetConfig+0x40>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a43      	ldr	r2, [pc, #268]	@ (8003050 <TIM_Base_SetConfig+0x130>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d00b      	beq.n	8002f60 <TIM_Base_SetConfig+0x40>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a42      	ldr	r2, [pc, #264]	@ (8003054 <TIM_Base_SetConfig+0x134>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d007      	beq.n	8002f60 <TIM_Base_SetConfig+0x40>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a41      	ldr	r2, [pc, #260]	@ (8003058 <TIM_Base_SetConfig+0x138>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d003      	beq.n	8002f60 <TIM_Base_SetConfig+0x40>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a40      	ldr	r2, [pc, #256]	@ (800305c <TIM_Base_SetConfig+0x13c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d108      	bne.n	8002f72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a35      	ldr	r2, [pc, #212]	@ (800304c <TIM_Base_SetConfig+0x12c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d02b      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f80:	d027      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a32      	ldr	r2, [pc, #200]	@ (8003050 <TIM_Base_SetConfig+0x130>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d023      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a31      	ldr	r2, [pc, #196]	@ (8003054 <TIM_Base_SetConfig+0x134>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d01f      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a30      	ldr	r2, [pc, #192]	@ (8003058 <TIM_Base_SetConfig+0x138>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d01b      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a2f      	ldr	r2, [pc, #188]	@ (800305c <TIM_Base_SetConfig+0x13c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d017      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a2e      	ldr	r2, [pc, #184]	@ (8003060 <TIM_Base_SetConfig+0x140>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a2d      	ldr	r2, [pc, #180]	@ (8003064 <TIM_Base_SetConfig+0x144>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00f      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a2c      	ldr	r2, [pc, #176]	@ (8003068 <TIM_Base_SetConfig+0x148>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00b      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a2b      	ldr	r2, [pc, #172]	@ (800306c <TIM_Base_SetConfig+0x14c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d007      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a2a      	ldr	r2, [pc, #168]	@ (8003070 <TIM_Base_SetConfig+0x150>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d003      	beq.n	8002fd2 <TIM_Base_SetConfig+0xb2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a29      	ldr	r2, [pc, #164]	@ (8003074 <TIM_Base_SetConfig+0x154>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d108      	bne.n	8002fe4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a10      	ldr	r2, [pc, #64]	@ (800304c <TIM_Base_SetConfig+0x12c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d003      	beq.n	8003018 <TIM_Base_SetConfig+0xf8>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a12      	ldr	r2, [pc, #72]	@ (800305c <TIM_Base_SetConfig+0x13c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d103      	bne.n	8003020 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b01      	cmp	r3, #1
 8003030:	d105      	bne.n	800303e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f023 0201 	bic.w	r2, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	611a      	str	r2, [r3, #16]
  }
}
 800303e:	bf00      	nop
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40010000 	.word	0x40010000
 8003050:	40000400 	.word	0x40000400
 8003054:	40000800 	.word	0x40000800
 8003058:	40000c00 	.word	0x40000c00
 800305c:	40010400 	.word	0x40010400
 8003060:	40014000 	.word	0x40014000
 8003064:	40014400 	.word	0x40014400
 8003068:	40014800 	.word	0x40014800
 800306c:	40001800 	.word	0x40001800
 8003070:	40001c00 	.word	0x40001c00
 8003074:	40002000 	.word	0x40002000

08003078 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f023 0201 	bic.w	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f023 030a 	bic.w	r3, r3, #10
 80030b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	621a      	str	r2, [r3, #32]
}
 80030ca:	bf00      	nop
 80030cc:	371c      	adds	r7, #28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b087      	sub	sp, #28
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	f023 0210 	bic.w	r2, r3, #16
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003100:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	031b      	lsls	r3, r3, #12
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003112:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	621a      	str	r2, [r3, #32]
}
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003136:	b480      	push	{r7}
 8003138:	b085      	sub	sp, #20
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800314c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	f043 0307 	orr.w	r3, r3, #7
 8003158:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	609a      	str	r2, [r3, #8]
}
 8003160:	bf00      	nop
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003186:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	021a      	lsls	r2, r3, #8
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	431a      	orrs	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4313      	orrs	r3, r2
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	609a      	str	r2, [r3, #8]
}
 80031a0:	bf00      	nop
 80031a2:	371c      	adds	r7, #28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e05a      	b.n	800327a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a21      	ldr	r2, [pc, #132]	@ (8003288 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d022      	beq.n	800324e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003210:	d01d      	beq.n	800324e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1d      	ldr	r2, [pc, #116]	@ (800328c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d018      	beq.n	800324e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1b      	ldr	r2, [pc, #108]	@ (8003290 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a1a      	ldr	r2, [pc, #104]	@ (8003294 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00e      	beq.n	800324e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a18      	ldr	r2, [pc, #96]	@ (8003298 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d009      	beq.n	800324e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a17      	ldr	r2, [pc, #92]	@ (800329c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a15      	ldr	r2, [pc, #84]	@ (80032a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d10c      	bne.n	8003268 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003254:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	4313      	orrs	r3, r2
 800325e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40010000 	.word	0x40010000
 800328c:	40000400 	.word	0x40000400
 8003290:	40000800 	.word	0x40000800
 8003294:	40000c00 	.word	0x40000c00
 8003298:	40010400 	.word	0x40010400
 800329c:	40014000 	.word	0x40014000
 80032a0:	40001800 	.word	0x40001800

080032a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e042      	b.n	8003364 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7fd fe66 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2224      	movs	r2, #36	@ 0x24
 80032fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800330e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 ff63 	bl	80041dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003324:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695a      	ldr	r2, [r3, #20]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003334:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003344:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08c      	sub	sp, #48	@ 0x30
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	4613      	mov	r3, r2
 8003378:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b20      	cmp	r3, #32
 8003384:	d156      	bne.n	8003434 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HAL_UART_Transmit_DMA+0x26>
 800338c:	88fb      	ldrh	r3, [r7, #6]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e04f      	b.n	8003436 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	88fa      	ldrh	r2, [r7, #6]
 80033a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	88fa      	ldrh	r2, [r7, #6]
 80033a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2221      	movs	r2, #33	@ 0x21
 80033b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ba:	4a21      	ldr	r2, [pc, #132]	@ (8003440 <HAL_UART_Transmit_DMA+0xd4>)
 80033bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c2:	4a20      	ldr	r2, [pc, #128]	@ (8003444 <HAL_UART_Transmit_DMA+0xd8>)
 80033c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003448 <HAL_UART_Transmit_DMA+0xdc>)
 80033cc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d2:	2200      	movs	r2, #0
 80033d4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80033d6:	f107 0308 	add.w	r3, r7, #8
 80033da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80033e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033e2:	6819      	ldr	r1, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3304      	adds	r3, #4
 80033ea:	461a      	mov	r2, r3
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	f7fe f903 	bl	80015f8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033fa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3314      	adds	r3, #20
 8003402:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	617b      	str	r3, [r7, #20]
   return(result);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003412:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3314      	adds	r3, #20
 800341a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800341c:	627a      	str	r2, [r7, #36]	@ 0x24
 800341e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	6a39      	ldr	r1, [r7, #32]
 8003422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	61fb      	str	r3, [r7, #28]
   return(result);
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e5      	bne.n	80033fc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	e000      	b.n	8003436 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003434:	2302      	movs	r3, #2
  }
}
 8003436:	4618      	mov	r0, r3
 8003438:	3730      	adds	r7, #48	@ 0x30
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	08003a69 	.word	0x08003a69
 8003444:	08003b03 	.word	0x08003b03
 8003448:	08003c87 	.word	0x08003c87

0800344c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08c      	sub	sp, #48	@ 0x30
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	4613      	mov	r3, r2
 8003458:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b20      	cmp	r3, #32
 8003464:	d14a      	bne.n	80034fc <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e043      	b.n	80034fe <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2201      	movs	r2, #1
 800347a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	461a      	mov	r2, r3
 8003486:	68b9      	ldr	r1, [r7, #8]
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 fc47 	bl	8003d1c <UART_Start_Receive_DMA>
 800348e:	4603      	mov	r3, r0
 8003490:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003494:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003498:	2b00      	cmp	r3, #0
 800349a:	d12c      	bne.n	80034f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d125      	bne.n	80034f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034a4:	2300      	movs	r3, #0
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	330c      	adds	r3, #12
 80034c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	617b      	str	r3, [r7, #20]
   return(result);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f043 0310 	orr.w	r3, r3, #16
 80034d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	330c      	adds	r3, #12
 80034d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034da:	627a      	str	r2, [r7, #36]	@ 0x24
 80034dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034de:	6a39      	ldr	r1, [r7, #32]
 80034e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e2:	e841 2300 	strex	r3, r2, [r1]
 80034e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e5      	bne.n	80034ba <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80034ee:	e002      	b.n	80034f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80034f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80034fa:	e000      	b.n	80034fe <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3730      	adds	r7, #48	@ 0x30
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b0ba      	sub	sp, #232	@ 0xe8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800352e:	2300      	movs	r3, #0
 8003530:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003534:	2300      	movs	r3, #0
 8003536:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800353a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003546:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10f      	bne.n	800356e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800354e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b00      	cmp	r3, #0
 8003558:	d009      	beq.n	800356e <HAL_UART_IRQHandler+0x66>
 800355a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fd79 	bl	800405e <UART_Receive_IT>
      return;
 800356c:	e25b      	b.n	8003a26 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800356e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 80de 	beq.w	8003734 <HAL_UART_IRQHandler+0x22c>
 8003578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	d106      	bne.n	8003592 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003588:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80d1 	beq.w	8003734 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_UART_IRQHandler+0xae>
 800359e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d005      	beq.n	80035b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ae:	f043 0201 	orr.w	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <HAL_UART_IRQHandler+0xd2>
 80035c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d2:	f043 0202 	orr.w	r2, r3, #2
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00b      	beq.n	80035fe <HAL_UART_IRQHandler+0xf6>
 80035e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d005      	beq.n	80035fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f6:	f043 0204 	orr.w	r2, r3, #4
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d011      	beq.n	800362e <HAL_UART_IRQHandler+0x126>
 800360a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b00      	cmp	r3, #0
 8003614:	d105      	bne.n	8003622 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003626:	f043 0208 	orr.w	r2, r3, #8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 81f2 	beq.w	8003a1c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800363c:	f003 0320 	and.w	r3, r3, #32
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_UART_IRQHandler+0x14e>
 8003644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 fd04 	bl	800405e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003660:	2b40      	cmp	r3, #64	@ 0x40
 8003662:	bf0c      	ite	eq
 8003664:	2301      	moveq	r3, #1
 8003666:	2300      	movne	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <HAL_UART_IRQHandler+0x17a>
 800367a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800367e:	2b00      	cmp	r3, #0
 8003680:	d04f      	beq.n	8003722 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fc0c 	bl	8003ea0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003692:	2b40      	cmp	r3, #64	@ 0x40
 8003694:	d141      	bne.n	800371a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3314      	adds	r3, #20
 800369c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80036a4:	e853 3f00 	ldrex	r3, [r3]
 80036a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80036ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3314      	adds	r3, #20
 80036be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80036c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80036c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80036ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80036d2:	e841 2300 	strex	r3, r2, [r1]
 80036d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80036da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1d9      	bne.n	8003696 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d013      	beq.n	8003712 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ee:	4a7e      	ldr	r2, [pc, #504]	@ (80038e8 <HAL_UART_IRQHandler+0x3e0>)
 80036f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fe f846 	bl	8001788 <HAL_DMA_Abort_IT>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d016      	beq.n	8003730 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800370c:	4610      	mov	r0, r2
 800370e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003710:	e00e      	b.n	8003730 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f99e 	bl	8003a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003718:	e00a      	b.n	8003730 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f99a 	bl	8003a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003720:	e006      	b.n	8003730 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f996 	bl	8003a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800372e:	e175      	b.n	8003a1c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003730:	bf00      	nop
    return;
 8003732:	e173      	b.n	8003a1c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003738:	2b01      	cmp	r3, #1
 800373a:	f040 814f 	bne.w	80039dc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800373e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 8148 	beq.w	80039dc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800374c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003750:	f003 0310 	and.w	r3, r3, #16
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8141 	beq.w	80039dc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800375a:	2300      	movs	r3, #0
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377a:	2b40      	cmp	r3, #64	@ 0x40
 800377c:	f040 80b6 	bne.w	80038ec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800378c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8145 	beq.w	8003a20 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800379a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800379e:	429a      	cmp	r2, r3
 80037a0:	f080 813e 	bcs.w	8003a20 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037b6:	f000 8088 	beq.w	80038ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	330c      	adds	r3, #12
 80037c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037c8:	e853 3f00 	ldrex	r3, [r3]
 80037cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80037d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	330c      	adds	r3, #12
 80037e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80037e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80037f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80037fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1d9      	bne.n	80037ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3314      	adds	r3, #20
 800380c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003810:	e853 3f00 	ldrex	r3, [r3]
 8003814:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003816:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003818:	f023 0301 	bic.w	r3, r3, #1
 800381c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3314      	adds	r3, #20
 8003826:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800382a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800382e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003830:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003832:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003836:	e841 2300 	strex	r3, r2, [r1]
 800383a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800383c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1e1      	bne.n	8003806 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3314      	adds	r3, #20
 8003848:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800384c:	e853 3f00 	ldrex	r3, [r3]
 8003850:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003852:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003854:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003858:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3314      	adds	r3, #20
 8003862:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003866:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003868:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800386c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800386e:	e841 2300 	strex	r3, r2, [r1]
 8003872:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003874:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1e3      	bne.n	8003842 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	330c      	adds	r3, #12
 800388e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003898:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800389a:	f023 0310 	bic.w	r3, r3, #16
 800389e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	330c      	adds	r3, #12
 80038a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80038ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80038ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038b4:	e841 2300 	strex	r3, r2, [r1]
 80038b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1e3      	bne.n	8003888 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fd feef 	bl	80016a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2202      	movs	r2, #2
 80038ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038d8:	b29b      	uxth	r3, r3
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	b29b      	uxth	r3, r3
 80038de:	4619      	mov	r1, r3
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7fc ffe9 	bl	80008b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038e6:	e09b      	b.n	8003a20 <HAL_UART_IRQHandler+0x518>
 80038e8:	08003f67 	.word	0x08003f67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003900:	b29b      	uxth	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 808e 	beq.w	8003a24 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 8089 	beq.w	8003a24 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	330c      	adds	r3, #12
 8003918:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800391c:	e853 3f00 	ldrex	r3, [r3]
 8003920:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003924:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003928:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	330c      	adds	r3, #12
 8003932:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003936:	647a      	str	r2, [r7, #68]	@ 0x44
 8003938:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800393c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e3      	bne.n	8003912 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3314      	adds	r3, #20
 8003950:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	623b      	str	r3, [r7, #32]
   return(result);
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3314      	adds	r3, #20
 800396a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800396e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003970:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003972:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003976:	e841 2300 	strex	r3, r2, [r1]
 800397a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800397c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1e3      	bne.n	800394a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	330c      	adds	r3, #12
 8003996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	60fb      	str	r3, [r7, #12]
   return(result);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0310 	bic.w	r3, r3, #16
 80039a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	330c      	adds	r3, #12
 80039b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80039b4:	61fa      	str	r2, [r7, #28]
 80039b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	69b9      	ldr	r1, [r7, #24]
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	617b      	str	r3, [r7, #20]
   return(result);
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e3      	bne.n	8003990 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039d2:	4619      	mov	r1, r3
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7fc ff6f 	bl	80008b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039da:	e023      	b.n	8003a24 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d009      	beq.n	80039fc <HAL_UART_IRQHandler+0x4f4>
 80039e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 faca 	bl	8003f8e <UART_Transmit_IT>
    return;
 80039fa:	e014      	b.n	8003a26 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00e      	beq.n	8003a26 <HAL_UART_IRQHandler+0x51e>
 8003a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fb0a 	bl	800402e <UART_EndTransmit_IT>
    return;
 8003a1a:	e004      	b.n	8003a26 <HAL_UART_IRQHandler+0x51e>
    return;
 8003a1c:	bf00      	nop
 8003a1e:	e002      	b.n	8003a26 <HAL_UART_IRQHandler+0x51e>
      return;
 8003a20:	bf00      	nop
 8003a22:	e000      	b.n	8003a26 <HAL_UART_IRQHandler+0x51e>
      return;
 8003a24:	bf00      	nop
  }
}
 8003a26:	37e8      	adds	r7, #232	@ 0xe8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b090      	sub	sp, #64	@ 0x40
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d137      	bne.n	8003af4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a86:	2200      	movs	r2, #0
 8003a88:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3314      	adds	r3, #20
 8003a90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	623b      	str	r3, [r7, #32]
   return(result);
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3314      	adds	r3, #20
 8003aa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003aaa:	633a      	str	r2, [r7, #48]	@ 0x30
 8003aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e5      	bne.n	8003a8a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003abe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	330c      	adds	r3, #12
 8003ac4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	330c      	adds	r3, #12
 8003adc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ade:	61fa      	str	r2, [r7, #28]
 8003ae0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	69b9      	ldr	r1, [r7, #24]
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	617b      	str	r3, [r7, #20]
   return(result);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e5      	bne.n	8003abe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003af2:	e002      	b.n	8003afa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003af4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003af6:	f7fc ff07 	bl	8000908 <HAL_UART_TxCpltCallback>
}
 8003afa:	bf00      	nop
 8003afc:	3740      	adds	r7, #64	@ 0x40
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b0e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f7ff ff8b 	bl	8003a2c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b09c      	sub	sp, #112	@ 0x70
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b2a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d172      	bne.n	8003c20 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003b3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	330c      	adds	r3, #12
 8003b5e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003b60:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b62:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e5      	bne.n	8003b40 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3314      	adds	r3, #20
 8003b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3314      	adds	r3, #20
 8003b92:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003b94:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b96:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e5      	bne.n	8003b74 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3314      	adds	r3, #20
 8003bae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3314      	adds	r3, #20
 8003bc6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003bc8:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e5      	bne.n	8003ba8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003bdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d119      	bne.n	8003c20 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0310 	bic.w	r3, r3, #16
 8003c02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003c0c:	61fa      	str	r2, [r7, #28]
 8003c0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	69b9      	ldr	r1, [r7, #24]
 8003c12:	69fa      	ldr	r2, [r7, #28]
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	617b      	str	r3, [r7, #20]
   return(result);
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e5      	bne.n	8003bec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c22:	2200      	movs	r2, #0
 8003c24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d106      	bne.n	8003c3c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c32:	4619      	mov	r1, r3
 8003c34:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c36:	f7fc fe3f 	bl	80008b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c3a:	e002      	b.n	8003c42 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003c3c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c3e:	f7fc fe6d 	bl	800091c <HAL_UART_RxCpltCallback>
}
 8003c42:	bf00      	nop
 8003c44:	3770      	adds	r7, #112	@ 0x70
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d108      	bne.n	8003c78 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c6a:	085b      	lsrs	r3, r3, #1
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	4619      	mov	r1, r3
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f7fc fe21 	bl	80008b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c76:	e002      	b.n	8003c7e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f7ff fee1 	bl	8003a40 <HAL_UART_RxHalfCpltCallback>
}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c96:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca2:	2b80      	cmp	r3, #128	@ 0x80
 8003ca4:	bf0c      	ite	eq
 8003ca6:	2301      	moveq	r3, #1
 8003ca8:	2300      	movne	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b21      	cmp	r3, #33	@ 0x21
 8003cb8:	d108      	bne.n	8003ccc <UART_DMAError+0x46>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003cc6:	68b8      	ldr	r0, [r7, #8]
 8003cc8:	f000 f8c2 	bl	8003e50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd6:	2b40      	cmp	r3, #64	@ 0x40
 8003cd8:	bf0c      	ite	eq
 8003cda:	2301      	moveq	r3, #1
 8003cdc:	2300      	movne	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b22      	cmp	r3, #34	@ 0x22
 8003cec:	d108      	bne.n	8003d00 <UART_DMAError+0x7a>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003cfa:	68b8      	ldr	r0, [r7, #8]
 8003cfc:	f000 f8d0 	bl	8003ea0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d04:	f043 0210 	orr.w	r2, r3, #16
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d0c:	68b8      	ldr	r0, [r7, #8]
 8003d0e:	f7ff fea1 	bl	8003a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d12:	bf00      	nop
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b098      	sub	sp, #96	@ 0x60
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	4613      	mov	r3, r2
 8003d28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	88fa      	ldrh	r2, [r7, #6]
 8003d34:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2222      	movs	r2, #34	@ 0x22
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d48:	4a3e      	ldr	r2, [pc, #248]	@ (8003e44 <UART_Start_Receive_DMA+0x128>)
 8003d4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d50:	4a3d      	ldr	r2, [pc, #244]	@ (8003e48 <UART_Start_Receive_DMA+0x12c>)
 8003d52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d58:	4a3c      	ldr	r2, [pc, #240]	@ (8003e4c <UART_Start_Receive_DMA+0x130>)
 8003d5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d60:	2200      	movs	r2, #0
 8003d62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003d64:	f107 0308 	add.w	r3, r7, #8
 8003d68:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3304      	adds	r3, #4
 8003d74:	4619      	mov	r1, r3
 8003d76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	f7fd fc3c 	bl	80015f8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003d80:	2300      	movs	r3, #0
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d019      	beq.n	8003dd2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003dbe:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003dc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e5      	bne.n	8003d9e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3314      	adds	r3, #20
 8003dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3314      	adds	r3, #20
 8003df0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003df2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003df4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003df8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e5      	bne.n	8003dd2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3314      	adds	r3, #20
 8003e0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	e853 3f00 	ldrex	r3, [r3]
 8003e14:	617b      	str	r3, [r7, #20]
   return(result);
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3314      	adds	r3, #20
 8003e24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003e26:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	6a39      	ldr	r1, [r7, #32]
 8003e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e5      	bne.n	8003e06 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3760      	adds	r7, #96	@ 0x60
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	08003b1f 	.word	0x08003b1f
 8003e48:	08003c4b 	.word	0x08003c4b
 8003e4c:	08003c87 	.word	0x08003c87

08003e50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b089      	sub	sp, #36	@ 0x24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	330c      	adds	r3, #12
 8003e5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	e853 3f00 	ldrex	r3, [r3]
 8003e66:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	330c      	adds	r3, #12
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	61ba      	str	r2, [r7, #24]
 8003e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	6979      	ldr	r1, [r7, #20]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	613b      	str	r3, [r7, #16]
   return(result);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e5      	bne.n	8003e58 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003e94:	bf00      	nop
 8003e96:	3724      	adds	r7, #36	@ 0x24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b095      	sub	sp, #84	@ 0x54
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb2:	e853 3f00 	ldrex	r3, [r3]
 8003eb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	330c      	adds	r3, #12
 8003ec6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ec8:	643a      	str	r2, [r7, #64]	@ 0x40
 8003eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ece:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ed0:	e841 2300 	strex	r3, r2, [r1]
 8003ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e5      	bne.n	8003ea8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3314      	adds	r3, #20
 8003ee2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	e853 3f00 	ldrex	r3, [r3]
 8003eea:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f023 0301 	bic.w	r3, r3, #1
 8003ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3314      	adds	r3, #20
 8003efa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003efc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f04:	e841 2300 	strex	r3, r2, [r1]
 8003f08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1e5      	bne.n	8003edc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d119      	bne.n	8003f4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	330c      	adds	r3, #12
 8003f1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f023 0310 	bic.w	r3, r3, #16
 8003f2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	330c      	adds	r3, #12
 8003f36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f38:	61ba      	str	r2, [r7, #24]
 8003f3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3c:	6979      	ldr	r1, [r7, #20]
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	e841 2300 	strex	r3, r2, [r1]
 8003f44:	613b      	str	r3, [r7, #16]
   return(result);
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e5      	bne.n	8003f18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f5a:	bf00      	nop
 8003f5c:	3754      	adds	r7, #84	@ 0x54
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f7ff fd67 	bl	8003a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f86:	bf00      	nop
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b085      	sub	sp, #20
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b21      	cmp	r3, #33	@ 0x21
 8003fa0:	d13e      	bne.n	8004020 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003faa:	d114      	bne.n	8003fd6 <UART_Transmit_IT+0x48>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d110      	bne.n	8003fd6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	1c9a      	adds	r2, r3, #2
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	621a      	str	r2, [r3, #32]
 8003fd4:	e008      	b.n	8003fe8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	1c59      	adds	r1, r3, #1
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6211      	str	r1, [r2, #32]
 8003fe0:	781a      	ldrb	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10f      	bne.n	800401c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800400a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800401a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	e000      	b.n	8004022 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004020:	2302      	movs	r3, #2
  }
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004044:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fc fc5a 	bl	8000908 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b08c      	sub	sp, #48	@ 0x30
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b22      	cmp	r3, #34	@ 0x22
 8004070:	f040 80ae 	bne.w	80041d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800407c:	d117      	bne.n	80040ae <UART_Receive_IT+0x50>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d113      	bne.n	80040ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004086:	2300      	movs	r3, #0
 8004088:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	b29b      	uxth	r3, r3
 8004098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800409c:	b29a      	uxth	r2, r3
 800409e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a6:	1c9a      	adds	r2, r3, #2
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80040ac:	e026      	b.n	80040fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040c0:	d007      	beq.n	80040d2 <UART_Receive_IT+0x74>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <UART_Receive_IT+0x82>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d106      	bne.n	80040e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040dc:	701a      	strb	r2, [r3, #0]
 80040de:	e008      	b.n	80040f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29b      	uxth	r3, r3
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	4619      	mov	r1, r3
 800410a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800410c:	2b00      	cmp	r3, #0
 800410e:	d15d      	bne.n	80041cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0220 	bic.w	r2, r2, #32
 800411e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800412e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0201 	bic.w	r2, r2, #1
 800413e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004152:	2b01      	cmp	r3, #1
 8004154:	d135      	bne.n	80041c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	613b      	str	r3, [r7, #16]
   return(result);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f023 0310 	bic.w	r3, r3, #16
 8004172:	627b      	str	r3, [r7, #36]	@ 0x24
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417c:	623a      	str	r2, [r7, #32]
 800417e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	69f9      	ldr	r1, [r7, #28]
 8004182:	6a3a      	ldr	r2, [r7, #32]
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	61bb      	str	r3, [r7, #24]
   return(result);
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e5      	bne.n	800415c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	2b10      	cmp	r3, #16
 800419c:	d10a      	bne.n	80041b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041b8:	4619      	mov	r1, r3
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fc fb7c 	bl	80008b8 <HAL_UARTEx_RxEventCallback>
 80041c0:	e002      	b.n	80041c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fc fbaa 	bl	800091c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	e002      	b.n	80041d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e000      	b.n	80041d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80041d0:	2302      	movs	r3, #2
  }
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3730      	adds	r7, #48	@ 0x30
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e0:	b0c0      	sub	sp, #256	@ 0x100
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f8:	68d9      	ldr	r1, [r3, #12]
 80041fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	ea40 0301 	orr.w	r3, r0, r1
 8004204:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	431a      	orrs	r2, r3
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	431a      	orrs	r2, r3
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004234:	f021 010c 	bic.w	r1, r1, #12
 8004238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004242:	430b      	orrs	r3, r1
 8004244:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004256:	6999      	ldr	r1, [r3, #24]
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	ea40 0301 	orr.w	r3, r0, r1
 8004262:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	4b8f      	ldr	r3, [pc, #572]	@ (80044a8 <UART_SetConfig+0x2cc>)
 800426c:	429a      	cmp	r2, r3
 800426e:	d005      	beq.n	800427c <UART_SetConfig+0xa0>
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	4b8d      	ldr	r3, [pc, #564]	@ (80044ac <UART_SetConfig+0x2d0>)
 8004278:	429a      	cmp	r2, r3
 800427a:	d104      	bne.n	8004286 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800427c:	f7fe fb9c 	bl	80029b8 <HAL_RCC_GetPCLK2Freq>
 8004280:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004284:	e003      	b.n	800428e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004286:	f7fe fb83 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 800428a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800428e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004298:	f040 810c 	bne.w	80044b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800429c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042a0:	2200      	movs	r2, #0
 80042a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80042a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80042aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80042ae:	4622      	mov	r2, r4
 80042b0:	462b      	mov	r3, r5
 80042b2:	1891      	adds	r1, r2, r2
 80042b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80042b6:	415b      	adcs	r3, r3
 80042b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80042be:	4621      	mov	r1, r4
 80042c0:	eb12 0801 	adds.w	r8, r2, r1
 80042c4:	4629      	mov	r1, r5
 80042c6:	eb43 0901 	adc.w	r9, r3, r1
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	f04f 0300 	mov.w	r3, #0
 80042d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042de:	4690      	mov	r8, r2
 80042e0:	4699      	mov	r9, r3
 80042e2:	4623      	mov	r3, r4
 80042e4:	eb18 0303 	adds.w	r3, r8, r3
 80042e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042ec:	462b      	mov	r3, r5
 80042ee:	eb49 0303 	adc.w	r3, r9, r3
 80042f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004302:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004306:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800430a:	460b      	mov	r3, r1
 800430c:	18db      	adds	r3, r3, r3
 800430e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004310:	4613      	mov	r3, r2
 8004312:	eb42 0303 	adc.w	r3, r2, r3
 8004316:	657b      	str	r3, [r7, #84]	@ 0x54
 8004318:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800431c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004320:	f7fb ffb6 	bl	8000290 <__aeabi_uldivmod>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4b61      	ldr	r3, [pc, #388]	@ (80044b0 <UART_SetConfig+0x2d4>)
 800432a:	fba3 2302 	umull	r2, r3, r3, r2
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	011c      	lsls	r4, r3, #4
 8004332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004336:	2200      	movs	r2, #0
 8004338:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800433c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004340:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004344:	4642      	mov	r2, r8
 8004346:	464b      	mov	r3, r9
 8004348:	1891      	adds	r1, r2, r2
 800434a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800434c:	415b      	adcs	r3, r3
 800434e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004350:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004354:	4641      	mov	r1, r8
 8004356:	eb12 0a01 	adds.w	sl, r2, r1
 800435a:	4649      	mov	r1, r9
 800435c:	eb43 0b01 	adc.w	fp, r3, r1
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800436c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004370:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004374:	4692      	mov	sl, r2
 8004376:	469b      	mov	fp, r3
 8004378:	4643      	mov	r3, r8
 800437a:	eb1a 0303 	adds.w	r3, sl, r3
 800437e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004382:	464b      	mov	r3, r9
 8004384:	eb4b 0303 	adc.w	r3, fp, r3
 8004388:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004398:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800439c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043a0:	460b      	mov	r3, r1
 80043a2:	18db      	adds	r3, r3, r3
 80043a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80043a6:	4613      	mov	r3, r2
 80043a8:	eb42 0303 	adc.w	r3, r2, r3
 80043ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80043ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80043b6:	f7fb ff6b 	bl	8000290 <__aeabi_uldivmod>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4611      	mov	r1, r2
 80043c0:	4b3b      	ldr	r3, [pc, #236]	@ (80044b0 <UART_SetConfig+0x2d4>)
 80043c2:	fba3 2301 	umull	r2, r3, r3, r1
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	2264      	movs	r2, #100	@ 0x64
 80043ca:	fb02 f303 	mul.w	r3, r2, r3
 80043ce:	1acb      	subs	r3, r1, r3
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80043d6:	4b36      	ldr	r3, [pc, #216]	@ (80044b0 <UART_SetConfig+0x2d4>)
 80043d8:	fba3 2302 	umull	r2, r3, r3, r2
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80043e4:	441c      	add	r4, r3
 80043e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80043f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80043f8:	4642      	mov	r2, r8
 80043fa:	464b      	mov	r3, r9
 80043fc:	1891      	adds	r1, r2, r2
 80043fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004400:	415b      	adcs	r3, r3
 8004402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004404:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004408:	4641      	mov	r1, r8
 800440a:	1851      	adds	r1, r2, r1
 800440c:	6339      	str	r1, [r7, #48]	@ 0x30
 800440e:	4649      	mov	r1, r9
 8004410:	414b      	adcs	r3, r1
 8004412:	637b      	str	r3, [r7, #52]	@ 0x34
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004420:	4659      	mov	r1, fp
 8004422:	00cb      	lsls	r3, r1, #3
 8004424:	4651      	mov	r1, sl
 8004426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800442a:	4651      	mov	r1, sl
 800442c:	00ca      	lsls	r2, r1, #3
 800442e:	4610      	mov	r0, r2
 8004430:	4619      	mov	r1, r3
 8004432:	4603      	mov	r3, r0
 8004434:	4642      	mov	r2, r8
 8004436:	189b      	adds	r3, r3, r2
 8004438:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800443c:	464b      	mov	r3, r9
 800443e:	460a      	mov	r2, r1
 8004440:	eb42 0303 	adc.w	r3, r2, r3
 8004444:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004454:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004458:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800445c:	460b      	mov	r3, r1
 800445e:	18db      	adds	r3, r3, r3
 8004460:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004462:	4613      	mov	r3, r2
 8004464:	eb42 0303 	adc.w	r3, r2, r3
 8004468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800446a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800446e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004472:	f7fb ff0d 	bl	8000290 <__aeabi_uldivmod>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4b0d      	ldr	r3, [pc, #52]	@ (80044b0 <UART_SetConfig+0x2d4>)
 800447c:	fba3 1302 	umull	r1, r3, r3, r2
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	2164      	movs	r1, #100	@ 0x64
 8004484:	fb01 f303 	mul.w	r3, r1, r3
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	3332      	adds	r3, #50	@ 0x32
 800448e:	4a08      	ldr	r2, [pc, #32]	@ (80044b0 <UART_SetConfig+0x2d4>)
 8004490:	fba2 2303 	umull	r2, r3, r2, r3
 8004494:	095b      	lsrs	r3, r3, #5
 8004496:	f003 0207 	and.w	r2, r3, #7
 800449a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4422      	add	r2, r4
 80044a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044a4:	e106      	b.n	80046b4 <UART_SetConfig+0x4d8>
 80044a6:	bf00      	nop
 80044a8:	40011000 	.word	0x40011000
 80044ac:	40011400 	.word	0x40011400
 80044b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044b8:	2200      	movs	r2, #0
 80044ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80044c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80044c6:	4642      	mov	r2, r8
 80044c8:	464b      	mov	r3, r9
 80044ca:	1891      	adds	r1, r2, r2
 80044cc:	6239      	str	r1, [r7, #32]
 80044ce:	415b      	adcs	r3, r3
 80044d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044d6:	4641      	mov	r1, r8
 80044d8:	1854      	adds	r4, r2, r1
 80044da:	4649      	mov	r1, r9
 80044dc:	eb43 0501 	adc.w	r5, r3, r1
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	00eb      	lsls	r3, r5, #3
 80044ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ee:	00e2      	lsls	r2, r4, #3
 80044f0:	4614      	mov	r4, r2
 80044f2:	461d      	mov	r5, r3
 80044f4:	4643      	mov	r3, r8
 80044f6:	18e3      	adds	r3, r4, r3
 80044f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044fc:	464b      	mov	r3, r9
 80044fe:	eb45 0303 	adc.w	r3, r5, r3
 8004502:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004512:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004522:	4629      	mov	r1, r5
 8004524:	008b      	lsls	r3, r1, #2
 8004526:	4621      	mov	r1, r4
 8004528:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800452c:	4621      	mov	r1, r4
 800452e:	008a      	lsls	r2, r1, #2
 8004530:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004534:	f7fb feac 	bl	8000290 <__aeabi_uldivmod>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4b60      	ldr	r3, [pc, #384]	@ (80046c0 <UART_SetConfig+0x4e4>)
 800453e:	fba3 2302 	umull	r2, r3, r3, r2
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	011c      	lsls	r4, r3, #4
 8004546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800454a:	2200      	movs	r2, #0
 800454c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004550:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004554:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004558:	4642      	mov	r2, r8
 800455a:	464b      	mov	r3, r9
 800455c:	1891      	adds	r1, r2, r2
 800455e:	61b9      	str	r1, [r7, #24]
 8004560:	415b      	adcs	r3, r3
 8004562:	61fb      	str	r3, [r7, #28]
 8004564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004568:	4641      	mov	r1, r8
 800456a:	1851      	adds	r1, r2, r1
 800456c:	6139      	str	r1, [r7, #16]
 800456e:	4649      	mov	r1, r9
 8004570:	414b      	adcs	r3, r1
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004580:	4659      	mov	r1, fp
 8004582:	00cb      	lsls	r3, r1, #3
 8004584:	4651      	mov	r1, sl
 8004586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800458a:	4651      	mov	r1, sl
 800458c:	00ca      	lsls	r2, r1, #3
 800458e:	4610      	mov	r0, r2
 8004590:	4619      	mov	r1, r3
 8004592:	4603      	mov	r3, r0
 8004594:	4642      	mov	r2, r8
 8004596:	189b      	adds	r3, r3, r2
 8004598:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800459c:	464b      	mov	r3, r9
 800459e:	460a      	mov	r2, r1
 80045a0:	eb42 0303 	adc.w	r3, r2, r3
 80045a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80045c0:	4649      	mov	r1, r9
 80045c2:	008b      	lsls	r3, r1, #2
 80045c4:	4641      	mov	r1, r8
 80045c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045ca:	4641      	mov	r1, r8
 80045cc:	008a      	lsls	r2, r1, #2
 80045ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80045d2:	f7fb fe5d 	bl	8000290 <__aeabi_uldivmod>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4611      	mov	r1, r2
 80045dc:	4b38      	ldr	r3, [pc, #224]	@ (80046c0 <UART_SetConfig+0x4e4>)
 80045de:	fba3 2301 	umull	r2, r3, r3, r1
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	2264      	movs	r2, #100	@ 0x64
 80045e6:	fb02 f303 	mul.w	r3, r2, r3
 80045ea:	1acb      	subs	r3, r1, r3
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	3332      	adds	r3, #50	@ 0x32
 80045f0:	4a33      	ldr	r2, [pc, #204]	@ (80046c0 <UART_SetConfig+0x4e4>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045fc:	441c      	add	r4, r3
 80045fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004602:	2200      	movs	r2, #0
 8004604:	673b      	str	r3, [r7, #112]	@ 0x70
 8004606:	677a      	str	r2, [r7, #116]	@ 0x74
 8004608:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800460c:	4642      	mov	r2, r8
 800460e:	464b      	mov	r3, r9
 8004610:	1891      	adds	r1, r2, r2
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	415b      	adcs	r3, r3
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800461c:	4641      	mov	r1, r8
 800461e:	1851      	adds	r1, r2, r1
 8004620:	6039      	str	r1, [r7, #0]
 8004622:	4649      	mov	r1, r9
 8004624:	414b      	adcs	r3, r1
 8004626:	607b      	str	r3, [r7, #4]
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004634:	4659      	mov	r1, fp
 8004636:	00cb      	lsls	r3, r1, #3
 8004638:	4651      	mov	r1, sl
 800463a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800463e:	4651      	mov	r1, sl
 8004640:	00ca      	lsls	r2, r1, #3
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	4603      	mov	r3, r0
 8004648:	4642      	mov	r2, r8
 800464a:	189b      	adds	r3, r3, r2
 800464c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800464e:	464b      	mov	r3, r9
 8004650:	460a      	mov	r2, r1
 8004652:	eb42 0303 	adc.w	r3, r2, r3
 8004656:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	663b      	str	r3, [r7, #96]	@ 0x60
 8004662:	667a      	str	r2, [r7, #100]	@ 0x64
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004670:	4649      	mov	r1, r9
 8004672:	008b      	lsls	r3, r1, #2
 8004674:	4641      	mov	r1, r8
 8004676:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800467a:	4641      	mov	r1, r8
 800467c:	008a      	lsls	r2, r1, #2
 800467e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004682:	f7fb fe05 	bl	8000290 <__aeabi_uldivmod>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4b0d      	ldr	r3, [pc, #52]	@ (80046c0 <UART_SetConfig+0x4e4>)
 800468c:	fba3 1302 	umull	r1, r3, r3, r2
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	2164      	movs	r1, #100	@ 0x64
 8004694:	fb01 f303 	mul.w	r3, r1, r3
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	3332      	adds	r3, #50	@ 0x32
 800469e:	4a08      	ldr	r2, [pc, #32]	@ (80046c0 <UART_SetConfig+0x4e4>)
 80046a0:	fba2 2303 	umull	r2, r3, r2, r3
 80046a4:	095b      	lsrs	r3, r3, #5
 80046a6:	f003 020f 	and.w	r2, r3, #15
 80046aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4422      	add	r2, r4
 80046b2:	609a      	str	r2, [r3, #8]
}
 80046b4:	bf00      	nop
 80046b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80046ba:	46bd      	mov	sp, r7
 80046bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c0:	51eb851f 	.word	0x51eb851f

080046c4 <sniprintf>:
 80046c4:	b40c      	push	{r2, r3}
 80046c6:	b530      	push	{r4, r5, lr}
 80046c8:	4b17      	ldr	r3, [pc, #92]	@ (8004728 <sniprintf+0x64>)
 80046ca:	1e0c      	subs	r4, r1, #0
 80046cc:	681d      	ldr	r5, [r3, #0]
 80046ce:	b09d      	sub	sp, #116	@ 0x74
 80046d0:	da08      	bge.n	80046e4 <sniprintf+0x20>
 80046d2:	238b      	movs	r3, #139	@ 0x8b
 80046d4:	602b      	str	r3, [r5, #0]
 80046d6:	f04f 30ff 	mov.w	r0, #4294967295
 80046da:	b01d      	add	sp, #116	@ 0x74
 80046dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046e0:	b002      	add	sp, #8
 80046e2:	4770      	bx	lr
 80046e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80046e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80046ec:	bf14      	ite	ne
 80046ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 80046f2:	4623      	moveq	r3, r4
 80046f4:	9304      	str	r3, [sp, #16]
 80046f6:	9307      	str	r3, [sp, #28]
 80046f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046fc:	9002      	str	r0, [sp, #8]
 80046fe:	9006      	str	r0, [sp, #24]
 8004700:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004704:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004706:	ab21      	add	r3, sp, #132	@ 0x84
 8004708:	a902      	add	r1, sp, #8
 800470a:	4628      	mov	r0, r5
 800470c:	9301      	str	r3, [sp, #4]
 800470e:	f000 f9cf 	bl	8004ab0 <_svfiprintf_r>
 8004712:	1c43      	adds	r3, r0, #1
 8004714:	bfbc      	itt	lt
 8004716:	238b      	movlt	r3, #139	@ 0x8b
 8004718:	602b      	strlt	r3, [r5, #0]
 800471a:	2c00      	cmp	r4, #0
 800471c:	d0dd      	beq.n	80046da <sniprintf+0x16>
 800471e:	9b02      	ldr	r3, [sp, #8]
 8004720:	2200      	movs	r2, #0
 8004722:	701a      	strb	r2, [r3, #0]
 8004724:	e7d9      	b.n	80046da <sniprintf+0x16>
 8004726:	bf00      	nop
 8004728:	2000000c 	.word	0x2000000c

0800472c <_vsniprintf_r>:
 800472c:	b530      	push	{r4, r5, lr}
 800472e:	4614      	mov	r4, r2
 8004730:	2c00      	cmp	r4, #0
 8004732:	b09b      	sub	sp, #108	@ 0x6c
 8004734:	4605      	mov	r5, r0
 8004736:	461a      	mov	r2, r3
 8004738:	da05      	bge.n	8004746 <_vsniprintf_r+0x1a>
 800473a:	238b      	movs	r3, #139	@ 0x8b
 800473c:	6003      	str	r3, [r0, #0]
 800473e:	f04f 30ff 	mov.w	r0, #4294967295
 8004742:	b01b      	add	sp, #108	@ 0x6c
 8004744:	bd30      	pop	{r4, r5, pc}
 8004746:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800474a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800474e:	bf14      	ite	ne
 8004750:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004754:	4623      	moveq	r3, r4
 8004756:	9302      	str	r3, [sp, #8]
 8004758:	9305      	str	r3, [sp, #20]
 800475a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800475e:	9100      	str	r1, [sp, #0]
 8004760:	9104      	str	r1, [sp, #16]
 8004762:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004766:	4669      	mov	r1, sp
 8004768:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800476a:	f000 f9a1 	bl	8004ab0 <_svfiprintf_r>
 800476e:	1c43      	adds	r3, r0, #1
 8004770:	bfbc      	itt	lt
 8004772:	238b      	movlt	r3, #139	@ 0x8b
 8004774:	602b      	strlt	r3, [r5, #0]
 8004776:	2c00      	cmp	r4, #0
 8004778:	d0e3      	beq.n	8004742 <_vsniprintf_r+0x16>
 800477a:	9b00      	ldr	r3, [sp, #0]
 800477c:	2200      	movs	r2, #0
 800477e:	701a      	strb	r2, [r3, #0]
 8004780:	e7df      	b.n	8004742 <_vsniprintf_r+0x16>
	...

08004784 <vsniprintf>:
 8004784:	b507      	push	{r0, r1, r2, lr}
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	4613      	mov	r3, r2
 800478a:	460a      	mov	r2, r1
 800478c:	4601      	mov	r1, r0
 800478e:	4803      	ldr	r0, [pc, #12]	@ (800479c <vsniprintf+0x18>)
 8004790:	6800      	ldr	r0, [r0, #0]
 8004792:	f7ff ffcb 	bl	800472c <_vsniprintf_r>
 8004796:	b003      	add	sp, #12
 8004798:	f85d fb04 	ldr.w	pc, [sp], #4
 800479c:	2000000c 	.word	0x2000000c

080047a0 <memset>:
 80047a0:	4402      	add	r2, r0
 80047a2:	4603      	mov	r3, r0
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d100      	bne.n	80047aa <memset+0xa>
 80047a8:	4770      	bx	lr
 80047aa:	f803 1b01 	strb.w	r1, [r3], #1
 80047ae:	e7f9      	b.n	80047a4 <memset+0x4>

080047b0 <__errno>:
 80047b0:	4b01      	ldr	r3, [pc, #4]	@ (80047b8 <__errno+0x8>)
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	2000000c 	.word	0x2000000c

080047bc <__libc_init_array>:
 80047bc:	b570      	push	{r4, r5, r6, lr}
 80047be:	4d0d      	ldr	r5, [pc, #52]	@ (80047f4 <__libc_init_array+0x38>)
 80047c0:	4c0d      	ldr	r4, [pc, #52]	@ (80047f8 <__libc_init_array+0x3c>)
 80047c2:	1b64      	subs	r4, r4, r5
 80047c4:	10a4      	asrs	r4, r4, #2
 80047c6:	2600      	movs	r6, #0
 80047c8:	42a6      	cmp	r6, r4
 80047ca:	d109      	bne.n	80047e0 <__libc_init_array+0x24>
 80047cc:	4d0b      	ldr	r5, [pc, #44]	@ (80047fc <__libc_init_array+0x40>)
 80047ce:	4c0c      	ldr	r4, [pc, #48]	@ (8004800 <__libc_init_array+0x44>)
 80047d0:	f000 fc66 	bl	80050a0 <_init>
 80047d4:	1b64      	subs	r4, r4, r5
 80047d6:	10a4      	asrs	r4, r4, #2
 80047d8:	2600      	movs	r6, #0
 80047da:	42a6      	cmp	r6, r4
 80047dc:	d105      	bne.n	80047ea <__libc_init_array+0x2e>
 80047de:	bd70      	pop	{r4, r5, r6, pc}
 80047e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e4:	4798      	blx	r3
 80047e6:	3601      	adds	r6, #1
 80047e8:	e7ee      	b.n	80047c8 <__libc_init_array+0xc>
 80047ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ee:	4798      	blx	r3
 80047f0:	3601      	adds	r6, #1
 80047f2:	e7f2      	b.n	80047da <__libc_init_array+0x1e>
 80047f4:	0800521c 	.word	0x0800521c
 80047f8:	0800521c 	.word	0x0800521c
 80047fc:	0800521c 	.word	0x0800521c
 8004800:	08005220 	.word	0x08005220

08004804 <__retarget_lock_acquire_recursive>:
 8004804:	4770      	bx	lr

08004806 <__retarget_lock_release_recursive>:
 8004806:	4770      	bx	lr

08004808 <_free_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	4605      	mov	r5, r0
 800480c:	2900      	cmp	r1, #0
 800480e:	d041      	beq.n	8004894 <_free_r+0x8c>
 8004810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004814:	1f0c      	subs	r4, r1, #4
 8004816:	2b00      	cmp	r3, #0
 8004818:	bfb8      	it	lt
 800481a:	18e4      	addlt	r4, r4, r3
 800481c:	f000 f8e0 	bl	80049e0 <__malloc_lock>
 8004820:	4a1d      	ldr	r2, [pc, #116]	@ (8004898 <_free_r+0x90>)
 8004822:	6813      	ldr	r3, [r2, #0]
 8004824:	b933      	cbnz	r3, 8004834 <_free_r+0x2c>
 8004826:	6063      	str	r3, [r4, #4]
 8004828:	6014      	str	r4, [r2, #0]
 800482a:	4628      	mov	r0, r5
 800482c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004830:	f000 b8dc 	b.w	80049ec <__malloc_unlock>
 8004834:	42a3      	cmp	r3, r4
 8004836:	d908      	bls.n	800484a <_free_r+0x42>
 8004838:	6820      	ldr	r0, [r4, #0]
 800483a:	1821      	adds	r1, r4, r0
 800483c:	428b      	cmp	r3, r1
 800483e:	bf01      	itttt	eq
 8004840:	6819      	ldreq	r1, [r3, #0]
 8004842:	685b      	ldreq	r3, [r3, #4]
 8004844:	1809      	addeq	r1, r1, r0
 8004846:	6021      	streq	r1, [r4, #0]
 8004848:	e7ed      	b.n	8004826 <_free_r+0x1e>
 800484a:	461a      	mov	r2, r3
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	b10b      	cbz	r3, 8004854 <_free_r+0x4c>
 8004850:	42a3      	cmp	r3, r4
 8004852:	d9fa      	bls.n	800484a <_free_r+0x42>
 8004854:	6811      	ldr	r1, [r2, #0]
 8004856:	1850      	adds	r0, r2, r1
 8004858:	42a0      	cmp	r0, r4
 800485a:	d10b      	bne.n	8004874 <_free_r+0x6c>
 800485c:	6820      	ldr	r0, [r4, #0]
 800485e:	4401      	add	r1, r0
 8004860:	1850      	adds	r0, r2, r1
 8004862:	4283      	cmp	r3, r0
 8004864:	6011      	str	r1, [r2, #0]
 8004866:	d1e0      	bne.n	800482a <_free_r+0x22>
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	6053      	str	r3, [r2, #4]
 800486e:	4408      	add	r0, r1
 8004870:	6010      	str	r0, [r2, #0]
 8004872:	e7da      	b.n	800482a <_free_r+0x22>
 8004874:	d902      	bls.n	800487c <_free_r+0x74>
 8004876:	230c      	movs	r3, #12
 8004878:	602b      	str	r3, [r5, #0]
 800487a:	e7d6      	b.n	800482a <_free_r+0x22>
 800487c:	6820      	ldr	r0, [r4, #0]
 800487e:	1821      	adds	r1, r4, r0
 8004880:	428b      	cmp	r3, r1
 8004882:	bf04      	itt	eq
 8004884:	6819      	ldreq	r1, [r3, #0]
 8004886:	685b      	ldreq	r3, [r3, #4]
 8004888:	6063      	str	r3, [r4, #4]
 800488a:	bf04      	itt	eq
 800488c:	1809      	addeq	r1, r1, r0
 800488e:	6021      	streq	r1, [r4, #0]
 8004890:	6054      	str	r4, [r2, #4]
 8004892:	e7ca      	b.n	800482a <_free_r+0x22>
 8004894:	bd38      	pop	{r3, r4, r5, pc}
 8004896:	bf00      	nop
 8004898:	20000bc0 	.word	0x20000bc0

0800489c <sbrk_aligned>:
 800489c:	b570      	push	{r4, r5, r6, lr}
 800489e:	4e0f      	ldr	r6, [pc, #60]	@ (80048dc <sbrk_aligned+0x40>)
 80048a0:	460c      	mov	r4, r1
 80048a2:	6831      	ldr	r1, [r6, #0]
 80048a4:	4605      	mov	r5, r0
 80048a6:	b911      	cbnz	r1, 80048ae <sbrk_aligned+0x12>
 80048a8:	f000 fba6 	bl	8004ff8 <_sbrk_r>
 80048ac:	6030      	str	r0, [r6, #0]
 80048ae:	4621      	mov	r1, r4
 80048b0:	4628      	mov	r0, r5
 80048b2:	f000 fba1 	bl	8004ff8 <_sbrk_r>
 80048b6:	1c43      	adds	r3, r0, #1
 80048b8:	d103      	bne.n	80048c2 <sbrk_aligned+0x26>
 80048ba:	f04f 34ff 	mov.w	r4, #4294967295
 80048be:	4620      	mov	r0, r4
 80048c0:	bd70      	pop	{r4, r5, r6, pc}
 80048c2:	1cc4      	adds	r4, r0, #3
 80048c4:	f024 0403 	bic.w	r4, r4, #3
 80048c8:	42a0      	cmp	r0, r4
 80048ca:	d0f8      	beq.n	80048be <sbrk_aligned+0x22>
 80048cc:	1a21      	subs	r1, r4, r0
 80048ce:	4628      	mov	r0, r5
 80048d0:	f000 fb92 	bl	8004ff8 <_sbrk_r>
 80048d4:	3001      	adds	r0, #1
 80048d6:	d1f2      	bne.n	80048be <sbrk_aligned+0x22>
 80048d8:	e7ef      	b.n	80048ba <sbrk_aligned+0x1e>
 80048da:	bf00      	nop
 80048dc:	20000bbc 	.word	0x20000bbc

080048e0 <_malloc_r>:
 80048e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048e4:	1ccd      	adds	r5, r1, #3
 80048e6:	f025 0503 	bic.w	r5, r5, #3
 80048ea:	3508      	adds	r5, #8
 80048ec:	2d0c      	cmp	r5, #12
 80048ee:	bf38      	it	cc
 80048f0:	250c      	movcc	r5, #12
 80048f2:	2d00      	cmp	r5, #0
 80048f4:	4606      	mov	r6, r0
 80048f6:	db01      	blt.n	80048fc <_malloc_r+0x1c>
 80048f8:	42a9      	cmp	r1, r5
 80048fa:	d904      	bls.n	8004906 <_malloc_r+0x26>
 80048fc:	230c      	movs	r3, #12
 80048fe:	6033      	str	r3, [r6, #0]
 8004900:	2000      	movs	r0, #0
 8004902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004906:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80049dc <_malloc_r+0xfc>
 800490a:	f000 f869 	bl	80049e0 <__malloc_lock>
 800490e:	f8d8 3000 	ldr.w	r3, [r8]
 8004912:	461c      	mov	r4, r3
 8004914:	bb44      	cbnz	r4, 8004968 <_malloc_r+0x88>
 8004916:	4629      	mov	r1, r5
 8004918:	4630      	mov	r0, r6
 800491a:	f7ff ffbf 	bl	800489c <sbrk_aligned>
 800491e:	1c43      	adds	r3, r0, #1
 8004920:	4604      	mov	r4, r0
 8004922:	d158      	bne.n	80049d6 <_malloc_r+0xf6>
 8004924:	f8d8 4000 	ldr.w	r4, [r8]
 8004928:	4627      	mov	r7, r4
 800492a:	2f00      	cmp	r7, #0
 800492c:	d143      	bne.n	80049b6 <_malloc_r+0xd6>
 800492e:	2c00      	cmp	r4, #0
 8004930:	d04b      	beq.n	80049ca <_malloc_r+0xea>
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	4639      	mov	r1, r7
 8004936:	4630      	mov	r0, r6
 8004938:	eb04 0903 	add.w	r9, r4, r3
 800493c:	f000 fb5c 	bl	8004ff8 <_sbrk_r>
 8004940:	4581      	cmp	r9, r0
 8004942:	d142      	bne.n	80049ca <_malloc_r+0xea>
 8004944:	6821      	ldr	r1, [r4, #0]
 8004946:	1a6d      	subs	r5, r5, r1
 8004948:	4629      	mov	r1, r5
 800494a:	4630      	mov	r0, r6
 800494c:	f7ff ffa6 	bl	800489c <sbrk_aligned>
 8004950:	3001      	adds	r0, #1
 8004952:	d03a      	beq.n	80049ca <_malloc_r+0xea>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	442b      	add	r3, r5
 8004958:	6023      	str	r3, [r4, #0]
 800495a:	f8d8 3000 	ldr.w	r3, [r8]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	bb62      	cbnz	r2, 80049bc <_malloc_r+0xdc>
 8004962:	f8c8 7000 	str.w	r7, [r8]
 8004966:	e00f      	b.n	8004988 <_malloc_r+0xa8>
 8004968:	6822      	ldr	r2, [r4, #0]
 800496a:	1b52      	subs	r2, r2, r5
 800496c:	d420      	bmi.n	80049b0 <_malloc_r+0xd0>
 800496e:	2a0b      	cmp	r2, #11
 8004970:	d917      	bls.n	80049a2 <_malloc_r+0xc2>
 8004972:	1961      	adds	r1, r4, r5
 8004974:	42a3      	cmp	r3, r4
 8004976:	6025      	str	r5, [r4, #0]
 8004978:	bf18      	it	ne
 800497a:	6059      	strne	r1, [r3, #4]
 800497c:	6863      	ldr	r3, [r4, #4]
 800497e:	bf08      	it	eq
 8004980:	f8c8 1000 	streq.w	r1, [r8]
 8004984:	5162      	str	r2, [r4, r5]
 8004986:	604b      	str	r3, [r1, #4]
 8004988:	4630      	mov	r0, r6
 800498a:	f000 f82f 	bl	80049ec <__malloc_unlock>
 800498e:	f104 000b 	add.w	r0, r4, #11
 8004992:	1d23      	adds	r3, r4, #4
 8004994:	f020 0007 	bic.w	r0, r0, #7
 8004998:	1ac2      	subs	r2, r0, r3
 800499a:	bf1c      	itt	ne
 800499c:	1a1b      	subne	r3, r3, r0
 800499e:	50a3      	strne	r3, [r4, r2]
 80049a0:	e7af      	b.n	8004902 <_malloc_r+0x22>
 80049a2:	6862      	ldr	r2, [r4, #4]
 80049a4:	42a3      	cmp	r3, r4
 80049a6:	bf0c      	ite	eq
 80049a8:	f8c8 2000 	streq.w	r2, [r8]
 80049ac:	605a      	strne	r2, [r3, #4]
 80049ae:	e7eb      	b.n	8004988 <_malloc_r+0xa8>
 80049b0:	4623      	mov	r3, r4
 80049b2:	6864      	ldr	r4, [r4, #4]
 80049b4:	e7ae      	b.n	8004914 <_malloc_r+0x34>
 80049b6:	463c      	mov	r4, r7
 80049b8:	687f      	ldr	r7, [r7, #4]
 80049ba:	e7b6      	b.n	800492a <_malloc_r+0x4a>
 80049bc:	461a      	mov	r2, r3
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	42a3      	cmp	r3, r4
 80049c2:	d1fb      	bne.n	80049bc <_malloc_r+0xdc>
 80049c4:	2300      	movs	r3, #0
 80049c6:	6053      	str	r3, [r2, #4]
 80049c8:	e7de      	b.n	8004988 <_malloc_r+0xa8>
 80049ca:	230c      	movs	r3, #12
 80049cc:	6033      	str	r3, [r6, #0]
 80049ce:	4630      	mov	r0, r6
 80049d0:	f000 f80c 	bl	80049ec <__malloc_unlock>
 80049d4:	e794      	b.n	8004900 <_malloc_r+0x20>
 80049d6:	6005      	str	r5, [r0, #0]
 80049d8:	e7d6      	b.n	8004988 <_malloc_r+0xa8>
 80049da:	bf00      	nop
 80049dc:	20000bc0 	.word	0x20000bc0

080049e0 <__malloc_lock>:
 80049e0:	4801      	ldr	r0, [pc, #4]	@ (80049e8 <__malloc_lock+0x8>)
 80049e2:	f7ff bf0f 	b.w	8004804 <__retarget_lock_acquire_recursive>
 80049e6:	bf00      	nop
 80049e8:	20000bb8 	.word	0x20000bb8

080049ec <__malloc_unlock>:
 80049ec:	4801      	ldr	r0, [pc, #4]	@ (80049f4 <__malloc_unlock+0x8>)
 80049ee:	f7ff bf0a 	b.w	8004806 <__retarget_lock_release_recursive>
 80049f2:	bf00      	nop
 80049f4:	20000bb8 	.word	0x20000bb8

080049f8 <__ssputs_r>:
 80049f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049fc:	688e      	ldr	r6, [r1, #8]
 80049fe:	461f      	mov	r7, r3
 8004a00:	42be      	cmp	r6, r7
 8004a02:	680b      	ldr	r3, [r1, #0]
 8004a04:	4682      	mov	sl, r0
 8004a06:	460c      	mov	r4, r1
 8004a08:	4690      	mov	r8, r2
 8004a0a:	d82d      	bhi.n	8004a68 <__ssputs_r+0x70>
 8004a0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004a14:	d026      	beq.n	8004a64 <__ssputs_r+0x6c>
 8004a16:	6965      	ldr	r5, [r4, #20]
 8004a18:	6909      	ldr	r1, [r1, #16]
 8004a1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a1e:	eba3 0901 	sub.w	r9, r3, r1
 8004a22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a26:	1c7b      	adds	r3, r7, #1
 8004a28:	444b      	add	r3, r9
 8004a2a:	106d      	asrs	r5, r5, #1
 8004a2c:	429d      	cmp	r5, r3
 8004a2e:	bf38      	it	cc
 8004a30:	461d      	movcc	r5, r3
 8004a32:	0553      	lsls	r3, r2, #21
 8004a34:	d527      	bpl.n	8004a86 <__ssputs_r+0x8e>
 8004a36:	4629      	mov	r1, r5
 8004a38:	f7ff ff52 	bl	80048e0 <_malloc_r>
 8004a3c:	4606      	mov	r6, r0
 8004a3e:	b360      	cbz	r0, 8004a9a <__ssputs_r+0xa2>
 8004a40:	6921      	ldr	r1, [r4, #16]
 8004a42:	464a      	mov	r2, r9
 8004a44:	f000 fae8 	bl	8005018 <memcpy>
 8004a48:	89a3      	ldrh	r3, [r4, #12]
 8004a4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a52:	81a3      	strh	r3, [r4, #12]
 8004a54:	6126      	str	r6, [r4, #16]
 8004a56:	6165      	str	r5, [r4, #20]
 8004a58:	444e      	add	r6, r9
 8004a5a:	eba5 0509 	sub.w	r5, r5, r9
 8004a5e:	6026      	str	r6, [r4, #0]
 8004a60:	60a5      	str	r5, [r4, #8]
 8004a62:	463e      	mov	r6, r7
 8004a64:	42be      	cmp	r6, r7
 8004a66:	d900      	bls.n	8004a6a <__ssputs_r+0x72>
 8004a68:	463e      	mov	r6, r7
 8004a6a:	6820      	ldr	r0, [r4, #0]
 8004a6c:	4632      	mov	r2, r6
 8004a6e:	4641      	mov	r1, r8
 8004a70:	f000 faa8 	bl	8004fc4 <memmove>
 8004a74:	68a3      	ldr	r3, [r4, #8]
 8004a76:	1b9b      	subs	r3, r3, r6
 8004a78:	60a3      	str	r3, [r4, #8]
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	4433      	add	r3, r6
 8004a7e:	6023      	str	r3, [r4, #0]
 8004a80:	2000      	movs	r0, #0
 8004a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a86:	462a      	mov	r2, r5
 8004a88:	f000 fad4 	bl	8005034 <_realloc_r>
 8004a8c:	4606      	mov	r6, r0
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	d1e0      	bne.n	8004a54 <__ssputs_r+0x5c>
 8004a92:	6921      	ldr	r1, [r4, #16]
 8004a94:	4650      	mov	r0, sl
 8004a96:	f7ff feb7 	bl	8004808 <_free_r>
 8004a9a:	230c      	movs	r3, #12
 8004a9c:	f8ca 3000 	str.w	r3, [sl]
 8004aa0:	89a3      	ldrh	r3, [r4, #12]
 8004aa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aa6:	81a3      	strh	r3, [r4, #12]
 8004aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aac:	e7e9      	b.n	8004a82 <__ssputs_r+0x8a>
	...

08004ab0 <_svfiprintf_r>:
 8004ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab4:	4698      	mov	r8, r3
 8004ab6:	898b      	ldrh	r3, [r1, #12]
 8004ab8:	061b      	lsls	r3, r3, #24
 8004aba:	b09d      	sub	sp, #116	@ 0x74
 8004abc:	4607      	mov	r7, r0
 8004abe:	460d      	mov	r5, r1
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	d510      	bpl.n	8004ae6 <_svfiprintf_r+0x36>
 8004ac4:	690b      	ldr	r3, [r1, #16]
 8004ac6:	b973      	cbnz	r3, 8004ae6 <_svfiprintf_r+0x36>
 8004ac8:	2140      	movs	r1, #64	@ 0x40
 8004aca:	f7ff ff09 	bl	80048e0 <_malloc_r>
 8004ace:	6028      	str	r0, [r5, #0]
 8004ad0:	6128      	str	r0, [r5, #16]
 8004ad2:	b930      	cbnz	r0, 8004ae2 <_svfiprintf_r+0x32>
 8004ad4:	230c      	movs	r3, #12
 8004ad6:	603b      	str	r3, [r7, #0]
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8004adc:	b01d      	add	sp, #116	@ 0x74
 8004ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae2:	2340      	movs	r3, #64	@ 0x40
 8004ae4:	616b      	str	r3, [r5, #20]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004aea:	2320      	movs	r3, #32
 8004aec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004af0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004af4:	2330      	movs	r3, #48	@ 0x30
 8004af6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004c94 <_svfiprintf_r+0x1e4>
 8004afa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004afe:	f04f 0901 	mov.w	r9, #1
 8004b02:	4623      	mov	r3, r4
 8004b04:	469a      	mov	sl, r3
 8004b06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b0a:	b10a      	cbz	r2, 8004b10 <_svfiprintf_r+0x60>
 8004b0c:	2a25      	cmp	r2, #37	@ 0x25
 8004b0e:	d1f9      	bne.n	8004b04 <_svfiprintf_r+0x54>
 8004b10:	ebba 0b04 	subs.w	fp, sl, r4
 8004b14:	d00b      	beq.n	8004b2e <_svfiprintf_r+0x7e>
 8004b16:	465b      	mov	r3, fp
 8004b18:	4622      	mov	r2, r4
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	4638      	mov	r0, r7
 8004b1e:	f7ff ff6b 	bl	80049f8 <__ssputs_r>
 8004b22:	3001      	adds	r0, #1
 8004b24:	f000 80a7 	beq.w	8004c76 <_svfiprintf_r+0x1c6>
 8004b28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b2a:	445a      	add	r2, fp
 8004b2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 809f 	beq.w	8004c76 <_svfiprintf_r+0x1c6>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b42:	f10a 0a01 	add.w	sl, sl, #1
 8004b46:	9304      	str	r3, [sp, #16]
 8004b48:	9307      	str	r3, [sp, #28]
 8004b4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b50:	4654      	mov	r4, sl
 8004b52:	2205      	movs	r2, #5
 8004b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b58:	484e      	ldr	r0, [pc, #312]	@ (8004c94 <_svfiprintf_r+0x1e4>)
 8004b5a:	f7fb fb49 	bl	80001f0 <memchr>
 8004b5e:	9a04      	ldr	r2, [sp, #16]
 8004b60:	b9d8      	cbnz	r0, 8004b9a <_svfiprintf_r+0xea>
 8004b62:	06d0      	lsls	r0, r2, #27
 8004b64:	bf44      	itt	mi
 8004b66:	2320      	movmi	r3, #32
 8004b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b6c:	0711      	lsls	r1, r2, #28
 8004b6e:	bf44      	itt	mi
 8004b70:	232b      	movmi	r3, #43	@ 0x2b
 8004b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b76:	f89a 3000 	ldrb.w	r3, [sl]
 8004b7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b7c:	d015      	beq.n	8004baa <_svfiprintf_r+0xfa>
 8004b7e:	9a07      	ldr	r2, [sp, #28]
 8004b80:	4654      	mov	r4, sl
 8004b82:	2000      	movs	r0, #0
 8004b84:	f04f 0c0a 	mov.w	ip, #10
 8004b88:	4621      	mov	r1, r4
 8004b8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b8e:	3b30      	subs	r3, #48	@ 0x30
 8004b90:	2b09      	cmp	r3, #9
 8004b92:	d94b      	bls.n	8004c2c <_svfiprintf_r+0x17c>
 8004b94:	b1b0      	cbz	r0, 8004bc4 <_svfiprintf_r+0x114>
 8004b96:	9207      	str	r2, [sp, #28]
 8004b98:	e014      	b.n	8004bc4 <_svfiprintf_r+0x114>
 8004b9a:	eba0 0308 	sub.w	r3, r0, r8
 8004b9e:	fa09 f303 	lsl.w	r3, r9, r3
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	9304      	str	r3, [sp, #16]
 8004ba6:	46a2      	mov	sl, r4
 8004ba8:	e7d2      	b.n	8004b50 <_svfiprintf_r+0xa0>
 8004baa:	9b03      	ldr	r3, [sp, #12]
 8004bac:	1d19      	adds	r1, r3, #4
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	9103      	str	r1, [sp, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	bfbb      	ittet	lt
 8004bb6:	425b      	neglt	r3, r3
 8004bb8:	f042 0202 	orrlt.w	r2, r2, #2
 8004bbc:	9307      	strge	r3, [sp, #28]
 8004bbe:	9307      	strlt	r3, [sp, #28]
 8004bc0:	bfb8      	it	lt
 8004bc2:	9204      	strlt	r2, [sp, #16]
 8004bc4:	7823      	ldrb	r3, [r4, #0]
 8004bc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8004bc8:	d10a      	bne.n	8004be0 <_svfiprintf_r+0x130>
 8004bca:	7863      	ldrb	r3, [r4, #1]
 8004bcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bce:	d132      	bne.n	8004c36 <_svfiprintf_r+0x186>
 8004bd0:	9b03      	ldr	r3, [sp, #12]
 8004bd2:	1d1a      	adds	r2, r3, #4
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	9203      	str	r2, [sp, #12]
 8004bd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004bdc:	3402      	adds	r4, #2
 8004bde:	9305      	str	r3, [sp, #20]
 8004be0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004ca4 <_svfiprintf_r+0x1f4>
 8004be4:	7821      	ldrb	r1, [r4, #0]
 8004be6:	2203      	movs	r2, #3
 8004be8:	4650      	mov	r0, sl
 8004bea:	f7fb fb01 	bl	80001f0 <memchr>
 8004bee:	b138      	cbz	r0, 8004c00 <_svfiprintf_r+0x150>
 8004bf0:	9b04      	ldr	r3, [sp, #16]
 8004bf2:	eba0 000a 	sub.w	r0, r0, sl
 8004bf6:	2240      	movs	r2, #64	@ 0x40
 8004bf8:	4082      	lsls	r2, r0
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	3401      	adds	r4, #1
 8004bfe:	9304      	str	r3, [sp, #16]
 8004c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c04:	4824      	ldr	r0, [pc, #144]	@ (8004c98 <_svfiprintf_r+0x1e8>)
 8004c06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c0a:	2206      	movs	r2, #6
 8004c0c:	f7fb faf0 	bl	80001f0 <memchr>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	d036      	beq.n	8004c82 <_svfiprintf_r+0x1d2>
 8004c14:	4b21      	ldr	r3, [pc, #132]	@ (8004c9c <_svfiprintf_r+0x1ec>)
 8004c16:	bb1b      	cbnz	r3, 8004c60 <_svfiprintf_r+0x1b0>
 8004c18:	9b03      	ldr	r3, [sp, #12]
 8004c1a:	3307      	adds	r3, #7
 8004c1c:	f023 0307 	bic.w	r3, r3, #7
 8004c20:	3308      	adds	r3, #8
 8004c22:	9303      	str	r3, [sp, #12]
 8004c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c26:	4433      	add	r3, r6
 8004c28:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c2a:	e76a      	b.n	8004b02 <_svfiprintf_r+0x52>
 8004c2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c30:	460c      	mov	r4, r1
 8004c32:	2001      	movs	r0, #1
 8004c34:	e7a8      	b.n	8004b88 <_svfiprintf_r+0xd8>
 8004c36:	2300      	movs	r3, #0
 8004c38:	3401      	adds	r4, #1
 8004c3a:	9305      	str	r3, [sp, #20]
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	f04f 0c0a 	mov.w	ip, #10
 8004c42:	4620      	mov	r0, r4
 8004c44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c48:	3a30      	subs	r2, #48	@ 0x30
 8004c4a:	2a09      	cmp	r2, #9
 8004c4c:	d903      	bls.n	8004c56 <_svfiprintf_r+0x1a6>
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0c6      	beq.n	8004be0 <_svfiprintf_r+0x130>
 8004c52:	9105      	str	r1, [sp, #20]
 8004c54:	e7c4      	b.n	8004be0 <_svfiprintf_r+0x130>
 8004c56:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e7f0      	b.n	8004c42 <_svfiprintf_r+0x192>
 8004c60:	ab03      	add	r3, sp, #12
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	462a      	mov	r2, r5
 8004c66:	4b0e      	ldr	r3, [pc, #56]	@ (8004ca0 <_svfiprintf_r+0x1f0>)
 8004c68:	a904      	add	r1, sp, #16
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	f3af 8000 	nop.w
 8004c70:	1c42      	adds	r2, r0, #1
 8004c72:	4606      	mov	r6, r0
 8004c74:	d1d6      	bne.n	8004c24 <_svfiprintf_r+0x174>
 8004c76:	89ab      	ldrh	r3, [r5, #12]
 8004c78:	065b      	lsls	r3, r3, #25
 8004c7a:	f53f af2d 	bmi.w	8004ad8 <_svfiprintf_r+0x28>
 8004c7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c80:	e72c      	b.n	8004adc <_svfiprintf_r+0x2c>
 8004c82:	ab03      	add	r3, sp, #12
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	462a      	mov	r2, r5
 8004c88:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <_svfiprintf_r+0x1f0>)
 8004c8a:	a904      	add	r1, sp, #16
 8004c8c:	4638      	mov	r0, r7
 8004c8e:	f000 f879 	bl	8004d84 <_printf_i>
 8004c92:	e7ed      	b.n	8004c70 <_svfiprintf_r+0x1c0>
 8004c94:	080051e0 	.word	0x080051e0
 8004c98:	080051ea 	.word	0x080051ea
 8004c9c:	00000000 	.word	0x00000000
 8004ca0:	080049f9 	.word	0x080049f9
 8004ca4:	080051e6 	.word	0x080051e6

08004ca8 <_printf_common>:
 8004ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cac:	4616      	mov	r6, r2
 8004cae:	4698      	mov	r8, r3
 8004cb0:	688a      	ldr	r2, [r1, #8]
 8004cb2:	690b      	ldr	r3, [r1, #16]
 8004cb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	bfb8      	it	lt
 8004cbc:	4613      	movlt	r3, r2
 8004cbe:	6033      	str	r3, [r6, #0]
 8004cc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004cc4:	4607      	mov	r7, r0
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	b10a      	cbz	r2, 8004cce <_printf_common+0x26>
 8004cca:	3301      	adds	r3, #1
 8004ccc:	6033      	str	r3, [r6, #0]
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	0699      	lsls	r1, r3, #26
 8004cd2:	bf42      	ittt	mi
 8004cd4:	6833      	ldrmi	r3, [r6, #0]
 8004cd6:	3302      	addmi	r3, #2
 8004cd8:	6033      	strmi	r3, [r6, #0]
 8004cda:	6825      	ldr	r5, [r4, #0]
 8004cdc:	f015 0506 	ands.w	r5, r5, #6
 8004ce0:	d106      	bne.n	8004cf0 <_printf_common+0x48>
 8004ce2:	f104 0a19 	add.w	sl, r4, #25
 8004ce6:	68e3      	ldr	r3, [r4, #12]
 8004ce8:	6832      	ldr	r2, [r6, #0]
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	42ab      	cmp	r3, r5
 8004cee:	dc26      	bgt.n	8004d3e <_printf_common+0x96>
 8004cf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004cf4:	6822      	ldr	r2, [r4, #0]
 8004cf6:	3b00      	subs	r3, #0
 8004cf8:	bf18      	it	ne
 8004cfa:	2301      	movne	r3, #1
 8004cfc:	0692      	lsls	r2, r2, #26
 8004cfe:	d42b      	bmi.n	8004d58 <_printf_common+0xb0>
 8004d00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d04:	4641      	mov	r1, r8
 8004d06:	4638      	mov	r0, r7
 8004d08:	47c8      	blx	r9
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	d01e      	beq.n	8004d4c <_printf_common+0xa4>
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	6922      	ldr	r2, [r4, #16]
 8004d12:	f003 0306 	and.w	r3, r3, #6
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	bf02      	ittt	eq
 8004d1a:	68e5      	ldreq	r5, [r4, #12]
 8004d1c:	6833      	ldreq	r3, [r6, #0]
 8004d1e:	1aed      	subeq	r5, r5, r3
 8004d20:	68a3      	ldr	r3, [r4, #8]
 8004d22:	bf0c      	ite	eq
 8004d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d28:	2500      	movne	r5, #0
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	bfc4      	itt	gt
 8004d2e:	1a9b      	subgt	r3, r3, r2
 8004d30:	18ed      	addgt	r5, r5, r3
 8004d32:	2600      	movs	r6, #0
 8004d34:	341a      	adds	r4, #26
 8004d36:	42b5      	cmp	r5, r6
 8004d38:	d11a      	bne.n	8004d70 <_printf_common+0xc8>
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	e008      	b.n	8004d50 <_printf_common+0xa8>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	4652      	mov	r2, sl
 8004d42:	4641      	mov	r1, r8
 8004d44:	4638      	mov	r0, r7
 8004d46:	47c8      	blx	r9
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d103      	bne.n	8004d54 <_printf_common+0xac>
 8004d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d54:	3501      	adds	r5, #1
 8004d56:	e7c6      	b.n	8004ce6 <_printf_common+0x3e>
 8004d58:	18e1      	adds	r1, r4, r3
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	2030      	movs	r0, #48	@ 0x30
 8004d5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d62:	4422      	add	r2, r4
 8004d64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d6c:	3302      	adds	r3, #2
 8004d6e:	e7c7      	b.n	8004d00 <_printf_common+0x58>
 8004d70:	2301      	movs	r3, #1
 8004d72:	4622      	mov	r2, r4
 8004d74:	4641      	mov	r1, r8
 8004d76:	4638      	mov	r0, r7
 8004d78:	47c8      	blx	r9
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	d0e6      	beq.n	8004d4c <_printf_common+0xa4>
 8004d7e:	3601      	adds	r6, #1
 8004d80:	e7d9      	b.n	8004d36 <_printf_common+0x8e>
	...

08004d84 <_printf_i>:
 8004d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d88:	7e0f      	ldrb	r7, [r1, #24]
 8004d8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d8c:	2f78      	cmp	r7, #120	@ 0x78
 8004d8e:	4691      	mov	r9, r2
 8004d90:	4680      	mov	r8, r0
 8004d92:	460c      	mov	r4, r1
 8004d94:	469a      	mov	sl, r3
 8004d96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d9a:	d807      	bhi.n	8004dac <_printf_i+0x28>
 8004d9c:	2f62      	cmp	r7, #98	@ 0x62
 8004d9e:	d80a      	bhi.n	8004db6 <_printf_i+0x32>
 8004da0:	2f00      	cmp	r7, #0
 8004da2:	f000 80d2 	beq.w	8004f4a <_printf_i+0x1c6>
 8004da6:	2f58      	cmp	r7, #88	@ 0x58
 8004da8:	f000 80b9 	beq.w	8004f1e <_printf_i+0x19a>
 8004dac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004db0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004db4:	e03a      	b.n	8004e2c <_printf_i+0xa8>
 8004db6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004dba:	2b15      	cmp	r3, #21
 8004dbc:	d8f6      	bhi.n	8004dac <_printf_i+0x28>
 8004dbe:	a101      	add	r1, pc, #4	@ (adr r1, 8004dc4 <_printf_i+0x40>)
 8004dc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004dc4:	08004e1d 	.word	0x08004e1d
 8004dc8:	08004e31 	.word	0x08004e31
 8004dcc:	08004dad 	.word	0x08004dad
 8004dd0:	08004dad 	.word	0x08004dad
 8004dd4:	08004dad 	.word	0x08004dad
 8004dd8:	08004dad 	.word	0x08004dad
 8004ddc:	08004e31 	.word	0x08004e31
 8004de0:	08004dad 	.word	0x08004dad
 8004de4:	08004dad 	.word	0x08004dad
 8004de8:	08004dad 	.word	0x08004dad
 8004dec:	08004dad 	.word	0x08004dad
 8004df0:	08004f31 	.word	0x08004f31
 8004df4:	08004e5b 	.word	0x08004e5b
 8004df8:	08004eeb 	.word	0x08004eeb
 8004dfc:	08004dad 	.word	0x08004dad
 8004e00:	08004dad 	.word	0x08004dad
 8004e04:	08004f53 	.word	0x08004f53
 8004e08:	08004dad 	.word	0x08004dad
 8004e0c:	08004e5b 	.word	0x08004e5b
 8004e10:	08004dad 	.word	0x08004dad
 8004e14:	08004dad 	.word	0x08004dad
 8004e18:	08004ef3 	.word	0x08004ef3
 8004e1c:	6833      	ldr	r3, [r6, #0]
 8004e1e:	1d1a      	adds	r2, r3, #4
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6032      	str	r2, [r6, #0]
 8004e24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e09d      	b.n	8004f6c <_printf_i+0x1e8>
 8004e30:	6833      	ldr	r3, [r6, #0]
 8004e32:	6820      	ldr	r0, [r4, #0]
 8004e34:	1d19      	adds	r1, r3, #4
 8004e36:	6031      	str	r1, [r6, #0]
 8004e38:	0606      	lsls	r6, r0, #24
 8004e3a:	d501      	bpl.n	8004e40 <_printf_i+0xbc>
 8004e3c:	681d      	ldr	r5, [r3, #0]
 8004e3e:	e003      	b.n	8004e48 <_printf_i+0xc4>
 8004e40:	0645      	lsls	r5, r0, #25
 8004e42:	d5fb      	bpl.n	8004e3c <_printf_i+0xb8>
 8004e44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e48:	2d00      	cmp	r5, #0
 8004e4a:	da03      	bge.n	8004e54 <_printf_i+0xd0>
 8004e4c:	232d      	movs	r3, #45	@ 0x2d
 8004e4e:	426d      	negs	r5, r5
 8004e50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e54:	4859      	ldr	r0, [pc, #356]	@ (8004fbc <_printf_i+0x238>)
 8004e56:	230a      	movs	r3, #10
 8004e58:	e011      	b.n	8004e7e <_printf_i+0xfa>
 8004e5a:	6821      	ldr	r1, [r4, #0]
 8004e5c:	6833      	ldr	r3, [r6, #0]
 8004e5e:	0608      	lsls	r0, r1, #24
 8004e60:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e64:	d402      	bmi.n	8004e6c <_printf_i+0xe8>
 8004e66:	0649      	lsls	r1, r1, #25
 8004e68:	bf48      	it	mi
 8004e6a:	b2ad      	uxthmi	r5, r5
 8004e6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e6e:	4853      	ldr	r0, [pc, #332]	@ (8004fbc <_printf_i+0x238>)
 8004e70:	6033      	str	r3, [r6, #0]
 8004e72:	bf14      	ite	ne
 8004e74:	230a      	movne	r3, #10
 8004e76:	2308      	moveq	r3, #8
 8004e78:	2100      	movs	r1, #0
 8004e7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e7e:	6866      	ldr	r6, [r4, #4]
 8004e80:	60a6      	str	r6, [r4, #8]
 8004e82:	2e00      	cmp	r6, #0
 8004e84:	bfa2      	ittt	ge
 8004e86:	6821      	ldrge	r1, [r4, #0]
 8004e88:	f021 0104 	bicge.w	r1, r1, #4
 8004e8c:	6021      	strge	r1, [r4, #0]
 8004e8e:	b90d      	cbnz	r5, 8004e94 <_printf_i+0x110>
 8004e90:	2e00      	cmp	r6, #0
 8004e92:	d04b      	beq.n	8004f2c <_printf_i+0x1a8>
 8004e94:	4616      	mov	r6, r2
 8004e96:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e9a:	fb03 5711 	mls	r7, r3, r1, r5
 8004e9e:	5dc7      	ldrb	r7, [r0, r7]
 8004ea0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ea4:	462f      	mov	r7, r5
 8004ea6:	42bb      	cmp	r3, r7
 8004ea8:	460d      	mov	r5, r1
 8004eaa:	d9f4      	bls.n	8004e96 <_printf_i+0x112>
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d10b      	bne.n	8004ec8 <_printf_i+0x144>
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	07df      	lsls	r7, r3, #31
 8004eb4:	d508      	bpl.n	8004ec8 <_printf_i+0x144>
 8004eb6:	6923      	ldr	r3, [r4, #16]
 8004eb8:	6861      	ldr	r1, [r4, #4]
 8004eba:	4299      	cmp	r1, r3
 8004ebc:	bfde      	ittt	le
 8004ebe:	2330      	movle	r3, #48	@ 0x30
 8004ec0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ec4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ec8:	1b92      	subs	r2, r2, r6
 8004eca:	6122      	str	r2, [r4, #16]
 8004ecc:	f8cd a000 	str.w	sl, [sp]
 8004ed0:	464b      	mov	r3, r9
 8004ed2:	aa03      	add	r2, sp, #12
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	4640      	mov	r0, r8
 8004ed8:	f7ff fee6 	bl	8004ca8 <_printf_common>
 8004edc:	3001      	adds	r0, #1
 8004ede:	d14a      	bne.n	8004f76 <_printf_i+0x1f2>
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee4:	b004      	add	sp, #16
 8004ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	f043 0320 	orr.w	r3, r3, #32
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	4833      	ldr	r0, [pc, #204]	@ (8004fc0 <_printf_i+0x23c>)
 8004ef4:	2778      	movs	r7, #120	@ 0x78
 8004ef6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	6831      	ldr	r1, [r6, #0]
 8004efe:	061f      	lsls	r7, r3, #24
 8004f00:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f04:	d402      	bmi.n	8004f0c <_printf_i+0x188>
 8004f06:	065f      	lsls	r7, r3, #25
 8004f08:	bf48      	it	mi
 8004f0a:	b2ad      	uxthmi	r5, r5
 8004f0c:	6031      	str	r1, [r6, #0]
 8004f0e:	07d9      	lsls	r1, r3, #31
 8004f10:	bf44      	itt	mi
 8004f12:	f043 0320 	orrmi.w	r3, r3, #32
 8004f16:	6023      	strmi	r3, [r4, #0]
 8004f18:	b11d      	cbz	r5, 8004f22 <_printf_i+0x19e>
 8004f1a:	2310      	movs	r3, #16
 8004f1c:	e7ac      	b.n	8004e78 <_printf_i+0xf4>
 8004f1e:	4827      	ldr	r0, [pc, #156]	@ (8004fbc <_printf_i+0x238>)
 8004f20:	e7e9      	b.n	8004ef6 <_printf_i+0x172>
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	f023 0320 	bic.w	r3, r3, #32
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	e7f6      	b.n	8004f1a <_printf_i+0x196>
 8004f2c:	4616      	mov	r6, r2
 8004f2e:	e7bd      	b.n	8004eac <_printf_i+0x128>
 8004f30:	6833      	ldr	r3, [r6, #0]
 8004f32:	6825      	ldr	r5, [r4, #0]
 8004f34:	6961      	ldr	r1, [r4, #20]
 8004f36:	1d18      	adds	r0, r3, #4
 8004f38:	6030      	str	r0, [r6, #0]
 8004f3a:	062e      	lsls	r6, r5, #24
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	d501      	bpl.n	8004f44 <_printf_i+0x1c0>
 8004f40:	6019      	str	r1, [r3, #0]
 8004f42:	e002      	b.n	8004f4a <_printf_i+0x1c6>
 8004f44:	0668      	lsls	r0, r5, #25
 8004f46:	d5fb      	bpl.n	8004f40 <_printf_i+0x1bc>
 8004f48:	8019      	strh	r1, [r3, #0]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	6123      	str	r3, [r4, #16]
 8004f4e:	4616      	mov	r6, r2
 8004f50:	e7bc      	b.n	8004ecc <_printf_i+0x148>
 8004f52:	6833      	ldr	r3, [r6, #0]
 8004f54:	1d1a      	adds	r2, r3, #4
 8004f56:	6032      	str	r2, [r6, #0]
 8004f58:	681e      	ldr	r6, [r3, #0]
 8004f5a:	6862      	ldr	r2, [r4, #4]
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f7fb f946 	bl	80001f0 <memchr>
 8004f64:	b108      	cbz	r0, 8004f6a <_printf_i+0x1e6>
 8004f66:	1b80      	subs	r0, r0, r6
 8004f68:	6060      	str	r0, [r4, #4]
 8004f6a:	6863      	ldr	r3, [r4, #4]
 8004f6c:	6123      	str	r3, [r4, #16]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f74:	e7aa      	b.n	8004ecc <_printf_i+0x148>
 8004f76:	6923      	ldr	r3, [r4, #16]
 8004f78:	4632      	mov	r2, r6
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	4640      	mov	r0, r8
 8004f7e:	47d0      	blx	sl
 8004f80:	3001      	adds	r0, #1
 8004f82:	d0ad      	beq.n	8004ee0 <_printf_i+0x15c>
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	079b      	lsls	r3, r3, #30
 8004f88:	d413      	bmi.n	8004fb2 <_printf_i+0x22e>
 8004f8a:	68e0      	ldr	r0, [r4, #12]
 8004f8c:	9b03      	ldr	r3, [sp, #12]
 8004f8e:	4298      	cmp	r0, r3
 8004f90:	bfb8      	it	lt
 8004f92:	4618      	movlt	r0, r3
 8004f94:	e7a6      	b.n	8004ee4 <_printf_i+0x160>
 8004f96:	2301      	movs	r3, #1
 8004f98:	4632      	mov	r2, r6
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	4640      	mov	r0, r8
 8004f9e:	47d0      	blx	sl
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d09d      	beq.n	8004ee0 <_printf_i+0x15c>
 8004fa4:	3501      	adds	r5, #1
 8004fa6:	68e3      	ldr	r3, [r4, #12]
 8004fa8:	9903      	ldr	r1, [sp, #12]
 8004faa:	1a5b      	subs	r3, r3, r1
 8004fac:	42ab      	cmp	r3, r5
 8004fae:	dcf2      	bgt.n	8004f96 <_printf_i+0x212>
 8004fb0:	e7eb      	b.n	8004f8a <_printf_i+0x206>
 8004fb2:	2500      	movs	r5, #0
 8004fb4:	f104 0619 	add.w	r6, r4, #25
 8004fb8:	e7f5      	b.n	8004fa6 <_printf_i+0x222>
 8004fba:	bf00      	nop
 8004fbc:	080051f1 	.word	0x080051f1
 8004fc0:	08005202 	.word	0x08005202

08004fc4 <memmove>:
 8004fc4:	4288      	cmp	r0, r1
 8004fc6:	b510      	push	{r4, lr}
 8004fc8:	eb01 0402 	add.w	r4, r1, r2
 8004fcc:	d902      	bls.n	8004fd4 <memmove+0x10>
 8004fce:	4284      	cmp	r4, r0
 8004fd0:	4623      	mov	r3, r4
 8004fd2:	d807      	bhi.n	8004fe4 <memmove+0x20>
 8004fd4:	1e43      	subs	r3, r0, #1
 8004fd6:	42a1      	cmp	r1, r4
 8004fd8:	d008      	beq.n	8004fec <memmove+0x28>
 8004fda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fe2:	e7f8      	b.n	8004fd6 <memmove+0x12>
 8004fe4:	4402      	add	r2, r0
 8004fe6:	4601      	mov	r1, r0
 8004fe8:	428a      	cmp	r2, r1
 8004fea:	d100      	bne.n	8004fee <memmove+0x2a>
 8004fec:	bd10      	pop	{r4, pc}
 8004fee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ff2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ff6:	e7f7      	b.n	8004fe8 <memmove+0x24>

08004ff8 <_sbrk_r>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	4d06      	ldr	r5, [pc, #24]	@ (8005014 <_sbrk_r+0x1c>)
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	4604      	mov	r4, r0
 8005000:	4608      	mov	r0, r1
 8005002:	602b      	str	r3, [r5, #0]
 8005004:	f7fb fe8a 	bl	8000d1c <_sbrk>
 8005008:	1c43      	adds	r3, r0, #1
 800500a:	d102      	bne.n	8005012 <_sbrk_r+0x1a>
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	b103      	cbz	r3, 8005012 <_sbrk_r+0x1a>
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	bd38      	pop	{r3, r4, r5, pc}
 8005014:	20000bb4 	.word	0x20000bb4

08005018 <memcpy>:
 8005018:	440a      	add	r2, r1
 800501a:	4291      	cmp	r1, r2
 800501c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005020:	d100      	bne.n	8005024 <memcpy+0xc>
 8005022:	4770      	bx	lr
 8005024:	b510      	push	{r4, lr}
 8005026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800502a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800502e:	4291      	cmp	r1, r2
 8005030:	d1f9      	bne.n	8005026 <memcpy+0xe>
 8005032:	bd10      	pop	{r4, pc}

08005034 <_realloc_r>:
 8005034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005038:	4680      	mov	r8, r0
 800503a:	4615      	mov	r5, r2
 800503c:	460c      	mov	r4, r1
 800503e:	b921      	cbnz	r1, 800504a <_realloc_r+0x16>
 8005040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005044:	4611      	mov	r1, r2
 8005046:	f7ff bc4b 	b.w	80048e0 <_malloc_r>
 800504a:	b92a      	cbnz	r2, 8005058 <_realloc_r+0x24>
 800504c:	f7ff fbdc 	bl	8004808 <_free_r>
 8005050:	2400      	movs	r4, #0
 8005052:	4620      	mov	r0, r4
 8005054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005058:	f000 f81a 	bl	8005090 <_malloc_usable_size_r>
 800505c:	4285      	cmp	r5, r0
 800505e:	4606      	mov	r6, r0
 8005060:	d802      	bhi.n	8005068 <_realloc_r+0x34>
 8005062:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005066:	d8f4      	bhi.n	8005052 <_realloc_r+0x1e>
 8005068:	4629      	mov	r1, r5
 800506a:	4640      	mov	r0, r8
 800506c:	f7ff fc38 	bl	80048e0 <_malloc_r>
 8005070:	4607      	mov	r7, r0
 8005072:	2800      	cmp	r0, #0
 8005074:	d0ec      	beq.n	8005050 <_realloc_r+0x1c>
 8005076:	42b5      	cmp	r5, r6
 8005078:	462a      	mov	r2, r5
 800507a:	4621      	mov	r1, r4
 800507c:	bf28      	it	cs
 800507e:	4632      	movcs	r2, r6
 8005080:	f7ff ffca 	bl	8005018 <memcpy>
 8005084:	4621      	mov	r1, r4
 8005086:	4640      	mov	r0, r8
 8005088:	f7ff fbbe 	bl	8004808 <_free_r>
 800508c:	463c      	mov	r4, r7
 800508e:	e7e0      	b.n	8005052 <_realloc_r+0x1e>

08005090 <_malloc_usable_size_r>:
 8005090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005094:	1f18      	subs	r0, r3, #4
 8005096:	2b00      	cmp	r3, #0
 8005098:	bfbc      	itt	lt
 800509a:	580b      	ldrlt	r3, [r1, r0]
 800509c:	18c0      	addlt	r0, r0, r3
 800509e:	4770      	bx	lr

080050a0 <_init>:
 80050a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a2:	bf00      	nop
 80050a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050a6:	bc08      	pop	{r3}
 80050a8:	469e      	mov	lr, r3
 80050aa:	4770      	bx	lr

080050ac <_fini>:
 80050ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ae:	bf00      	nop
 80050b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b2:	bc08      	pop	{r3}
 80050b4:	469e      	mov	lr, r3
 80050b6:	4770      	bx	lr
