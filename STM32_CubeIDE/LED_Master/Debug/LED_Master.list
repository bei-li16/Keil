
LED_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006874  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000061e8  08006a24  08006a24  00007a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc0c  0800cc0c  0000e060  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc0c  0800cc0c  0000dc0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc14  0800cc14  0000e060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc14  0800cc14  0000dc14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc18  0800cc18  0000dc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800cc1c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e060  2**0
                  CONTENTS
 10 .bss          00000e48  20000060  20000060  0000e060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ea8  20000ea8  0000e060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000151a9  00000000  00000000  0000e090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000398a  00000000  00000000  00023239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e0  00000000  00000000  00026bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e73  00000000  00000000  00027ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027280  00000000  00000000  00028d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a43a  00000000  00000000  0004ff9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea02e  00000000  00000000  0006a3d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00154403  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000505c  00000000  00000000  00154448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  001594a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006a0c 	.word	0x08006a0c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08006a0c 	.word	0x08006a0c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <delay_ms>:
#define LCD_SCL        	GPIO_Pin_13	//PB13--->>TFT --SCL/SCK
#define LCD_SDA        	GPIO_Pin_15	//PB15 MOSI--->>TFT --SDA/DIN
*******************************************************************************/
 
void delay_ms(uint16_t ms)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms + 50);
 800058a:	88fb      	ldrh	r3, [r7, #6]
 800058c:	3332      	adds	r3, #50	@ 0x32
 800058e:	4618      	mov	r0, r3
 8000590:	f001 fd50 	bl	8002034 <HAL_Delay>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <SPI_WriteData>:
//     GPIO_Init(LCD_CTRLB, &GPIO_InitStructure);						//初始化
// }

//向SPI总线传输一个8位数据
void  SPI_WriteData(uint8_t Data)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
#if (VIRTUAL_SPI_LCD == STD_ON)
    unsigned char i=0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	73fb      	strb	r3, [r7, #15]
    for(i=8;i>0;i--)
 80005aa:	2308      	movs	r3, #8
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	e01e      	b.n	80005ee <SPI_WriteData+0x52>
    {
        if(Data&0x80)
 80005b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	da05      	bge.n	80005c4 <SPI_WriteData+0x28>
        {
            LCD_SDA_SET; //输出数据
 80005b8:	2201      	movs	r2, #1
 80005ba:	2101      	movs	r1, #1
 80005bc:	4810      	ldr	r0, [pc, #64]	@ (8000600 <SPI_WriteData+0x64>)
 80005be:	f003 f835 	bl	800362c <HAL_GPIO_WritePin>
 80005c2:	e004      	b.n	80005ce <SPI_WriteData+0x32>
        }
        else
        {
            LCD_SDA_CLR;
 80005c4:	2200      	movs	r2, #0
 80005c6:	2101      	movs	r1, #1
 80005c8:	480d      	ldr	r0, [pc, #52]	@ (8000600 <SPI_WriteData+0x64>)
 80005ca:	f003 f82f 	bl	800362c <HAL_GPIO_WritePin>
        }
        LCD_SCL_CLR;       
 80005ce:	2200      	movs	r2, #0
 80005d0:	2120      	movs	r1, #32
 80005d2:	480c      	ldr	r0, [pc, #48]	@ (8000604 <SPI_WriteData+0x68>)
 80005d4:	f003 f82a 	bl	800362c <HAL_GPIO_WritePin>
        LCD_SCL_SET;
 80005d8:	2201      	movs	r2, #1
 80005da:	2120      	movs	r1, #32
 80005dc:	4809      	ldr	r0, [pc, #36]	@ (8000604 <SPI_WriteData+0x68>)
 80005de:	f003 f825 	bl	800362c <HAL_GPIO_WritePin>
        Data<<=1; 
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	71fb      	strb	r3, [r7, #7]
    for(i=8;i>0;i--)
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	73fb      	strb	r3, [r7, #15]
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d1dd      	bne.n	80005b0 <SPI_WriteData+0x14>
    uint8_t *pData = &Data;
    while(LCD_Tx_Status != STD_ON);
    LCD_Tx_Status = STD_OFF;
    HAL_SPI_Transmit_DMA(&LCD_SPI, pData, 1);
#endif
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40020800 	.word	0x40020800
 8000604:	40020400 	.word	0x40020400

08000608 <Lcd_WriteIndex>:
 
 //向液晶屏写一个8位指令
 void Lcd_WriteIndex(uint8_t Index)
 {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
    //SPI 写命令时序开始
    LCD_CS_CLR;
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000618:	480b      	ldr	r0, [pc, #44]	@ (8000648 <Lcd_WriteIndex+0x40>)
 800061a:	f003 f807 	bl	800362c <HAL_GPIO_WritePin>
    LCD_RS_CLR;
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000624:	4809      	ldr	r0, [pc, #36]	@ (800064c <Lcd_WriteIndex+0x44>)
 8000626:	f003 f801 	bl	800362c <HAL_GPIO_WritePin>
    SPI_WriteData(Index);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ffb5 	bl	800059c <SPI_WriteData>
    LCD_CS_SET;
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000638:	4803      	ldr	r0, [pc, #12]	@ (8000648 <Lcd_WriteIndex+0x40>)
 800063a:	f002 fff7 	bl	800362c <HAL_GPIO_WritePin>
 }
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40020800 	.word	0x40020800
 800064c:	40020400 	.word	0x40020400

08000650 <Lcd_WriteData>:
 
 //向液晶屏写一个8位数据
 void Lcd_WriteData(uint8_t Data)
 {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
    LCD_CS_CLR;
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000660:	480b      	ldr	r0, [pc, #44]	@ (8000690 <Lcd_WriteData+0x40>)
 8000662:	f002 ffe3 	bl	800362c <HAL_GPIO_WritePin>
    LCD_RS_SET;
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800066c:	4809      	ldr	r0, [pc, #36]	@ (8000694 <Lcd_WriteData+0x44>)
 800066e:	f002 ffdd 	bl	800362c <HAL_GPIO_WritePin>
    SPI_WriteData(Data);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff91 	bl	800059c <SPI_WriteData>
    LCD_CS_SET; 
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000680:	4803      	ldr	r0, [pc, #12]	@ (8000690 <Lcd_WriteData+0x40>)
 8000682:	f002 ffd3 	bl	800362c <HAL_GPIO_WritePin>
 }
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40020800 	.word	0x40020800
 8000694:	40020400 	.word	0x40020400

08000698 <LCD_WriteData_16Bit>:
 //向液晶屏写一个16位数据
 void LCD_WriteData_16Bit(uint16_t Data)
 {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
    LCD_CS_CLR;
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006a8:	480f      	ldr	r0, [pc, #60]	@ (80006e8 <LCD_WriteData_16Bit+0x50>)
 80006aa:	f002 ffbf 	bl	800362c <HAL_GPIO_WritePin>
    LCD_RS_SET;
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006b4:	480d      	ldr	r0, [pc, #52]	@ (80006ec <LCD_WriteData_16Bit+0x54>)
 80006b6:	f002 ffb9 	bl	800362c <HAL_GPIO_WritePin>
    SPI_WriteData(Data>>8); 	//写入高8位数据
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	b29b      	uxth	r3, r3
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff6a 	bl	800059c <SPI_WriteData>
    SPI_WriteData(Data); 			//写入低8位数据
 80006c8:	88fb      	ldrh	r3, [r7, #6]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff65 	bl	800059c <SPI_WriteData>
    LCD_CS_SET; 
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006d8:	4803      	ldr	r0, [pc, #12]	@ (80006e8 <LCD_WriteData_16Bit+0x50>)
 80006da:	f002 ffa7 	bl	800362c <HAL_GPIO_WritePin>
 }
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40020800 	.word	0x40020800
 80006ec:	40020400 	.word	0x40020400

080006f0 <Lcd_Reset>:
    Lcd_WriteIndex(Index);
    Lcd_WriteData(Data);
}
 
void Lcd_Reset(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
     LCD_RST_CLR;
 80006f4:	2201      	movs	r2, #1
 80006f6:	2140      	movs	r1, #64	@ 0x40
 80006f8:	4807      	ldr	r0, [pc, #28]	@ (8000718 <Lcd_Reset+0x28>)
 80006fa:	f002 ff97 	bl	800362c <HAL_GPIO_WritePin>
     delay_ms(100);
 80006fe:	2064      	movs	r0, #100	@ 0x64
 8000700:	f7ff ff3e 	bl	8000580 <delay_ms>
     LCD_RST_SET;
 8000704:	2200      	movs	r2, #0
 8000706:	2140      	movs	r1, #64	@ 0x40
 8000708:	4803      	ldr	r0, [pc, #12]	@ (8000718 <Lcd_Reset+0x28>)
 800070a:	f002 ff8f 	bl	800362c <HAL_GPIO_WritePin>
     delay_ms(100);
 800070e:	2064      	movs	r0, #100	@ 0x64
 8000710:	f7ff ff36 	bl	8000580 <delay_ms>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40020800 	.word	0x40020800

0800071c <Lcd_Init>:
 
 //LCD Init For 1.44Inch LCD Panel with ST7735R.
 void Lcd_Init(void)
 {	
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
//     LCD_GPIO_Init();
     Lcd_Reset(); //Reset before LCD Init.
 8000720:	f7ff ffe6 	bl	80006f0 <Lcd_Reset>
 
     //LCD Init For 1.44Inch LCD Panel with ST7735R.
     Lcd_WriteIndex(0x11);//Sleep exit 
 8000724:	2011      	movs	r0, #17
 8000726:	f7ff ff6f 	bl	8000608 <Lcd_WriteIndex>
     delay_ms (120);
 800072a:	2078      	movs	r0, #120	@ 0x78
 800072c:	f7ff ff28 	bl	8000580 <delay_ms>
     //ST7735R Frame Rate
     Lcd_WriteIndex(0xB1); 
 8000730:	20b1      	movs	r0, #177	@ 0xb1
 8000732:	f7ff ff69 	bl	8000608 <Lcd_WriteIndex>
     Lcd_WriteData(0x01); 
 8000736:	2001      	movs	r0, #1
 8000738:	f7ff ff8a 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x2C); 
 800073c:	202c      	movs	r0, #44	@ 0x2c
 800073e:	f7ff ff87 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x2D); 
 8000742:	202d      	movs	r0, #45	@ 0x2d
 8000744:	f7ff ff84 	bl	8000650 <Lcd_WriteData>
 
     Lcd_WriteIndex(0xB2); 
 8000748:	20b2      	movs	r0, #178	@ 0xb2
 800074a:	f7ff ff5d 	bl	8000608 <Lcd_WriteIndex>
     Lcd_WriteData(0x01); 
 800074e:	2001      	movs	r0, #1
 8000750:	f7ff ff7e 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x2C); 
 8000754:	202c      	movs	r0, #44	@ 0x2c
 8000756:	f7ff ff7b 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x2D); 
 800075a:	202d      	movs	r0, #45	@ 0x2d
 800075c:	f7ff ff78 	bl	8000650 <Lcd_WriteData>
 
     Lcd_WriteIndex(0xB3); 
 8000760:	20b3      	movs	r0, #179	@ 0xb3
 8000762:	f7ff ff51 	bl	8000608 <Lcd_WriteIndex>
     Lcd_WriteData(0x01); 
 8000766:	2001      	movs	r0, #1
 8000768:	f7ff ff72 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x2C); 
 800076c:	202c      	movs	r0, #44	@ 0x2c
 800076e:	f7ff ff6f 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x2D); 
 8000772:	202d      	movs	r0, #45	@ 0x2d
 8000774:	f7ff ff6c 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x01); 
 8000778:	2001      	movs	r0, #1
 800077a:	f7ff ff69 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x2C); 
 800077e:	202c      	movs	r0, #44	@ 0x2c
 8000780:	f7ff ff66 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x2D); 
 8000784:	202d      	movs	r0, #45	@ 0x2d
 8000786:	f7ff ff63 	bl	8000650 <Lcd_WriteData>
     
     Lcd_WriteIndex(0xB4); //Column inversion 
 800078a:	20b4      	movs	r0, #180	@ 0xb4
 800078c:	f7ff ff3c 	bl	8000608 <Lcd_WriteIndex>
     Lcd_WriteData(0x07); 
 8000790:	2007      	movs	r0, #7
 8000792:	f7ff ff5d 	bl	8000650 <Lcd_WriteData>
     
     //ST7735R Power Sequence
     Lcd_WriteIndex(0xC0); 
 8000796:	20c0      	movs	r0, #192	@ 0xc0
 8000798:	f7ff ff36 	bl	8000608 <Lcd_WriteIndex>
     Lcd_WriteData(0xA2); 
 800079c:	20a2      	movs	r0, #162	@ 0xa2
 800079e:	f7ff ff57 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x02); 
 80007a2:	2002      	movs	r0, #2
 80007a4:	f7ff ff54 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x84); 
 80007a8:	2084      	movs	r0, #132	@ 0x84
 80007aa:	f7ff ff51 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteIndex(0xC1); 
 80007ae:	20c1      	movs	r0, #193	@ 0xc1
 80007b0:	f7ff ff2a 	bl	8000608 <Lcd_WriteIndex>
     Lcd_WriteData(0xC5); 
 80007b4:	20c5      	movs	r0, #197	@ 0xc5
 80007b6:	f7ff ff4b 	bl	8000650 <Lcd_WriteData>
 
     Lcd_WriteIndex(0xC2); 
 80007ba:	20c2      	movs	r0, #194	@ 0xc2
 80007bc:	f7ff ff24 	bl	8000608 <Lcd_WriteIndex>
     Lcd_WriteData(0x0A); 
 80007c0:	200a      	movs	r0, #10
 80007c2:	f7ff ff45 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x00); 
 80007c6:	2000      	movs	r0, #0
 80007c8:	f7ff ff42 	bl	8000650 <Lcd_WriteData>
 
     Lcd_WriteIndex(0xC3); 
 80007cc:	20c3      	movs	r0, #195	@ 0xc3
 80007ce:	f7ff ff1b 	bl	8000608 <Lcd_WriteIndex>
     Lcd_WriteData(0x8A); 
 80007d2:	208a      	movs	r0, #138	@ 0x8a
 80007d4:	f7ff ff3c 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x2A); 
 80007d8:	202a      	movs	r0, #42	@ 0x2a
 80007da:	f7ff ff39 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteIndex(0xC4); 
 80007de:	20c4      	movs	r0, #196	@ 0xc4
 80007e0:	f7ff ff12 	bl	8000608 <Lcd_WriteIndex>
     Lcd_WriteData(0x8A); 
 80007e4:	208a      	movs	r0, #138	@ 0x8a
 80007e6:	f7ff ff33 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0xEE); 
 80007ea:	20ee      	movs	r0, #238	@ 0xee
 80007ec:	f7ff ff30 	bl	8000650 <Lcd_WriteData>
     
     Lcd_WriteIndex(0xC5); //VCOM 
 80007f0:	20c5      	movs	r0, #197	@ 0xc5
 80007f2:	f7ff ff09 	bl	8000608 <Lcd_WriteIndex>
     Lcd_WriteData(0x0E); 
 80007f6:	200e      	movs	r0, #14
 80007f8:	f7ff ff2a 	bl	8000650 <Lcd_WriteData>
     
     Lcd_WriteIndex(0x36); //MX, MY, RGB mode 
 80007fc:	2036      	movs	r0, #54	@ 0x36
 80007fe:	f7ff ff03 	bl	8000608 <Lcd_WriteIndex>
     Lcd_WriteData(0xC8); 
 8000802:	20c8      	movs	r0, #200	@ 0xc8
 8000804:	f7ff ff24 	bl	8000650 <Lcd_WriteData>
     
     //ST7735R Gamma Sequence
     Lcd_WriteIndex(0xe0); 
 8000808:	20e0      	movs	r0, #224	@ 0xe0
 800080a:	f7ff fefd 	bl	8000608 <Lcd_WriteIndex>
     Lcd_WriteData(0x0f); 
 800080e:	200f      	movs	r0, #15
 8000810:	f7ff ff1e 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x1a); 
 8000814:	201a      	movs	r0, #26
 8000816:	f7ff ff1b 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x0f); 
 800081a:	200f      	movs	r0, #15
 800081c:	f7ff ff18 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x18); 
 8000820:	2018      	movs	r0, #24
 8000822:	f7ff ff15 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x2f); 
 8000826:	202f      	movs	r0, #47	@ 0x2f
 8000828:	f7ff ff12 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x28); 
 800082c:	2028      	movs	r0, #40	@ 0x28
 800082e:	f7ff ff0f 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x20); 
 8000832:	2020      	movs	r0, #32
 8000834:	f7ff ff0c 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x22); 
 8000838:	2022      	movs	r0, #34	@ 0x22
 800083a:	f7ff ff09 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x1f); 
 800083e:	201f      	movs	r0, #31
 8000840:	f7ff ff06 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x1b); 
 8000844:	201b      	movs	r0, #27
 8000846:	f7ff ff03 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x23); 
 800084a:	2023      	movs	r0, #35	@ 0x23
 800084c:	f7ff ff00 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x37); 
 8000850:	2037      	movs	r0, #55	@ 0x37
 8000852:	f7ff fefd 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x00); 	
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff fefa 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x07); 
 800085c:	2007      	movs	r0, #7
 800085e:	f7ff fef7 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x02); 
 8000862:	2002      	movs	r0, #2
 8000864:	f7ff fef4 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x10); 
 8000868:	2010      	movs	r0, #16
 800086a:	f7ff fef1 	bl	8000650 <Lcd_WriteData>
 
     Lcd_WriteIndex(0xe1); 
 800086e:	20e1      	movs	r0, #225	@ 0xe1
 8000870:	f7ff feca 	bl	8000608 <Lcd_WriteIndex>
     Lcd_WriteData(0x0f); 
 8000874:	200f      	movs	r0, #15
 8000876:	f7ff feeb 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x1b); 
 800087a:	201b      	movs	r0, #27
 800087c:	f7ff fee8 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x0f); 
 8000880:	200f      	movs	r0, #15
 8000882:	f7ff fee5 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x17); 
 8000886:	2017      	movs	r0, #23
 8000888:	f7ff fee2 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x33); 
 800088c:	2033      	movs	r0, #51	@ 0x33
 800088e:	f7ff fedf 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x2c); 
 8000892:	202c      	movs	r0, #44	@ 0x2c
 8000894:	f7ff fedc 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x29); 
 8000898:	2029      	movs	r0, #41	@ 0x29
 800089a:	f7ff fed9 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x2e); 
 800089e:	202e      	movs	r0, #46	@ 0x2e
 80008a0:	f7ff fed6 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x30); 
 80008a4:	2030      	movs	r0, #48	@ 0x30
 80008a6:	f7ff fed3 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x30); 
 80008aa:	2030      	movs	r0, #48	@ 0x30
 80008ac:	f7ff fed0 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x39); 
 80008b0:	2039      	movs	r0, #57	@ 0x39
 80008b2:	f7ff fecd 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x3f); 
 80008b6:	203f      	movs	r0, #63	@ 0x3f
 80008b8:	f7ff feca 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x00); 
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fec7 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x07); 
 80008c2:	2007      	movs	r0, #7
 80008c4:	f7ff fec4 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x03); 
 80008c8:	2003      	movs	r0, #3
 80008ca:	f7ff fec1 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x10);  
 80008ce:	2010      	movs	r0, #16
 80008d0:	f7ff febe 	bl	8000650 <Lcd_WriteData>
     
     Lcd_WriteIndex(0x2a);
 80008d4:	202a      	movs	r0, #42	@ 0x2a
 80008d6:	f7ff fe97 	bl	8000608 <Lcd_WriteIndex>
     Lcd_WriteData(0x00);
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff feb8 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x00);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff feb5 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x00);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff feb2 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x7f);
 80008ec:	207f      	movs	r0, #127	@ 0x7f
 80008ee:	f7ff feaf 	bl	8000650 <Lcd_WriteData>
 
     Lcd_WriteIndex(0x2b);
 80008f2:	202b      	movs	r0, #43	@ 0x2b
 80008f4:	f7ff fe88 	bl	8000608 <Lcd_WriteIndex>
     Lcd_WriteData(0x00);
 80008f8:	2000      	movs	r0, #0
 80008fa:	f7ff fea9 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x00);
 80008fe:	2000      	movs	r0, #0
 8000900:	f7ff fea6 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x00);
 8000904:	2000      	movs	r0, #0
 8000906:	f7ff fea3 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteData(0x9f);
 800090a:	209f      	movs	r0, #159	@ 0x9f
 800090c:	f7ff fea0 	bl	8000650 <Lcd_WriteData>
     
     Lcd_WriteIndex(0xF0); //Enable test command  
 8000910:	20f0      	movs	r0, #240	@ 0xf0
 8000912:	f7ff fe79 	bl	8000608 <Lcd_WriteIndex>
     Lcd_WriteData(0x01); 
 8000916:	2001      	movs	r0, #1
 8000918:	f7ff fe9a 	bl	8000650 <Lcd_WriteData>
     Lcd_WriteIndex(0xF6); //Disable ram power save mode 
 800091c:	20f6      	movs	r0, #246	@ 0xf6
 800091e:	f7ff fe73 	bl	8000608 <Lcd_WriteIndex>
     Lcd_WriteData(0x00); 
 8000922:	2000      	movs	r0, #0
 8000924:	f7ff fe94 	bl	8000650 <Lcd_WriteData>
     
     Lcd_WriteIndex(0x3A); //65k mode 
 8000928:	203a      	movs	r0, #58	@ 0x3a
 800092a:	f7ff fe6d 	bl	8000608 <Lcd_WriteIndex>
     Lcd_WriteData(0x05); 
 800092e:	2005      	movs	r0, #5
 8000930:	f7ff fe8e 	bl	8000650 <Lcd_WriteData>
     
     
     Lcd_WriteIndex(0x29);//Display on	 
 8000934:	2029      	movs	r0, #41	@ 0x29
 8000936:	f7ff fe67 	bl	8000608 <Lcd_WriteIndex>
 }
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}

0800093e <Lcd_SetRegion>:
 功能：设置lcd显示区域，在此区域写点数据自动换行
 入口参数：xy起点和终点
 返回值：无
 *************************************************/
void Lcd_SetRegion(uint16_t x_start,uint16_t y_start,uint16_t x_end,uint16_t y_end)
{		
 800093e:	b590      	push	{r4, r7, lr}
 8000940:	b083      	sub	sp, #12
 8000942:	af00      	add	r7, sp, #0
 8000944:	4604      	mov	r4, r0
 8000946:	4608      	mov	r0, r1
 8000948:	4611      	mov	r1, r2
 800094a:	461a      	mov	r2, r3
 800094c:	4623      	mov	r3, r4
 800094e:	80fb      	strh	r3, [r7, #6]
 8000950:	4603      	mov	r3, r0
 8000952:	80bb      	strh	r3, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	807b      	strh	r3, [r7, #2]
 8000958:	4613      	mov	r3, r2
 800095a:	803b      	strh	r3, [r7, #0]
    Lcd_WriteIndex(0x2a);
 800095c:	202a      	movs	r0, #42	@ 0x2a
 800095e:	f7ff fe53 	bl	8000608 <Lcd_WriteIndex>
    Lcd_WriteData(0x00);
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff fe74 	bl	8000650 <Lcd_WriteData>
    Lcd_WriteData(x_start+2);
 8000968:	88fb      	ldrh	r3, [r7, #6]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	3302      	adds	r3, #2
 800096e:	b2db      	uxtb	r3, r3
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fe6d 	bl	8000650 <Lcd_WriteData>
    Lcd_WriteData(0x00);
 8000976:	2000      	movs	r0, #0
 8000978:	f7ff fe6a 	bl	8000650 <Lcd_WriteData>
    Lcd_WriteData(x_end+2);
 800097c:	887b      	ldrh	r3, [r7, #2]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	3302      	adds	r3, #2
 8000982:	b2db      	uxtb	r3, r3
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fe63 	bl	8000650 <Lcd_WriteData>

    Lcd_WriteIndex(0x2b);
 800098a:	202b      	movs	r0, #43	@ 0x2b
 800098c:	f7ff fe3c 	bl	8000608 <Lcd_WriteIndex>
    Lcd_WriteData(0x00);
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff fe5d 	bl	8000650 <Lcd_WriteData>
    Lcd_WriteData(y_start+3);
 8000996:	88bb      	ldrh	r3, [r7, #4]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	3303      	adds	r3, #3
 800099c:	b2db      	uxtb	r3, r3
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fe56 	bl	8000650 <Lcd_WriteData>
    Lcd_WriteData(0x00);
 80009a4:	2000      	movs	r0, #0
 80009a6:	f7ff fe53 	bl	8000650 <Lcd_WriteData>
    Lcd_WriteData(y_end+3);
 80009aa:	883b      	ldrh	r3, [r7, #0]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	3303      	adds	r3, #3
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fe4c 	bl	8000650 <Lcd_WriteData>
    
    Lcd_WriteIndex(0x2c);
 80009b8:	202c      	movs	r0, #44	@ 0x2c
 80009ba:	f7ff fe25 	bl	8000608 <Lcd_WriteIndex>

}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd90      	pop	{r4, r7, pc}

080009c6 <LCD_DrawBMP_BAPBIT>:
 功能：画一个图 使用16位数组
 入口参数：无
 返回值：无
 *************************************************/
void LCD_DrawBMP_BAPBIT(const unsigned short *p)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b084      	sub	sp, #16
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
    int i; 
    unsigned short Pic;
//	Lcd_Clear(WHITE); 															//清屏 
    Lcd_SetRegion(0,16,127,112);		//坐标设置
 80009ce:	2370      	movs	r3, #112	@ 0x70
 80009d0:	227f      	movs	r2, #127	@ 0x7f
 80009d2:	2110      	movs	r1, #16
 80009d4:	2000      	movs	r0, #0
 80009d6:	f7ff ffb2 	bl	800093e <Lcd_SetRegion>
    for(i=0;i<128*96;i++)
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	e00c      	b.n	80009fa <LCD_DrawBMP_BAPBIT+0x34>
    {
        Pic=*(p+i);			
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	4413      	add	r3, r2
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	817b      	strh	r3, [r7, #10]
        LCD_WriteData_16Bit(Pic);  						
 80009ec:	897b      	ldrh	r3, [r7, #10]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fe52 	bl	8000698 <LCD_WriteData_16Bit>
    for(i=0;i<128*96;i++)
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3301      	adds	r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8000a00:	dbee      	blt.n	80009e0 <LCD_DrawBMP_BAPBIT+0x1a>
    }
}
 8000a02:	bf00      	nop
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <Lcd_Clear>:
功能：全屏清屏函数
入口参数：填充颜色COLOR
返回值：无
*************************************************/
void Lcd_Clear(uint16_t Color)               
{	
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	80fb      	strh	r3, [r7, #6]
    unsigned int i,m;
    Lcd_SetRegion(0,0,X_MAX_PIXEL-1,Y_MAX_PIXEL-1);
 8000a16:	237f      	movs	r3, #127	@ 0x7f
 8000a18:	227f      	movs	r2, #127	@ 0x7f
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff ff8e 	bl	800093e <Lcd_SetRegion>
    Lcd_WriteIndex(0x2C);
 8000a22:	202c      	movs	r0, #44	@ 0x2c
 8000a24:	f7ff fdf0 	bl	8000608 <Lcd_WriteIndex>
    for(i=0;i<X_MAX_PIXEL;i++)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	e00f      	b.n	8000a4e <Lcd_Clear+0x42>
        for(m=0;m<Y_MAX_PIXEL;m++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	e006      	b.n	8000a42 <Lcd_Clear+0x36>
        {	
            LCD_WriteData_16Bit(Color);
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fe2e 	bl	8000698 <LCD_WriteData_16Bit>
        for(m=0;m<Y_MAX_PIXEL;m++)
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a46:	d9f5      	bls.n	8000a34 <Lcd_Clear+0x28>
    for(i=0;i<X_MAX_PIXEL;i++)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a52:	d9ec      	bls.n	8000a2e <Lcd_Clear+0x22>
        }   
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <Bsp_AdcStart>:

uint32_t AdcValue[2] = {0};
uint16_t AdcValueGroup[4] = {0};

void Bsp_AdcStart(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
//	HAL_ADC_Start(&hadc1);
//	HAL_ADC_Start(&hadc3);
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcValueGroup, 4);
 8000a64:	2204      	movs	r2, #4
 8000a66:	4903      	ldr	r1, [pc, #12]	@ (8000a74 <Bsp_AdcStart+0x14>)
 8000a68:	4803      	ldr	r0, [pc, #12]	@ (8000a78 <Bsp_AdcStart+0x18>)
 8000a6a:	f001 fb4b 	bl	8002104 <HAL_ADC_Start_DMA>
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000007c 	.word	0x2000007c
 8000a78:	20000888 	.word	0x20000888

08000a7c <Bsp_AdcValuePrint>:

void Bsp_AdcValuePrint(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af02      	add	r7, sp, #8
//	AdcValue[1] = HAL_ADC_GetValue(&hadc3);
//	LOG_RELEASE("ADC1 Value is %d V\n", AdcValue[0]);
//	LOG_RELEASE("ADC3 Value is %d V\n", AdcValue[1]);
//	LOG_RELEASE("ADC1 Value is %.2f V\n", (float)((AdcValue[0] / 4095.0) * 3.3));
//	LOG_RELEASE("ADC3 Value is %.2f V\n", (float)((AdcValue[1] / 4095.0) * 3.3));
	LOG_RELEASE("ADC1 Value is %d %d %d %d V\n", AdcValueGroup[0], AdcValueGroup[1], AdcValueGroup[2], AdcValueGroup[3]);
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <Bsp_AdcValuePrint+0x2c>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	4619      	mov	r1, r3
 8000a88:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <Bsp_AdcValuePrint+0x2c>)
 8000a8a:	885b      	ldrh	r3, [r3, #2]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <Bsp_AdcValuePrint+0x2c>)
 8000a90:	889b      	ldrh	r3, [r3, #4]
 8000a92:	4618      	mov	r0, r3
 8000a94:	4b04      	ldr	r3, [pc, #16]	@ (8000aa8 <Bsp_AdcValuePrint+0x2c>)
 8000a96:	88db      	ldrh	r3, [r3, #6]
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	4803      	ldr	r0, [pc, #12]	@ (8000aac <Bsp_AdcValuePrint+0x30>)
 8000a9e:	f000 f9b3 	bl	8000e08 <DEBUG_PRINTF>
//	LOG_RELEASE("cpt %d.\n", AdcValue[0]);
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2000007c 	.word	0x2000007c
 8000aac:	08006a24 	.word	0x08006a24

08000ab0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	if(&hadc1 == hadc)
	{
//		AdcValue[0] += 1;
	}
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <HAL_TIM_PeriodElapsedCallback>:
{
	return timestamp1ms;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	if(GLOBAL_TIMER == htim)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a19      	ldr	r2, [pc, #100]	@ (8000b34 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d119      	bne.n	8000b08 <HAL_TIM_PeriodElapsedCallback+0x44>
	{
		timestamp1ms++;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	4a17      	ldr	r2, [pc, #92]	@ (8000b38 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000adc:	6013      	str	r3, [r2, #0]
		if(((timestamp1ms + 1) % 500) == 0)
 8000ade:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000af0:	fb01 f303 	mul.w	r3, r1, r3
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d115      	bne.n	8000b26 <HAL_TIM_PeriodElapsedCallback+0x62>
		{
			SET_500MS_TASK;
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f043 0320 	orr.w	r3, r3, #32
 8000b02:	4a0f      	ldr	r2, [pc, #60]	@ (8000b40 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b04:	6013      	str	r3, [r2, #0]
	{
		timestamp1000ms++;
		SET_1000MS_TASK;
	}

}
 8000b06:	e00e      	b.n	8000b26 <HAL_TIM_PeriodElapsedCallback+0x62>
	else if (PRINT_TIMER == htim)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b44 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d10a      	bne.n	8000b26 <HAL_TIM_PeriodElapsedCallback+0x62>
		timestamp1000ms++;
 8000b10:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	3301      	adds	r3, #1
 8000b16:	4a0c      	ldr	r2, [pc, #48]	@ (8000b48 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000b18:	6013      	str	r3, [r2, #0]
		SET_1000MS_TASK;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b22:	4a07      	ldr	r2, [pc, #28]	@ (8000b40 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b24:	6013      	str	r3, [r2, #0]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000c0c 	.word	0x20000c0c
 8000b38:	20000084 	.word	0x20000084
 8000b3c:	10624dd3 	.word	0x10624dd3
 8000b40:	2000008c 	.word	0x2000008c
 8000b44:	20000bc4 	.word	0x20000bc4
 8000b48:	20000088 	.word	0x20000088

08000b4c <HAL_GPIO_EXTI_Callback>:
 */
#include "led_bsp.h"
#include "key_bsp.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
	if(KEY2_Pin == GPIO_Pin)
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b5c:	d101      	bne.n	8000b62 <HAL_GPIO_EXTI_Callback+0x16>
	{
		Led_BlueFlip();
 8000b5e:	f000 f811 	bl	8000b84 <Led_BlueFlip>
	}
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <Led_RedFlip>:
 *      Author: 18283
 */
#include "led_bsp.h"

void Led_RedFlip(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000b70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b74:	4802      	ldr	r0, [pc, #8]	@ (8000b80 <Led_RedFlip+0x14>)
 8000b76:	f002 fd72 	bl	800365e <HAL_GPIO_TogglePin>
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40021c00 	.word	0x40021c00

08000b84 <Led_BlueFlip>:
{
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
}

void Led_BlueFlip(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000b88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b8c:	4802      	ldr	r0, [pc, #8]	@ (8000b98 <Led_BlueFlip+0x14>)
 8000b8e:	f002 fd66 	bl	800365e <HAL_GPIO_TogglePin>
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40021c00 	.word	0x40021c00

08000b9c <Led_task>:
#include "Lcd_bmp.h"

volatile uint32_t Task_Cmd;

void Led_task(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	Led_RedFlip();
 8000ba0:	f7ff ffe4 	bl	8000b6c <Led_RedFlip>
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <Lcd_Task>:
	HAL_Delay(200);
	HAL_Delay(200);
}

void Lcd_Task(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
//	LCD_DrawBMP_8BIT(gImage_clannad);
//	delay_ms(1000);
//	LCD_DrawBMP_16BIT(gImage_SunshineGirl);
//	delay_ms(1000);
	// LCD_DrawBMP_BAPBIT(gImage_BadApple);
	LCD_DrawBMP_BAPBIT(Image_BadApple);
 8000bac:	4804      	ldr	r0, [pc, #16]	@ (8000bc0 <Lcd_Task+0x18>)
 8000bae:	f7ff ff0a 	bl	80009c6 <LCD_DrawBMP_BAPBIT>
	delay_ms(1000);
 8000bb2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bb6:	f7ff fce3 	bl	8000580 <delay_ms>
	// uint8_t *pData = &Data;
	// extern uint8_t TxStatus;
	// while(TxStatus != STD_ON);
    // TxStatus = STD_OFF;
	// HAL_UART_Transmit_DMA(TRANSMIT_COMPORT, pData, 1);
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	08006bb8 	.word	0x08006bb8

08000bc4 <Task_1ms_Entry>:

void Task_1ms_Entry(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 1ms message\n");
 8000bc8:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <Task_1ms_Entry+0x1c>)
 8000bca:	f000 f91d 	bl	8000e08 <DEBUG_PRINTF>
	RESET_1MS_TASK;
 8000bce:	4b05      	ldr	r3, [pc, #20]	@ (8000be4 <Task_1ms_Entry+0x20>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f023 0301 	bic.w	r3, r3, #1
 8000bd6:	4a03      	ldr	r2, [pc, #12]	@ (8000be4 <Task_1ms_Entry+0x20>)
 8000bd8:	6013      	str	r3, [r2, #0]
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	08006a80 	.word	0x08006a80
 8000be4:	2000008c 	.word	0x2000008c

08000be8 <Task_5ms_Entry>:

void Task_5ms_Entry(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 5ms message\n");
 8000bec:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <Task_5ms_Entry+0x1c>)
 8000bee:	f000 f90b 	bl	8000e08 <DEBUG_PRINTF>
	RESET_5MS_TASK;
 8000bf2:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <Task_5ms_Entry+0x20>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f023 0302 	bic.w	r3, r3, #2
 8000bfa:	4a03      	ldr	r2, [pc, #12]	@ (8000c08 <Task_5ms_Entry+0x20>)
 8000bfc:	6013      	str	r3, [r2, #0]
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	08006aa4 	.word	0x08006aa4
 8000c08:	2000008c 	.word	0x2000008c

08000c0c <Task_10ms_Entry>:

void Task_10ms_Entry(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 10ms message\n");
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <Task_10ms_Entry+0x1c>)
 8000c12:	f000 f8f9 	bl	8000e08 <DEBUG_PRINTF>
	RESET_10MS_TASK;
 8000c16:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <Task_10ms_Entry+0x20>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f023 0304 	bic.w	r3, r3, #4
 8000c1e:	4a03      	ldr	r2, [pc, #12]	@ (8000c2c <Task_10ms_Entry+0x20>)
 8000c20:	6013      	str	r3, [r2, #0]
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	08006ac8 	.word	0x08006ac8
 8000c2c:	2000008c 	.word	0x2000008c

08000c30 <Task_50ms_Entry>:

void Task_50ms_Entry(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 50ms message\n");
 8000c34:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <Task_50ms_Entry+0x1c>)
 8000c36:	f000 f8e7 	bl	8000e08 <DEBUG_PRINTF>
	RESET_50MS_TASK;
 8000c3a:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <Task_50ms_Entry+0x20>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f023 0308 	bic.w	r3, r3, #8
 8000c42:	4a03      	ldr	r2, [pc, #12]	@ (8000c50 <Task_50ms_Entry+0x20>)
 8000c44:	6013      	str	r3, [r2, #0]
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	08006aec 	.word	0x08006aec
 8000c50:	2000008c 	.word	0x2000008c

08000c54 <Task_100ms_Entry>:

void Task_100ms_Entry(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 100ms message\n");
 8000c58:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <Task_100ms_Entry+0x1c>)
 8000c5a:	f000 f8d5 	bl	8000e08 <DEBUG_PRINTF>
	RESET_100MS_TASK;
 8000c5e:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <Task_100ms_Entry+0x20>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f023 0310 	bic.w	r3, r3, #16
 8000c66:	4a03      	ldr	r2, [pc, #12]	@ (8000c74 <Task_100ms_Entry+0x20>)
 8000c68:	6013      	str	r3, [r2, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	08006b10 	.word	0x08006b10
 8000c74:	2000008c 	.word	0x2000008c

08000c78 <Task_500ms_Entry>:

extern uint32_t SPI_Tx_Cpt;
extern uint32_t LCD_Tx_Cpt;
void Task_500ms_Entry(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 500ms message\n");
 8000c7c:	480e      	ldr	r0, [pc, #56]	@ (8000cb8 <Task_500ms_Entry+0x40>)
 8000c7e:	f000 f8c3 	bl	8000e08 <DEBUG_PRINTF>
	// LOG_RELEASE("SPI Tx Cpt: %d.\n", SPI_Tx_Cpt);
	// LOG_RELEASE("LCD Tx Cpt: %d.\n", LCD_Tx_Cpt);
	// OLED_task();
	Lcd_Task();
 8000c82:	f7ff ff91 	bl	8000ba8 <Lcd_Task>
	RESET_500MS_TASK;
 8000c86:	4b0d      	ldr	r3, [pc, #52]	@ (8000cbc <Task_500ms_Entry+0x44>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f023 0320 	bic.w	r3, r3, #32
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000cbc <Task_500ms_Entry+0x44>)
 8000c90:	6013      	str	r3, [r2, #0]
	LOG_RELEASE("Log1 %d.\n", timestamp1ms);
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <Task_500ms_Entry+0x48>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4619      	mov	r1, r3
 8000c98:	480a      	ldr	r0, [pc, #40]	@ (8000cc4 <Task_500ms_Entry+0x4c>)
 8000c9a:	f000 f8b5 	bl	8000e08 <DEBUG_PRINTF>
	HAL_Delay(500);
 8000c9e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ca2:	f001 f9c7 	bl	8002034 <HAL_Delay>
	LOG_RELEASE("Log2 %d.\n", timestamp1ms);
 8000ca6:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <Task_500ms_Entry+0x48>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4619      	mov	r1, r3
 8000cac:	4806      	ldr	r0, [pc, #24]	@ (8000cc8 <Task_500ms_Entry+0x50>)
 8000cae:	f000 f8ab 	bl	8000e08 <DEBUG_PRINTF>
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	08006b34 	.word	0x08006b34
 8000cbc:	2000008c 	.word	0x2000008c
 8000cc0:	20000084 	.word	0x20000084
 8000cc4:	08006b58 	.word	0x08006b58
 8000cc8:	08006b70 	.word	0x08006b70

08000ccc <Task_1000ms_Entry>:

void Task_1000ms_Entry(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 1000ms message\n");
 8000cd0:	4807      	ldr	r0, [pc, #28]	@ (8000cf0 <Task_1000ms_Entry+0x24>)
 8000cd2:	f000 f899 	bl	8000e08 <DEBUG_PRINTF>
	Led_task();
 8000cd6:	f7ff ff61 	bl	8000b9c <Led_task>
	Bsp_AdcValuePrint();
 8000cda:	f7ff fecf 	bl	8000a7c <Bsp_AdcValuePrint>
	RESET_1000MS_TASK;
 8000cde:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <Task_1000ms_Entry+0x28>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000ce6:	4a03      	ldr	r2, [pc, #12]	@ (8000cf4 <Task_1000ms_Entry+0x28>)
 8000ce8:	6013      	str	r3, [r2, #0]
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	08006b88 	.word	0x08006b88
 8000cf4:	2000008c 	.word	0x2000008c

08000cf8 <OS_Init>:

void OS_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	Msg_Init();
 8000cfc:	f000 f868 	bl	8000dd0 <Msg_Init>
	HAL_TIM_Base_Start_IT(PRINT_TIMER);
 8000d00:	480f      	ldr	r0, [pc, #60]	@ (8000d40 <OS_Init+0x48>)
 8000d02:	f003 fb73 	bl	80043ec <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(GLOBAL_TIMER);
 8000d06:	480f      	ldr	r0, [pc, #60]	@ (8000d44 <OS_Init+0x4c>)
 8000d08:	f003 fb70 	bl	80043ec <HAL_TIM_Base_Start_IT>
	HAL_UARTEx_ReceiveToIdle_DMA(RECEIVE_COMPORT, RxMsg, RX_MESSAGE_LEN);
 8000d0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d10:	490d      	ldr	r1, [pc, #52]	@ (8000d48 <OS_Init+0x50>)
 8000d12:	480e      	ldr	r0, [pc, #56]	@ (8000d4c <OS_Init+0x54>)
 8000d14:	f004 f850 	bl	8004db8 <HAL_UARTEx_ReceiveToIdle_DMA>
	Bsp_AdcStart();
 8000d18:	f7ff fea2 	bl	8000a60 <Bsp_AdcStart>
	// OLED_Init();
	Lcd_Init();
 8000d1c:	f7ff fcfe 	bl	800071c <Lcd_Init>
	LCD_LED_SET;
 8000d20:	2201      	movs	r2, #1
 8000d22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d26:	480a      	ldr	r0, [pc, #40]	@ (8000d50 <OS_Init+0x58>)
 8000d28:	f002 fc80 	bl	800362c <HAL_GPIO_WritePin>
	Lcd_Clear(BLACK);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff fe6d 	bl	8000a0c <Lcd_Clear>
//	Lcd_Clear(WHITE);
	HAL_Delay(500);
 8000d32:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d36:	f001 f97d 	bl	8002034 <HAL_Delay>
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000bc4 	.word	0x20000bc4
 8000d44:	20000c0c 	.word	0x20000c0c
 8000d48:	20000190 	.word	0x20000190
 8000d4c:	20000c54 	.word	0x20000c54
 8000d50:	40020400 	.word	0x40020400

08000d54 <Start_OS>:

void Start_OS(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	while(1)
	{
		if(GET_1MS_TASK)
 8000d58:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <Start_OS+0x78>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d101      	bne.n	8000d68 <Start_OS+0x14>
		{
			Task_1ms_Entry();
 8000d64:	f7ff ff2e 	bl	8000bc4 <Task_1ms_Entry>
		}
		if(GET_5MS_TASK)
 8000d68:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <Start_OS+0x78>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d101      	bne.n	8000d78 <Start_OS+0x24>
		{
			Task_5ms_Entry();
 8000d74:	f7ff ff38 	bl	8000be8 <Task_5ms_Entry>
		}
		if(GET_10MS_TASK)
 8000d78:	4b14      	ldr	r3, [pc, #80]	@ (8000dcc <Start_OS+0x78>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	2b04      	cmp	r3, #4
 8000d82:	d101      	bne.n	8000d88 <Start_OS+0x34>
		{
			Task_10ms_Entry();
 8000d84:	f7ff ff42 	bl	8000c0c <Task_10ms_Entry>
		}
		if(GET_50MS_TASK)
 8000d88:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <Start_OS+0x78>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0308 	and.w	r3, r3, #8
 8000d90:	2b08      	cmp	r3, #8
 8000d92:	d101      	bne.n	8000d98 <Start_OS+0x44>
		{
			Task_50ms_Entry();
 8000d94:	f7ff ff4c 	bl	8000c30 <Task_50ms_Entry>
		}
		if(GET_100MS_TASK)
 8000d98:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <Start_OS+0x78>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0310 	and.w	r3, r3, #16
 8000da0:	2b10      	cmp	r3, #16
 8000da2:	d101      	bne.n	8000da8 <Start_OS+0x54>
		{
			Task_100ms_Entry();
 8000da4:	f7ff ff56 	bl	8000c54 <Task_100ms_Entry>
		}
		if(GET_500MS_TASK)
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <Start_OS+0x78>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0320 	and.w	r3, r3, #32
 8000db0:	2b20      	cmp	r3, #32
 8000db2:	d101      	bne.n	8000db8 <Start_OS+0x64>
		{
			Task_500ms_Entry();
 8000db4:	f7ff ff60 	bl	8000c78 <Task_500ms_Entry>
		}
		if(GET_1000MS_TASK)
 8000db8:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <Start_OS+0x78>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dc0:	2b40      	cmp	r3, #64	@ 0x40
 8000dc2:	d1c9      	bne.n	8000d58 <Start_OS+0x4>
		{
			Task_1000ms_Entry();
 8000dc4:	f7ff ff82 	bl	8000ccc <Task_1000ms_Entry>
		if(GET_1MS_TASK)
 8000dc8:	e7c6      	b.n	8000d58 <Start_OS+0x4>
 8000dca:	bf00      	nop
 8000dcc:	2000008c 	.word	0x2000008c

08000dd0 <Msg_Init>:
char msg_log[MSGLOG_LEN];
uint8_t TxStatus = STD_ON;
MsgLog msg;

void Msg_Init(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
	msg.msgptr = msg_log;
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <Msg_Init+0x30>)
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	@ (8000e04 <Msg_Init+0x34>)
 8000dd8:	601a      	str	r2, [r3, #0]
	msg.msglen = 0;
 8000dda:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <Msg_Init+0x30>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	809a      	strh	r2, [r3, #4]
	msg.msghead = 0;
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <Msg_Init+0x30>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	80da      	strh	r2, [r3, #6]
	msg.msgtail = 0;
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <Msg_Init+0x30>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	811a      	strh	r2, [r3, #8]
	msg.emptylen = MSGLOG_LEN;
 8000dec:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <Msg_Init+0x30>)
 8000dee:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 8000df2:	815a      	strh	r2, [r3, #10]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	2000087c 	.word	0x2000087c
 8000e04:	20000290 	.word	0x20000290

08000e08 <DEBUG_PRINTF>:
		msg.msglen = 0;
		msg.emptylen = MSGLOG_LEN;
	}
}

uint32_t DEBUG_PRINTF(const char *format, ...) {
 8000e08:	b40f      	push	{r0, r1, r2, r3}
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, format);
 8000e10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e14:	603b      	str	r3, [r7, #0]

    uint8_t ret = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	74fb      	strb	r3, [r7, #19]
    uint32_t tsLen = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
    uint32_t msgLen = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
    uint32_t totalLen = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]

    uint32_t currentTime = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]

    while(TxStatus != STD_ON);
 8000e2a:	bf00      	nop
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <DEBUG_PRINTF+0x9c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d1fb      	bne.n	8000e2c <DEBUG_PRINTF+0x24>
    TxStatus = STD_OFF;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <DEBUG_PRINTF+0x9c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
    currentTime = HAL_GetTick();
 8000e3a:	f001 f8ef 	bl	800201c <HAL_GetTick>
 8000e3e:	6078      	str	r0, [r7, #4]
	tsLen = snprintf(TxMsg, sizeof(TxMsg), "%010u", currentTime);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a19      	ldr	r2, [pc, #100]	@ (8000ea8 <DEBUG_PRINTF+0xa0>)
 8000e44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e48:	4818      	ldr	r0, [pc, #96]	@ (8000eac <DEBUG_PRINTF+0xa4>)
 8000e4a:	f005 f8f1 	bl	8006030 <sniprintf>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	60fb      	str	r3, [r7, #12]
	msgLen = vsnprintf(TxMsg+tsLen, sizeof(TxMsg), format, args);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	4a15      	ldr	r2, [pc, #84]	@ (8000eac <DEBUG_PRINTF+0xa4>)
 8000e56:	1898      	adds	r0, r3, r2
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	6a3a      	ldr	r2, [r7, #32]
 8000e5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e60:	f005 f946 	bl	80060f0 <vsniprintf>
 8000e64:	4603      	mov	r3, r0
 8000e66:	60bb      	str	r3, [r7, #8]
	totalLen = tsLen + msgLen;
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	617b      	str	r3, [r7, #20]

    va_end(args);

    if (totalLen == sizeof(TxMsg))
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e76:	d101      	bne.n	8000e7c <DEBUG_PRINTF+0x74>
    {
    	totalLen = sizeof(TxMsg) - 1;
 8000e78:	23ff      	movs	r3, #255	@ 0xff
 8000e7a:	617b      	str	r3, [r7, #20]
//    while(!(HAL_UART_STATE_READY == HAL_UART_GetState(TRANSMIT_COMPORT)));
#if (MSG_PRINT_METHOD == PRINT_IMM)
#if (TRANSMIT_METHOD == POLLING)
    ret = HAL_UART_Transmit(TRANSMIT_COMPORT, (const uint8_t *)TxMsg, totalLen, TRANSMIT_TIMEOUT);
#elif (TRANSMIT_METHOD == DMA)
    ret = HAL_UART_Transmit_DMA(TRANSMIT_COMPORT, (const uint8_t *)TxMsg, totalLen);
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	461a      	mov	r2, r3
 8000e82:	490a      	ldr	r1, [pc, #40]	@ (8000eac <DEBUG_PRINTF+0xa4>)
 8000e84:	480a      	ldr	r0, [pc, #40]	@ (8000eb0 <DEBUG_PRINTF+0xa8>)
 8000e86:	f003 ff27 	bl	8004cd8 <HAL_UART_Transmit_DMA>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	74fb      	strb	r3, [r7, #19]
    ret = HAL_UART_Transmit_IT(TRANSMIT_COMPORT, (const uint8_t *)TxMsg, totalLen);
#endif
#elif (MSG_PRINT_METHOD == PRINT_TASK)
    Msg_Copy(TxMsg, totalLen);
#endif
    return ((totalLen<< 2) | ret);
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	009a      	lsls	r2, r3, #2
 8000e92:	7cfb      	ldrb	r3, [r7, #19]
 8000e94:	4313      	orrs	r3, r2
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ea0:	b004      	add	sp, #16
 8000ea2:	4770      	bx	lr
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	08006bb0 	.word	0x08006bb0
 8000eac:	20000090 	.word	0x20000090
 8000eb0:	20000c54 	.word	0x20000c54

08000eb4 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	807b      	strh	r3, [r7, #2]
	if(RECEIVE_COMPORT == huart)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <HAL_UARTEx_RxEventCallback+0x44>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d113      	bne.n	8000ef0 <HAL_UARTEx_RxEventCallback+0x3c>
	{
		HAL_UART_Transmit_DMA(TRANSMIT_COMPORT, (const uint8_t *)RxMsg, Size);
 8000ec8:	887b      	ldrh	r3, [r7, #2]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	490b      	ldr	r1, [pc, #44]	@ (8000efc <HAL_UARTEx_RxEventCallback+0x48>)
 8000ece:	480a      	ldr	r0, [pc, #40]	@ (8000ef8 <HAL_UARTEx_RxEventCallback+0x44>)
 8000ed0:	f003 ff02 	bl	8004cd8 <HAL_UART_Transmit_DMA>
		HAL_UARTEx_ReceiveToIdle_DMA(RECEIVE_COMPORT, RxMsg, RX_MESSAGE_LEN);
 8000ed4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ed8:	4908      	ldr	r1, [pc, #32]	@ (8000efc <HAL_UARTEx_RxEventCallback+0x48>)
 8000eda:	4807      	ldr	r0, [pc, #28]	@ (8000ef8 <HAL_UARTEx_RxEventCallback+0x44>)
 8000edc:	f003 ff6c 	bl	8004db8 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(RECEIVE_DMA, DMA_IT_HT);
 8000ee0:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0208 	bic.w	r2, r2, #8
 8000eee:	601a      	str	r2, [r3, #0]
	}
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000c54 	.word	0x20000c54
 8000efc:	20000190 	.word	0x20000190
 8000f00:	20000c9c 	.word	0x20000c9c

08000f04 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	if(RECEIVE_COMPORT == huart)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a06      	ldr	r2, [pc, #24]	@ (8000f28 <HAL_UART_TxCpltCallback+0x24>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d102      	bne.n	8000f1a <HAL_UART_TxCpltCallback+0x16>
	{
		TxStatus = STD_ON;
 8000f14:	4b05      	ldr	r3, [pc, #20]	@ (8000f2c <HAL_UART_TxCpltCallback+0x28>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
	}
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000c54 	.word	0x20000c54
 8000f2c:	20000000 	.word	0x20000000

08000f30 <HAL_UART_RxCpltCallback>:
#include "usart_bsp.h"
#include "usart.h"


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f56:	4b35      	ldr	r3, [pc, #212]	@ (800102c <MX_ADC1_Init+0xe8>)
 8000f58:	4a35      	ldr	r2, [pc, #212]	@ (8001030 <MX_ADC1_Init+0xec>)
 8000f5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f5c:	4b33      	ldr	r3, [pc, #204]	@ (800102c <MX_ADC1_Init+0xe8>)
 8000f5e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f64:	4b31      	ldr	r3, [pc, #196]	@ (800102c <MX_ADC1_Init+0xe8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f6a:	4b30      	ldr	r3, [pc, #192]	@ (800102c <MX_ADC1_Init+0xe8>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f70:	4b2e      	ldr	r3, [pc, #184]	@ (800102c <MX_ADC1_Init+0xe8>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f76:	4b2d      	ldr	r3, [pc, #180]	@ (800102c <MX_ADC1_Init+0xe8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800102c <MX_ADC1_Init+0xe8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f84:	4b29      	ldr	r3, [pc, #164]	@ (800102c <MX_ADC1_Init+0xe8>)
 8000f86:	4a2b      	ldr	r2, [pc, #172]	@ (8001034 <MX_ADC1_Init+0xf0>)
 8000f88:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8a:	4b28      	ldr	r3, [pc, #160]	@ (800102c <MX_ADC1_Init+0xe8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000f90:	4b26      	ldr	r3, [pc, #152]	@ (800102c <MX_ADC1_Init+0xe8>)
 8000f92:	2204      	movs	r2, #4
 8000f94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f96:	4b25      	ldr	r3, [pc, #148]	@ (800102c <MX_ADC1_Init+0xe8>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f9e:	4b23      	ldr	r3, [pc, #140]	@ (800102c <MX_ADC1_Init+0xe8>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa4:	4821      	ldr	r0, [pc, #132]	@ (800102c <MX_ADC1_Init+0xe8>)
 8000fa6:	f001 f869 	bl	800207c <HAL_ADC_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fb0:	f000 faae 	bl	8001510 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fb4:	2306      	movs	r3, #6
 8000fb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4819      	ldr	r0, [pc, #100]	@ (800102c <MX_ADC1_Init+0xe8>)
 8000fc6:	f001 f9c1 	bl	800234c <HAL_ADC_ConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fd0:	f000 fa9e 	bl	8001510 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000fd4:	230d      	movs	r3, #13
 8000fd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4812      	ldr	r0, [pc, #72]	@ (800102c <MX_ADC1_Init+0xe8>)
 8000fe2:	f001 f9b3 	bl	800234c <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fec:	f000 fa90 	bl	8001510 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000ff0:	2311      	movs	r3, #17
 8000ff2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480b      	ldr	r0, [pc, #44]	@ (800102c <MX_ADC1_Init+0xe8>)
 8000ffe:	f001 f9a5 	bl	800234c <HAL_ADC_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001008:	f000 fa82 	bl	8001510 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 800100c:	2304      	movs	r3, #4
 800100e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001010:	463b      	mov	r3, r7
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	@ (800102c <MX_ADC1_Init+0xe8>)
 8001016:	f001 f999 	bl	800234c <HAL_ADC_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001020:	f000 fa76 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000888 	.word	0x20000888
 8001030:	40012000 	.word	0x40012000
 8001034:	0f000001 	.word	0x0f000001

08001038 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a3c      	ldr	r2, [pc, #240]	@ (8001148 <HAL_ADC_MspInit+0x110>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d171      	bne.n	800113e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	4b3b      	ldr	r3, [pc, #236]	@ (800114c <HAL_ADC_MspInit+0x114>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	4a3a      	ldr	r2, [pc, #232]	@ (800114c <HAL_ADC_MspInit+0x114>)
 8001064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001068:	6453      	str	r3, [r2, #68]	@ 0x44
 800106a:	4b38      	ldr	r3, [pc, #224]	@ (800114c <HAL_ADC_MspInit+0x114>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b34      	ldr	r3, [pc, #208]	@ (800114c <HAL_ADC_MspInit+0x114>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	4a33      	ldr	r2, [pc, #204]	@ (800114c <HAL_ADC_MspInit+0x114>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	6313      	str	r3, [r2, #48]	@ 0x30
 8001086:	4b31      	ldr	r3, [pc, #196]	@ (800114c <HAL_ADC_MspInit+0x114>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	4b2d      	ldr	r3, [pc, #180]	@ (800114c <HAL_ADC_MspInit+0x114>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a2c      	ldr	r2, [pc, #176]	@ (800114c <HAL_ADC_MspInit+0x114>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b2a      	ldr	r3, [pc, #168]	@ (800114c <HAL_ADC_MspInit+0x114>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010ae:	2308      	movs	r3, #8
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b2:	2303      	movs	r3, #3
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4823      	ldr	r0, [pc, #140]	@ (8001150 <HAL_ADC_MspInit+0x118>)
 80010c2:	f002 f907 	bl	80032d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010c6:	2340      	movs	r3, #64	@ 0x40
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ca:	2303      	movs	r3, #3
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	481e      	ldr	r0, [pc, #120]	@ (8001154 <HAL_ADC_MspInit+0x11c>)
 80010da:	f002 f8fb 	bl	80032d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80010de:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <HAL_ADC_MspInit+0x120>)
 80010e0:	4a1e      	ldr	r2, [pc, #120]	@ (800115c <HAL_ADC_MspInit+0x124>)
 80010e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001158 <HAL_ADC_MspInit+0x120>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <HAL_ADC_MspInit+0x120>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f0:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <HAL_ADC_MspInit+0x120>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010f6:	4b18      	ldr	r3, [pc, #96]	@ (8001158 <HAL_ADC_MspInit+0x120>)
 80010f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010fe:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <HAL_ADC_MspInit+0x120>)
 8001100:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001104:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001106:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <HAL_ADC_MspInit+0x120>)
 8001108:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800110c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800110e:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <HAL_ADC_MspInit+0x120>)
 8001110:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001114:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <HAL_ADC_MspInit+0x120>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800111c:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <HAL_ADC_MspInit+0x120>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001122:	480d      	ldr	r0, [pc, #52]	@ (8001158 <HAL_ADC_MspInit+0x120>)
 8001124:	f001 fcd4 	bl	8002ad0 <HAL_DMA_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800112e:	f000 f9ef 	bl	8001510 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a08      	ldr	r2, [pc, #32]	@ (8001158 <HAL_ADC_MspInit+0x120>)
 8001136:	639a      	str	r2, [r3, #56]	@ 0x38
 8001138:	4a07      	ldr	r2, [pc, #28]	@ (8001158 <HAL_ADC_MspInit+0x120>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800113e:	bf00      	nop
 8001140:	3728      	adds	r7, #40	@ 0x28
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40012000 	.word	0x40012000
 800114c:	40023800 	.word	0x40023800
 8001150:	40020800 	.word	0x40020800
 8001154:	40020000 	.word	0x40020000
 8001158:	200008d0 	.word	0x200008d0
 800115c:	40026470 	.word	0x40026470

08001160 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream1
  */
void MX_DMA_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b43      	ldr	r3, [pc, #268]	@ (8001278 <MX_DMA_Init+0x118>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a42      	ldr	r2, [pc, #264]	@ (8001278 <MX_DMA_Init+0x118>)
 8001170:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b40      	ldr	r3, [pc, #256]	@ (8001278 <MX_DMA_Init+0x118>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	4b3c      	ldr	r3, [pc, #240]	@ (8001278 <MX_DMA_Init+0x118>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a3b      	ldr	r2, [pc, #236]	@ (8001278 <MX_DMA_Init+0x118>)
 800118c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b39      	ldr	r3, [pc, #228]	@ (8001278 <MX_DMA_Init+0x118>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 800119e:	4b37      	ldr	r3, [pc, #220]	@ (800127c <MX_DMA_Init+0x11c>)
 80011a0:	4a37      	ldr	r2, [pc, #220]	@ (8001280 <MX_DMA_Init+0x120>)
 80011a2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Channel = DMA_CHANNEL_0;
 80011a4:	4b35      	ldr	r3, [pc, #212]	@ (800127c <MX_DMA_Init+0x11c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80011aa:	4b34      	ldr	r3, [pc, #208]	@ (800127c <MX_DMA_Init+0x11c>)
 80011ac:	2280      	movs	r2, #128	@ 0x80
 80011ae:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_ENABLE;
 80011b0:	4b32      	ldr	r3, [pc, #200]	@ (800127c <MX_DMA_Init+0x11c>)
 80011b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011b6:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_ENABLE;
 80011b8:	4b30      	ldr	r3, [pc, #192]	@ (800127c <MX_DMA_Init+0x11c>)
 80011ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011be:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011c0:	4b2e      	ldr	r3, [pc, #184]	@ (800127c <MX_DMA_Init+0x11c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011c6:	4b2d      	ldr	r3, [pc, #180]	@ (800127c <MX_DMA_Init+0x11c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 80011cc:	4b2b      	ldr	r3, [pc, #172]	@ (800127c <MX_DMA_Init+0x11c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_LOW;
 80011d2:	4b2a      	ldr	r3, [pc, #168]	@ (800127c <MX_DMA_Init+0x11c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011d8:	4b28      	ldr	r3, [pc, #160]	@ (800127c <MX_DMA_Init+0x11c>)
 80011da:	2204      	movs	r2, #4
 80011dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011de:	4b27      	ldr	r3, [pc, #156]	@ (800127c <MX_DMA_Init+0x11c>)
 80011e0:	2203      	movs	r2, #3
 80011e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 80011e4:	4b25      	ldr	r3, [pc, #148]	@ (800127c <MX_DMA_Init+0x11c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011ea:	4b24      	ldr	r3, [pc, #144]	@ (800127c <MX_DMA_Init+0x11c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 80011f0:	4822      	ldr	r0, [pc, #136]	@ (800127c <MX_DMA_Init+0x11c>)
 80011f2:	f001 fc6d 	bl	8002ad0 <HAL_DMA_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_DMA_Init+0xa0>
  {
    Error_Handler();
 80011fc:	f000 f988 	bl	8001510 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	2100      	movs	r1, #0
 8001204:	200e      	movs	r0, #14
 8001206:	f001 fc2c 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800120a:	200e      	movs	r0, #14
 800120c:	f001 fc45 	bl	8002a9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	200f      	movs	r0, #15
 8001216:	f001 fc24 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800121a:	200f      	movs	r0, #15
 800121c:	f001 fc3d 	bl	8002a9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	2100      	movs	r1, #0
 8001224:	2038      	movs	r0, #56	@ 0x38
 8001226:	f001 fc1c 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800122a:	2038      	movs	r0, #56	@ 0x38
 800122c:	f001 fc35 	bl	8002a9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 15, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	210f      	movs	r1, #15
 8001234:	203a      	movs	r0, #58	@ 0x3a
 8001236:	f001 fc14 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800123a:	203a      	movs	r0, #58	@ 0x3a
 800123c:	f001 fc2d 	bl	8002a9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001240:	2200      	movs	r2, #0
 8001242:	2100      	movs	r1, #0
 8001244:	203b      	movs	r0, #59	@ 0x3b
 8001246:	f001 fc0c 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800124a:	203b      	movs	r0, #59	@ 0x3b
 800124c:	f001 fc25 	bl	8002a9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2100      	movs	r1, #0
 8001254:	203c      	movs	r0, #60	@ 0x3c
 8001256:	f001 fc04 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800125a:	203c      	movs	r0, #60	@ 0x3c
 800125c:	f001 fc1d 	bl	8002a9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 15, 0);
 8001260:	2200      	movs	r2, #0
 8001262:	210f      	movs	r1, #15
 8001264:	2046      	movs	r0, #70	@ 0x46
 8001266:	f001 fbfc 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800126a:	2046      	movs	r0, #70	@ 0x46
 800126c:	f001 fc15 	bl	8002a9a <HAL_NVIC_EnableIRQ>

}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40023800 	.word	0x40023800
 800127c:	20000930 	.word	0x20000930
 8001280:	40026428 	.word	0x40026428

08001284 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	@ 0x28
 8001288:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	4b51      	ldr	r3, [pc, #324]	@ (80013e4 <MX_GPIO_Init+0x160>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a50      	ldr	r2, [pc, #320]	@ (80013e4 <MX_GPIO_Init+0x160>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b4e      	ldr	r3, [pc, #312]	@ (80013e4 <MX_GPIO_Init+0x160>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b4a      	ldr	r3, [pc, #296]	@ (80013e4 <MX_GPIO_Init+0x160>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	4a49      	ldr	r2, [pc, #292]	@ (80013e4 <MX_GPIO_Init+0x160>)
 80012c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c6:	4b47      	ldr	r3, [pc, #284]	@ (80013e4 <MX_GPIO_Init+0x160>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b43      	ldr	r3, [pc, #268]	@ (80013e4 <MX_GPIO_Init+0x160>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	4a42      	ldr	r2, [pc, #264]	@ (80013e4 <MX_GPIO_Init+0x160>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e2:	4b40      	ldr	r3, [pc, #256]	@ (80013e4 <MX_GPIO_Init+0x160>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b3c      	ldr	r3, [pc, #240]	@ (80013e4 <MX_GPIO_Init+0x160>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	4a3b      	ldr	r2, [pc, #236]	@ (80013e4 <MX_GPIO_Init+0x160>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fe:	4b39      	ldr	r3, [pc, #228]	@ (80013e4 <MX_GPIO_Init+0x160>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_SDA_SM_Pin|LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	f240 1141 	movw	r1, #321	@ 0x141
 8001310:	4835      	ldr	r0, [pc, #212]	@ (80013e8 <MX_GPIO_Init+0x164>)
 8001312:	f002 f98b 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	2110      	movs	r1, #16
 800131a:	4834      	ldr	r0, [pc, #208]	@ (80013ec <MX_GPIO_Init+0x168>)
 800131c:	f002 f986 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_DC_Pin|OLED_CS_Pin|LCD_RS_Pin|LCD_LED_Pin
 8001320:	2200      	movs	r2, #0
 8001322:	f645 4120 	movw	r1, #23584	@ 0x5c20
 8001326:	4832      	ldr	r0, [pc, #200]	@ (80013f0 <MX_GPIO_Init+0x16c>)
 8001328:	f002 f980 	bl	800362c <HAL_GPIO_WritePin>
                          |LCD_SCK_SM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_SET);
 800132c:	2201      	movs	r2, #1
 800132e:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8001332:	4830      	ldr	r0, [pc, #192]	@ (80013f4 <MX_GPIO_Init+0x170>)
 8001334:	f002 f97a 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KEY2_Pin */
  GPIO_InitStruct.Pin = KEY2_Pin;
 8001338:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800133c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800133e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4826      	ldr	r0, [pc, #152]	@ (80013e8 <MX_GPIO_Init+0x164>)
 8001350:	f001 ffc0 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SDA_SM_Pin LCD_RESET_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_SDA_SM_Pin|LCD_RESET_Pin|LCD_CS_Pin;
 8001354:	f240 1341 	movw	r3, #321	@ 0x141
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800135e:	2301      	movs	r3, #1
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	481e      	ldr	r0, [pc, #120]	@ (80013e8 <MX_GPIO_Init+0x164>)
 800136e:	f001 ffb1 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_RESET_Pin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin;
 8001372:	2310      	movs	r3, #16
 8001374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800137a:	2301      	movs	r3, #1
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	4818      	ldr	r0, [pc, #96]	@ (80013ec <MX_GPIO_Init+0x168>)
 800138a:	f001 ffa3 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_DC_Pin OLED_CS_Pin LCD_RS_Pin LCD_LED_Pin
                           LCD_SCK_SM_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin|OLED_CS_Pin|LCD_RS_Pin|LCD_LED_Pin
 800138e:	f645 4320 	movw	r3, #23584	@ 0x5c20
 8001392:	617b      	str	r3, [r7, #20]
                          |LCD_SCK_SM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001398:	2301      	movs	r3, #1
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4812      	ldr	r0, [pc, #72]	@ (80013f0 <MX_GPIO_Init+0x16c>)
 80013a8:	f001 ff94 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 80013ac:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	480b      	ldr	r0, [pc, #44]	@ (80013f4 <MX_GPIO_Init+0x170>)
 80013c6:	f001 ff85 	bl	80032d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 14, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	210e      	movs	r1, #14
 80013ce:	2028      	movs	r0, #40	@ 0x28
 80013d0:	f001 fb47 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013d4:	2028      	movs	r0, #40	@ 0x28
 80013d6:	f001 fb60 	bl	8002a9a <HAL_NVIC_EnableIRQ>

}
 80013da:	bf00      	nop
 80013dc:	3728      	adds	r7, #40	@ 0x28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020800 	.word	0x40020800
 80013ec:	40020000 	.word	0x40020000
 80013f0:	40020400 	.word	0x40020400
 80013f4:	40021c00 	.word	0x40021c00

080013f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fc:	f000 fda8 	bl	8001f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001400:	f000 f816 	bl	8001430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001404:	f7ff ff3e 	bl	8001284 <MX_GPIO_Init>
  MX_DMA_Init();
 8001408:	f7ff feaa 	bl	8001160 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800140c:	f000 fc8e 	bl	8001d2c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001410:	f000 fbf8 	bl	8001c04 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001414:	f000 fba8 	bl	8001b68 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001418:	f7ff fd94 	bl	8000f44 <MX_ADC1_Init>
  MX_SPI1_Init();
 800141c:	f000 f87e 	bl	800151c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001420:	f000 f8b2 	bl	8001588 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  OS_Init();
 8001424:	f7ff fc68 	bl	8000cf8 <OS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Start_OS();
 8001428:	f7ff fc94 	bl	8000d54 <Start_OS>
 800142c:	e7fc      	b.n	8001428 <main+0x30>
	...

08001430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b094      	sub	sp, #80	@ 0x50
 8001434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001436:	f107 0320 	add.w	r3, r7, #32
 800143a:	2230      	movs	r2, #48	@ 0x30
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f004 fe64 	bl	800610c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	4b2b      	ldr	r3, [pc, #172]	@ (8001508 <SystemClock_Config+0xd8>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145c:	4a2a      	ldr	r2, [pc, #168]	@ (8001508 <SystemClock_Config+0xd8>)
 800145e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001462:	6413      	str	r3, [r2, #64]	@ 0x40
 8001464:	4b28      	ldr	r3, [pc, #160]	@ (8001508 <SystemClock_Config+0xd8>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	4b25      	ldr	r3, [pc, #148]	@ (800150c <SystemClock_Config+0xdc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a24      	ldr	r2, [pc, #144]	@ (800150c <SystemClock_Config+0xdc>)
 800147a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b22      	ldr	r3, [pc, #136]	@ (800150c <SystemClock_Config+0xdc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800148c:	2302      	movs	r3, #2
 800148e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001490:	2301      	movs	r3, #1
 8001492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001494:	2310      	movs	r3, #16
 8001496:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001498:	2302      	movs	r3, #2
 800149a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800149c:	2300      	movs	r3, #0
 800149e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014a0:	2308      	movs	r3, #8
 80014a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80014a4:	23b4      	movs	r3, #180	@ 0xb4
 80014a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a8:	2302      	movs	r3, #2
 80014aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014ac:	2304      	movs	r3, #4
 80014ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b0:	f107 0320 	add.w	r3, r7, #32
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 f955 	bl	8003764 <HAL_RCC_OscConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014c0:	f000 f826 	bl	8001510 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014c4:	f002 f8fe 	bl	80036c4 <HAL_PWREx_EnableOverDrive>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80014ce:	f000 f81f 	bl	8001510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d2:	230f      	movs	r3, #15
 80014d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d6:	2302      	movs	r3, #2
 80014d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014de:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	2105      	movs	r1, #5
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 fbaf 	bl	8003c54 <HAL_RCC_ClockConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80014fc:	f000 f808 	bl	8001510 <Error_Handler>
  }
}
 8001500:	bf00      	nop
 8001502:	3750      	adds	r7, #80	@ 0x50
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40023800 	.word	0x40023800
 800150c:	40007000 	.word	0x40007000

08001510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001514:	b672      	cpsid	i
}
 8001516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <Error_Handler+0x8>

0800151c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001520:	4b17      	ldr	r3, [pc, #92]	@ (8001580 <MX_SPI1_Init+0x64>)
 8001522:	4a18      	ldr	r2, [pc, #96]	@ (8001584 <MX_SPI1_Init+0x68>)
 8001524:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001526:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <MX_SPI1_Init+0x64>)
 8001528:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800152c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800152e:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <MX_SPI1_Init+0x64>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <MX_SPI1_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800153a:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <MX_SPI1_Init+0x64>)
 800153c:	2202      	movs	r2, #2
 800153e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001540:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <MX_SPI1_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001546:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <MX_SPI1_Init+0x64>)
 8001548:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800154c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800154e:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <MX_SPI1_Init+0x64>)
 8001550:	2228      	movs	r2, #40	@ 0x28
 8001552:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001554:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <MX_SPI1_Init+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <MX_SPI1_Init+0x64>)
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <MX_SPI1_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <MX_SPI1_Init+0x64>)
 8001568:	220a      	movs	r2, #10
 800156a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	@ (8001580 <MX_SPI1_Init+0x64>)
 800156e:	f002 fd51 	bl	8004014 <HAL_SPI_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001578:	f7ff ffca 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000990 	.word	0x20000990
 8001584:	40013000 	.word	0x40013000

08001588 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800158c:	4b17      	ldr	r3, [pc, #92]	@ (80015ec <MX_SPI2_Init+0x64>)
 800158e:	4a18      	ldr	r2, [pc, #96]	@ (80015f0 <MX_SPI2_Init+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001592:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <MX_SPI2_Init+0x64>)
 8001594:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001598:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800159a:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <MX_SPI2_Init+0x64>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <MX_SPI2_Init+0x64>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <MX_SPI2_Init+0x64>)
 80015a8:	2202      	movs	r2, #2
 80015aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <MX_SPI2_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_SPI2_Init+0x64>)
 80015b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80015ba:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <MX_SPI2_Init+0x64>)
 80015bc:	2220      	movs	r2, #32
 80015be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <MX_SPI2_Init+0x64>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c6:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <MX_SPI2_Init+0x64>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015cc:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <MX_SPI2_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80015d2:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MX_SPI2_Init+0x64>)
 80015d4:	220a      	movs	r2, #10
 80015d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015d8:	4804      	ldr	r0, [pc, #16]	@ (80015ec <MX_SPI2_Init+0x64>)
 80015da:	f002 fd1b 	bl	8004014 <HAL_SPI_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80015e4:	f7ff ff94 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200009e8 	.word	0x200009e8
 80015f0:	40003800 	.word	0x40003800

080015f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08e      	sub	sp, #56	@ 0x38
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a59      	ldr	r2, [pc, #356]	@ (8001778 <HAL_SPI_MspInit+0x184>)
 8001612:	4293      	cmp	r3, r2
 8001614:	f040 80c0 	bne.w	8001798 <HAL_SPI_MspInit+0x1a4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
 800161c:	4b57      	ldr	r3, [pc, #348]	@ (800177c <HAL_SPI_MspInit+0x188>)
 800161e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001620:	4a56      	ldr	r2, [pc, #344]	@ (800177c <HAL_SPI_MspInit+0x188>)
 8001622:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001626:	6453      	str	r3, [r2, #68]	@ 0x44
 8001628:	4b54      	ldr	r3, [pc, #336]	@ (800177c <HAL_SPI_MspInit+0x188>)
 800162a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001630:	623b      	str	r3, [r7, #32]
 8001632:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
 8001638:	4b50      	ldr	r3, [pc, #320]	@ (800177c <HAL_SPI_MspInit+0x188>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163c:	4a4f      	ldr	r2, [pc, #316]	@ (800177c <HAL_SPI_MspInit+0x188>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6313      	str	r3, [r2, #48]	@ 0x30
 8001644:	4b4d      	ldr	r3, [pc, #308]	@ (800177c <HAL_SPI_MspInit+0x188>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	4b49      	ldr	r3, [pc, #292]	@ (800177c <HAL_SPI_MspInit+0x188>)
 8001656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001658:	4a48      	ldr	r2, [pc, #288]	@ (800177c <HAL_SPI_MspInit+0x188>)
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001660:	4b46      	ldr	r3, [pc, #280]	@ (800177c <HAL_SPI_MspInit+0x188>)
 8001662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	61bb      	str	r3, [r7, #24]
 800166a:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800166c:	23a0      	movs	r3, #160	@ 0xa0
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800167c:	2305      	movs	r3, #5
 800167e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001684:	4619      	mov	r1, r3
 8001686:	483e      	ldr	r0, [pc, #248]	@ (8001780 <HAL_SPI_MspInit+0x18c>)
 8001688:	f001 fe24 	bl	80032d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800168c:	2310      	movs	r3, #16
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800169c:	2305      	movs	r3, #5
 800169e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a4:	4619      	mov	r1, r3
 80016a6:	4837      	ldr	r0, [pc, #220]	@ (8001784 <HAL_SPI_MspInit+0x190>)
 80016a8:	f001 fe14 	bl	80032d4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80016ac:	4b36      	ldr	r3, [pc, #216]	@ (8001788 <HAL_SPI_MspInit+0x194>)
 80016ae:	4a37      	ldr	r2, [pc, #220]	@ (800178c <HAL_SPI_MspInit+0x198>)
 80016b0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80016b2:	4b35      	ldr	r3, [pc, #212]	@ (8001788 <HAL_SPI_MspInit+0x194>)
 80016b4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80016b8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ba:	4b33      	ldr	r3, [pc, #204]	@ (8001788 <HAL_SPI_MspInit+0x194>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c0:	4b31      	ldr	r3, [pc, #196]	@ (8001788 <HAL_SPI_MspInit+0x194>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016c6:	4b30      	ldr	r3, [pc, #192]	@ (8001788 <HAL_SPI_MspInit+0x194>)
 80016c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016cc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001788 <HAL_SPI_MspInit+0x194>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001788 <HAL_SPI_MspInit+0x194>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80016da:	4b2b      	ldr	r3, [pc, #172]	@ (8001788 <HAL_SPI_MspInit+0x194>)
 80016dc:	2200      	movs	r2, #0
 80016de:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016e0:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <HAL_SPI_MspInit+0x194>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e6:	4b28      	ldr	r3, [pc, #160]	@ (8001788 <HAL_SPI_MspInit+0x194>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80016ec:	4826      	ldr	r0, [pc, #152]	@ (8001788 <HAL_SPI_MspInit+0x194>)
 80016ee:	f001 f9ef 	bl	8002ad0 <HAL_DMA_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 80016f8:	f7ff ff0a 	bl	8001510 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a22      	ldr	r2, [pc, #136]	@ (8001788 <HAL_SPI_MspInit+0x194>)
 8001700:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001702:	4a21      	ldr	r2, [pc, #132]	@ (8001788 <HAL_SPI_MspInit+0x194>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001708:	4b21      	ldr	r3, [pc, #132]	@ (8001790 <HAL_SPI_MspInit+0x19c>)
 800170a:	4a22      	ldr	r2, [pc, #136]	@ (8001794 <HAL_SPI_MspInit+0x1a0>)
 800170c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800170e:	4b20      	ldr	r3, [pc, #128]	@ (8001790 <HAL_SPI_MspInit+0x19c>)
 8001710:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001714:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001716:	4b1e      	ldr	r3, [pc, #120]	@ (8001790 <HAL_SPI_MspInit+0x19c>)
 8001718:	2240      	movs	r2, #64	@ 0x40
 800171a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800171c:	4b1c      	ldr	r3, [pc, #112]	@ (8001790 <HAL_SPI_MspInit+0x19c>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001722:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <HAL_SPI_MspInit+0x19c>)
 8001724:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001728:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800172a:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <HAL_SPI_MspInit+0x19c>)
 800172c:	2200      	movs	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001730:	4b17      	ldr	r3, [pc, #92]	@ (8001790 <HAL_SPI_MspInit+0x19c>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001736:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <HAL_SPI_MspInit+0x19c>)
 8001738:	2200      	movs	r2, #0
 800173a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800173c:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <HAL_SPI_MspInit+0x19c>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001742:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <HAL_SPI_MspInit+0x19c>)
 8001744:	2200      	movs	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001748:	4811      	ldr	r0, [pc, #68]	@ (8001790 <HAL_SPI_MspInit+0x19c>)
 800174a:	f001 f9c1 	bl	8002ad0 <HAL_DMA_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8001754:	f7ff fedc 	bl	8001510 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a0d      	ldr	r2, [pc, #52]	@ (8001790 <HAL_SPI_MspInit+0x19c>)
 800175c:	649a      	str	r2, [r3, #72]	@ 0x48
 800175e:	4a0c      	ldr	r2, [pc, #48]	@ (8001790 <HAL_SPI_MspInit+0x19c>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001764:	2200      	movs	r2, #0
 8001766:	2100      	movs	r1, #0
 8001768:	2023      	movs	r0, #35	@ 0x23
 800176a:	f001 f97a 	bl	8002a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800176e:	2023      	movs	r0, #35	@ 0x23
 8001770:	f001 f993 	bl	8002a9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001774:	e0c3      	b.n	80018fe <HAL_SPI_MspInit+0x30a>
 8001776:	bf00      	nop
 8001778:	40013000 	.word	0x40013000
 800177c:	40023800 	.word	0x40023800
 8001780:	40020000 	.word	0x40020000
 8001784:	40020400 	.word	0x40020400
 8001788:	20000a40 	.word	0x20000a40
 800178c:	40026410 	.word	0x40026410
 8001790:	20000aa0 	.word	0x20000aa0
 8001794:	40026458 	.word	0x40026458
  else if(spiHandle->Instance==SPI2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a5a      	ldr	r2, [pc, #360]	@ (8001908 <HAL_SPI_MspInit+0x314>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	f040 80ad 	bne.w	80018fe <HAL_SPI_MspInit+0x30a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	4b58      	ldr	r3, [pc, #352]	@ (800190c <HAL_SPI_MspInit+0x318>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	4a57      	ldr	r2, [pc, #348]	@ (800190c <HAL_SPI_MspInit+0x318>)
 80017ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b4:	4b55      	ldr	r3, [pc, #340]	@ (800190c <HAL_SPI_MspInit+0x318>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c0:	2300      	movs	r3, #0
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	4b51      	ldr	r3, [pc, #324]	@ (800190c <HAL_SPI_MspInit+0x318>)
 80017c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c8:	4a50      	ldr	r2, [pc, #320]	@ (800190c <HAL_SPI_MspInit+0x318>)
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d0:	4b4e      	ldr	r3, [pc, #312]	@ (800190c <HAL_SPI_MspInit+0x318>)
 80017d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	4b4a      	ldr	r3, [pc, #296]	@ (800190c <HAL_SPI_MspInit+0x318>)
 80017e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e4:	4a49      	ldr	r2, [pc, #292]	@ (800190c <HAL_SPI_MspInit+0x318>)
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ec:	4b47      	ldr	r3, [pc, #284]	@ (800190c <HAL_SPI_MspInit+0x318>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017f8:	2304      	movs	r3, #4
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001808:	2305      	movs	r3, #5
 800180a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001810:	4619      	mov	r1, r3
 8001812:	483f      	ldr	r0, [pc, #252]	@ (8001910 <HAL_SPI_MspInit+0x31c>)
 8001814:	f001 fd5e 	bl	80032d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001818:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800182a:	2305      	movs	r3, #5
 800182c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001832:	4619      	mov	r1, r3
 8001834:	4837      	ldr	r0, [pc, #220]	@ (8001914 <HAL_SPI_MspInit+0x320>)
 8001836:	f001 fd4d 	bl	80032d4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800183a:	4b37      	ldr	r3, [pc, #220]	@ (8001918 <HAL_SPI_MspInit+0x324>)
 800183c:	4a37      	ldr	r2, [pc, #220]	@ (800191c <HAL_SPI_MspInit+0x328>)
 800183e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001840:	4b35      	ldr	r3, [pc, #212]	@ (8001918 <HAL_SPI_MspInit+0x324>)
 8001842:	2200      	movs	r2, #0
 8001844:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001846:	4b34      	ldr	r3, [pc, #208]	@ (8001918 <HAL_SPI_MspInit+0x324>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800184c:	4b32      	ldr	r3, [pc, #200]	@ (8001918 <HAL_SPI_MspInit+0x324>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001852:	4b31      	ldr	r3, [pc, #196]	@ (8001918 <HAL_SPI_MspInit+0x324>)
 8001854:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001858:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800185a:	4b2f      	ldr	r3, [pc, #188]	@ (8001918 <HAL_SPI_MspInit+0x324>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001860:	4b2d      	ldr	r3, [pc, #180]	@ (8001918 <HAL_SPI_MspInit+0x324>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001866:	4b2c      	ldr	r3, [pc, #176]	@ (8001918 <HAL_SPI_MspInit+0x324>)
 8001868:	2200      	movs	r2, #0
 800186a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800186c:	4b2a      	ldr	r3, [pc, #168]	@ (8001918 <HAL_SPI_MspInit+0x324>)
 800186e:	2200      	movs	r2, #0
 8001870:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001872:	4b29      	ldr	r3, [pc, #164]	@ (8001918 <HAL_SPI_MspInit+0x324>)
 8001874:	2200      	movs	r2, #0
 8001876:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001878:	4827      	ldr	r0, [pc, #156]	@ (8001918 <HAL_SPI_MspInit+0x324>)
 800187a:	f001 f929 	bl	8002ad0 <HAL_DMA_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <HAL_SPI_MspInit+0x294>
      Error_Handler();
 8001884:	f7ff fe44 	bl	8001510 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a23      	ldr	r2, [pc, #140]	@ (8001918 <HAL_SPI_MspInit+0x324>)
 800188c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800188e:	4a22      	ldr	r2, [pc, #136]	@ (8001918 <HAL_SPI_MspInit+0x324>)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001894:	4b22      	ldr	r3, [pc, #136]	@ (8001920 <HAL_SPI_MspInit+0x32c>)
 8001896:	4a23      	ldr	r2, [pc, #140]	@ (8001924 <HAL_SPI_MspInit+0x330>)
 8001898:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800189a:	4b21      	ldr	r3, [pc, #132]	@ (8001920 <HAL_SPI_MspInit+0x32c>)
 800189c:	2200      	movs	r2, #0
 800189e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001920 <HAL_SPI_MspInit+0x32c>)
 80018a2:	2240      	movs	r2, #64	@ 0x40
 80018a4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001920 <HAL_SPI_MspInit+0x32c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001920 <HAL_SPI_MspInit+0x32c>)
 80018ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018b2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001920 <HAL_SPI_MspInit+0x32c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ba:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <HAL_SPI_MspInit+0x32c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80018c0:	4b17      	ldr	r3, [pc, #92]	@ (8001920 <HAL_SPI_MspInit+0x32c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018c6:	4b16      	ldr	r3, [pc, #88]	@ (8001920 <HAL_SPI_MspInit+0x32c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018cc:	4b14      	ldr	r3, [pc, #80]	@ (8001920 <HAL_SPI_MspInit+0x32c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80018d2:	4813      	ldr	r0, [pc, #76]	@ (8001920 <HAL_SPI_MspInit+0x32c>)
 80018d4:	f001 f8fc 	bl	8002ad0 <HAL_DMA_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_SPI_MspInit+0x2ee>
      Error_Handler();
 80018de:	f7ff fe17 	bl	8001510 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001920 <HAL_SPI_MspInit+0x32c>)
 80018e6:	649a      	str	r2, [r3, #72]	@ 0x48
 80018e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001920 <HAL_SPI_MspInit+0x32c>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	2024      	movs	r0, #36	@ 0x24
 80018f4:	f001 f8b5 	bl	8002a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80018f8:	2024      	movs	r0, #36	@ 0x24
 80018fa:	f001 f8ce 	bl	8002a9a <HAL_NVIC_EnableIRQ>
}
 80018fe:	bf00      	nop
 8001900:	3738      	adds	r7, #56	@ 0x38
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40003800 	.word	0x40003800
 800190c:	40023800 	.word	0x40023800
 8001910:	40020800 	.word	0x40020800
 8001914:	40020400 	.word	0x40020400
 8001918:	20000b00 	.word	0x20000b00
 800191c:	40026058 	.word	0x40026058
 8001920:	20000b60 	.word	0x20000b60
 8001924:	40026070 	.word	0x40026070

08001928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <HAL_MspInit+0x4c>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	4a0f      	ldr	r2, [pc, #60]	@ (8001974 <HAL_MspInit+0x4c>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800193c:	6453      	str	r3, [r2, #68]	@ 0x44
 800193e:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <HAL_MspInit+0x4c>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <HAL_MspInit+0x4c>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	4a08      	ldr	r2, [pc, #32]	@ (8001974 <HAL_MspInit+0x4c>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001958:	6413      	str	r3, [r2, #64]	@ 0x40
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_MspInit+0x4c>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800

08001978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <NMI_Handler+0x4>

08001980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001984:	bf00      	nop
 8001986:	e7fd      	b.n	8001984 <HardFault_Handler+0x4>

08001988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800198c:	bf00      	nop
 800198e:	e7fd      	b.n	800198c <MemManage_Handler+0x4>

08001990 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <BusFault_Handler+0x4>

08001998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	bf00      	nop
 800199e:	e7fd      	b.n	800199c <UsageFault_Handler+0x4>

080019a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ce:	f000 fb11 	bl	8001ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80019dc:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <DMA1_Stream3_IRQHandler+0x10>)
 80019de:	f001 fa0f 	bl	8002e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000b00 	.word	0x20000b00

080019ec <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80019f0:	4802      	ldr	r0, [pc, #8]	@ (80019fc <DMA1_Stream4_IRQHandler+0x10>)
 80019f2:	f001 fa05 	bl	8002e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000b60 	.word	0x20000b60

08001a00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a04:	4802      	ldr	r0, [pc, #8]	@ (8001a10 <TIM3_IRQHandler+0x10>)
 8001a06:	f002 fd61 	bl	80044cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000bc4 	.word	0x20000bc4

08001a14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a18:	4802      	ldr	r0, [pc, #8]	@ (8001a24 <TIM4_IRQHandler+0x10>)
 8001a1a:	f002 fd57 	bl	80044cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000c0c 	.word	0x20000c0c

08001a28 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a2c:	4802      	ldr	r0, [pc, #8]	@ (8001a38 <SPI1_IRQHandler+0x10>)
 8001a2e:	f002 fb7b 	bl	8004128 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000990 	.word	0x20000990

08001a3c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001a40:	4802      	ldr	r0, [pc, #8]	@ (8001a4c <SPI2_IRQHandler+0x10>)
 8001a42:	f002 fb71 	bl	8004128 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200009e8 	.word	0x200009e8

08001a50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a54:	4802      	ldr	r0, [pc, #8]	@ (8001a60 <USART1_IRQHandler+0x10>)
 8001a56:	f003 fa0d 	bl	8004e74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000c54 	.word	0x20000c54

08001a64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY2_Pin);
 8001a68:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a6c:	f001 fe12 	bl	8003694 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001a78:	4802      	ldr	r0, [pc, #8]	@ (8001a84 <DMA2_Stream0_IRQHandler+0x10>)
 8001a7a:	f001 f9c1 	bl	8002e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000a40 	.word	0x20000a40

08001a88 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a8c:	4802      	ldr	r0, [pc, #8]	@ (8001a98 <DMA2_Stream2_IRQHandler+0x10>)
 8001a8e:	f001 f9b7 	bl	8002e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000c9c 	.word	0x20000c9c

08001a9c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001aa0:	4802      	ldr	r0, [pc, #8]	@ (8001aac <DMA2_Stream3_IRQHandler+0x10>)
 8001aa2:	f001 f9ad 	bl	8002e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000aa0 	.word	0x20000aa0

08001ab0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ab4:	4802      	ldr	r0, [pc, #8]	@ (8001ac0 <DMA2_Stream4_IRQHandler+0x10>)
 8001ab6:	f001 f9a3 	bl	8002e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200008d0 	.word	0x200008d0

08001ac4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ac8:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <DMA2_Stream7_IRQHandler+0x10>)
 8001aca:	f001 f999 	bl	8002e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000cfc 	.word	0x20000cfc

08001ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae0:	4a14      	ldr	r2, [pc, #80]	@ (8001b34 <_sbrk+0x5c>)
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <_sbrk+0x60>)
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aec:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af4:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <_sbrk+0x64>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	@ (8001b40 <_sbrk+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d207      	bcs.n	8001b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b08:	f004 fb08 	bl	800611c <__errno>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	220c      	movs	r2, #12
 8001b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	e009      	b.n	8001b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b18:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	@ (8001b3c <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	4a05      	ldr	r2, [pc, #20]	@ (8001b3c <_sbrk+0x64>)
 8001b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20030000 	.word	0x20030000
 8001b38:	00000400 	.word	0x00000400
 8001b3c:	20000bc0 	.word	0x20000bc0
 8001b40:	20000ea8 	.word	0x20000ea8

08001b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <SystemInit+0x20>)
 8001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <SystemInit+0x20>)
 8001b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b84:	4b1d      	ldr	r3, [pc, #116]	@ (8001bfc <MX_TIM3_Init+0x94>)
 8001b86:	4a1e      	ldr	r2, [pc, #120]	@ (8001c00 <MX_TIM3_Init+0x98>)
 8001b88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9000-1;
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bfc <MX_TIM3_Init+0x94>)
 8001b8c:	f242 3227 	movw	r2, #8999	@ 0x2327
 8001b90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b92:	4b1a      	ldr	r3, [pc, #104]	@ (8001bfc <MX_TIM3_Init+0x94>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001b98:	4b18      	ldr	r3, [pc, #96]	@ (8001bfc <MX_TIM3_Init+0x94>)
 8001b9a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001b9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba0:	4b16      	ldr	r3, [pc, #88]	@ (8001bfc <MX_TIM3_Init+0x94>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba6:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <MX_TIM3_Init+0x94>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bac:	4813      	ldr	r0, [pc, #76]	@ (8001bfc <MX_TIM3_Init+0x94>)
 8001bae:	f002 fbcd 	bl	800434c <HAL_TIM_Base_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001bb8:	f7ff fcaa 	bl	8001510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bc2:	f107 0308 	add.w	r3, r7, #8
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	480c      	ldr	r0, [pc, #48]	@ (8001bfc <MX_TIM3_Init+0x94>)
 8001bca:	f002 fd6f 	bl	80046ac <HAL_TIM_ConfigClockSource>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001bd4:	f7ff fc9c 	bl	8001510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001be0:	463b      	mov	r3, r7
 8001be2:	4619      	mov	r1, r3
 8001be4:	4805      	ldr	r0, [pc, #20]	@ (8001bfc <MX_TIM3_Init+0x94>)
 8001be6:	f002 ff97 	bl	8004b18 <HAL_TIMEx_MasterConfigSynchronization>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001bf0:	f7ff fc8e 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bf4:	bf00      	nop
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000bc4 	.word	0x20000bc4
 8001c00:	40000400 	.word	0x40000400

08001c04 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c0a:	f107 0308 	add.w	r3, r7, #8
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c18:	463b      	mov	r3, r7
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c20:	4b1d      	ldr	r3, [pc, #116]	@ (8001c98 <MX_TIM4_Init+0x94>)
 8001c22:	4a1e      	ldr	r2, [pc, #120]	@ (8001c9c <MX_TIM4_Init+0x98>)
 8001c24:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 900-1;
 8001c26:	4b1c      	ldr	r3, [pc, #112]	@ (8001c98 <MX_TIM4_Init+0x94>)
 8001c28:	f240 3283 	movw	r2, #899	@ 0x383
 8001c2c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c98 <MX_TIM4_Init+0x94>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001c34:	4b18      	ldr	r3, [pc, #96]	@ (8001c98 <MX_TIM4_Init+0x94>)
 8001c36:	2263      	movs	r2, #99	@ 0x63
 8001c38:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3a:	4b17      	ldr	r3, [pc, #92]	@ (8001c98 <MX_TIM4_Init+0x94>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c40:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <MX_TIM4_Init+0x94>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c46:	4814      	ldr	r0, [pc, #80]	@ (8001c98 <MX_TIM4_Init+0x94>)
 8001c48:	f002 fb80 	bl	800434c <HAL_TIM_Base_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001c52:	f7ff fc5d 	bl	8001510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c5c:	f107 0308 	add.w	r3, r7, #8
 8001c60:	4619      	mov	r1, r3
 8001c62:	480d      	ldr	r0, [pc, #52]	@ (8001c98 <MX_TIM4_Init+0x94>)
 8001c64:	f002 fd22 	bl	80046ac <HAL_TIM_ConfigClockSource>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001c6e:	f7ff fc4f 	bl	8001510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4806      	ldr	r0, [pc, #24]	@ (8001c98 <MX_TIM4_Init+0x94>)
 8001c80:	f002 ff4a 	bl	8004b18 <HAL_TIMEx_MasterConfigSynchronization>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001c8a:	f7ff fc41 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000c0c 	.word	0x20000c0c
 8001c9c:	40000800 	.word	0x40000800

08001ca0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a1c      	ldr	r2, [pc, #112]	@ (8001d20 <HAL_TIM_Base_MspInit+0x80>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d116      	bne.n	8001ce0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d24 <HAL_TIM_Base_MspInit+0x84>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	4a1a      	ldr	r2, [pc, #104]	@ (8001d24 <HAL_TIM_Base_MspInit+0x84>)
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc2:	4b18      	ldr	r3, [pc, #96]	@ (8001d24 <HAL_TIM_Base_MspInit+0x84>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	201d      	movs	r0, #29
 8001cd4:	f000 fec5 	bl	8002a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cd8:	201d      	movs	r0, #29
 8001cda:	f000 fede 	bl	8002a9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001cde:	e01a      	b.n	8001d16 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a10      	ldr	r2, [pc, #64]	@ (8001d28 <HAL_TIM_Base_MspInit+0x88>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d115      	bne.n	8001d16 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	4b0d      	ldr	r3, [pc, #52]	@ (8001d24 <HAL_TIM_Base_MspInit+0x84>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8001d24 <HAL_TIM_Base_MspInit+0x84>)
 8001cf4:	f043 0304 	orr.w	r3, r3, #4
 8001cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001d24 <HAL_TIM_Base_MspInit+0x84>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2105      	movs	r1, #5
 8001d0a:	201e      	movs	r0, #30
 8001d0c:	f000 fea9 	bl	8002a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d10:	201e      	movs	r0, #30
 8001d12:	f000 fec2 	bl	8002a9a <HAL_NVIC_EnableIRQ>
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40000400 	.word	0x40000400
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40000800 	.word	0x40000800

08001d2c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d30:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <MX_USART1_UART_Init+0x4c>)
 8001d32:	4a12      	ldr	r2, [pc, #72]	@ (8001d7c <MX_USART1_UART_Init+0x50>)
 8001d34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <MX_USART1_UART_Init+0x4c>)
 8001d38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <MX_USART1_UART_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d44:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <MX_USART1_UART_Init+0x4c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <MX_USART1_UART_Init+0x4c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d50:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <MX_USART1_UART_Init+0x4c>)
 8001d52:	220c      	movs	r2, #12
 8001d54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d56:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <MX_USART1_UART_Init+0x4c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <MX_USART1_UART_Init+0x4c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d62:	4805      	ldr	r0, [pc, #20]	@ (8001d78 <MX_USART1_UART_Init+0x4c>)
 8001d64:	f002 ff68 	bl	8004c38 <HAL_UART_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d6e:	f7ff fbcf 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000c54 	.word	0x20000c54
 8001d7c:	40011000 	.word	0x40011000

08001d80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	@ 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a50      	ldr	r2, [pc, #320]	@ (8001ee0 <HAL_UART_MspInit+0x160>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	f040 809a 	bne.w	8001ed8 <HAL_UART_MspInit+0x158>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	4b4e      	ldr	r3, [pc, #312]	@ (8001ee4 <HAL_UART_MspInit+0x164>)
 8001daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dac:	4a4d      	ldr	r2, [pc, #308]	@ (8001ee4 <HAL_UART_MspInit+0x164>)
 8001dae:	f043 0310 	orr.w	r3, r3, #16
 8001db2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db4:	4b4b      	ldr	r3, [pc, #300]	@ (8001ee4 <HAL_UART_MspInit+0x164>)
 8001db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	4b47      	ldr	r3, [pc, #284]	@ (8001ee4 <HAL_UART_MspInit+0x164>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc8:	4a46      	ldr	r2, [pc, #280]	@ (8001ee4 <HAL_UART_MspInit+0x164>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd0:	4b44      	ldr	r3, [pc, #272]	@ (8001ee4 <HAL_UART_MspInit+0x164>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USBUART_TX_Pin|USBUART_RX_Pin;
 8001ddc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dea:	2303      	movs	r3, #3
 8001dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dee:	2307      	movs	r3, #7
 8001df0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	4619      	mov	r1, r3
 8001df8:	483b      	ldr	r0, [pc, #236]	@ (8001ee8 <HAL_UART_MspInit+0x168>)
 8001dfa:	f001 fa6b 	bl	80032d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8001eec <HAL_UART_MspInit+0x16c>)
 8001e00:	4a3b      	ldr	r2, [pc, #236]	@ (8001ef0 <HAL_UART_MspInit+0x170>)
 8001e02:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001e04:	4b39      	ldr	r3, [pc, #228]	@ (8001eec <HAL_UART_MspInit+0x16c>)
 8001e06:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e0a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e0c:	4b37      	ldr	r3, [pc, #220]	@ (8001eec <HAL_UART_MspInit+0x16c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e12:	4b36      	ldr	r3, [pc, #216]	@ (8001eec <HAL_UART_MspInit+0x16c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e18:	4b34      	ldr	r3, [pc, #208]	@ (8001eec <HAL_UART_MspInit+0x16c>)
 8001e1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e1e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e20:	4b32      	ldr	r3, [pc, #200]	@ (8001eec <HAL_UART_MspInit+0x16c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e26:	4b31      	ldr	r3, [pc, #196]	@ (8001eec <HAL_UART_MspInit+0x16c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001eec <HAL_UART_MspInit+0x16c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e32:	4b2e      	ldr	r3, [pc, #184]	@ (8001eec <HAL_UART_MspInit+0x16c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e38:	4b2c      	ldr	r3, [pc, #176]	@ (8001eec <HAL_UART_MspInit+0x16c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e3e:	482b      	ldr	r0, [pc, #172]	@ (8001eec <HAL_UART_MspInit+0x16c>)
 8001e40:	f000 fe46 	bl	8002ad0 <HAL_DMA_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001e4a:	f7ff fb61 	bl	8001510 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a26      	ldr	r2, [pc, #152]	@ (8001eec <HAL_UART_MspInit+0x16c>)
 8001e52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e54:	4a25      	ldr	r2, [pc, #148]	@ (8001eec <HAL_UART_MspInit+0x16c>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001e5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ef4 <HAL_UART_MspInit+0x174>)
 8001e5c:	4a26      	ldr	r2, [pc, #152]	@ (8001ef8 <HAL_UART_MspInit+0x178>)
 8001e5e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001e60:	4b24      	ldr	r3, [pc, #144]	@ (8001ef4 <HAL_UART_MspInit+0x174>)
 8001e62:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e66:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e68:	4b22      	ldr	r3, [pc, #136]	@ (8001ef4 <HAL_UART_MspInit+0x174>)
 8001e6a:	2240      	movs	r2, #64	@ 0x40
 8001e6c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e6e:	4b21      	ldr	r3, [pc, #132]	@ (8001ef4 <HAL_UART_MspInit+0x174>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e74:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef4 <HAL_UART_MspInit+0x174>)
 8001e76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e7a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef4 <HAL_UART_MspInit+0x174>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e82:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef4 <HAL_UART_MspInit+0x174>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e88:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef4 <HAL_UART_MspInit+0x174>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e8e:	4b19      	ldr	r3, [pc, #100]	@ (8001ef4 <HAL_UART_MspInit+0x174>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001e94:	4b17      	ldr	r3, [pc, #92]	@ (8001ef4 <HAL_UART_MspInit+0x174>)
 8001e96:	2204      	movs	r2, #4
 8001e98:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001e9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ef4 <HAL_UART_MspInit+0x174>)
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001ea0:	4b14      	ldr	r3, [pc, #80]	@ (8001ef4 <HAL_UART_MspInit+0x174>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001ea6:	4b13      	ldr	r3, [pc, #76]	@ (8001ef4 <HAL_UART_MspInit+0x174>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001eac:	4811      	ldr	r0, [pc, #68]	@ (8001ef4 <HAL_UART_MspInit+0x174>)
 8001eae:	f000 fe0f 	bl	8002ad0 <HAL_DMA_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8001eb8:	f7ff fb2a 	bl	8001510 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef4 <HAL_UART_MspInit+0x174>)
 8001ec0:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef4 <HAL_UART_MspInit+0x174>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	210e      	movs	r1, #14
 8001ecc:	2025      	movs	r0, #37	@ 0x25
 8001ece:	f000 fdc8 	bl	8002a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ed2:	2025      	movs	r0, #37	@ 0x25
 8001ed4:	f000 fde1 	bl	8002a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	@ 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40011000 	.word	0x40011000
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020000 	.word	0x40020000
 8001eec:	20000c9c 	.word	0x20000c9c
 8001ef0:	40026440 	.word	0x40026440
 8001ef4:	20000cfc 	.word	0x20000cfc
 8001ef8:	400264b8 	.word	0x400264b8

08001efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001efc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f00:	f7ff fe20 	bl	8001b44 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f04:	480c      	ldr	r0, [pc, #48]	@ (8001f38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f06:	490d      	ldr	r1, [pc, #52]	@ (8001f3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f08:	4a0d      	ldr	r2, [pc, #52]	@ (8001f40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f0c:	e002      	b.n	8001f14 <LoopCopyDataInit>

08001f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f12:	3304      	adds	r3, #4

08001f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f18:	d3f9      	bcc.n	8001f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f20:	e001      	b.n	8001f26 <LoopFillZerobss>

08001f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f24:	3204      	adds	r2, #4

08001f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f28:	d3fb      	bcc.n	8001f22 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f2a:	f004 f8fd 	bl	8006128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f2e:	f7ff fa63 	bl	80013f8 <main>
  bx  lr    
 8001f32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f34:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f3c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001f40:	0800cc1c 	.word	0x0800cc1c
  ldr r2, =_sbss
 8001f44:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001f48:	20000ea8 	.word	0x20000ea8

08001f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f4c:	e7fe      	b.n	8001f4c <ADC_IRQHandler>
	...

08001f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f54:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <HAL_Init+0x40>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <HAL_Init+0x40>)
 8001f5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f60:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <HAL_Init+0x40>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0a      	ldr	r2, [pc, #40]	@ (8001f90 <HAL_Init+0x40>)
 8001f66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f6c:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <HAL_Init+0x40>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a07      	ldr	r2, [pc, #28]	@ (8001f90 <HAL_Init+0x40>)
 8001f72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f000 fd67 	bl	8002a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7e:	200f      	movs	r0, #15
 8001f80:	f000 f808 	bl	8001f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f84:	f7ff fcd0 	bl	8001928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40023c00 	.word	0x40023c00

08001f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f9c:	4b12      	ldr	r3, [pc, #72]	@ (8001fe8 <HAL_InitTick+0x54>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b12      	ldr	r3, [pc, #72]	@ (8001fec <HAL_InitTick+0x58>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 fd7f 	bl	8002ab6 <HAL_SYSTICK_Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00e      	b.n	8001fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b0f      	cmp	r3, #15
 8001fc6:	d80a      	bhi.n	8001fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f000 fd47 	bl	8002a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd4:	4a06      	ldr	r2, [pc, #24]	@ (8001ff0 <HAL_InitTick+0x5c>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e000      	b.n	8001fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000004 	.word	0x20000004
 8001fec:	2000000c 	.word	0x2000000c
 8001ff0:	20000008 	.word	0x20000008

08001ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <HAL_IncTick+0x20>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <HAL_IncTick+0x24>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4413      	add	r3, r2
 8002004:	4a04      	ldr	r2, [pc, #16]	@ (8002018 <HAL_IncTick+0x24>)
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	2000000c 	.word	0x2000000c
 8002018:	20000d5c 	.word	0x20000d5c

0800201c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return uwTick;
 8002020:	4b03      	ldr	r3, [pc, #12]	@ (8002030 <HAL_GetTick+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000d5c 	.word	0x20000d5c

08002034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800203c:	f7ff ffee 	bl	800201c <HAL_GetTick>
 8002040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204c:	d005      	beq.n	800205a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800204e:	4b0a      	ldr	r3, [pc, #40]	@ (8002078 <HAL_Delay+0x44>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800205a:	bf00      	nop
 800205c:	f7ff ffde 	bl	800201c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	429a      	cmp	r2, r3
 800206a:	d8f7      	bhi.n	800205c <HAL_Delay+0x28>
  {
  }
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	2000000c 	.word	0x2000000c

0800207c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e033      	b.n	80020fa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7fe ffcc 	bl	8001038 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	f003 0310 	and.w	r3, r3, #16
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d118      	bne.n	80020ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020c2:	f023 0302 	bic.w	r3, r3, #2
 80020c6:	f043 0202 	orr.w	r2, r3, #2
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fa6e 	bl	80025b0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	f023 0303 	bic.w	r3, r3, #3
 80020e2:	f043 0201 	orr.w	r2, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80020ea:	e001      	b.n	80020f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_ADC_Start_DMA+0x1e>
 800211e:	2302      	movs	r3, #2
 8002120:	e0e9      	b.n	80022f6 <HAL_ADC_Start_DMA+0x1f2>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b01      	cmp	r3, #1
 8002136:	d018      	beq.n	800216a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002148:	4b6d      	ldr	r3, [pc, #436]	@ (8002300 <HAL_ADC_Start_DMA+0x1fc>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a6d      	ldr	r2, [pc, #436]	@ (8002304 <HAL_ADC_Start_DMA+0x200>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	0c9a      	lsrs	r2, r3, #18
 8002154:	4613      	mov	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4413      	add	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800215c:	e002      	b.n	8002164 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	3b01      	subs	r3, #1
 8002162:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f9      	bne.n	800215e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002174:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002178:	d107      	bne.n	800218a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002188:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b01      	cmp	r3, #1
 8002196:	f040 80a1 	bne.w	80022dc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80021a2:	f023 0301 	bic.w	r3, r3, #1
 80021a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d007      	beq.n	80021cc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021c4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021d8:	d106      	bne.n	80021e8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021de:	f023 0206 	bic.w	r2, r3, #6
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80021e6:	e002      	b.n	80021ee <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021f6:	4b44      	ldr	r3, [pc, #272]	@ (8002308 <HAL_ADC_Start_DMA+0x204>)
 80021f8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021fe:	4a43      	ldr	r2, [pc, #268]	@ (800230c <HAL_ADC_Start_DMA+0x208>)
 8002200:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002206:	4a42      	ldr	r2, [pc, #264]	@ (8002310 <HAL_ADC_Start_DMA+0x20c>)
 8002208:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800220e:	4a41      	ldr	r2, [pc, #260]	@ (8002314 <HAL_ADC_Start_DMA+0x210>)
 8002210:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800221a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800222a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800223a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	334c      	adds	r3, #76	@ 0x4c
 8002246:	4619      	mov	r1, r3
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f000 fcee 	bl	8002c2c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	2b00      	cmp	r3, #0
 800225a:	d12a      	bne.n	80022b2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2d      	ldr	r2, [pc, #180]	@ (8002318 <HAL_ADC_Start_DMA+0x214>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d015      	beq.n	8002292 <HAL_ADC_Start_DMA+0x18e>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a2c      	ldr	r2, [pc, #176]	@ (800231c <HAL_ADC_Start_DMA+0x218>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d105      	bne.n	800227c <HAL_ADC_Start_DMA+0x178>
 8002270:	4b25      	ldr	r3, [pc, #148]	@ (8002308 <HAL_ADC_Start_DMA+0x204>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a27      	ldr	r2, [pc, #156]	@ (8002320 <HAL_ADC_Start_DMA+0x21c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d136      	bne.n	80022f4 <HAL_ADC_Start_DMA+0x1f0>
 8002286:	4b20      	ldr	r3, [pc, #128]	@ (8002308 <HAL_ADC_Start_DMA+0x204>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	2b00      	cmp	r3, #0
 8002290:	d130      	bne.n	80022f4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d129      	bne.n	80022f4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	e020      	b.n	80022f4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a18      	ldr	r2, [pc, #96]	@ (8002318 <HAL_ADC_Start_DMA+0x214>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d11b      	bne.n	80022f4 <HAL_ADC_Start_DMA+0x1f0>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d114      	bne.n	80022f4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	e00b      	b.n	80022f4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e0:	f043 0210 	orr.w	r2, r3, #16
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ec:	f043 0201 	orr.w	r2, r3, #1
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000004 	.word	0x20000004
 8002304:	431bde83 	.word	0x431bde83
 8002308:	40012300 	.word	0x40012300
 800230c:	080027a9 	.word	0x080027a9
 8002310:	08002863 	.word	0x08002863
 8002314:	0800287f 	.word	0x0800287f
 8002318:	40012000 	.word	0x40012000
 800231c:	40012100 	.word	0x40012100
 8002320:	40012200 	.word	0x40012200

08002324 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x1c>
 8002364:	2302      	movs	r3, #2
 8002366:	e113      	b.n	8002590 <HAL_ADC_ConfigChannel+0x244>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b09      	cmp	r3, #9
 8002376:	d925      	bls.n	80023c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68d9      	ldr	r1, [r3, #12]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	4613      	mov	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	3b1e      	subs	r3, #30
 800238e:	2207      	movs	r2, #7
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43da      	mvns	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	400a      	ands	r2, r1
 800239c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68d9      	ldr	r1, [r3, #12]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	4618      	mov	r0, r3
 80023b0:	4603      	mov	r3, r0
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4403      	add	r3, r0
 80023b6:	3b1e      	subs	r3, #30
 80023b8:	409a      	lsls	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	e022      	b.n	800240a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6919      	ldr	r1, [r3, #16]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	2207      	movs	r2, #7
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43da      	mvns	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	400a      	ands	r2, r1
 80023e6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6919      	ldr	r1, [r3, #16]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	4618      	mov	r0, r3
 80023fa:	4603      	mov	r3, r0
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	4403      	add	r3, r0
 8002400:	409a      	lsls	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b06      	cmp	r3, #6
 8002410:	d824      	bhi.n	800245c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	3b05      	subs	r3, #5
 8002424:	221f      	movs	r2, #31
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43da      	mvns	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	400a      	ands	r2, r1
 8002432:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	b29b      	uxth	r3, r3
 8002440:	4618      	mov	r0, r3
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	3b05      	subs	r3, #5
 800244e:	fa00 f203 	lsl.w	r2, r0, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	635a      	str	r2, [r3, #52]	@ 0x34
 800245a:	e04c      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b0c      	cmp	r3, #12
 8002462:	d824      	bhi.n	80024ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	3b23      	subs	r3, #35	@ 0x23
 8002476:	221f      	movs	r2, #31
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43da      	mvns	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	400a      	ands	r2, r1
 8002484:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	b29b      	uxth	r3, r3
 8002492:	4618      	mov	r0, r3
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	3b23      	subs	r3, #35	@ 0x23
 80024a0:	fa00 f203 	lsl.w	r2, r0, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80024ac:	e023      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	3b41      	subs	r3, #65	@ 0x41
 80024c0:	221f      	movs	r2, #31
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43da      	mvns	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	400a      	ands	r2, r1
 80024ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	4618      	mov	r0, r3
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	3b41      	subs	r3, #65	@ 0x41
 80024ea:	fa00 f203 	lsl.w	r2, r0, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024f6:	4b29      	ldr	r3, [pc, #164]	@ (800259c <HAL_ADC_ConfigChannel+0x250>)
 80024f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a28      	ldr	r2, [pc, #160]	@ (80025a0 <HAL_ADC_ConfigChannel+0x254>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d10f      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x1d8>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b12      	cmp	r3, #18
 800250a:	d10b      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a1d      	ldr	r2, [pc, #116]	@ (80025a0 <HAL_ADC_ConfigChannel+0x254>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d12b      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x23a>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a1c      	ldr	r2, [pc, #112]	@ (80025a4 <HAL_ADC_ConfigChannel+0x258>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d003      	beq.n	8002540 <HAL_ADC_ConfigChannel+0x1f4>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b11      	cmp	r3, #17
 800253e:	d122      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a11      	ldr	r2, [pc, #68]	@ (80025a4 <HAL_ADC_ConfigChannel+0x258>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d111      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002562:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <HAL_ADC_ConfigChannel+0x25c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a11      	ldr	r2, [pc, #68]	@ (80025ac <HAL_ADC_ConfigChannel+0x260>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	0c9a      	lsrs	r2, r3, #18
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002578:	e002      	b.n	8002580 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	3b01      	subs	r3, #1
 800257e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f9      	bne.n	800257a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	40012300 	.word	0x40012300
 80025a0:	40012000 	.word	0x40012000
 80025a4:	10000012 	.word	0x10000012
 80025a8:	20000004 	.word	0x20000004
 80025ac:	431bde83 	.word	0x431bde83

080025b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025b8:	4b79      	ldr	r3, [pc, #484]	@ (80027a0 <ADC_Init+0x1f0>)
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	431a      	orrs	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6859      	ldr	r1, [r3, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	021a      	lsls	r2, r3, #8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002608:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800262a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6899      	ldr	r1, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002642:	4a58      	ldr	r2, [pc, #352]	@ (80027a4 <ADC_Init+0x1f4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d022      	beq.n	800268e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002656:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6899      	ldr	r1, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002678:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6899      	ldr	r1, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	e00f      	b.n	80026ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800269c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026ac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0202 	bic.w	r2, r2, #2
 80026bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6899      	ldr	r1, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	7e1b      	ldrb	r3, [r3, #24]
 80026c8:	005a      	lsls	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01b      	beq.n	8002714 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026ea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80026fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6859      	ldr	r1, [r3, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	3b01      	subs	r3, #1
 8002708:	035a      	lsls	r2, r3, #13
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	e007      	b.n	8002724 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002722:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002732:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	3b01      	subs	r3, #1
 8002740:	051a      	lsls	r2, r3, #20
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002758:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6899      	ldr	r1, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002766:	025a      	lsls	r2, r3, #9
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800277e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6899      	ldr	r1, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	029a      	lsls	r2, r3, #10
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	609a      	str	r2, [r3, #8]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	40012300 	.word	0x40012300
 80027a4:	0f000001 	.word	0x0f000001

080027a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d13c      	bne.n	800283c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d12b      	bne.n	8002834 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d127      	bne.n	8002834 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ea:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d006      	beq.n	8002800 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d119      	bne.n	8002834 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0220 	bic.w	r2, r2, #32
 800280e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002814:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002820:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	f043 0201 	orr.w	r2, r3, #1
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f7fe f93b 	bl	8000ab0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800283a:	e00e      	b.n	800285a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f7ff fd75 	bl	8002338 <HAL_ADC_ErrorCallback>
}
 800284e:	e004      	b.n	800285a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	4798      	blx	r3
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800286e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f7ff fd57 	bl	8002324 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2240      	movs	r2, #64	@ 0x40
 8002890:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002896:	f043 0204 	orr.w	r2, r3, #4
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f7ff fd4a 	bl	8002338 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028bc:	4b0c      	ldr	r3, [pc, #48]	@ (80028f0 <__NVIC_SetPriorityGrouping+0x44>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028c8:	4013      	ands	r3, r2
 80028ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028de:	4a04      	ldr	r2, [pc, #16]	@ (80028f0 <__NVIC_SetPriorityGrouping+0x44>)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	60d3      	str	r3, [r2, #12]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f8:	4b04      	ldr	r3, [pc, #16]	@ (800290c <__NVIC_GetPriorityGrouping+0x18>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	f003 0307 	and.w	r3, r3, #7
}
 8002902:	4618      	mov	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	2b00      	cmp	r3, #0
 8002920:	db0b      	blt.n	800293a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	f003 021f 	and.w	r2, r3, #31
 8002928:	4907      	ldr	r1, [pc, #28]	@ (8002948 <__NVIC_EnableIRQ+0x38>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	2001      	movs	r0, #1
 8002932:	fa00 f202 	lsl.w	r2, r0, r2
 8002936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000e100 	.word	0xe000e100

0800294c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	6039      	str	r1, [r7, #0]
 8002956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295c:	2b00      	cmp	r3, #0
 800295e:	db0a      	blt.n	8002976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	b2da      	uxtb	r2, r3
 8002964:	490c      	ldr	r1, [pc, #48]	@ (8002998 <__NVIC_SetPriority+0x4c>)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	0112      	lsls	r2, r2, #4
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	440b      	add	r3, r1
 8002970:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002974:	e00a      	b.n	800298c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4908      	ldr	r1, [pc, #32]	@ (800299c <__NVIC_SetPriority+0x50>)
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	3b04      	subs	r3, #4
 8002984:	0112      	lsls	r2, r2, #4
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	440b      	add	r3, r1
 800298a:	761a      	strb	r2, [r3, #24]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000e100 	.word	0xe000e100
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	@ 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f1c3 0307 	rsb	r3, r3, #7
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	bf28      	it	cs
 80029be:	2304      	movcs	r3, #4
 80029c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3304      	adds	r3, #4
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d902      	bls.n	80029d0 <NVIC_EncodePriority+0x30>
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3b03      	subs	r3, #3
 80029ce:	e000      	b.n	80029d2 <NVIC_EncodePriority+0x32>
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d4:	f04f 32ff 	mov.w	r2, #4294967295
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43da      	mvns	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	401a      	ands	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa01 f303 	lsl.w	r3, r1, r3
 80029f2:	43d9      	mvns	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f8:	4313      	orrs	r3, r2
         );
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3724      	adds	r7, #36	@ 0x24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a18:	d301      	bcc.n	8002a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e00f      	b.n	8002a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a48 <SysTick_Config+0x40>)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a26:	210f      	movs	r1, #15
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2c:	f7ff ff8e 	bl	800294c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a30:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <SysTick_Config+0x40>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a36:	4b04      	ldr	r3, [pc, #16]	@ (8002a48 <SysTick_Config+0x40>)
 8002a38:	2207      	movs	r2, #7
 8002a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	e000e010 	.word	0xe000e010

08002a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ff29 	bl	80028ac <__NVIC_SetPriorityGrouping>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b086      	sub	sp, #24
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a74:	f7ff ff3e 	bl	80028f4 <__NVIC_GetPriorityGrouping>
 8002a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	6978      	ldr	r0, [r7, #20]
 8002a80:	f7ff ff8e 	bl	80029a0 <NVIC_EncodePriority>
 8002a84:	4602      	mov	r2, r0
 8002a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff5d 	bl	800294c <__NVIC_SetPriority>
}
 8002a92:	bf00      	nop
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff31 	bl	8002910 <__NVIC_EnableIRQ>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff ffa2 	bl	8002a08 <SysTick_Config>
 8002ac4:	4603      	mov	r3, r0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002adc:	f7ff fa9e 	bl	800201c <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e099      	b.n	8002c20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0201 	bic.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b0c:	e00f      	b.n	8002b2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b0e:	f7ff fa85 	bl	800201c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d908      	bls.n	8002b2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2203      	movs	r2, #3
 8002b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e078      	b.n	8002c20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1e8      	bne.n	8002b0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	4b38      	ldr	r3, [pc, #224]	@ (8002c28 <HAL_DMA_Init+0x158>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d107      	bne.n	8002b98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b90:	4313      	orrs	r3, r2
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f023 0307 	bic.w	r3, r3, #7
 8002bae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d117      	bne.n	8002bf2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00e      	beq.n	8002bf2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 fb01 	bl	80031dc <DMA_CheckFifoParam>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2240      	movs	r2, #64	@ 0x40
 8002be4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e016      	b.n	8002c20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fab8 	bl	8003170 <DMA_CalcBaseAndBitshift>
 8002c00:	4603      	mov	r3, r0
 8002c02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c08:	223f      	movs	r2, #63	@ 0x3f
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	f010803f 	.word	0xf010803f

08002c2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_DMA_Start_IT+0x26>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e040      	b.n	8002cd4 <HAL_DMA_Start_IT+0xa8>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d12f      	bne.n	8002cc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 fa4a 	bl	8003114 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c84:	223f      	movs	r2, #63	@ 0x3f
 8002c86:	409a      	lsls	r2, r3
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0216 	orr.w	r2, r2, #22
 8002c9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d007      	beq.n	8002cb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0208 	orr.w	r2, r2, #8
 8002cb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	e005      	b.n	8002cd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cea:	f7ff f997 	bl	800201c <HAL_GetTick>
 8002cee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d008      	beq.n	8002d0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2280      	movs	r2, #128	@ 0x80
 8002d00:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e052      	b.n	8002db4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0216 	bic.w	r2, r2, #22
 8002d1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d103      	bne.n	8002d3e <HAL_DMA_Abort+0x62>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d007      	beq.n	8002d4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0208 	bic.w	r2, r2, #8
 8002d4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d5e:	e013      	b.n	8002d88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d60:	f7ff f95c 	bl	800201c <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b05      	cmp	r3, #5
 8002d6c:	d90c      	bls.n	8002d88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2220      	movs	r2, #32
 8002d72:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2203      	movs	r2, #3
 8002d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e015      	b.n	8002db4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e4      	bne.n	8002d60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9a:	223f      	movs	r2, #63	@ 0x3f
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d004      	beq.n	8002dda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2280      	movs	r2, #128	@ 0x80
 8002dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00c      	b.n	8002df4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2205      	movs	r2, #5
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0201 	bic.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e0c:	4b8e      	ldr	r3, [pc, #568]	@ (8003048 <HAL_DMA_IRQHandler+0x248>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a8e      	ldr	r2, [pc, #568]	@ (800304c <HAL_DMA_IRQHandler+0x24c>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0a9b      	lsrs	r3, r3, #10
 8002e18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2a:	2208      	movs	r2, #8
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01a      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d013      	beq.n	8002e6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0204 	bic.w	r2, r2, #4
 8002e52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e58:	2208      	movs	r2, #8
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e64:	f043 0201 	orr.w	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e70:	2201      	movs	r2, #1
 8002e72:	409a      	lsls	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d012      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8e:	2201      	movs	r2, #1
 8002e90:	409a      	lsls	r2, r3
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9a:	f043 0202 	orr.w	r2, r3, #2
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d012      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00b      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed0:	f043 0204 	orr.w	r2, r3, #4
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002edc:	2210      	movs	r2, #16
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d043      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d03c      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efa:	2210      	movs	r2, #16
 8002efc:	409a      	lsls	r2, r3
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d018      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d108      	bne.n	8002f30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d024      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	4798      	blx	r3
 8002f2e:	e01f      	b.n	8002f70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d01b      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	4798      	blx	r3
 8002f40:	e016      	b.n	8002f70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d107      	bne.n	8002f60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0208 	bic.w	r2, r2, #8
 8002f5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f74:	2220      	movs	r2, #32
 8002f76:	409a      	lsls	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 808f 	beq.w	80030a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8087 	beq.w	80030a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f96:	2220      	movs	r2, #32
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b05      	cmp	r3, #5
 8002fa8:	d136      	bne.n	8003018 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0216 	bic.w	r2, r2, #22
 8002fb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d103      	bne.n	8002fda <HAL_DMA_IRQHandler+0x1da>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d007      	beq.n	8002fea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0208 	bic.w	r2, r2, #8
 8002fe8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fee:	223f      	movs	r2, #63	@ 0x3f
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800300a:	2b00      	cmp	r3, #0
 800300c:	d07e      	beq.n	800310c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	4798      	blx	r3
        }
        return;
 8003016:	e079      	b.n	800310c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d01d      	beq.n	8003062 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10d      	bne.n	8003050 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003038:	2b00      	cmp	r3, #0
 800303a:	d031      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	4798      	blx	r3
 8003044:	e02c      	b.n	80030a0 <HAL_DMA_IRQHandler+0x2a0>
 8003046:	bf00      	nop
 8003048:	20000004 	.word	0x20000004
 800304c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003054:	2b00      	cmp	r3, #0
 8003056:	d023      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	4798      	blx	r3
 8003060:	e01e      	b.n	80030a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10f      	bne.n	8003090 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0210 	bic.w	r2, r2, #16
 800307e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d032      	beq.n	800310e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d022      	beq.n	80030fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2205      	movs	r2, #5
 80030b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	3301      	adds	r3, #1
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d307      	bcc.n	80030e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f2      	bne.n	80030cc <HAL_DMA_IRQHandler+0x2cc>
 80030e6:	e000      	b.n	80030ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	4798      	blx	r3
 800310a:	e000      	b.n	800310e <HAL_DMA_IRQHandler+0x30e>
        return;
 800310c:	bf00      	nop
    }
  }
}
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003130:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2b40      	cmp	r3, #64	@ 0x40
 8003140:	d108      	bne.n	8003154 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003152:	e007      	b.n	8003164 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	60da      	str	r2, [r3, #12]
}
 8003164:	bf00      	nop
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	3b10      	subs	r3, #16
 8003180:	4a14      	ldr	r2, [pc, #80]	@ (80031d4 <DMA_CalcBaseAndBitshift+0x64>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800318a:	4a13      	ldr	r2, [pc, #76]	@ (80031d8 <DMA_CalcBaseAndBitshift+0x68>)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2b03      	cmp	r3, #3
 800319c:	d909      	bls.n	80031b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031a6:	f023 0303 	bic.w	r3, r3, #3
 80031aa:	1d1a      	adds	r2, r3, #4
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80031b0:	e007      	b.n	80031c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031ba:	f023 0303 	bic.w	r3, r3, #3
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	aaaaaaab 	.word	0xaaaaaaab
 80031d8:	0800cbd0 	.word	0x0800cbd0

080031dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d11f      	bne.n	8003236 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d856      	bhi.n	80032aa <DMA_CheckFifoParam+0xce>
 80031fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003204 <DMA_CheckFifoParam+0x28>)
 80031fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003202:	bf00      	nop
 8003204:	08003215 	.word	0x08003215
 8003208:	08003227 	.word	0x08003227
 800320c:	08003215 	.word	0x08003215
 8003210:	080032ab 	.word	0x080032ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003218:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d046      	beq.n	80032ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003224:	e043      	b.n	80032ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800322e:	d140      	bne.n	80032b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003234:	e03d      	b.n	80032b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800323e:	d121      	bne.n	8003284 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b03      	cmp	r3, #3
 8003244:	d837      	bhi.n	80032b6 <DMA_CheckFifoParam+0xda>
 8003246:	a201      	add	r2, pc, #4	@ (adr r2, 800324c <DMA_CheckFifoParam+0x70>)
 8003248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324c:	0800325d 	.word	0x0800325d
 8003250:	08003263 	.word	0x08003263
 8003254:	0800325d 	.word	0x0800325d
 8003258:	08003275 	.word	0x08003275
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
      break;
 8003260:	e030      	b.n	80032c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003266:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d025      	beq.n	80032ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003272:	e022      	b.n	80032ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003278:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800327c:	d11f      	bne.n	80032be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003282:	e01c      	b.n	80032be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d903      	bls.n	8003292 <DMA_CheckFifoParam+0xb6>
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b03      	cmp	r3, #3
 800328e:	d003      	beq.n	8003298 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003290:	e018      	b.n	80032c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	73fb      	strb	r3, [r7, #15]
      break;
 8003296:	e015      	b.n	80032c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00e      	beq.n	80032c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
      break;
 80032a8:	e00b      	b.n	80032c2 <DMA_CheckFifoParam+0xe6>
      break;
 80032aa:	bf00      	nop
 80032ac:	e00a      	b.n	80032c4 <DMA_CheckFifoParam+0xe8>
      break;
 80032ae:	bf00      	nop
 80032b0:	e008      	b.n	80032c4 <DMA_CheckFifoParam+0xe8>
      break;
 80032b2:	bf00      	nop
 80032b4:	e006      	b.n	80032c4 <DMA_CheckFifoParam+0xe8>
      break;
 80032b6:	bf00      	nop
 80032b8:	e004      	b.n	80032c4 <DMA_CheckFifoParam+0xe8>
      break;
 80032ba:	bf00      	nop
 80032bc:	e002      	b.n	80032c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80032be:	bf00      	nop
 80032c0:	e000      	b.n	80032c4 <DMA_CheckFifoParam+0xe8>
      break;
 80032c2:	bf00      	nop
    }
  } 
  
  return status; 
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop

080032d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b089      	sub	sp, #36	@ 0x24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ea:	2300      	movs	r3, #0
 80032ec:	61fb      	str	r3, [r7, #28]
 80032ee:	e177      	b.n	80035e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032f0:	2201      	movs	r2, #1
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4013      	ands	r3, r2
 8003302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	429a      	cmp	r2, r3
 800330a:	f040 8166 	bne.w	80035da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	2b01      	cmp	r3, #1
 8003318:	d005      	beq.n	8003326 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003322:	2b02      	cmp	r3, #2
 8003324:	d130      	bne.n	8003388 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	2203      	movs	r2, #3
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43db      	mvns	r3, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4313      	orrs	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800335c:	2201      	movs	r2, #1
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 0201 	and.w	r2, r3, #1
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	2b03      	cmp	r3, #3
 8003392:	d017      	beq.n	80033c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	2203      	movs	r2, #3
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d123      	bne.n	8003418 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	08da      	lsrs	r2, r3, #3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3208      	adds	r2, #8
 80033d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	220f      	movs	r2, #15
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	691a      	ldr	r2, [r3, #16]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	08da      	lsrs	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3208      	adds	r2, #8
 8003412:	69b9      	ldr	r1, [r7, #24]
 8003414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	2203      	movs	r2, #3
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 0203 	and.w	r2, r3, #3
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80c0 	beq.w	80035da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	4b66      	ldr	r3, [pc, #408]	@ (80035f8 <HAL_GPIO_Init+0x324>)
 8003460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003462:	4a65      	ldr	r2, [pc, #404]	@ (80035f8 <HAL_GPIO_Init+0x324>)
 8003464:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003468:	6453      	str	r3, [r2, #68]	@ 0x44
 800346a:	4b63      	ldr	r3, [pc, #396]	@ (80035f8 <HAL_GPIO_Init+0x324>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003476:	4a61      	ldr	r2, [pc, #388]	@ (80035fc <HAL_GPIO_Init+0x328>)
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	3302      	adds	r3, #2
 800347e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	220f      	movs	r2, #15
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a58      	ldr	r2, [pc, #352]	@ (8003600 <HAL_GPIO_Init+0x32c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d037      	beq.n	8003512 <HAL_GPIO_Init+0x23e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a57      	ldr	r2, [pc, #348]	@ (8003604 <HAL_GPIO_Init+0x330>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d031      	beq.n	800350e <HAL_GPIO_Init+0x23a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a56      	ldr	r2, [pc, #344]	@ (8003608 <HAL_GPIO_Init+0x334>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d02b      	beq.n	800350a <HAL_GPIO_Init+0x236>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a55      	ldr	r2, [pc, #340]	@ (800360c <HAL_GPIO_Init+0x338>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d025      	beq.n	8003506 <HAL_GPIO_Init+0x232>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a54      	ldr	r2, [pc, #336]	@ (8003610 <HAL_GPIO_Init+0x33c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d01f      	beq.n	8003502 <HAL_GPIO_Init+0x22e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a53      	ldr	r2, [pc, #332]	@ (8003614 <HAL_GPIO_Init+0x340>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d019      	beq.n	80034fe <HAL_GPIO_Init+0x22a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a52      	ldr	r2, [pc, #328]	@ (8003618 <HAL_GPIO_Init+0x344>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d013      	beq.n	80034fa <HAL_GPIO_Init+0x226>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a51      	ldr	r2, [pc, #324]	@ (800361c <HAL_GPIO_Init+0x348>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00d      	beq.n	80034f6 <HAL_GPIO_Init+0x222>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a50      	ldr	r2, [pc, #320]	@ (8003620 <HAL_GPIO_Init+0x34c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d007      	beq.n	80034f2 <HAL_GPIO_Init+0x21e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a4f      	ldr	r2, [pc, #316]	@ (8003624 <HAL_GPIO_Init+0x350>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d101      	bne.n	80034ee <HAL_GPIO_Init+0x21a>
 80034ea:	2309      	movs	r3, #9
 80034ec:	e012      	b.n	8003514 <HAL_GPIO_Init+0x240>
 80034ee:	230a      	movs	r3, #10
 80034f0:	e010      	b.n	8003514 <HAL_GPIO_Init+0x240>
 80034f2:	2308      	movs	r3, #8
 80034f4:	e00e      	b.n	8003514 <HAL_GPIO_Init+0x240>
 80034f6:	2307      	movs	r3, #7
 80034f8:	e00c      	b.n	8003514 <HAL_GPIO_Init+0x240>
 80034fa:	2306      	movs	r3, #6
 80034fc:	e00a      	b.n	8003514 <HAL_GPIO_Init+0x240>
 80034fe:	2305      	movs	r3, #5
 8003500:	e008      	b.n	8003514 <HAL_GPIO_Init+0x240>
 8003502:	2304      	movs	r3, #4
 8003504:	e006      	b.n	8003514 <HAL_GPIO_Init+0x240>
 8003506:	2303      	movs	r3, #3
 8003508:	e004      	b.n	8003514 <HAL_GPIO_Init+0x240>
 800350a:	2302      	movs	r3, #2
 800350c:	e002      	b.n	8003514 <HAL_GPIO_Init+0x240>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <HAL_GPIO_Init+0x240>
 8003512:	2300      	movs	r3, #0
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	f002 0203 	and.w	r2, r2, #3
 800351a:	0092      	lsls	r2, r2, #2
 800351c:	4093      	lsls	r3, r2
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003524:	4935      	ldr	r1, [pc, #212]	@ (80035fc <HAL_GPIO_Init+0x328>)
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	089b      	lsrs	r3, r3, #2
 800352a:	3302      	adds	r3, #2
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003532:	4b3d      	ldr	r3, [pc, #244]	@ (8003628 <HAL_GPIO_Init+0x354>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003556:	4a34      	ldr	r2, [pc, #208]	@ (8003628 <HAL_GPIO_Init+0x354>)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800355c:	4b32      	ldr	r3, [pc, #200]	@ (8003628 <HAL_GPIO_Init+0x354>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003580:	4a29      	ldr	r2, [pc, #164]	@ (8003628 <HAL_GPIO_Init+0x354>)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003586:	4b28      	ldr	r3, [pc, #160]	@ (8003628 <HAL_GPIO_Init+0x354>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	43db      	mvns	r3, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4013      	ands	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003628 <HAL_GPIO_Init+0x354>)
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003628 <HAL_GPIO_Init+0x354>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035d4:	4a14      	ldr	r2, [pc, #80]	@ (8003628 <HAL_GPIO_Init+0x354>)
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3301      	adds	r3, #1
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	2b0f      	cmp	r3, #15
 80035e4:	f67f ae84 	bls.w	80032f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035e8:	bf00      	nop
 80035ea:	bf00      	nop
 80035ec:	3724      	adds	r7, #36	@ 0x24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40013800 	.word	0x40013800
 8003600:	40020000 	.word	0x40020000
 8003604:	40020400 	.word	0x40020400
 8003608:	40020800 	.word	0x40020800
 800360c:	40020c00 	.word	0x40020c00
 8003610:	40021000 	.word	0x40021000
 8003614:	40021400 	.word	0x40021400
 8003618:	40021800 	.word	0x40021800
 800361c:	40021c00 	.word	0x40021c00
 8003620:	40022000 	.word	0x40022000
 8003624:	40022400 	.word	0x40022400
 8003628:	40013c00 	.word	0x40013c00

0800362c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	807b      	strh	r3, [r7, #2]
 8003638:	4613      	mov	r3, r2
 800363a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800363c:	787b      	ldrb	r3, [r7, #1]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003642:	887a      	ldrh	r2, [r7, #2]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003648:	e003      	b.n	8003652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800364a:	887b      	ldrh	r3, [r7, #2]
 800364c:	041a      	lsls	r2, r3, #16
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	619a      	str	r2, [r3, #24]
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800365e:	b480      	push	{r7}
 8003660:	b085      	sub	sp, #20
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	460b      	mov	r3, r1
 8003668:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003670:	887a      	ldrh	r2, [r7, #2]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4013      	ands	r3, r2
 8003676:	041a      	lsls	r2, r3, #16
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	43d9      	mvns	r1, r3
 800367c:	887b      	ldrh	r3, [r7, #2]
 800367e:	400b      	ands	r3, r1
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	619a      	str	r2, [r3, #24]
}
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
	...

08003694 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800369e:	4b08      	ldr	r3, [pc, #32]	@ (80036c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a0:	695a      	ldr	r2, [r3, #20]
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d006      	beq.n	80036b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036aa:	4a05      	ldr	r2, [pc, #20]	@ (80036c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fd fa4a 	bl	8000b4c <HAL_GPIO_EXTI_Callback>
  }
}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40013c00 	.word	0x40013c00

080036c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	4b20      	ldr	r3, [pc, #128]	@ (8003754 <HAL_PWREx_EnableOverDrive+0x90>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003754 <HAL_PWREx_EnableOverDrive+0x90>)
 80036d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80036de:	4b1d      	ldr	r3, [pc, #116]	@ (8003754 <HAL_PWREx_EnableOverDrive+0x90>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80036ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003758 <HAL_PWREx_EnableOverDrive+0x94>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036f0:	f7fe fc94 	bl	800201c <HAL_GetTick>
 80036f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036f6:	e009      	b.n	800370c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036f8:	f7fe fc90 	bl	800201c <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003706:	d901      	bls.n	800370c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e01f      	b.n	800374c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800370c:	4b13      	ldr	r3, [pc, #76]	@ (800375c <HAL_PWREx_EnableOverDrive+0x98>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003718:	d1ee      	bne.n	80036f8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800371a:	4b11      	ldr	r3, [pc, #68]	@ (8003760 <HAL_PWREx_EnableOverDrive+0x9c>)
 800371c:	2201      	movs	r2, #1
 800371e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003720:	f7fe fc7c 	bl	800201c <HAL_GetTick>
 8003724:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003726:	e009      	b.n	800373c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003728:	f7fe fc78 	bl	800201c <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003736:	d901      	bls.n	800373c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e007      	b.n	800374c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800373c:	4b07      	ldr	r3, [pc, #28]	@ (800375c <HAL_PWREx_EnableOverDrive+0x98>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003744:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003748:	d1ee      	bne.n	8003728 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40023800 	.word	0x40023800
 8003758:	420e0040 	.word	0x420e0040
 800375c:	40007000 	.word	0x40007000
 8003760:	420e0044 	.word	0x420e0044

08003764 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e267      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d075      	beq.n	800386e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003782:	4b88      	ldr	r3, [pc, #544]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b04      	cmp	r3, #4
 800378c:	d00c      	beq.n	80037a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800378e:	4b85      	ldr	r3, [pc, #532]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003796:	2b08      	cmp	r3, #8
 8003798:	d112      	bne.n	80037c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800379a:	4b82      	ldr	r3, [pc, #520]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037a6:	d10b      	bne.n	80037c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a8:	4b7e      	ldr	r3, [pc, #504]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d05b      	beq.n	800386c <HAL_RCC_OscConfig+0x108>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d157      	bne.n	800386c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e242      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037c8:	d106      	bne.n	80037d8 <HAL_RCC_OscConfig+0x74>
 80037ca:	4b76      	ldr	r3, [pc, #472]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a75      	ldr	r2, [pc, #468]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	e01d      	b.n	8003814 <HAL_RCC_OscConfig+0xb0>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037e0:	d10c      	bne.n	80037fc <HAL_RCC_OscConfig+0x98>
 80037e2:	4b70      	ldr	r3, [pc, #448]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a6f      	ldr	r2, [pc, #444]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	4b6d      	ldr	r3, [pc, #436]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a6c      	ldr	r2, [pc, #432]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e00b      	b.n	8003814 <HAL_RCC_OscConfig+0xb0>
 80037fc:	4b69      	ldr	r3, [pc, #420]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a68      	ldr	r2, [pc, #416]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003802:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	4b66      	ldr	r3, [pc, #408]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a65      	ldr	r2, [pc, #404]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 800380e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d013      	beq.n	8003844 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fe fbfe 	bl	800201c <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003824:	f7fe fbfa 	bl	800201c <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b64      	cmp	r3, #100	@ 0x64
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e207      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003836:	4b5b      	ldr	r3, [pc, #364]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0xc0>
 8003842:	e014      	b.n	800386e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7fe fbea 	bl	800201c <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800384c:	f7fe fbe6 	bl	800201c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	@ 0x64
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e1f3      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385e:	4b51      	ldr	r3, [pc, #324]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0xe8>
 800386a:	e000      	b.n	800386e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800386c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d063      	beq.n	8003942 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800387a:	4b4a      	ldr	r3, [pc, #296]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00b      	beq.n	800389e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003886:	4b47      	ldr	r3, [pc, #284]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800388e:	2b08      	cmp	r3, #8
 8003890:	d11c      	bne.n	80038cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003892:	4b44      	ldr	r3, [pc, #272]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d116      	bne.n	80038cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389e:	4b41      	ldr	r3, [pc, #260]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <HAL_RCC_OscConfig+0x152>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d001      	beq.n	80038b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e1c7      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b6:	4b3b      	ldr	r3, [pc, #236]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4937      	ldr	r1, [pc, #220]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ca:	e03a      	b.n	8003942 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d020      	beq.n	8003916 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d4:	4b34      	ldr	r3, [pc, #208]	@ (80039a8 <HAL_RCC_OscConfig+0x244>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038da:	f7fe fb9f 	bl	800201c <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e2:	f7fe fb9b 	bl	800201c <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e1a8      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f4:	4b2b      	ldr	r3, [pc, #172]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003900:	4b28      	ldr	r3, [pc, #160]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4925      	ldr	r1, [pc, #148]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003910:	4313      	orrs	r3, r2
 8003912:	600b      	str	r3, [r1, #0]
 8003914:	e015      	b.n	8003942 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003916:	4b24      	ldr	r3, [pc, #144]	@ (80039a8 <HAL_RCC_OscConfig+0x244>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fe fb7e 	bl	800201c <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003924:	f7fe fb7a 	bl	800201c <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e187      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003936:	4b1b      	ldr	r3, [pc, #108]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d036      	beq.n	80039bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d016      	beq.n	8003984 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003956:	4b15      	ldr	r3, [pc, #84]	@ (80039ac <HAL_RCC_OscConfig+0x248>)
 8003958:	2201      	movs	r2, #1
 800395a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395c:	f7fe fb5e 	bl	800201c <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003964:	f7fe fb5a 	bl	800201c <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e167      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003976:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <HAL_RCC_OscConfig+0x240>)
 8003978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0x200>
 8003982:	e01b      	b.n	80039bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003984:	4b09      	ldr	r3, [pc, #36]	@ (80039ac <HAL_RCC_OscConfig+0x248>)
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398a:	f7fe fb47 	bl	800201c <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003990:	e00e      	b.n	80039b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003992:	f7fe fb43 	bl	800201c <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d907      	bls.n	80039b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e150      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
 80039a4:	40023800 	.word	0x40023800
 80039a8:	42470000 	.word	0x42470000
 80039ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b0:	4b88      	ldr	r3, [pc, #544]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 80039b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1ea      	bne.n	8003992 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 8097 	beq.w	8003af8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ca:	2300      	movs	r3, #0
 80039cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ce:	4b81      	ldr	r3, [pc, #516]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10f      	bne.n	80039fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	4b7d      	ldr	r3, [pc, #500]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	4a7c      	ldr	r2, [pc, #496]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 80039e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ea:	4b7a      	ldr	r3, [pc, #488]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f6:	2301      	movs	r3, #1
 80039f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fa:	4b77      	ldr	r3, [pc, #476]	@ (8003bd8 <HAL_RCC_OscConfig+0x474>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d118      	bne.n	8003a38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a06:	4b74      	ldr	r3, [pc, #464]	@ (8003bd8 <HAL_RCC_OscConfig+0x474>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a73      	ldr	r2, [pc, #460]	@ (8003bd8 <HAL_RCC_OscConfig+0x474>)
 8003a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a12:	f7fe fb03 	bl	800201c <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1a:	f7fe faff 	bl	800201c <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e10c      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003bd8 <HAL_RCC_OscConfig+0x474>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f0      	beq.n	8003a1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d106      	bne.n	8003a4e <HAL_RCC_OscConfig+0x2ea>
 8003a40:	4b64      	ldr	r3, [pc, #400]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a44:	4a63      	ldr	r2, [pc, #396]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a4c:	e01c      	b.n	8003a88 <HAL_RCC_OscConfig+0x324>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b05      	cmp	r3, #5
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x30c>
 8003a56:	4b5f      	ldr	r3, [pc, #380]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5a:	4a5e      	ldr	r2, [pc, #376]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	f043 0304 	orr.w	r3, r3, #4
 8003a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a62:	4b5c      	ldr	r3, [pc, #368]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a66:	4a5b      	ldr	r2, [pc, #364]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCC_OscConfig+0x324>
 8003a70:	4b58      	ldr	r3, [pc, #352]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a74:	4a57      	ldr	r2, [pc, #348]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a76:	f023 0301 	bic.w	r3, r3, #1
 8003a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a7c:	4b55      	ldr	r3, [pc, #340]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a80:	4a54      	ldr	r2, [pc, #336]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003a82:	f023 0304 	bic.w	r3, r3, #4
 8003a86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d015      	beq.n	8003abc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7fe fac4 	bl	800201c <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f7fe fac0 	bl	800201c <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e0cb      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aae:	4b49      	ldr	r3, [pc, #292]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0ee      	beq.n	8003a98 <HAL_RCC_OscConfig+0x334>
 8003aba:	e014      	b.n	8003ae6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003abc:	f7fe faae 	bl	800201c <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac4:	f7fe faaa 	bl	800201c <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e0b5      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ada:	4b3e      	ldr	r3, [pc, #248]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1ee      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d105      	bne.n	8003af8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aec:	4b39      	ldr	r3, [pc, #228]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af0:	4a38      	ldr	r2, [pc, #224]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003af2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003af6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80a1 	beq.w	8003c44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b02:	4b34      	ldr	r3, [pc, #208]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d05c      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d141      	bne.n	8003b9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b16:	4b31      	ldr	r3, [pc, #196]	@ (8003bdc <HAL_RCC_OscConfig+0x478>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fe fa7e 	bl	800201c <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fe fa7a 	bl	800201c <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e087      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b36:	4b27      	ldr	r3, [pc, #156]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69da      	ldr	r2, [r3, #28]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	019b      	lsls	r3, r3, #6
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b58:	085b      	lsrs	r3, r3, #1
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	041b      	lsls	r3, r3, #16
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b64:	061b      	lsls	r3, r3, #24
 8003b66:	491b      	ldr	r1, [pc, #108]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bdc <HAL_RCC_OscConfig+0x478>)
 8003b6e:	2201      	movs	r2, #1
 8003b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b72:	f7fe fa53 	bl	800201c <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7a:	f7fe fa4f 	bl	800201c <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e05c      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8c:	4b11      	ldr	r3, [pc, #68]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x416>
 8003b98:	e054      	b.n	8003c44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b9a:	4b10      	ldr	r3, [pc, #64]	@ (8003bdc <HAL_RCC_OscConfig+0x478>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba0:	f7fe fa3c 	bl	800201c <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba8:	f7fe fa38 	bl	800201c <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e045      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bba:	4b06      	ldr	r3, [pc, #24]	@ (8003bd4 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f0      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x444>
 8003bc6:	e03d      	b.n	8003c44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e038      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	40007000 	.word	0x40007000
 8003bdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003be0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c50 <HAL_RCC_OscConfig+0x4ec>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d028      	beq.n	8003c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d121      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d11a      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c10:	4013      	ands	r3, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d111      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800

08003c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0cc      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c68:	4b68      	ldr	r3, [pc, #416]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d90c      	bls.n	8003c90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	4b65      	ldr	r3, [pc, #404]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7e:	4b63      	ldr	r3, [pc, #396]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0b8      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d020      	beq.n	8003cde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ca8:	4b59      	ldr	r3, [pc, #356]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	4a58      	ldr	r2, [pc, #352]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cc0:	4b53      	ldr	r3, [pc, #332]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	4a52      	ldr	r2, [pc, #328]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ccc:	4b50      	ldr	r3, [pc, #320]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	494d      	ldr	r1, [pc, #308]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d044      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d107      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf2:	4b47      	ldr	r3, [pc, #284]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d119      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e07f      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d003      	beq.n	8003d12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d107      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d12:	4b3f      	ldr	r3, [pc, #252]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e06f      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d22:	4b3b      	ldr	r3, [pc, #236]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e067      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d32:	4b37      	ldr	r3, [pc, #220]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f023 0203 	bic.w	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4934      	ldr	r1, [pc, #208]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d44:	f7fe f96a 	bl	800201c <HAL_GetTick>
 8003d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4a:	e00a      	b.n	8003d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d4c:	f7fe f966 	bl	800201c <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e04f      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	4b2b      	ldr	r3, [pc, #172]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 020c 	and.w	r2, r3, #12
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d1eb      	bne.n	8003d4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d74:	4b25      	ldr	r3, [pc, #148]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 030f 	and.w	r3, r3, #15
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d20c      	bcs.n	8003d9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d82:	4b22      	ldr	r3, [pc, #136]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8a:	4b20      	ldr	r3, [pc, #128]	@ (8003e0c <HAL_RCC_ClockConfig+0x1b8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e032      	b.n	8003e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003da8:	4b19      	ldr	r3, [pc, #100]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4916      	ldr	r1, [pc, #88]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d009      	beq.n	8003dda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dc6:	4b12      	ldr	r3, [pc, #72]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	490e      	ldr	r1, [pc, #56]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dda:	f000 f821 	bl	8003e20 <HAL_RCC_GetSysClockFreq>
 8003dde:	4602      	mov	r2, r0
 8003de0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e10 <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	091b      	lsrs	r3, r3, #4
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	490a      	ldr	r1, [pc, #40]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003dec:	5ccb      	ldrb	r3, [r1, r3]
 8003dee:	fa22 f303 	lsr.w	r3, r2, r3
 8003df2:	4a09      	ldr	r2, [pc, #36]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003df6:	4b09      	ldr	r3, [pc, #36]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fe f8ca 	bl	8001f94 <HAL_InitTick>

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40023c00 	.word	0x40023c00
 8003e10:	40023800 	.word	0x40023800
 8003e14:	0800cbb8 	.word	0x0800cbb8
 8003e18:	20000004 	.word	0x20000004
 8003e1c:	20000008 	.word	0x20000008

08003e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e24:	b090      	sub	sp, #64	@ 0x40
 8003e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e38:	4b59      	ldr	r3, [pc, #356]	@ (8003fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 030c 	and.w	r3, r3, #12
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d00d      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0x40>
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	f200 80a1 	bhi.w	8003f8c <HAL_RCC_GetSysClockFreq+0x16c>
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <HAL_RCC_GetSysClockFreq+0x34>
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d003      	beq.n	8003e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e52:	e09b      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e54:	4b53      	ldr	r3, [pc, #332]	@ (8003fa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e58:	e09b      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e5a:	4b53      	ldr	r3, [pc, #332]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e5e:	e098      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e60:	4b4f      	ldr	r3, [pc, #316]	@ (8003fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e68:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e6a:	4b4d      	ldr	r3, [pc, #308]	@ (8003fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d028      	beq.n	8003ec8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e76:	4b4a      	ldr	r3, [pc, #296]	@ (8003fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	099b      	lsrs	r3, r3, #6
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	623b      	str	r3, [r7, #32]
 8003e80:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e88:	2100      	movs	r1, #0
 8003e8a:	4b47      	ldr	r3, [pc, #284]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e8c:	fb03 f201 	mul.w	r2, r3, r1
 8003e90:	2300      	movs	r3, #0
 8003e92:	fb00 f303 	mul.w	r3, r0, r3
 8003e96:	4413      	add	r3, r2
 8003e98:	4a43      	ldr	r2, [pc, #268]	@ (8003fa8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e9a:	fba0 1202 	umull	r1, r2, r0, r2
 8003e9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ea0:	460a      	mov	r2, r1
 8003ea2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ea4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ea6:	4413      	add	r3, r2
 8003ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eac:	2200      	movs	r2, #0
 8003eae:	61bb      	str	r3, [r7, #24]
 8003eb0:	61fa      	str	r2, [r7, #28]
 8003eb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003eba:	f7fc f9e9 	bl	8000290 <__aeabi_uldivmod>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ec6:	e053      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec8:	4b35      	ldr	r3, [pc, #212]	@ (8003fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	099b      	lsrs	r3, r3, #6
 8003ece:	2200      	movs	r2, #0
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	617a      	str	r2, [r7, #20]
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003eda:	f04f 0b00 	mov.w	fp, #0
 8003ede:	4652      	mov	r2, sl
 8003ee0:	465b      	mov	r3, fp
 8003ee2:	f04f 0000 	mov.w	r0, #0
 8003ee6:	f04f 0100 	mov.w	r1, #0
 8003eea:	0159      	lsls	r1, r3, #5
 8003eec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ef0:	0150      	lsls	r0, r2, #5
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	ebb2 080a 	subs.w	r8, r2, sl
 8003efa:	eb63 090b 	sbc.w	r9, r3, fp
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f12:	ebb2 0408 	subs.w	r4, r2, r8
 8003f16:	eb63 0509 	sbc.w	r5, r3, r9
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	00eb      	lsls	r3, r5, #3
 8003f24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f28:	00e2      	lsls	r2, r4, #3
 8003f2a:	4614      	mov	r4, r2
 8003f2c:	461d      	mov	r5, r3
 8003f2e:	eb14 030a 	adds.w	r3, r4, sl
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	eb45 030b 	adc.w	r3, r5, fp
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f46:	4629      	mov	r1, r5
 8003f48:	028b      	lsls	r3, r1, #10
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f50:	4621      	mov	r1, r4
 8003f52:	028a      	lsls	r2, r1, #10
 8003f54:	4610      	mov	r0, r2
 8003f56:	4619      	mov	r1, r3
 8003f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	60fa      	str	r2, [r7, #12]
 8003f60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f64:	f7fc f994 	bl	8000290 <__aeabi_uldivmod>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f70:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	0c1b      	lsrs	r3, r3, #16
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003f80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f8a:	e002      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f8c:	4b05      	ldr	r3, [pc, #20]	@ (8003fa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3740      	adds	r7, #64	@ 0x40
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	00f42400 	.word	0x00f42400
 8003fa8:	017d7840 	.word	0x017d7840

08003fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fb0:	4b03      	ldr	r3, [pc, #12]	@ (8003fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	20000004 	.word	0x20000004

08003fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fc8:	f7ff fff0 	bl	8003fac <HAL_RCC_GetHCLKFreq>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4b05      	ldr	r3, [pc, #20]	@ (8003fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	0a9b      	lsrs	r3, r3, #10
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	4903      	ldr	r1, [pc, #12]	@ (8003fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fda:	5ccb      	ldrb	r3, [r1, r3]
 8003fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	0800cbc8 	.word	0x0800cbc8

08003fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ff0:	f7ff ffdc 	bl	8003fac <HAL_RCC_GetHCLKFreq>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	4b05      	ldr	r3, [pc, #20]	@ (800400c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	0b5b      	lsrs	r3, r3, #13
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	4903      	ldr	r1, [pc, #12]	@ (8004010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004002:	5ccb      	ldrb	r3, [r1, r3]
 8004004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004008:	4618      	mov	r0, r3
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40023800 	.word	0x40023800
 8004010:	0800cbc8 	.word	0x0800cbc8

08004014 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e07b      	b.n	800411e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402a:	2b00      	cmp	r3, #0
 800402c:	d108      	bne.n	8004040 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004036:	d009      	beq.n	800404c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	61da      	str	r2, [r3, #28]
 800403e:	e005      	b.n	800404c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7fd fac4 	bl	80015f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004082:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d0:	ea42 0103 	orr.w	r1, r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	0c1b      	lsrs	r3, r3, #16
 80040ea:	f003 0104 	and.w	r1, r3, #4
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f2:	f003 0210 	and.w	r2, r3, #16
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800410c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10e      	bne.n	8004168 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004150:	2b00      	cmp	r3, #0
 8004152:	d009      	beq.n	8004168 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d004      	beq.n	8004168 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	4798      	blx	r3
    return;
 8004166:	e0ce      	b.n	8004306 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <HAL_SPI_IRQHandler+0x5e>
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004178:	2b00      	cmp	r3, #0
 800417a:	d004      	beq.n	8004186 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	4798      	blx	r3
    return;
 8004184:	e0bf      	b.n	8004306 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	f003 0320 	and.w	r3, r3, #32
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <HAL_SPI_IRQHandler+0x7e>
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	d105      	bne.n	80041a6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 80b0 	beq.w	8004306 <HAL_SPI_IRQHandler+0x1de>
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80aa 	beq.w	8004306 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d023      	beq.n	8004204 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d011      	beq.n	80041ec <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041cc:	f043 0204 	orr.w	r2, r3, #4
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	e00b      	b.n	8004204 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041ec:	2300      	movs	r3, #0
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	693b      	ldr	r3, [r7, #16]
        return;
 8004202:	e080      	b.n	8004306 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	d014      	beq.n	8004238 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004212:	f043 0201 	orr.w	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00c      	beq.n	800425c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004246:	f043 0208 	orr.w	r2, r3, #8
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800424e:	2300      	movs	r3, #0
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	60bb      	str	r3, [r7, #8]
 800425a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004260:	2b00      	cmp	r3, #0
 8004262:	d04f      	beq.n	8004304 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004272:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d104      	bne.n	8004290 <HAL_SPI_IRQHandler+0x168>
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d034      	beq.n	80042fa <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0203 	bic.w	r2, r2, #3
 800429e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d011      	beq.n	80042cc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ac:	4a17      	ldr	r2, [pc, #92]	@ (800430c <HAL_SPI_IRQHandler+0x1e4>)
 80042ae:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fe fd81 	bl	8002dbc <HAL_DMA_Abort_IT>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d016      	beq.n	8004302 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d8:	4a0c      	ldr	r2, [pc, #48]	@ (800430c <HAL_SPI_IRQHandler+0x1e4>)
 80042da:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fe fd6b 	bl	8002dbc <HAL_DMA_Abort_IT>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00a      	beq.n	8004302 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80042f8:	e003      	b.n	8004302 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f808 	bl	8004310 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004300:	e000      	b.n	8004304 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004302:	bf00      	nop
    return;
 8004304:	bf00      	nop
  }
}
 8004306:	3720      	adds	r7, #32
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	08004325 	.word	0x08004325

08004310 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004330:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f7ff ffe6 	bl	8004310 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004344:	bf00      	nop
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e041      	b.n	80043e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fd fc94 	bl	8001ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3304      	adds	r3, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4610      	mov	r0, r2
 800438c:	f000 fa7e 	bl	800488c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d001      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e04e      	b.n	80044a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a23      	ldr	r2, [pc, #140]	@ (80044b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d022      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800442e:	d01d      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a1f      	ldr	r2, [pc, #124]	@ (80044b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d018      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1e      	ldr	r2, [pc, #120]	@ (80044b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d013      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a1c      	ldr	r2, [pc, #112]	@ (80044bc <HAL_TIM_Base_Start_IT+0xd0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00e      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a1b      	ldr	r2, [pc, #108]	@ (80044c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d009      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a19      	ldr	r2, [pc, #100]	@ (80044c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d004      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x80>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a18      	ldr	r2, [pc, #96]	@ (80044c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d111      	bne.n	8004490 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b06      	cmp	r3, #6
 800447c:	d010      	beq.n	80044a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448e:	e007      	b.n	80044a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40010000 	.word	0x40010000
 80044b4:	40000400 	.word	0x40000400
 80044b8:	40000800 	.word	0x40000800
 80044bc:	40000c00 	.word	0x40000c00
 80044c0:	40010400 	.word	0x40010400
 80044c4:	40014000 	.word	0x40014000
 80044c8:	40001800 	.word	0x40001800

080044cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d020      	beq.n	8004530 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01b      	beq.n	8004530 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0202 	mvn.w	r2, #2
 8004500:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f999 	bl	800484e <HAL_TIM_IC_CaptureCallback>
 800451c:	e005      	b.n	800452a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f98b 	bl	800483a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f99c 	bl	8004862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b00      	cmp	r3, #0
 8004538:	d020      	beq.n	800457c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01b      	beq.n	800457c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0204 	mvn.w	r2, #4
 800454c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f973 	bl	800484e <HAL_TIM_IC_CaptureCallback>
 8004568:	e005      	b.n	8004576 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f965 	bl	800483a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f976 	bl	8004862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d020      	beq.n	80045c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01b      	beq.n	80045c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0208 	mvn.w	r2, #8
 8004598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2204      	movs	r2, #4
 800459e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f94d 	bl	800484e <HAL_TIM_IC_CaptureCallback>
 80045b4:	e005      	b.n	80045c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f93f 	bl	800483a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f950 	bl	8004862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d020      	beq.n	8004614 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01b      	beq.n	8004614 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0210 	mvn.w	r2, #16
 80045e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2208      	movs	r2, #8
 80045ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f927 	bl	800484e <HAL_TIM_IC_CaptureCallback>
 8004600:	e005      	b.n	800460e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f919 	bl	800483a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f92a 	bl	8004862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00c      	beq.n	8004638 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d007      	beq.n	8004638 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0201 	mvn.w	r2, #1
 8004630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7fc fa46 	bl	8000ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00c      	beq.n	800465c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004648:	2b00      	cmp	r3, #0
 800464a:	d007      	beq.n	800465c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fae4 	bl	8004c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00c      	beq.n	8004680 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f8fb 	bl	8004876 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00c      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f06f 0220 	mvn.w	r2, #32
 800469c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fab6 	bl	8004c10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <HAL_TIM_ConfigClockSource+0x1c>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e0b4      	b.n	8004832 <HAL_TIM_ConfigClockSource+0x186>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004700:	d03e      	beq.n	8004780 <HAL_TIM_ConfigClockSource+0xd4>
 8004702:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004706:	f200 8087 	bhi.w	8004818 <HAL_TIM_ConfigClockSource+0x16c>
 800470a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800470e:	f000 8086 	beq.w	800481e <HAL_TIM_ConfigClockSource+0x172>
 8004712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004716:	d87f      	bhi.n	8004818 <HAL_TIM_ConfigClockSource+0x16c>
 8004718:	2b70      	cmp	r3, #112	@ 0x70
 800471a:	d01a      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0xa6>
 800471c:	2b70      	cmp	r3, #112	@ 0x70
 800471e:	d87b      	bhi.n	8004818 <HAL_TIM_ConfigClockSource+0x16c>
 8004720:	2b60      	cmp	r3, #96	@ 0x60
 8004722:	d050      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0x11a>
 8004724:	2b60      	cmp	r3, #96	@ 0x60
 8004726:	d877      	bhi.n	8004818 <HAL_TIM_ConfigClockSource+0x16c>
 8004728:	2b50      	cmp	r3, #80	@ 0x50
 800472a:	d03c      	beq.n	80047a6 <HAL_TIM_ConfigClockSource+0xfa>
 800472c:	2b50      	cmp	r3, #80	@ 0x50
 800472e:	d873      	bhi.n	8004818 <HAL_TIM_ConfigClockSource+0x16c>
 8004730:	2b40      	cmp	r3, #64	@ 0x40
 8004732:	d058      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0x13a>
 8004734:	2b40      	cmp	r3, #64	@ 0x40
 8004736:	d86f      	bhi.n	8004818 <HAL_TIM_ConfigClockSource+0x16c>
 8004738:	2b30      	cmp	r3, #48	@ 0x30
 800473a:	d064      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0x15a>
 800473c:	2b30      	cmp	r3, #48	@ 0x30
 800473e:	d86b      	bhi.n	8004818 <HAL_TIM_ConfigClockSource+0x16c>
 8004740:	2b20      	cmp	r3, #32
 8004742:	d060      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0x15a>
 8004744:	2b20      	cmp	r3, #32
 8004746:	d867      	bhi.n	8004818 <HAL_TIM_ConfigClockSource+0x16c>
 8004748:	2b00      	cmp	r3, #0
 800474a:	d05c      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0x15a>
 800474c:	2b10      	cmp	r3, #16
 800474e:	d05a      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0x15a>
 8004750:	e062      	b.n	8004818 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004762:	f000 f9b9 	bl	8004ad8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004774:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	609a      	str	r2, [r3, #8]
      break;
 800477e:	e04f      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004790:	f000 f9a2 	bl	8004ad8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047a2:	609a      	str	r2, [r3, #8]
      break;
 80047a4:	e03c      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b2:	461a      	mov	r2, r3
 80047b4:	f000 f916 	bl	80049e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2150      	movs	r1, #80	@ 0x50
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 f96f 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 80047c4:	e02c      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047d2:	461a      	mov	r2, r3
 80047d4:	f000 f935 	bl	8004a42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2160      	movs	r1, #96	@ 0x60
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 f95f 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 80047e4:	e01c      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f2:	461a      	mov	r2, r3
 80047f4:	f000 f8f6 	bl	80049e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2140      	movs	r1, #64	@ 0x40
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 f94f 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 8004804:	e00c      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4619      	mov	r1, r3
 8004810:	4610      	mov	r0, r2
 8004812:	f000 f946 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 8004816:	e003      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	73fb      	strb	r3, [r7, #15]
      break;
 800481c:	e000      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800481e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004830:	7bfb      	ldrb	r3, [r7, #15]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a46      	ldr	r2, [pc, #280]	@ (80049b8 <TIM_Base_SetConfig+0x12c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d013      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048aa:	d00f      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a43      	ldr	r2, [pc, #268]	@ (80049bc <TIM_Base_SetConfig+0x130>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00b      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a42      	ldr	r2, [pc, #264]	@ (80049c0 <TIM_Base_SetConfig+0x134>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d007      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a41      	ldr	r2, [pc, #260]	@ (80049c4 <TIM_Base_SetConfig+0x138>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d003      	beq.n	80048cc <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a40      	ldr	r2, [pc, #256]	@ (80049c8 <TIM_Base_SetConfig+0x13c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d108      	bne.n	80048de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a35      	ldr	r2, [pc, #212]	@ (80049b8 <TIM_Base_SetConfig+0x12c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d02b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ec:	d027      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a32      	ldr	r2, [pc, #200]	@ (80049bc <TIM_Base_SetConfig+0x130>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d023      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a31      	ldr	r2, [pc, #196]	@ (80049c0 <TIM_Base_SetConfig+0x134>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d01f      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a30      	ldr	r2, [pc, #192]	@ (80049c4 <TIM_Base_SetConfig+0x138>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2f      	ldr	r2, [pc, #188]	@ (80049c8 <TIM_Base_SetConfig+0x13c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d017      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2e      	ldr	r2, [pc, #184]	@ (80049cc <TIM_Base_SetConfig+0x140>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a2d      	ldr	r2, [pc, #180]	@ (80049d0 <TIM_Base_SetConfig+0x144>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00f      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a2c      	ldr	r2, [pc, #176]	@ (80049d4 <TIM_Base_SetConfig+0x148>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00b      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a2b      	ldr	r2, [pc, #172]	@ (80049d8 <TIM_Base_SetConfig+0x14c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a2a      	ldr	r2, [pc, #168]	@ (80049dc <TIM_Base_SetConfig+0x150>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a29      	ldr	r2, [pc, #164]	@ (80049e0 <TIM_Base_SetConfig+0x154>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d108      	bne.n	8004950 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a10      	ldr	r2, [pc, #64]	@ (80049b8 <TIM_Base_SetConfig+0x12c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d003      	beq.n	8004984 <TIM_Base_SetConfig+0xf8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a12      	ldr	r2, [pc, #72]	@ (80049c8 <TIM_Base_SetConfig+0x13c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d103      	bne.n	800498c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b01      	cmp	r3, #1
 800499c:	d105      	bne.n	80049aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f023 0201 	bic.w	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	611a      	str	r2, [r3, #16]
  }
}
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40010000 	.word	0x40010000
 80049bc:	40000400 	.word	0x40000400
 80049c0:	40000800 	.word	0x40000800
 80049c4:	40000c00 	.word	0x40000c00
 80049c8:	40010400 	.word	0x40010400
 80049cc:	40014000 	.word	0x40014000
 80049d0:	40014400 	.word	0x40014400
 80049d4:	40014800 	.word	0x40014800
 80049d8:	40001800 	.word	0x40001800
 80049dc:	40001c00 	.word	0x40001c00
 80049e0:	40002000 	.word	0x40002000

080049e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	f023 0201 	bic.w	r2, r3, #1
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f023 030a 	bic.w	r3, r3, #10
 8004a20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	621a      	str	r2, [r3, #32]
}
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b087      	sub	sp, #28
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	f023 0210 	bic.w	r2, r3, #16
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	031b      	lsls	r3, r3, #12
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	621a      	str	r2, [r3, #32]
}
 8004a96:	bf00      	nop
 8004a98:	371c      	adds	r7, #28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b085      	sub	sp, #20
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f043 0307 	orr.w	r3, r3, #7
 8004ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	609a      	str	r2, [r3, #8]
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	021a      	lsls	r2, r3, #8
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	609a      	str	r2, [r3, #8]
}
 8004b0c:	bf00      	nop
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e05a      	b.n	8004be6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a21      	ldr	r2, [pc, #132]	@ (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d022      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b7c:	d01d      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d018      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d013      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a1a      	ldr	r2, [pc, #104]	@ (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d00e      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a18      	ldr	r2, [pc, #96]	@ (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d009      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a17      	ldr	r2, [pc, #92]	@ (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d004      	beq.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a15      	ldr	r2, [pc, #84]	@ (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d10c      	bne.n	8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40010000 	.word	0x40010000
 8004bf8:	40000400 	.word	0x40000400
 8004bfc:	40000800 	.word	0x40000800
 8004c00:	40000c00 	.word	0x40000c00
 8004c04:	40010400 	.word	0x40010400
 8004c08:	40014000 	.word	0x40014000
 8004c0c:	40001800 	.word	0x40001800

08004c10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e042      	b.n	8004cd0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fd f88e 	bl	8001d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2224      	movs	r2, #36	@ 0x24
 8004c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 ff63 	bl	8005b48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695a      	ldr	r2, [r3, #20]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ca0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08c      	sub	sp, #48	@ 0x30
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d156      	bne.n	8004da0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <HAL_UART_Transmit_DMA+0x26>
 8004cf8:	88fb      	ldrh	r3, [r7, #6]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e04f      	b.n	8004da2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	88fa      	ldrh	r2, [r7, #6]
 8004d0c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	88fa      	ldrh	r2, [r7, #6]
 8004d12:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2221      	movs	r2, #33	@ 0x21
 8004d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d26:	4a21      	ldr	r2, [pc, #132]	@ (8004dac <HAL_UART_Transmit_DMA+0xd4>)
 8004d28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2e:	4a20      	ldr	r2, [pc, #128]	@ (8004db0 <HAL_UART_Transmit_DMA+0xd8>)
 8004d30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d36:	4a1f      	ldr	r2, [pc, #124]	@ (8004db4 <HAL_UART_Transmit_DMA+0xdc>)
 8004d38:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3e:	2200      	movs	r2, #0
 8004d40:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004d42:	f107 0308 	add.w	r3, r7, #8
 8004d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d4e:	6819      	ldr	r1, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3304      	adds	r3, #4
 8004d56:	461a      	mov	r2, r3
 8004d58:	88fb      	ldrh	r3, [r7, #6]
 8004d5a:	f7fd ff67 	bl	8002c2c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d66:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3314      	adds	r3, #20
 8004d6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	617b      	str	r3, [r7, #20]
   return(result);
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3314      	adds	r3, #20
 8004d86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d88:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6a39      	ldr	r1, [r7, #32]
 8004d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e5      	bne.n	8004d68 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	e000      	b.n	8004da2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004da0:	2302      	movs	r3, #2
  }
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3730      	adds	r7, #48	@ 0x30
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	080053d5 	.word	0x080053d5
 8004db0:	0800546f 	.word	0x0800546f
 8004db4:	080055f3 	.word	0x080055f3

08004db8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08c      	sub	sp, #48	@ 0x30
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	d14a      	bne.n	8004e68 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004dd8:	88fb      	ldrh	r3, [r7, #6]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e043      	b.n	8004e6a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2201      	movs	r2, #1
 8004de6:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	461a      	mov	r2, r3
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fc47 	bl	8005688 <UART_Start_Receive_DMA>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004e00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d12c      	bne.n	8004e62 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d125      	bne.n	8004e5c <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e10:	2300      	movs	r3, #0
 8004e12:	613b      	str	r3, [r7, #16]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	613b      	str	r3, [r7, #16]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	613b      	str	r3, [r7, #16]
 8004e24:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	330c      	adds	r3, #12
 8004e2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	e853 3f00 	ldrex	r3, [r3]
 8004e34:	617b      	str	r3, [r7, #20]
   return(result);
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f043 0310 	orr.w	r3, r3, #16
 8004e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	330c      	adds	r3, #12
 8004e44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e46:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4a:	6a39      	ldr	r1, [r7, #32]
 8004e4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e4e:	e841 2300 	strex	r3, r2, [r1]
 8004e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1e5      	bne.n	8004e26 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004e5a:	e002      	b.n	8004e62 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004e62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e66:	e000      	b.n	8004e6a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004e68:	2302      	movs	r3, #2
  }
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3730      	adds	r7, #48	@ 0x30
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b0ba      	sub	sp, #232	@ 0xe8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004eb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10f      	bne.n	8004eda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d009      	beq.n	8004eda <HAL_UART_IRQHandler+0x66>
 8004ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fd79 	bl	80059ca <UART_Receive_IT>
      return;
 8004ed8:	e25b      	b.n	8005392 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004eda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 80de 	beq.w	80050a0 <HAL_UART_IRQHandler+0x22c>
 8004ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d106      	bne.n	8004efe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ef4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 80d1 	beq.w	80050a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00b      	beq.n	8004f22 <HAL_UART_IRQHandler+0xae>
 8004f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d005      	beq.n	8004f22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1a:	f043 0201 	orr.w	r2, r3, #1
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00b      	beq.n	8004f46 <HAL_UART_IRQHandler+0xd2>
 8004f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d005      	beq.n	8004f46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f3e:	f043 0202 	orr.w	r2, r3, #2
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00b      	beq.n	8004f6a <HAL_UART_IRQHandler+0xf6>
 8004f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d005      	beq.n	8004f6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f62:	f043 0204 	orr.w	r2, r3, #4
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d011      	beq.n	8004f9a <HAL_UART_IRQHandler+0x126>
 8004f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d105      	bne.n	8004f8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d005      	beq.n	8004f9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f92:	f043 0208 	orr.w	r2, r3, #8
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 81f2 	beq.w	8005388 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d008      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x14e>
 8004fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fd04 	bl	80059ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fcc:	2b40      	cmp	r3, #64	@ 0x40
 8004fce:	bf0c      	ite	eq
 8004fd0:	2301      	moveq	r3, #1
 8004fd2:	2300      	movne	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d103      	bne.n	8004fee <HAL_UART_IRQHandler+0x17a>
 8004fe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d04f      	beq.n	800508e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fc0c 	bl	800580c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ffe:	2b40      	cmp	r3, #64	@ 0x40
 8005000:	d141      	bne.n	8005086 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3314      	adds	r3, #20
 8005008:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005010:	e853 3f00 	ldrex	r3, [r3]
 8005014:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005018:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800501c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005020:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3314      	adds	r3, #20
 800502a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800502e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005032:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005036:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800503a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800503e:	e841 2300 	strex	r3, r2, [r1]
 8005042:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005046:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1d9      	bne.n	8005002 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005052:	2b00      	cmp	r3, #0
 8005054:	d013      	beq.n	800507e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800505a:	4a7e      	ldr	r2, [pc, #504]	@ (8005254 <HAL_UART_IRQHandler+0x3e0>)
 800505c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005062:	4618      	mov	r0, r3
 8005064:	f7fd feaa 	bl	8002dbc <HAL_DMA_Abort_IT>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d016      	beq.n	800509c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005078:	4610      	mov	r0, r2
 800507a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800507c:	e00e      	b.n	800509c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f99e 	bl	80053c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005084:	e00a      	b.n	800509c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f99a 	bl	80053c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800508c:	e006      	b.n	800509c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f996 	bl	80053c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800509a:	e175      	b.n	8005388 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800509c:	bf00      	nop
    return;
 800509e:	e173      	b.n	8005388 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	f040 814f 	bne.w	8005348 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80050aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050ae:	f003 0310 	and.w	r3, r3, #16
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 8148 	beq.w	8005348 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050bc:	f003 0310 	and.w	r3, r3, #16
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8141 	beq.w	8005348 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050c6:	2300      	movs	r3, #0
 80050c8:	60bb      	str	r3, [r7, #8]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60bb      	str	r3, [r7, #8]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	60bb      	str	r3, [r7, #8]
 80050da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e6:	2b40      	cmp	r3, #64	@ 0x40
 80050e8:	f040 80b6 	bne.w	8005258 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 8145 	beq.w	800538c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800510a:	429a      	cmp	r2, r3
 800510c:	f080 813e 	bcs.w	800538c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005116:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005122:	f000 8088 	beq.w	8005236 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	330c      	adds	r3, #12
 800512c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005130:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800513c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005140:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005144:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	330c      	adds	r3, #12
 800514e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005152:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005156:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800515e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800516a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1d9      	bne.n	8005126 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3314      	adds	r3, #20
 8005178:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800517c:	e853 3f00 	ldrex	r3, [r3]
 8005180:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005182:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005184:	f023 0301 	bic.w	r3, r3, #1
 8005188:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3314      	adds	r3, #20
 8005192:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005196:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800519a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800519e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80051a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e1      	bne.n	8005172 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3314      	adds	r3, #20
 80051b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80051be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3314      	adds	r3, #20
 80051ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80051d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80051d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80051da:	e841 2300 	strex	r3, r2, [r1]
 80051de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80051e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1e3      	bne.n	80051ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	330c      	adds	r3, #12
 80051fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051fe:	e853 3f00 	ldrex	r3, [r3]
 8005202:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005204:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005206:	f023 0310 	bic.w	r3, r3, #16
 800520a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	330c      	adds	r3, #12
 8005214:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005218:	65ba      	str	r2, [r7, #88]	@ 0x58
 800521a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800521e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005220:	e841 2300 	strex	r3, r2, [r1]
 8005224:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005226:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1e3      	bne.n	80051f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005230:	4618      	mov	r0, r3
 8005232:	f7fd fd53 	bl	8002cdc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2202      	movs	r2, #2
 800523a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005244:	b29b      	uxth	r3, r3
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	b29b      	uxth	r3, r3
 800524a:	4619      	mov	r1, r3
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7fb fe31 	bl	8000eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005252:	e09b      	b.n	800538c <HAL_UART_IRQHandler+0x518>
 8005254:	080058d3 	.word	0x080058d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005260:	b29b      	uxth	r3, r3
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 808e 	beq.w	8005390 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005274:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 8089 	beq.w	8005390 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	330c      	adds	r3, #12
 8005284:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800528e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005290:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005294:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	330c      	adds	r3, #12
 800529e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80052a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80052a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1e3      	bne.n	800527e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3314      	adds	r3, #20
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	623b      	str	r3, [r7, #32]
   return(result);
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	f023 0301 	bic.w	r3, r3, #1
 80052cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3314      	adds	r3, #20
 80052d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80052da:	633a      	str	r2, [r7, #48]	@ 0x30
 80052dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e3      	bne.n	80052b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	330c      	adds	r3, #12
 8005302:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	e853 3f00 	ldrex	r3, [r3]
 800530a:	60fb      	str	r3, [r7, #12]
   return(result);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0310 	bic.w	r3, r3, #16
 8005312:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	330c      	adds	r3, #12
 800531c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005320:	61fa      	str	r2, [r7, #28]
 8005322:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	69b9      	ldr	r1, [r7, #24]
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	617b      	str	r3, [r7, #20]
   return(result);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e3      	bne.n	80052fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800533a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800533e:	4619      	mov	r1, r3
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7fb fdb7 	bl	8000eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005346:	e023      	b.n	8005390 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800534c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005350:	2b00      	cmp	r3, #0
 8005352:	d009      	beq.n	8005368 <HAL_UART_IRQHandler+0x4f4>
 8005354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 faca 	bl	80058fa <UART_Transmit_IT>
    return;
 8005366:	e014      	b.n	8005392 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800536c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00e      	beq.n	8005392 <HAL_UART_IRQHandler+0x51e>
 8005374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800537c:	2b00      	cmp	r3, #0
 800537e:	d008      	beq.n	8005392 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 fb0a 	bl	800599a <UART_EndTransmit_IT>
    return;
 8005386:	e004      	b.n	8005392 <HAL_UART_IRQHandler+0x51e>
    return;
 8005388:	bf00      	nop
 800538a:	e002      	b.n	8005392 <HAL_UART_IRQHandler+0x51e>
      return;
 800538c:	bf00      	nop
 800538e:	e000      	b.n	8005392 <HAL_UART_IRQHandler+0x51e>
      return;
 8005390:	bf00      	nop
  }
}
 8005392:	37e8      	adds	r7, #232	@ 0xe8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b090      	sub	sp, #64	@ 0x40
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d137      	bne.n	8005460 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80053f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053f2:	2200      	movs	r2, #0
 80053f4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80053f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3314      	adds	r3, #20
 80053fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005400:	e853 3f00 	ldrex	r3, [r3]
 8005404:	623b      	str	r3, [r7, #32]
   return(result);
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800540c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800540e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3314      	adds	r3, #20
 8005414:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005416:	633a      	str	r2, [r7, #48]	@ 0x30
 8005418:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800541c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e5      	bne.n	80053f6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800542a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	330c      	adds	r3, #12
 8005430:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	60fb      	str	r3, [r7, #12]
   return(result);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005440:	637b      	str	r3, [r7, #52]	@ 0x34
 8005442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	330c      	adds	r3, #12
 8005448:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800544a:	61fa      	str	r2, [r7, #28]
 800544c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	69b9      	ldr	r1, [r7, #24]
 8005450:	69fa      	ldr	r2, [r7, #28]
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	617b      	str	r3, [r7, #20]
   return(result);
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e5      	bne.n	800542a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800545e:	e002      	b.n	8005466 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005460:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005462:	f7fb fd4f 	bl	8000f04 <HAL_UART_TxCpltCallback>
}
 8005466:	bf00      	nop
 8005468:	3740      	adds	r7, #64	@ 0x40
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f7ff ff8b 	bl	8005398 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b09c      	sub	sp, #112	@ 0x70
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005496:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d172      	bne.n	800558c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80054a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054a8:	2200      	movs	r2, #0
 80054aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	330c      	adds	r3, #12
 80054b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054b6:	e853 3f00 	ldrex	r3, [r3]
 80054ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	330c      	adds	r3, #12
 80054ca:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80054cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80054ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054d4:	e841 2300 	strex	r3, r2, [r1]
 80054d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1e5      	bne.n	80054ac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3314      	adds	r3, #20
 80054e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ea:	e853 3f00 	ldrex	r3, [r3]
 80054ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f2:	f023 0301 	bic.w	r3, r3, #1
 80054f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80054f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3314      	adds	r3, #20
 80054fe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005500:	647a      	str	r2, [r7, #68]	@ 0x44
 8005502:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005504:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005506:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005508:	e841 2300 	strex	r3, r2, [r1]
 800550c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800550e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e5      	bne.n	80054e0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005514:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3314      	adds	r3, #20
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	e853 3f00 	ldrex	r3, [r3]
 8005522:	623b      	str	r3, [r7, #32]
   return(result);
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800552a:	663b      	str	r3, [r7, #96]	@ 0x60
 800552c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3314      	adds	r3, #20
 8005532:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005534:	633a      	str	r2, [r7, #48]	@ 0x30
 8005536:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800553a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e5      	bne.n	8005514 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005548:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800554a:	2220      	movs	r2, #32
 800554c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005550:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005554:	2b01      	cmp	r3, #1
 8005556:	d119      	bne.n	800558c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005558:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	330c      	adds	r3, #12
 800555e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	e853 3f00 	ldrex	r3, [r3]
 8005566:	60fb      	str	r3, [r7, #12]
   return(result);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0310 	bic.w	r3, r3, #16
 800556e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005570:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	330c      	adds	r3, #12
 8005576:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005578:	61fa      	str	r2, [r7, #28]
 800557a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557c:	69b9      	ldr	r1, [r7, #24]
 800557e:	69fa      	ldr	r2, [r7, #28]
 8005580:	e841 2300 	strex	r3, r2, [r1]
 8005584:	617b      	str	r3, [r7, #20]
   return(result);
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e5      	bne.n	8005558 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800558c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800558e:	2200      	movs	r2, #0
 8005590:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005592:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005596:	2b01      	cmp	r3, #1
 8005598:	d106      	bne.n	80055a8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800559a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800559c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800559e:	4619      	mov	r1, r3
 80055a0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80055a2:	f7fb fc87 	bl	8000eb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055a6:	e002      	b.n	80055ae <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80055a8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80055aa:	f7fb fcc1 	bl	8000f30 <HAL_UART_RxCpltCallback>
}
 80055ae:	bf00      	nop
 80055b0:	3770      	adds	r7, #112	@ 0x70
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2201      	movs	r2, #1
 80055c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d108      	bne.n	80055e4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055d6:	085b      	lsrs	r3, r3, #1
 80055d8:	b29b      	uxth	r3, r3
 80055da:	4619      	mov	r1, r3
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f7fb fc69 	bl	8000eb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055e2:	e002      	b.n	80055ea <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff fee1 	bl	80053ac <HAL_UART_RxHalfCpltCallback>
}
 80055ea:	bf00      	nop
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005602:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800560e:	2b80      	cmp	r3, #128	@ 0x80
 8005610:	bf0c      	ite	eq
 8005612:	2301      	moveq	r3, #1
 8005614:	2300      	movne	r3, #0
 8005616:	b2db      	uxtb	r3, r3
 8005618:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b21      	cmp	r3, #33	@ 0x21
 8005624:	d108      	bne.n	8005638 <UART_DMAError+0x46>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2200      	movs	r2, #0
 8005630:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005632:	68b8      	ldr	r0, [r7, #8]
 8005634:	f000 f8c2 	bl	80057bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005642:	2b40      	cmp	r3, #64	@ 0x40
 8005644:	bf0c      	ite	eq
 8005646:	2301      	moveq	r3, #1
 8005648:	2300      	movne	r3, #0
 800564a:	b2db      	uxtb	r3, r3
 800564c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b22      	cmp	r3, #34	@ 0x22
 8005658:	d108      	bne.n	800566c <UART_DMAError+0x7a>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d005      	beq.n	800566c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2200      	movs	r2, #0
 8005664:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005666:	68b8      	ldr	r0, [r7, #8]
 8005668:	f000 f8d0 	bl	800580c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005670:	f043 0210 	orr.w	r2, r3, #16
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005678:	68b8      	ldr	r0, [r7, #8]
 800567a:	f7ff fea1 	bl	80053c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800567e:	bf00      	nop
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b098      	sub	sp, #96	@ 0x60
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	4613      	mov	r3, r2
 8005694:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	88fa      	ldrh	r2, [r7, #6]
 80056a0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2222      	movs	r2, #34	@ 0x22
 80056ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b4:	4a3e      	ldr	r2, [pc, #248]	@ (80057b0 <UART_Start_Receive_DMA+0x128>)
 80056b6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056bc:	4a3d      	ldr	r2, [pc, #244]	@ (80057b4 <UART_Start_Receive_DMA+0x12c>)
 80056be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c4:	4a3c      	ldr	r2, [pc, #240]	@ (80057b8 <UART_Start_Receive_DMA+0x130>)
 80056c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056cc:	2200      	movs	r2, #0
 80056ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80056d0:	f107 0308 	add.w	r3, r7, #8
 80056d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3304      	adds	r3, #4
 80056e0:	4619      	mov	r1, r3
 80056e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	88fb      	ldrh	r3, [r7, #6]
 80056e8:	f7fd faa0 	bl	8002c2c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80056ec:	2300      	movs	r3, #0
 80056ee:	613b      	str	r3, [r7, #16]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	613b      	str	r3, [r7, #16]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	613b      	str	r3, [r7, #16]
 8005700:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d019      	beq.n	800573e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	330c      	adds	r3, #12
 8005710:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800571a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800571c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005720:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	330c      	adds	r3, #12
 8005728:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800572a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800572c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005730:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005732:	e841 2300 	strex	r3, r2, [r1]
 8005736:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1e5      	bne.n	800570a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3314      	adds	r3, #20
 8005744:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800574e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005750:	f043 0301 	orr.w	r3, r3, #1
 8005754:	657b      	str	r3, [r7, #84]	@ 0x54
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3314      	adds	r3, #20
 800575c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800575e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005760:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005764:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800576c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e5      	bne.n	800573e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3314      	adds	r3, #20
 8005778:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	617b      	str	r3, [r7, #20]
   return(result);
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005788:	653b      	str	r3, [r7, #80]	@ 0x50
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3314      	adds	r3, #20
 8005790:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005792:	627a      	str	r2, [r7, #36]	@ 0x24
 8005794:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	6a39      	ldr	r1, [r7, #32]
 8005798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800579a:	e841 2300 	strex	r3, r2, [r1]
 800579e:	61fb      	str	r3, [r7, #28]
   return(result);
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e5      	bne.n	8005772 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3760      	adds	r7, #96	@ 0x60
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	0800548b 	.word	0x0800548b
 80057b4:	080055b7 	.word	0x080055b7
 80057b8:	080055f3 	.word	0x080055f3

080057bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80057bc:	b480      	push	{r7}
 80057be:	b089      	sub	sp, #36	@ 0x24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	330c      	adds	r3, #12
 80057ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80057da:	61fb      	str	r3, [r7, #28]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	330c      	adds	r3, #12
 80057e2:	69fa      	ldr	r2, [r7, #28]
 80057e4:	61ba      	str	r2, [r7, #24]
 80057e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	6979      	ldr	r1, [r7, #20]
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	613b      	str	r3, [r7, #16]
   return(result);
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e5      	bne.n	80057c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005800:	bf00      	nop
 8005802:	3724      	adds	r7, #36	@ 0x24
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800580c:	b480      	push	{r7}
 800580e:	b095      	sub	sp, #84	@ 0x54
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	330c      	adds	r3, #12
 800581a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005826:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800582a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	330c      	adds	r3, #12
 8005832:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005834:	643a      	str	r2, [r7, #64]	@ 0x40
 8005836:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800583a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e5      	bne.n	8005814 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3314      	adds	r3, #20
 800584e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	61fb      	str	r3, [r7, #28]
   return(result);
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	f023 0301 	bic.w	r3, r3, #1
 800585e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3314      	adds	r3, #20
 8005866:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005868:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800586a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800586e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e5      	bne.n	8005848 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005880:	2b01      	cmp	r3, #1
 8005882:	d119      	bne.n	80058b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	330c      	adds	r3, #12
 800588a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	60bb      	str	r3, [r7, #8]
   return(result);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f023 0310 	bic.w	r3, r3, #16
 800589a:	647b      	str	r3, [r7, #68]	@ 0x44
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	330c      	adds	r3, #12
 80058a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058a4:	61ba      	str	r2, [r7, #24]
 80058a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a8:	6979      	ldr	r1, [r7, #20]
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	e841 2300 	strex	r3, r2, [r1]
 80058b0:	613b      	str	r3, [r7, #16]
   return(result);
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e5      	bne.n	8005884 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058c6:	bf00      	nop
 80058c8:	3754      	adds	r7, #84	@ 0x54
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f7ff fd67 	bl	80053c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f2:	bf00      	nop
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b21      	cmp	r3, #33	@ 0x21
 800590c:	d13e      	bne.n	800598c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005916:	d114      	bne.n	8005942 <UART_Transmit_IT+0x48>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d110      	bne.n	8005942 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005934:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	1c9a      	adds	r2, r3, #2
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	621a      	str	r2, [r3, #32]
 8005940:	e008      	b.n	8005954 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	1c59      	adds	r1, r3, #1
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	6211      	str	r1, [r2, #32]
 800594c:	781a      	ldrb	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005958:	b29b      	uxth	r3, r3
 800595a:	3b01      	subs	r3, #1
 800595c:	b29b      	uxth	r3, r3
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	4619      	mov	r1, r3
 8005962:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10f      	bne.n	8005988 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005976:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005986:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005988:	2300      	movs	r3, #0
 800598a:	e000      	b.n	800598e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800598c:	2302      	movs	r3, #2
  }
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68da      	ldr	r2, [r3, #12]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fb faa2 	bl	8000f04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b08c      	sub	sp, #48	@ 0x30
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b22      	cmp	r3, #34	@ 0x22
 80059dc:	f040 80ae 	bne.w	8005b3c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059e8:	d117      	bne.n	8005a1a <UART_Receive_IT+0x50>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d113      	bne.n	8005a1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059f2:	2300      	movs	r3, #0
 80059f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a12:	1c9a      	adds	r2, r3, #2
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a18:	e026      	b.n	8005a68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a2c:	d007      	beq.n	8005a3e <UART_Receive_IT+0x74>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10a      	bne.n	8005a4c <UART_Receive_IT+0x82>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a48:	701a      	strb	r2, [r3, #0]
 8005a4a:	e008      	b.n	8005a5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	4619      	mov	r1, r3
 8005a76:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d15d      	bne.n	8005b38 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0220 	bic.w	r2, r2, #32
 8005a8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695a      	ldr	r2, [r3, #20]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0201 	bic.w	r2, r2, #1
 8005aaa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d135      	bne.n	8005b2e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	330c      	adds	r3, #12
 8005ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f023 0310 	bic.w	r3, r3, #16
 8005ade:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	330c      	adds	r3, #12
 8005ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ae8:	623a      	str	r2, [r7, #32]
 8005aea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	69f9      	ldr	r1, [r7, #28]
 8005aee:	6a3a      	ldr	r2, [r7, #32]
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e5      	bne.n	8005ac8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	2b10      	cmp	r3, #16
 8005b08:	d10a      	bne.n	8005b20 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7fb f9c4 	bl	8000eb4 <HAL_UARTEx_RxEventCallback>
 8005b2c:	e002      	b.n	8005b34 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fb f9fe 	bl	8000f30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	e002      	b.n	8005b3e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	e000      	b.n	8005b3e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b3c:	2302      	movs	r3, #2
  }
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3730      	adds	r7, #48	@ 0x30
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
	...

08005b48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b4c:	b0c0      	sub	sp, #256	@ 0x100
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b64:	68d9      	ldr	r1, [r3, #12]
 8005b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	ea40 0301 	orr.w	r3, r0, r1
 8005b70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	431a      	orrs	r2, r3
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ba0:	f021 010c 	bic.w	r1, r1, #12
 8005ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005bae:	430b      	orrs	r3, r1
 8005bb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc2:	6999      	ldr	r1, [r3, #24]
 8005bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	ea40 0301 	orr.w	r3, r0, r1
 8005bce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	4b8f      	ldr	r3, [pc, #572]	@ (8005e14 <UART_SetConfig+0x2cc>)
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d005      	beq.n	8005be8 <UART_SetConfig+0xa0>
 8005bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	4b8d      	ldr	r3, [pc, #564]	@ (8005e18 <UART_SetConfig+0x2d0>)
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d104      	bne.n	8005bf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005be8:	f7fe fa00 	bl	8003fec <HAL_RCC_GetPCLK2Freq>
 8005bec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005bf0:	e003      	b.n	8005bfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bf2:	f7fe f9e7 	bl	8003fc4 <HAL_RCC_GetPCLK1Freq>
 8005bf6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c04:	f040 810c 	bne.w	8005e20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c1a:	4622      	mov	r2, r4
 8005c1c:	462b      	mov	r3, r5
 8005c1e:	1891      	adds	r1, r2, r2
 8005c20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c22:	415b      	adcs	r3, r3
 8005c24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c2a:	4621      	mov	r1, r4
 8005c2c:	eb12 0801 	adds.w	r8, r2, r1
 8005c30:	4629      	mov	r1, r5
 8005c32:	eb43 0901 	adc.w	r9, r3, r1
 8005c36:	f04f 0200 	mov.w	r2, #0
 8005c3a:	f04f 0300 	mov.w	r3, #0
 8005c3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c4a:	4690      	mov	r8, r2
 8005c4c:	4699      	mov	r9, r3
 8005c4e:	4623      	mov	r3, r4
 8005c50:	eb18 0303 	adds.w	r3, r8, r3
 8005c54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c58:	462b      	mov	r3, r5
 8005c5a:	eb49 0303 	adc.w	r3, r9, r3
 8005c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c76:	460b      	mov	r3, r1
 8005c78:	18db      	adds	r3, r3, r3
 8005c7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	eb42 0303 	adc.w	r3, r2, r3
 8005c82:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c8c:	f7fa fb00 	bl	8000290 <__aeabi_uldivmod>
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	4b61      	ldr	r3, [pc, #388]	@ (8005e1c <UART_SetConfig+0x2d4>)
 8005c96:	fba3 2302 	umull	r2, r3, r3, r2
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	011c      	lsls	r4, r3, #4
 8005c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ca8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005cac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005cb0:	4642      	mov	r2, r8
 8005cb2:	464b      	mov	r3, r9
 8005cb4:	1891      	adds	r1, r2, r2
 8005cb6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005cb8:	415b      	adcs	r3, r3
 8005cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005cc0:	4641      	mov	r1, r8
 8005cc2:	eb12 0a01 	adds.w	sl, r2, r1
 8005cc6:	4649      	mov	r1, r9
 8005cc8:	eb43 0b01 	adc.w	fp, r3, r1
 8005ccc:	f04f 0200 	mov.w	r2, #0
 8005cd0:	f04f 0300 	mov.w	r3, #0
 8005cd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ce0:	4692      	mov	sl, r2
 8005ce2:	469b      	mov	fp, r3
 8005ce4:	4643      	mov	r3, r8
 8005ce6:	eb1a 0303 	adds.w	r3, sl, r3
 8005cea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cee:	464b      	mov	r3, r9
 8005cf0:	eb4b 0303 	adc.w	r3, fp, r3
 8005cf4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d04:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	18db      	adds	r3, r3, r3
 8005d10:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d12:	4613      	mov	r3, r2
 8005d14:	eb42 0303 	adc.w	r3, r2, r3
 8005d18:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d22:	f7fa fab5 	bl	8000290 <__aeabi_uldivmod>
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	4611      	mov	r1, r2
 8005d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e1c <UART_SetConfig+0x2d4>)
 8005d2e:	fba3 2301 	umull	r2, r3, r3, r1
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	2264      	movs	r2, #100	@ 0x64
 8005d36:	fb02 f303 	mul.w	r3, r2, r3
 8005d3a:	1acb      	subs	r3, r1, r3
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d42:	4b36      	ldr	r3, [pc, #216]	@ (8005e1c <UART_SetConfig+0x2d4>)
 8005d44:	fba3 2302 	umull	r2, r3, r3, r2
 8005d48:	095b      	lsrs	r3, r3, #5
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d50:	441c      	add	r4, r3
 8005d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005d60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d64:	4642      	mov	r2, r8
 8005d66:	464b      	mov	r3, r9
 8005d68:	1891      	adds	r1, r2, r2
 8005d6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d6c:	415b      	adcs	r3, r3
 8005d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d74:	4641      	mov	r1, r8
 8005d76:	1851      	adds	r1, r2, r1
 8005d78:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d7a:	4649      	mov	r1, r9
 8005d7c:	414b      	adcs	r3, r1
 8005d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d8c:	4659      	mov	r1, fp
 8005d8e:	00cb      	lsls	r3, r1, #3
 8005d90:	4651      	mov	r1, sl
 8005d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d96:	4651      	mov	r1, sl
 8005d98:	00ca      	lsls	r2, r1, #3
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4603      	mov	r3, r0
 8005da0:	4642      	mov	r2, r8
 8005da2:	189b      	adds	r3, r3, r2
 8005da4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005da8:	464b      	mov	r3, r9
 8005daa:	460a      	mov	r2, r1
 8005dac:	eb42 0303 	adc.w	r3, r2, r3
 8005db0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005dc0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005dc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005dc8:	460b      	mov	r3, r1
 8005dca:	18db      	adds	r3, r3, r3
 8005dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dce:	4613      	mov	r3, r2
 8005dd0:	eb42 0303 	adc.w	r3, r2, r3
 8005dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005dda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005dde:	f7fa fa57 	bl	8000290 <__aeabi_uldivmod>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4b0d      	ldr	r3, [pc, #52]	@ (8005e1c <UART_SetConfig+0x2d4>)
 8005de8:	fba3 1302 	umull	r1, r3, r3, r2
 8005dec:	095b      	lsrs	r3, r3, #5
 8005dee:	2164      	movs	r1, #100	@ 0x64
 8005df0:	fb01 f303 	mul.w	r3, r1, r3
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	3332      	adds	r3, #50	@ 0x32
 8005dfa:	4a08      	ldr	r2, [pc, #32]	@ (8005e1c <UART_SetConfig+0x2d4>)
 8005dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005e00:	095b      	lsrs	r3, r3, #5
 8005e02:	f003 0207 	and.w	r2, r3, #7
 8005e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4422      	add	r2, r4
 8005e0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e10:	e106      	b.n	8006020 <UART_SetConfig+0x4d8>
 8005e12:	bf00      	nop
 8005e14:	40011000 	.word	0x40011000
 8005e18:	40011400 	.word	0x40011400
 8005e1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e32:	4642      	mov	r2, r8
 8005e34:	464b      	mov	r3, r9
 8005e36:	1891      	adds	r1, r2, r2
 8005e38:	6239      	str	r1, [r7, #32]
 8005e3a:	415b      	adcs	r3, r3
 8005e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e42:	4641      	mov	r1, r8
 8005e44:	1854      	adds	r4, r2, r1
 8005e46:	4649      	mov	r1, r9
 8005e48:	eb43 0501 	adc.w	r5, r3, r1
 8005e4c:	f04f 0200 	mov.w	r2, #0
 8005e50:	f04f 0300 	mov.w	r3, #0
 8005e54:	00eb      	lsls	r3, r5, #3
 8005e56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e5a:	00e2      	lsls	r2, r4, #3
 8005e5c:	4614      	mov	r4, r2
 8005e5e:	461d      	mov	r5, r3
 8005e60:	4643      	mov	r3, r8
 8005e62:	18e3      	adds	r3, r4, r3
 8005e64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e68:	464b      	mov	r3, r9
 8005e6a:	eb45 0303 	adc.w	r3, r5, r3
 8005e6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e82:	f04f 0200 	mov.w	r2, #0
 8005e86:	f04f 0300 	mov.w	r3, #0
 8005e8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e8e:	4629      	mov	r1, r5
 8005e90:	008b      	lsls	r3, r1, #2
 8005e92:	4621      	mov	r1, r4
 8005e94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e98:	4621      	mov	r1, r4
 8005e9a:	008a      	lsls	r2, r1, #2
 8005e9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ea0:	f7fa f9f6 	bl	8000290 <__aeabi_uldivmod>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4b60      	ldr	r3, [pc, #384]	@ (800602c <UART_SetConfig+0x4e4>)
 8005eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8005eae:	095b      	lsrs	r3, r3, #5
 8005eb0:	011c      	lsls	r4, r3, #4
 8005eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ebc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ec0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005ec4:	4642      	mov	r2, r8
 8005ec6:	464b      	mov	r3, r9
 8005ec8:	1891      	adds	r1, r2, r2
 8005eca:	61b9      	str	r1, [r7, #24]
 8005ecc:	415b      	adcs	r3, r3
 8005ece:	61fb      	str	r3, [r7, #28]
 8005ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ed4:	4641      	mov	r1, r8
 8005ed6:	1851      	adds	r1, r2, r1
 8005ed8:	6139      	str	r1, [r7, #16]
 8005eda:	4649      	mov	r1, r9
 8005edc:	414b      	adcs	r3, r1
 8005ede:	617b      	str	r3, [r7, #20]
 8005ee0:	f04f 0200 	mov.w	r2, #0
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005eec:	4659      	mov	r1, fp
 8005eee:	00cb      	lsls	r3, r1, #3
 8005ef0:	4651      	mov	r1, sl
 8005ef2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ef6:	4651      	mov	r1, sl
 8005ef8:	00ca      	lsls	r2, r1, #3
 8005efa:	4610      	mov	r0, r2
 8005efc:	4619      	mov	r1, r3
 8005efe:	4603      	mov	r3, r0
 8005f00:	4642      	mov	r2, r8
 8005f02:	189b      	adds	r3, r3, r2
 8005f04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f08:	464b      	mov	r3, r9
 8005f0a:	460a      	mov	r2, r1
 8005f0c:	eb42 0303 	adc.w	r3, r2, r3
 8005f10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f1e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	f04f 0300 	mov.w	r3, #0
 8005f28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	008b      	lsls	r3, r1, #2
 8005f30:	4641      	mov	r1, r8
 8005f32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f36:	4641      	mov	r1, r8
 8005f38:	008a      	lsls	r2, r1, #2
 8005f3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005f3e:	f7fa f9a7 	bl	8000290 <__aeabi_uldivmod>
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	4611      	mov	r1, r2
 8005f48:	4b38      	ldr	r3, [pc, #224]	@ (800602c <UART_SetConfig+0x4e4>)
 8005f4a:	fba3 2301 	umull	r2, r3, r3, r1
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	2264      	movs	r2, #100	@ 0x64
 8005f52:	fb02 f303 	mul.w	r3, r2, r3
 8005f56:	1acb      	subs	r3, r1, r3
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	3332      	adds	r3, #50	@ 0x32
 8005f5c:	4a33      	ldr	r2, [pc, #204]	@ (800602c <UART_SetConfig+0x4e4>)
 8005f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f62:	095b      	lsrs	r3, r3, #5
 8005f64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f68:	441c      	add	r4, r3
 8005f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f6e:	2200      	movs	r2, #0
 8005f70:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f72:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f78:	4642      	mov	r2, r8
 8005f7a:	464b      	mov	r3, r9
 8005f7c:	1891      	adds	r1, r2, r2
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	415b      	adcs	r3, r3
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f88:	4641      	mov	r1, r8
 8005f8a:	1851      	adds	r1, r2, r1
 8005f8c:	6039      	str	r1, [r7, #0]
 8005f8e:	4649      	mov	r1, r9
 8005f90:	414b      	adcs	r3, r1
 8005f92:	607b      	str	r3, [r7, #4]
 8005f94:	f04f 0200 	mov.w	r2, #0
 8005f98:	f04f 0300 	mov.w	r3, #0
 8005f9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fa0:	4659      	mov	r1, fp
 8005fa2:	00cb      	lsls	r3, r1, #3
 8005fa4:	4651      	mov	r1, sl
 8005fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005faa:	4651      	mov	r1, sl
 8005fac:	00ca      	lsls	r2, r1, #3
 8005fae:	4610      	mov	r0, r2
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	4642      	mov	r2, r8
 8005fb6:	189b      	adds	r3, r3, r2
 8005fb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fba:	464b      	mov	r3, r9
 8005fbc:	460a      	mov	r2, r1
 8005fbe:	eb42 0303 	adc.w	r3, r2, r3
 8005fc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fce:	667a      	str	r2, [r7, #100]	@ 0x64
 8005fd0:	f04f 0200 	mov.w	r2, #0
 8005fd4:	f04f 0300 	mov.w	r3, #0
 8005fd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005fdc:	4649      	mov	r1, r9
 8005fde:	008b      	lsls	r3, r1, #2
 8005fe0:	4641      	mov	r1, r8
 8005fe2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fe6:	4641      	mov	r1, r8
 8005fe8:	008a      	lsls	r2, r1, #2
 8005fea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005fee:	f7fa f94f 	bl	8000290 <__aeabi_uldivmod>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800602c <UART_SetConfig+0x4e4>)
 8005ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ffc:	095b      	lsrs	r3, r3, #5
 8005ffe:	2164      	movs	r1, #100	@ 0x64
 8006000:	fb01 f303 	mul.w	r3, r1, r3
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	011b      	lsls	r3, r3, #4
 8006008:	3332      	adds	r3, #50	@ 0x32
 800600a:	4a08      	ldr	r2, [pc, #32]	@ (800602c <UART_SetConfig+0x4e4>)
 800600c:	fba2 2303 	umull	r2, r3, r2, r3
 8006010:	095b      	lsrs	r3, r3, #5
 8006012:	f003 020f 	and.w	r2, r3, #15
 8006016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4422      	add	r2, r4
 800601e:	609a      	str	r2, [r3, #8]
}
 8006020:	bf00      	nop
 8006022:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006026:	46bd      	mov	sp, r7
 8006028:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800602c:	51eb851f 	.word	0x51eb851f

08006030 <sniprintf>:
 8006030:	b40c      	push	{r2, r3}
 8006032:	b530      	push	{r4, r5, lr}
 8006034:	4b17      	ldr	r3, [pc, #92]	@ (8006094 <sniprintf+0x64>)
 8006036:	1e0c      	subs	r4, r1, #0
 8006038:	681d      	ldr	r5, [r3, #0]
 800603a:	b09d      	sub	sp, #116	@ 0x74
 800603c:	da08      	bge.n	8006050 <sniprintf+0x20>
 800603e:	238b      	movs	r3, #139	@ 0x8b
 8006040:	602b      	str	r3, [r5, #0]
 8006042:	f04f 30ff 	mov.w	r0, #4294967295
 8006046:	b01d      	add	sp, #116	@ 0x74
 8006048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800604c:	b002      	add	sp, #8
 800604e:	4770      	bx	lr
 8006050:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006054:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006058:	bf14      	ite	ne
 800605a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800605e:	4623      	moveq	r3, r4
 8006060:	9304      	str	r3, [sp, #16]
 8006062:	9307      	str	r3, [sp, #28]
 8006064:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006068:	9002      	str	r0, [sp, #8]
 800606a:	9006      	str	r0, [sp, #24]
 800606c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006070:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006072:	ab21      	add	r3, sp, #132	@ 0x84
 8006074:	a902      	add	r1, sp, #8
 8006076:	4628      	mov	r0, r5
 8006078:	9301      	str	r3, [sp, #4]
 800607a:	f000 f9cf 	bl	800641c <_svfiprintf_r>
 800607e:	1c43      	adds	r3, r0, #1
 8006080:	bfbc      	itt	lt
 8006082:	238b      	movlt	r3, #139	@ 0x8b
 8006084:	602b      	strlt	r3, [r5, #0]
 8006086:	2c00      	cmp	r4, #0
 8006088:	d0dd      	beq.n	8006046 <sniprintf+0x16>
 800608a:	9b02      	ldr	r3, [sp, #8]
 800608c:	2200      	movs	r2, #0
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	e7d9      	b.n	8006046 <sniprintf+0x16>
 8006092:	bf00      	nop
 8006094:	20000010 	.word	0x20000010

08006098 <_vsniprintf_r>:
 8006098:	b530      	push	{r4, r5, lr}
 800609a:	4614      	mov	r4, r2
 800609c:	2c00      	cmp	r4, #0
 800609e:	b09b      	sub	sp, #108	@ 0x6c
 80060a0:	4605      	mov	r5, r0
 80060a2:	461a      	mov	r2, r3
 80060a4:	da05      	bge.n	80060b2 <_vsniprintf_r+0x1a>
 80060a6:	238b      	movs	r3, #139	@ 0x8b
 80060a8:	6003      	str	r3, [r0, #0]
 80060aa:	f04f 30ff 	mov.w	r0, #4294967295
 80060ae:	b01b      	add	sp, #108	@ 0x6c
 80060b0:	bd30      	pop	{r4, r5, pc}
 80060b2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80060b6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80060ba:	bf14      	ite	ne
 80060bc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80060c0:	4623      	moveq	r3, r4
 80060c2:	9302      	str	r3, [sp, #8]
 80060c4:	9305      	str	r3, [sp, #20]
 80060c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80060ca:	9100      	str	r1, [sp, #0]
 80060cc:	9104      	str	r1, [sp, #16]
 80060ce:	f8ad 300e 	strh.w	r3, [sp, #14]
 80060d2:	4669      	mov	r1, sp
 80060d4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80060d6:	f000 f9a1 	bl	800641c <_svfiprintf_r>
 80060da:	1c43      	adds	r3, r0, #1
 80060dc:	bfbc      	itt	lt
 80060de:	238b      	movlt	r3, #139	@ 0x8b
 80060e0:	602b      	strlt	r3, [r5, #0]
 80060e2:	2c00      	cmp	r4, #0
 80060e4:	d0e3      	beq.n	80060ae <_vsniprintf_r+0x16>
 80060e6:	9b00      	ldr	r3, [sp, #0]
 80060e8:	2200      	movs	r2, #0
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	e7df      	b.n	80060ae <_vsniprintf_r+0x16>
	...

080060f0 <vsniprintf>:
 80060f0:	b507      	push	{r0, r1, r2, lr}
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	4613      	mov	r3, r2
 80060f6:	460a      	mov	r2, r1
 80060f8:	4601      	mov	r1, r0
 80060fa:	4803      	ldr	r0, [pc, #12]	@ (8006108 <vsniprintf+0x18>)
 80060fc:	6800      	ldr	r0, [r0, #0]
 80060fe:	f7ff ffcb 	bl	8006098 <_vsniprintf_r>
 8006102:	b003      	add	sp, #12
 8006104:	f85d fb04 	ldr.w	pc, [sp], #4
 8006108:	20000010 	.word	0x20000010

0800610c <memset>:
 800610c:	4402      	add	r2, r0
 800610e:	4603      	mov	r3, r0
 8006110:	4293      	cmp	r3, r2
 8006112:	d100      	bne.n	8006116 <memset+0xa>
 8006114:	4770      	bx	lr
 8006116:	f803 1b01 	strb.w	r1, [r3], #1
 800611a:	e7f9      	b.n	8006110 <memset+0x4>

0800611c <__errno>:
 800611c:	4b01      	ldr	r3, [pc, #4]	@ (8006124 <__errno+0x8>)
 800611e:	6818      	ldr	r0, [r3, #0]
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	20000010 	.word	0x20000010

08006128 <__libc_init_array>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	4d0d      	ldr	r5, [pc, #52]	@ (8006160 <__libc_init_array+0x38>)
 800612c:	4c0d      	ldr	r4, [pc, #52]	@ (8006164 <__libc_init_array+0x3c>)
 800612e:	1b64      	subs	r4, r4, r5
 8006130:	10a4      	asrs	r4, r4, #2
 8006132:	2600      	movs	r6, #0
 8006134:	42a6      	cmp	r6, r4
 8006136:	d109      	bne.n	800614c <__libc_init_array+0x24>
 8006138:	4d0b      	ldr	r5, [pc, #44]	@ (8006168 <__libc_init_array+0x40>)
 800613a:	4c0c      	ldr	r4, [pc, #48]	@ (800616c <__libc_init_array+0x44>)
 800613c:	f000 fc66 	bl	8006a0c <_init>
 8006140:	1b64      	subs	r4, r4, r5
 8006142:	10a4      	asrs	r4, r4, #2
 8006144:	2600      	movs	r6, #0
 8006146:	42a6      	cmp	r6, r4
 8006148:	d105      	bne.n	8006156 <__libc_init_array+0x2e>
 800614a:	bd70      	pop	{r4, r5, r6, pc}
 800614c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006150:	4798      	blx	r3
 8006152:	3601      	adds	r6, #1
 8006154:	e7ee      	b.n	8006134 <__libc_init_array+0xc>
 8006156:	f855 3b04 	ldr.w	r3, [r5], #4
 800615a:	4798      	blx	r3
 800615c:	3601      	adds	r6, #1
 800615e:	e7f2      	b.n	8006146 <__libc_init_array+0x1e>
 8006160:	0800cc14 	.word	0x0800cc14
 8006164:	0800cc14 	.word	0x0800cc14
 8006168:	0800cc14 	.word	0x0800cc14
 800616c:	0800cc18 	.word	0x0800cc18

08006170 <__retarget_lock_acquire_recursive>:
 8006170:	4770      	bx	lr

08006172 <__retarget_lock_release_recursive>:
 8006172:	4770      	bx	lr

08006174 <_free_r>:
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	4605      	mov	r5, r0
 8006178:	2900      	cmp	r1, #0
 800617a:	d041      	beq.n	8006200 <_free_r+0x8c>
 800617c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006180:	1f0c      	subs	r4, r1, #4
 8006182:	2b00      	cmp	r3, #0
 8006184:	bfb8      	it	lt
 8006186:	18e4      	addlt	r4, r4, r3
 8006188:	f000 f8e0 	bl	800634c <__malloc_lock>
 800618c:	4a1d      	ldr	r2, [pc, #116]	@ (8006204 <_free_r+0x90>)
 800618e:	6813      	ldr	r3, [r2, #0]
 8006190:	b933      	cbnz	r3, 80061a0 <_free_r+0x2c>
 8006192:	6063      	str	r3, [r4, #4]
 8006194:	6014      	str	r4, [r2, #0]
 8006196:	4628      	mov	r0, r5
 8006198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800619c:	f000 b8dc 	b.w	8006358 <__malloc_unlock>
 80061a0:	42a3      	cmp	r3, r4
 80061a2:	d908      	bls.n	80061b6 <_free_r+0x42>
 80061a4:	6820      	ldr	r0, [r4, #0]
 80061a6:	1821      	adds	r1, r4, r0
 80061a8:	428b      	cmp	r3, r1
 80061aa:	bf01      	itttt	eq
 80061ac:	6819      	ldreq	r1, [r3, #0]
 80061ae:	685b      	ldreq	r3, [r3, #4]
 80061b0:	1809      	addeq	r1, r1, r0
 80061b2:	6021      	streq	r1, [r4, #0]
 80061b4:	e7ed      	b.n	8006192 <_free_r+0x1e>
 80061b6:	461a      	mov	r2, r3
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	b10b      	cbz	r3, 80061c0 <_free_r+0x4c>
 80061bc:	42a3      	cmp	r3, r4
 80061be:	d9fa      	bls.n	80061b6 <_free_r+0x42>
 80061c0:	6811      	ldr	r1, [r2, #0]
 80061c2:	1850      	adds	r0, r2, r1
 80061c4:	42a0      	cmp	r0, r4
 80061c6:	d10b      	bne.n	80061e0 <_free_r+0x6c>
 80061c8:	6820      	ldr	r0, [r4, #0]
 80061ca:	4401      	add	r1, r0
 80061cc:	1850      	adds	r0, r2, r1
 80061ce:	4283      	cmp	r3, r0
 80061d0:	6011      	str	r1, [r2, #0]
 80061d2:	d1e0      	bne.n	8006196 <_free_r+0x22>
 80061d4:	6818      	ldr	r0, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	6053      	str	r3, [r2, #4]
 80061da:	4408      	add	r0, r1
 80061dc:	6010      	str	r0, [r2, #0]
 80061de:	e7da      	b.n	8006196 <_free_r+0x22>
 80061e0:	d902      	bls.n	80061e8 <_free_r+0x74>
 80061e2:	230c      	movs	r3, #12
 80061e4:	602b      	str	r3, [r5, #0]
 80061e6:	e7d6      	b.n	8006196 <_free_r+0x22>
 80061e8:	6820      	ldr	r0, [r4, #0]
 80061ea:	1821      	adds	r1, r4, r0
 80061ec:	428b      	cmp	r3, r1
 80061ee:	bf04      	itt	eq
 80061f0:	6819      	ldreq	r1, [r3, #0]
 80061f2:	685b      	ldreq	r3, [r3, #4]
 80061f4:	6063      	str	r3, [r4, #4]
 80061f6:	bf04      	itt	eq
 80061f8:	1809      	addeq	r1, r1, r0
 80061fa:	6021      	streq	r1, [r4, #0]
 80061fc:	6054      	str	r4, [r2, #4]
 80061fe:	e7ca      	b.n	8006196 <_free_r+0x22>
 8006200:	bd38      	pop	{r3, r4, r5, pc}
 8006202:	bf00      	nop
 8006204:	20000ea4 	.word	0x20000ea4

08006208 <sbrk_aligned>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	4e0f      	ldr	r6, [pc, #60]	@ (8006248 <sbrk_aligned+0x40>)
 800620c:	460c      	mov	r4, r1
 800620e:	6831      	ldr	r1, [r6, #0]
 8006210:	4605      	mov	r5, r0
 8006212:	b911      	cbnz	r1, 800621a <sbrk_aligned+0x12>
 8006214:	f000 fba6 	bl	8006964 <_sbrk_r>
 8006218:	6030      	str	r0, [r6, #0]
 800621a:	4621      	mov	r1, r4
 800621c:	4628      	mov	r0, r5
 800621e:	f000 fba1 	bl	8006964 <_sbrk_r>
 8006222:	1c43      	adds	r3, r0, #1
 8006224:	d103      	bne.n	800622e <sbrk_aligned+0x26>
 8006226:	f04f 34ff 	mov.w	r4, #4294967295
 800622a:	4620      	mov	r0, r4
 800622c:	bd70      	pop	{r4, r5, r6, pc}
 800622e:	1cc4      	adds	r4, r0, #3
 8006230:	f024 0403 	bic.w	r4, r4, #3
 8006234:	42a0      	cmp	r0, r4
 8006236:	d0f8      	beq.n	800622a <sbrk_aligned+0x22>
 8006238:	1a21      	subs	r1, r4, r0
 800623a:	4628      	mov	r0, r5
 800623c:	f000 fb92 	bl	8006964 <_sbrk_r>
 8006240:	3001      	adds	r0, #1
 8006242:	d1f2      	bne.n	800622a <sbrk_aligned+0x22>
 8006244:	e7ef      	b.n	8006226 <sbrk_aligned+0x1e>
 8006246:	bf00      	nop
 8006248:	20000ea0 	.word	0x20000ea0

0800624c <_malloc_r>:
 800624c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006250:	1ccd      	adds	r5, r1, #3
 8006252:	f025 0503 	bic.w	r5, r5, #3
 8006256:	3508      	adds	r5, #8
 8006258:	2d0c      	cmp	r5, #12
 800625a:	bf38      	it	cc
 800625c:	250c      	movcc	r5, #12
 800625e:	2d00      	cmp	r5, #0
 8006260:	4606      	mov	r6, r0
 8006262:	db01      	blt.n	8006268 <_malloc_r+0x1c>
 8006264:	42a9      	cmp	r1, r5
 8006266:	d904      	bls.n	8006272 <_malloc_r+0x26>
 8006268:	230c      	movs	r3, #12
 800626a:	6033      	str	r3, [r6, #0]
 800626c:	2000      	movs	r0, #0
 800626e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006272:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006348 <_malloc_r+0xfc>
 8006276:	f000 f869 	bl	800634c <__malloc_lock>
 800627a:	f8d8 3000 	ldr.w	r3, [r8]
 800627e:	461c      	mov	r4, r3
 8006280:	bb44      	cbnz	r4, 80062d4 <_malloc_r+0x88>
 8006282:	4629      	mov	r1, r5
 8006284:	4630      	mov	r0, r6
 8006286:	f7ff ffbf 	bl	8006208 <sbrk_aligned>
 800628a:	1c43      	adds	r3, r0, #1
 800628c:	4604      	mov	r4, r0
 800628e:	d158      	bne.n	8006342 <_malloc_r+0xf6>
 8006290:	f8d8 4000 	ldr.w	r4, [r8]
 8006294:	4627      	mov	r7, r4
 8006296:	2f00      	cmp	r7, #0
 8006298:	d143      	bne.n	8006322 <_malloc_r+0xd6>
 800629a:	2c00      	cmp	r4, #0
 800629c:	d04b      	beq.n	8006336 <_malloc_r+0xea>
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	4639      	mov	r1, r7
 80062a2:	4630      	mov	r0, r6
 80062a4:	eb04 0903 	add.w	r9, r4, r3
 80062a8:	f000 fb5c 	bl	8006964 <_sbrk_r>
 80062ac:	4581      	cmp	r9, r0
 80062ae:	d142      	bne.n	8006336 <_malloc_r+0xea>
 80062b0:	6821      	ldr	r1, [r4, #0]
 80062b2:	1a6d      	subs	r5, r5, r1
 80062b4:	4629      	mov	r1, r5
 80062b6:	4630      	mov	r0, r6
 80062b8:	f7ff ffa6 	bl	8006208 <sbrk_aligned>
 80062bc:	3001      	adds	r0, #1
 80062be:	d03a      	beq.n	8006336 <_malloc_r+0xea>
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	442b      	add	r3, r5
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	f8d8 3000 	ldr.w	r3, [r8]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	bb62      	cbnz	r2, 8006328 <_malloc_r+0xdc>
 80062ce:	f8c8 7000 	str.w	r7, [r8]
 80062d2:	e00f      	b.n	80062f4 <_malloc_r+0xa8>
 80062d4:	6822      	ldr	r2, [r4, #0]
 80062d6:	1b52      	subs	r2, r2, r5
 80062d8:	d420      	bmi.n	800631c <_malloc_r+0xd0>
 80062da:	2a0b      	cmp	r2, #11
 80062dc:	d917      	bls.n	800630e <_malloc_r+0xc2>
 80062de:	1961      	adds	r1, r4, r5
 80062e0:	42a3      	cmp	r3, r4
 80062e2:	6025      	str	r5, [r4, #0]
 80062e4:	bf18      	it	ne
 80062e6:	6059      	strne	r1, [r3, #4]
 80062e8:	6863      	ldr	r3, [r4, #4]
 80062ea:	bf08      	it	eq
 80062ec:	f8c8 1000 	streq.w	r1, [r8]
 80062f0:	5162      	str	r2, [r4, r5]
 80062f2:	604b      	str	r3, [r1, #4]
 80062f4:	4630      	mov	r0, r6
 80062f6:	f000 f82f 	bl	8006358 <__malloc_unlock>
 80062fa:	f104 000b 	add.w	r0, r4, #11
 80062fe:	1d23      	adds	r3, r4, #4
 8006300:	f020 0007 	bic.w	r0, r0, #7
 8006304:	1ac2      	subs	r2, r0, r3
 8006306:	bf1c      	itt	ne
 8006308:	1a1b      	subne	r3, r3, r0
 800630a:	50a3      	strne	r3, [r4, r2]
 800630c:	e7af      	b.n	800626e <_malloc_r+0x22>
 800630e:	6862      	ldr	r2, [r4, #4]
 8006310:	42a3      	cmp	r3, r4
 8006312:	bf0c      	ite	eq
 8006314:	f8c8 2000 	streq.w	r2, [r8]
 8006318:	605a      	strne	r2, [r3, #4]
 800631a:	e7eb      	b.n	80062f4 <_malloc_r+0xa8>
 800631c:	4623      	mov	r3, r4
 800631e:	6864      	ldr	r4, [r4, #4]
 8006320:	e7ae      	b.n	8006280 <_malloc_r+0x34>
 8006322:	463c      	mov	r4, r7
 8006324:	687f      	ldr	r7, [r7, #4]
 8006326:	e7b6      	b.n	8006296 <_malloc_r+0x4a>
 8006328:	461a      	mov	r2, r3
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	42a3      	cmp	r3, r4
 800632e:	d1fb      	bne.n	8006328 <_malloc_r+0xdc>
 8006330:	2300      	movs	r3, #0
 8006332:	6053      	str	r3, [r2, #4]
 8006334:	e7de      	b.n	80062f4 <_malloc_r+0xa8>
 8006336:	230c      	movs	r3, #12
 8006338:	6033      	str	r3, [r6, #0]
 800633a:	4630      	mov	r0, r6
 800633c:	f000 f80c 	bl	8006358 <__malloc_unlock>
 8006340:	e794      	b.n	800626c <_malloc_r+0x20>
 8006342:	6005      	str	r5, [r0, #0]
 8006344:	e7d6      	b.n	80062f4 <_malloc_r+0xa8>
 8006346:	bf00      	nop
 8006348:	20000ea4 	.word	0x20000ea4

0800634c <__malloc_lock>:
 800634c:	4801      	ldr	r0, [pc, #4]	@ (8006354 <__malloc_lock+0x8>)
 800634e:	f7ff bf0f 	b.w	8006170 <__retarget_lock_acquire_recursive>
 8006352:	bf00      	nop
 8006354:	20000e9c 	.word	0x20000e9c

08006358 <__malloc_unlock>:
 8006358:	4801      	ldr	r0, [pc, #4]	@ (8006360 <__malloc_unlock+0x8>)
 800635a:	f7ff bf0a 	b.w	8006172 <__retarget_lock_release_recursive>
 800635e:	bf00      	nop
 8006360:	20000e9c 	.word	0x20000e9c

08006364 <__ssputs_r>:
 8006364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006368:	688e      	ldr	r6, [r1, #8]
 800636a:	461f      	mov	r7, r3
 800636c:	42be      	cmp	r6, r7
 800636e:	680b      	ldr	r3, [r1, #0]
 8006370:	4682      	mov	sl, r0
 8006372:	460c      	mov	r4, r1
 8006374:	4690      	mov	r8, r2
 8006376:	d82d      	bhi.n	80063d4 <__ssputs_r+0x70>
 8006378:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800637c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006380:	d026      	beq.n	80063d0 <__ssputs_r+0x6c>
 8006382:	6965      	ldr	r5, [r4, #20]
 8006384:	6909      	ldr	r1, [r1, #16]
 8006386:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800638a:	eba3 0901 	sub.w	r9, r3, r1
 800638e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006392:	1c7b      	adds	r3, r7, #1
 8006394:	444b      	add	r3, r9
 8006396:	106d      	asrs	r5, r5, #1
 8006398:	429d      	cmp	r5, r3
 800639a:	bf38      	it	cc
 800639c:	461d      	movcc	r5, r3
 800639e:	0553      	lsls	r3, r2, #21
 80063a0:	d527      	bpl.n	80063f2 <__ssputs_r+0x8e>
 80063a2:	4629      	mov	r1, r5
 80063a4:	f7ff ff52 	bl	800624c <_malloc_r>
 80063a8:	4606      	mov	r6, r0
 80063aa:	b360      	cbz	r0, 8006406 <__ssputs_r+0xa2>
 80063ac:	6921      	ldr	r1, [r4, #16]
 80063ae:	464a      	mov	r2, r9
 80063b0:	f000 fae8 	bl	8006984 <memcpy>
 80063b4:	89a3      	ldrh	r3, [r4, #12]
 80063b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80063ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063be:	81a3      	strh	r3, [r4, #12]
 80063c0:	6126      	str	r6, [r4, #16]
 80063c2:	6165      	str	r5, [r4, #20]
 80063c4:	444e      	add	r6, r9
 80063c6:	eba5 0509 	sub.w	r5, r5, r9
 80063ca:	6026      	str	r6, [r4, #0]
 80063cc:	60a5      	str	r5, [r4, #8]
 80063ce:	463e      	mov	r6, r7
 80063d0:	42be      	cmp	r6, r7
 80063d2:	d900      	bls.n	80063d6 <__ssputs_r+0x72>
 80063d4:	463e      	mov	r6, r7
 80063d6:	6820      	ldr	r0, [r4, #0]
 80063d8:	4632      	mov	r2, r6
 80063da:	4641      	mov	r1, r8
 80063dc:	f000 faa8 	bl	8006930 <memmove>
 80063e0:	68a3      	ldr	r3, [r4, #8]
 80063e2:	1b9b      	subs	r3, r3, r6
 80063e4:	60a3      	str	r3, [r4, #8]
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	4433      	add	r3, r6
 80063ea:	6023      	str	r3, [r4, #0]
 80063ec:	2000      	movs	r0, #0
 80063ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f2:	462a      	mov	r2, r5
 80063f4:	f000 fad4 	bl	80069a0 <_realloc_r>
 80063f8:	4606      	mov	r6, r0
 80063fa:	2800      	cmp	r0, #0
 80063fc:	d1e0      	bne.n	80063c0 <__ssputs_r+0x5c>
 80063fe:	6921      	ldr	r1, [r4, #16]
 8006400:	4650      	mov	r0, sl
 8006402:	f7ff feb7 	bl	8006174 <_free_r>
 8006406:	230c      	movs	r3, #12
 8006408:	f8ca 3000 	str.w	r3, [sl]
 800640c:	89a3      	ldrh	r3, [r4, #12]
 800640e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006412:	81a3      	strh	r3, [r4, #12]
 8006414:	f04f 30ff 	mov.w	r0, #4294967295
 8006418:	e7e9      	b.n	80063ee <__ssputs_r+0x8a>
	...

0800641c <_svfiprintf_r>:
 800641c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006420:	4698      	mov	r8, r3
 8006422:	898b      	ldrh	r3, [r1, #12]
 8006424:	061b      	lsls	r3, r3, #24
 8006426:	b09d      	sub	sp, #116	@ 0x74
 8006428:	4607      	mov	r7, r0
 800642a:	460d      	mov	r5, r1
 800642c:	4614      	mov	r4, r2
 800642e:	d510      	bpl.n	8006452 <_svfiprintf_r+0x36>
 8006430:	690b      	ldr	r3, [r1, #16]
 8006432:	b973      	cbnz	r3, 8006452 <_svfiprintf_r+0x36>
 8006434:	2140      	movs	r1, #64	@ 0x40
 8006436:	f7ff ff09 	bl	800624c <_malloc_r>
 800643a:	6028      	str	r0, [r5, #0]
 800643c:	6128      	str	r0, [r5, #16]
 800643e:	b930      	cbnz	r0, 800644e <_svfiprintf_r+0x32>
 8006440:	230c      	movs	r3, #12
 8006442:	603b      	str	r3, [r7, #0]
 8006444:	f04f 30ff 	mov.w	r0, #4294967295
 8006448:	b01d      	add	sp, #116	@ 0x74
 800644a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644e:	2340      	movs	r3, #64	@ 0x40
 8006450:	616b      	str	r3, [r5, #20]
 8006452:	2300      	movs	r3, #0
 8006454:	9309      	str	r3, [sp, #36]	@ 0x24
 8006456:	2320      	movs	r3, #32
 8006458:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800645c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006460:	2330      	movs	r3, #48	@ 0x30
 8006462:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006600 <_svfiprintf_r+0x1e4>
 8006466:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800646a:	f04f 0901 	mov.w	r9, #1
 800646e:	4623      	mov	r3, r4
 8006470:	469a      	mov	sl, r3
 8006472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006476:	b10a      	cbz	r2, 800647c <_svfiprintf_r+0x60>
 8006478:	2a25      	cmp	r2, #37	@ 0x25
 800647a:	d1f9      	bne.n	8006470 <_svfiprintf_r+0x54>
 800647c:	ebba 0b04 	subs.w	fp, sl, r4
 8006480:	d00b      	beq.n	800649a <_svfiprintf_r+0x7e>
 8006482:	465b      	mov	r3, fp
 8006484:	4622      	mov	r2, r4
 8006486:	4629      	mov	r1, r5
 8006488:	4638      	mov	r0, r7
 800648a:	f7ff ff6b 	bl	8006364 <__ssputs_r>
 800648e:	3001      	adds	r0, #1
 8006490:	f000 80a7 	beq.w	80065e2 <_svfiprintf_r+0x1c6>
 8006494:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006496:	445a      	add	r2, fp
 8006498:	9209      	str	r2, [sp, #36]	@ 0x24
 800649a:	f89a 3000 	ldrb.w	r3, [sl]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 809f 	beq.w	80065e2 <_svfiprintf_r+0x1c6>
 80064a4:	2300      	movs	r3, #0
 80064a6:	f04f 32ff 	mov.w	r2, #4294967295
 80064aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064ae:	f10a 0a01 	add.w	sl, sl, #1
 80064b2:	9304      	str	r3, [sp, #16]
 80064b4:	9307      	str	r3, [sp, #28]
 80064b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80064bc:	4654      	mov	r4, sl
 80064be:	2205      	movs	r2, #5
 80064c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c4:	484e      	ldr	r0, [pc, #312]	@ (8006600 <_svfiprintf_r+0x1e4>)
 80064c6:	f7f9 fe93 	bl	80001f0 <memchr>
 80064ca:	9a04      	ldr	r2, [sp, #16]
 80064cc:	b9d8      	cbnz	r0, 8006506 <_svfiprintf_r+0xea>
 80064ce:	06d0      	lsls	r0, r2, #27
 80064d0:	bf44      	itt	mi
 80064d2:	2320      	movmi	r3, #32
 80064d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064d8:	0711      	lsls	r1, r2, #28
 80064da:	bf44      	itt	mi
 80064dc:	232b      	movmi	r3, #43	@ 0x2b
 80064de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064e2:	f89a 3000 	ldrb.w	r3, [sl]
 80064e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80064e8:	d015      	beq.n	8006516 <_svfiprintf_r+0xfa>
 80064ea:	9a07      	ldr	r2, [sp, #28]
 80064ec:	4654      	mov	r4, sl
 80064ee:	2000      	movs	r0, #0
 80064f0:	f04f 0c0a 	mov.w	ip, #10
 80064f4:	4621      	mov	r1, r4
 80064f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064fa:	3b30      	subs	r3, #48	@ 0x30
 80064fc:	2b09      	cmp	r3, #9
 80064fe:	d94b      	bls.n	8006598 <_svfiprintf_r+0x17c>
 8006500:	b1b0      	cbz	r0, 8006530 <_svfiprintf_r+0x114>
 8006502:	9207      	str	r2, [sp, #28]
 8006504:	e014      	b.n	8006530 <_svfiprintf_r+0x114>
 8006506:	eba0 0308 	sub.w	r3, r0, r8
 800650a:	fa09 f303 	lsl.w	r3, r9, r3
 800650e:	4313      	orrs	r3, r2
 8006510:	9304      	str	r3, [sp, #16]
 8006512:	46a2      	mov	sl, r4
 8006514:	e7d2      	b.n	80064bc <_svfiprintf_r+0xa0>
 8006516:	9b03      	ldr	r3, [sp, #12]
 8006518:	1d19      	adds	r1, r3, #4
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	9103      	str	r1, [sp, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	bfbb      	ittet	lt
 8006522:	425b      	neglt	r3, r3
 8006524:	f042 0202 	orrlt.w	r2, r2, #2
 8006528:	9307      	strge	r3, [sp, #28]
 800652a:	9307      	strlt	r3, [sp, #28]
 800652c:	bfb8      	it	lt
 800652e:	9204      	strlt	r2, [sp, #16]
 8006530:	7823      	ldrb	r3, [r4, #0]
 8006532:	2b2e      	cmp	r3, #46	@ 0x2e
 8006534:	d10a      	bne.n	800654c <_svfiprintf_r+0x130>
 8006536:	7863      	ldrb	r3, [r4, #1]
 8006538:	2b2a      	cmp	r3, #42	@ 0x2a
 800653a:	d132      	bne.n	80065a2 <_svfiprintf_r+0x186>
 800653c:	9b03      	ldr	r3, [sp, #12]
 800653e:	1d1a      	adds	r2, r3, #4
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	9203      	str	r2, [sp, #12]
 8006544:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006548:	3402      	adds	r4, #2
 800654a:	9305      	str	r3, [sp, #20]
 800654c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006610 <_svfiprintf_r+0x1f4>
 8006550:	7821      	ldrb	r1, [r4, #0]
 8006552:	2203      	movs	r2, #3
 8006554:	4650      	mov	r0, sl
 8006556:	f7f9 fe4b 	bl	80001f0 <memchr>
 800655a:	b138      	cbz	r0, 800656c <_svfiprintf_r+0x150>
 800655c:	9b04      	ldr	r3, [sp, #16]
 800655e:	eba0 000a 	sub.w	r0, r0, sl
 8006562:	2240      	movs	r2, #64	@ 0x40
 8006564:	4082      	lsls	r2, r0
 8006566:	4313      	orrs	r3, r2
 8006568:	3401      	adds	r4, #1
 800656a:	9304      	str	r3, [sp, #16]
 800656c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006570:	4824      	ldr	r0, [pc, #144]	@ (8006604 <_svfiprintf_r+0x1e8>)
 8006572:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006576:	2206      	movs	r2, #6
 8006578:	f7f9 fe3a 	bl	80001f0 <memchr>
 800657c:	2800      	cmp	r0, #0
 800657e:	d036      	beq.n	80065ee <_svfiprintf_r+0x1d2>
 8006580:	4b21      	ldr	r3, [pc, #132]	@ (8006608 <_svfiprintf_r+0x1ec>)
 8006582:	bb1b      	cbnz	r3, 80065cc <_svfiprintf_r+0x1b0>
 8006584:	9b03      	ldr	r3, [sp, #12]
 8006586:	3307      	adds	r3, #7
 8006588:	f023 0307 	bic.w	r3, r3, #7
 800658c:	3308      	adds	r3, #8
 800658e:	9303      	str	r3, [sp, #12]
 8006590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006592:	4433      	add	r3, r6
 8006594:	9309      	str	r3, [sp, #36]	@ 0x24
 8006596:	e76a      	b.n	800646e <_svfiprintf_r+0x52>
 8006598:	fb0c 3202 	mla	r2, ip, r2, r3
 800659c:	460c      	mov	r4, r1
 800659e:	2001      	movs	r0, #1
 80065a0:	e7a8      	b.n	80064f4 <_svfiprintf_r+0xd8>
 80065a2:	2300      	movs	r3, #0
 80065a4:	3401      	adds	r4, #1
 80065a6:	9305      	str	r3, [sp, #20]
 80065a8:	4619      	mov	r1, r3
 80065aa:	f04f 0c0a 	mov.w	ip, #10
 80065ae:	4620      	mov	r0, r4
 80065b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065b4:	3a30      	subs	r2, #48	@ 0x30
 80065b6:	2a09      	cmp	r2, #9
 80065b8:	d903      	bls.n	80065c2 <_svfiprintf_r+0x1a6>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0c6      	beq.n	800654c <_svfiprintf_r+0x130>
 80065be:	9105      	str	r1, [sp, #20]
 80065c0:	e7c4      	b.n	800654c <_svfiprintf_r+0x130>
 80065c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80065c6:	4604      	mov	r4, r0
 80065c8:	2301      	movs	r3, #1
 80065ca:	e7f0      	b.n	80065ae <_svfiprintf_r+0x192>
 80065cc:	ab03      	add	r3, sp, #12
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	462a      	mov	r2, r5
 80065d2:	4b0e      	ldr	r3, [pc, #56]	@ (800660c <_svfiprintf_r+0x1f0>)
 80065d4:	a904      	add	r1, sp, #16
 80065d6:	4638      	mov	r0, r7
 80065d8:	f3af 8000 	nop.w
 80065dc:	1c42      	adds	r2, r0, #1
 80065de:	4606      	mov	r6, r0
 80065e0:	d1d6      	bne.n	8006590 <_svfiprintf_r+0x174>
 80065e2:	89ab      	ldrh	r3, [r5, #12]
 80065e4:	065b      	lsls	r3, r3, #25
 80065e6:	f53f af2d 	bmi.w	8006444 <_svfiprintf_r+0x28>
 80065ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065ec:	e72c      	b.n	8006448 <_svfiprintf_r+0x2c>
 80065ee:	ab03      	add	r3, sp, #12
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	462a      	mov	r2, r5
 80065f4:	4b05      	ldr	r3, [pc, #20]	@ (800660c <_svfiprintf_r+0x1f0>)
 80065f6:	a904      	add	r1, sp, #16
 80065f8:	4638      	mov	r0, r7
 80065fa:	f000 f879 	bl	80066f0 <_printf_i>
 80065fe:	e7ed      	b.n	80065dc <_svfiprintf_r+0x1c0>
 8006600:	0800cbd8 	.word	0x0800cbd8
 8006604:	0800cbe2 	.word	0x0800cbe2
 8006608:	00000000 	.word	0x00000000
 800660c:	08006365 	.word	0x08006365
 8006610:	0800cbde 	.word	0x0800cbde

08006614 <_printf_common>:
 8006614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006618:	4616      	mov	r6, r2
 800661a:	4698      	mov	r8, r3
 800661c:	688a      	ldr	r2, [r1, #8]
 800661e:	690b      	ldr	r3, [r1, #16]
 8006620:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006624:	4293      	cmp	r3, r2
 8006626:	bfb8      	it	lt
 8006628:	4613      	movlt	r3, r2
 800662a:	6033      	str	r3, [r6, #0]
 800662c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006630:	4607      	mov	r7, r0
 8006632:	460c      	mov	r4, r1
 8006634:	b10a      	cbz	r2, 800663a <_printf_common+0x26>
 8006636:	3301      	adds	r3, #1
 8006638:	6033      	str	r3, [r6, #0]
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	0699      	lsls	r1, r3, #26
 800663e:	bf42      	ittt	mi
 8006640:	6833      	ldrmi	r3, [r6, #0]
 8006642:	3302      	addmi	r3, #2
 8006644:	6033      	strmi	r3, [r6, #0]
 8006646:	6825      	ldr	r5, [r4, #0]
 8006648:	f015 0506 	ands.w	r5, r5, #6
 800664c:	d106      	bne.n	800665c <_printf_common+0x48>
 800664e:	f104 0a19 	add.w	sl, r4, #25
 8006652:	68e3      	ldr	r3, [r4, #12]
 8006654:	6832      	ldr	r2, [r6, #0]
 8006656:	1a9b      	subs	r3, r3, r2
 8006658:	42ab      	cmp	r3, r5
 800665a:	dc26      	bgt.n	80066aa <_printf_common+0x96>
 800665c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006660:	6822      	ldr	r2, [r4, #0]
 8006662:	3b00      	subs	r3, #0
 8006664:	bf18      	it	ne
 8006666:	2301      	movne	r3, #1
 8006668:	0692      	lsls	r2, r2, #26
 800666a:	d42b      	bmi.n	80066c4 <_printf_common+0xb0>
 800666c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006670:	4641      	mov	r1, r8
 8006672:	4638      	mov	r0, r7
 8006674:	47c8      	blx	r9
 8006676:	3001      	adds	r0, #1
 8006678:	d01e      	beq.n	80066b8 <_printf_common+0xa4>
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	6922      	ldr	r2, [r4, #16]
 800667e:	f003 0306 	and.w	r3, r3, #6
 8006682:	2b04      	cmp	r3, #4
 8006684:	bf02      	ittt	eq
 8006686:	68e5      	ldreq	r5, [r4, #12]
 8006688:	6833      	ldreq	r3, [r6, #0]
 800668a:	1aed      	subeq	r5, r5, r3
 800668c:	68a3      	ldr	r3, [r4, #8]
 800668e:	bf0c      	ite	eq
 8006690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006694:	2500      	movne	r5, #0
 8006696:	4293      	cmp	r3, r2
 8006698:	bfc4      	itt	gt
 800669a:	1a9b      	subgt	r3, r3, r2
 800669c:	18ed      	addgt	r5, r5, r3
 800669e:	2600      	movs	r6, #0
 80066a0:	341a      	adds	r4, #26
 80066a2:	42b5      	cmp	r5, r6
 80066a4:	d11a      	bne.n	80066dc <_printf_common+0xc8>
 80066a6:	2000      	movs	r0, #0
 80066a8:	e008      	b.n	80066bc <_printf_common+0xa8>
 80066aa:	2301      	movs	r3, #1
 80066ac:	4652      	mov	r2, sl
 80066ae:	4641      	mov	r1, r8
 80066b0:	4638      	mov	r0, r7
 80066b2:	47c8      	blx	r9
 80066b4:	3001      	adds	r0, #1
 80066b6:	d103      	bne.n	80066c0 <_printf_common+0xac>
 80066b8:	f04f 30ff 	mov.w	r0, #4294967295
 80066bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c0:	3501      	adds	r5, #1
 80066c2:	e7c6      	b.n	8006652 <_printf_common+0x3e>
 80066c4:	18e1      	adds	r1, r4, r3
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	2030      	movs	r0, #48	@ 0x30
 80066ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066ce:	4422      	add	r2, r4
 80066d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066d8:	3302      	adds	r3, #2
 80066da:	e7c7      	b.n	800666c <_printf_common+0x58>
 80066dc:	2301      	movs	r3, #1
 80066de:	4622      	mov	r2, r4
 80066e0:	4641      	mov	r1, r8
 80066e2:	4638      	mov	r0, r7
 80066e4:	47c8      	blx	r9
 80066e6:	3001      	adds	r0, #1
 80066e8:	d0e6      	beq.n	80066b8 <_printf_common+0xa4>
 80066ea:	3601      	adds	r6, #1
 80066ec:	e7d9      	b.n	80066a2 <_printf_common+0x8e>
	...

080066f0 <_printf_i>:
 80066f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066f4:	7e0f      	ldrb	r7, [r1, #24]
 80066f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066f8:	2f78      	cmp	r7, #120	@ 0x78
 80066fa:	4691      	mov	r9, r2
 80066fc:	4680      	mov	r8, r0
 80066fe:	460c      	mov	r4, r1
 8006700:	469a      	mov	sl, r3
 8006702:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006706:	d807      	bhi.n	8006718 <_printf_i+0x28>
 8006708:	2f62      	cmp	r7, #98	@ 0x62
 800670a:	d80a      	bhi.n	8006722 <_printf_i+0x32>
 800670c:	2f00      	cmp	r7, #0
 800670e:	f000 80d2 	beq.w	80068b6 <_printf_i+0x1c6>
 8006712:	2f58      	cmp	r7, #88	@ 0x58
 8006714:	f000 80b9 	beq.w	800688a <_printf_i+0x19a>
 8006718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800671c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006720:	e03a      	b.n	8006798 <_printf_i+0xa8>
 8006722:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006726:	2b15      	cmp	r3, #21
 8006728:	d8f6      	bhi.n	8006718 <_printf_i+0x28>
 800672a:	a101      	add	r1, pc, #4	@ (adr r1, 8006730 <_printf_i+0x40>)
 800672c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006730:	08006789 	.word	0x08006789
 8006734:	0800679d 	.word	0x0800679d
 8006738:	08006719 	.word	0x08006719
 800673c:	08006719 	.word	0x08006719
 8006740:	08006719 	.word	0x08006719
 8006744:	08006719 	.word	0x08006719
 8006748:	0800679d 	.word	0x0800679d
 800674c:	08006719 	.word	0x08006719
 8006750:	08006719 	.word	0x08006719
 8006754:	08006719 	.word	0x08006719
 8006758:	08006719 	.word	0x08006719
 800675c:	0800689d 	.word	0x0800689d
 8006760:	080067c7 	.word	0x080067c7
 8006764:	08006857 	.word	0x08006857
 8006768:	08006719 	.word	0x08006719
 800676c:	08006719 	.word	0x08006719
 8006770:	080068bf 	.word	0x080068bf
 8006774:	08006719 	.word	0x08006719
 8006778:	080067c7 	.word	0x080067c7
 800677c:	08006719 	.word	0x08006719
 8006780:	08006719 	.word	0x08006719
 8006784:	0800685f 	.word	0x0800685f
 8006788:	6833      	ldr	r3, [r6, #0]
 800678a:	1d1a      	adds	r2, r3, #4
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6032      	str	r2, [r6, #0]
 8006790:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006794:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006798:	2301      	movs	r3, #1
 800679a:	e09d      	b.n	80068d8 <_printf_i+0x1e8>
 800679c:	6833      	ldr	r3, [r6, #0]
 800679e:	6820      	ldr	r0, [r4, #0]
 80067a0:	1d19      	adds	r1, r3, #4
 80067a2:	6031      	str	r1, [r6, #0]
 80067a4:	0606      	lsls	r6, r0, #24
 80067a6:	d501      	bpl.n	80067ac <_printf_i+0xbc>
 80067a8:	681d      	ldr	r5, [r3, #0]
 80067aa:	e003      	b.n	80067b4 <_printf_i+0xc4>
 80067ac:	0645      	lsls	r5, r0, #25
 80067ae:	d5fb      	bpl.n	80067a8 <_printf_i+0xb8>
 80067b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067b4:	2d00      	cmp	r5, #0
 80067b6:	da03      	bge.n	80067c0 <_printf_i+0xd0>
 80067b8:	232d      	movs	r3, #45	@ 0x2d
 80067ba:	426d      	negs	r5, r5
 80067bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067c0:	4859      	ldr	r0, [pc, #356]	@ (8006928 <_printf_i+0x238>)
 80067c2:	230a      	movs	r3, #10
 80067c4:	e011      	b.n	80067ea <_printf_i+0xfa>
 80067c6:	6821      	ldr	r1, [r4, #0]
 80067c8:	6833      	ldr	r3, [r6, #0]
 80067ca:	0608      	lsls	r0, r1, #24
 80067cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80067d0:	d402      	bmi.n	80067d8 <_printf_i+0xe8>
 80067d2:	0649      	lsls	r1, r1, #25
 80067d4:	bf48      	it	mi
 80067d6:	b2ad      	uxthmi	r5, r5
 80067d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80067da:	4853      	ldr	r0, [pc, #332]	@ (8006928 <_printf_i+0x238>)
 80067dc:	6033      	str	r3, [r6, #0]
 80067de:	bf14      	ite	ne
 80067e0:	230a      	movne	r3, #10
 80067e2:	2308      	moveq	r3, #8
 80067e4:	2100      	movs	r1, #0
 80067e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067ea:	6866      	ldr	r6, [r4, #4]
 80067ec:	60a6      	str	r6, [r4, #8]
 80067ee:	2e00      	cmp	r6, #0
 80067f0:	bfa2      	ittt	ge
 80067f2:	6821      	ldrge	r1, [r4, #0]
 80067f4:	f021 0104 	bicge.w	r1, r1, #4
 80067f8:	6021      	strge	r1, [r4, #0]
 80067fa:	b90d      	cbnz	r5, 8006800 <_printf_i+0x110>
 80067fc:	2e00      	cmp	r6, #0
 80067fe:	d04b      	beq.n	8006898 <_printf_i+0x1a8>
 8006800:	4616      	mov	r6, r2
 8006802:	fbb5 f1f3 	udiv	r1, r5, r3
 8006806:	fb03 5711 	mls	r7, r3, r1, r5
 800680a:	5dc7      	ldrb	r7, [r0, r7]
 800680c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006810:	462f      	mov	r7, r5
 8006812:	42bb      	cmp	r3, r7
 8006814:	460d      	mov	r5, r1
 8006816:	d9f4      	bls.n	8006802 <_printf_i+0x112>
 8006818:	2b08      	cmp	r3, #8
 800681a:	d10b      	bne.n	8006834 <_printf_i+0x144>
 800681c:	6823      	ldr	r3, [r4, #0]
 800681e:	07df      	lsls	r7, r3, #31
 8006820:	d508      	bpl.n	8006834 <_printf_i+0x144>
 8006822:	6923      	ldr	r3, [r4, #16]
 8006824:	6861      	ldr	r1, [r4, #4]
 8006826:	4299      	cmp	r1, r3
 8006828:	bfde      	ittt	le
 800682a:	2330      	movle	r3, #48	@ 0x30
 800682c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006830:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006834:	1b92      	subs	r2, r2, r6
 8006836:	6122      	str	r2, [r4, #16]
 8006838:	f8cd a000 	str.w	sl, [sp]
 800683c:	464b      	mov	r3, r9
 800683e:	aa03      	add	r2, sp, #12
 8006840:	4621      	mov	r1, r4
 8006842:	4640      	mov	r0, r8
 8006844:	f7ff fee6 	bl	8006614 <_printf_common>
 8006848:	3001      	adds	r0, #1
 800684a:	d14a      	bne.n	80068e2 <_printf_i+0x1f2>
 800684c:	f04f 30ff 	mov.w	r0, #4294967295
 8006850:	b004      	add	sp, #16
 8006852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	f043 0320 	orr.w	r3, r3, #32
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	4833      	ldr	r0, [pc, #204]	@ (800692c <_printf_i+0x23c>)
 8006860:	2778      	movs	r7, #120	@ 0x78
 8006862:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	6831      	ldr	r1, [r6, #0]
 800686a:	061f      	lsls	r7, r3, #24
 800686c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006870:	d402      	bmi.n	8006878 <_printf_i+0x188>
 8006872:	065f      	lsls	r7, r3, #25
 8006874:	bf48      	it	mi
 8006876:	b2ad      	uxthmi	r5, r5
 8006878:	6031      	str	r1, [r6, #0]
 800687a:	07d9      	lsls	r1, r3, #31
 800687c:	bf44      	itt	mi
 800687e:	f043 0320 	orrmi.w	r3, r3, #32
 8006882:	6023      	strmi	r3, [r4, #0]
 8006884:	b11d      	cbz	r5, 800688e <_printf_i+0x19e>
 8006886:	2310      	movs	r3, #16
 8006888:	e7ac      	b.n	80067e4 <_printf_i+0xf4>
 800688a:	4827      	ldr	r0, [pc, #156]	@ (8006928 <_printf_i+0x238>)
 800688c:	e7e9      	b.n	8006862 <_printf_i+0x172>
 800688e:	6823      	ldr	r3, [r4, #0]
 8006890:	f023 0320 	bic.w	r3, r3, #32
 8006894:	6023      	str	r3, [r4, #0]
 8006896:	e7f6      	b.n	8006886 <_printf_i+0x196>
 8006898:	4616      	mov	r6, r2
 800689a:	e7bd      	b.n	8006818 <_printf_i+0x128>
 800689c:	6833      	ldr	r3, [r6, #0]
 800689e:	6825      	ldr	r5, [r4, #0]
 80068a0:	6961      	ldr	r1, [r4, #20]
 80068a2:	1d18      	adds	r0, r3, #4
 80068a4:	6030      	str	r0, [r6, #0]
 80068a6:	062e      	lsls	r6, r5, #24
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	d501      	bpl.n	80068b0 <_printf_i+0x1c0>
 80068ac:	6019      	str	r1, [r3, #0]
 80068ae:	e002      	b.n	80068b6 <_printf_i+0x1c6>
 80068b0:	0668      	lsls	r0, r5, #25
 80068b2:	d5fb      	bpl.n	80068ac <_printf_i+0x1bc>
 80068b4:	8019      	strh	r1, [r3, #0]
 80068b6:	2300      	movs	r3, #0
 80068b8:	6123      	str	r3, [r4, #16]
 80068ba:	4616      	mov	r6, r2
 80068bc:	e7bc      	b.n	8006838 <_printf_i+0x148>
 80068be:	6833      	ldr	r3, [r6, #0]
 80068c0:	1d1a      	adds	r2, r3, #4
 80068c2:	6032      	str	r2, [r6, #0]
 80068c4:	681e      	ldr	r6, [r3, #0]
 80068c6:	6862      	ldr	r2, [r4, #4]
 80068c8:	2100      	movs	r1, #0
 80068ca:	4630      	mov	r0, r6
 80068cc:	f7f9 fc90 	bl	80001f0 <memchr>
 80068d0:	b108      	cbz	r0, 80068d6 <_printf_i+0x1e6>
 80068d2:	1b80      	subs	r0, r0, r6
 80068d4:	6060      	str	r0, [r4, #4]
 80068d6:	6863      	ldr	r3, [r4, #4]
 80068d8:	6123      	str	r3, [r4, #16]
 80068da:	2300      	movs	r3, #0
 80068dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068e0:	e7aa      	b.n	8006838 <_printf_i+0x148>
 80068e2:	6923      	ldr	r3, [r4, #16]
 80068e4:	4632      	mov	r2, r6
 80068e6:	4649      	mov	r1, r9
 80068e8:	4640      	mov	r0, r8
 80068ea:	47d0      	blx	sl
 80068ec:	3001      	adds	r0, #1
 80068ee:	d0ad      	beq.n	800684c <_printf_i+0x15c>
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	079b      	lsls	r3, r3, #30
 80068f4:	d413      	bmi.n	800691e <_printf_i+0x22e>
 80068f6:	68e0      	ldr	r0, [r4, #12]
 80068f8:	9b03      	ldr	r3, [sp, #12]
 80068fa:	4298      	cmp	r0, r3
 80068fc:	bfb8      	it	lt
 80068fe:	4618      	movlt	r0, r3
 8006900:	e7a6      	b.n	8006850 <_printf_i+0x160>
 8006902:	2301      	movs	r3, #1
 8006904:	4632      	mov	r2, r6
 8006906:	4649      	mov	r1, r9
 8006908:	4640      	mov	r0, r8
 800690a:	47d0      	blx	sl
 800690c:	3001      	adds	r0, #1
 800690e:	d09d      	beq.n	800684c <_printf_i+0x15c>
 8006910:	3501      	adds	r5, #1
 8006912:	68e3      	ldr	r3, [r4, #12]
 8006914:	9903      	ldr	r1, [sp, #12]
 8006916:	1a5b      	subs	r3, r3, r1
 8006918:	42ab      	cmp	r3, r5
 800691a:	dcf2      	bgt.n	8006902 <_printf_i+0x212>
 800691c:	e7eb      	b.n	80068f6 <_printf_i+0x206>
 800691e:	2500      	movs	r5, #0
 8006920:	f104 0619 	add.w	r6, r4, #25
 8006924:	e7f5      	b.n	8006912 <_printf_i+0x222>
 8006926:	bf00      	nop
 8006928:	0800cbe9 	.word	0x0800cbe9
 800692c:	0800cbfa 	.word	0x0800cbfa

08006930 <memmove>:
 8006930:	4288      	cmp	r0, r1
 8006932:	b510      	push	{r4, lr}
 8006934:	eb01 0402 	add.w	r4, r1, r2
 8006938:	d902      	bls.n	8006940 <memmove+0x10>
 800693a:	4284      	cmp	r4, r0
 800693c:	4623      	mov	r3, r4
 800693e:	d807      	bhi.n	8006950 <memmove+0x20>
 8006940:	1e43      	subs	r3, r0, #1
 8006942:	42a1      	cmp	r1, r4
 8006944:	d008      	beq.n	8006958 <memmove+0x28>
 8006946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800694a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800694e:	e7f8      	b.n	8006942 <memmove+0x12>
 8006950:	4402      	add	r2, r0
 8006952:	4601      	mov	r1, r0
 8006954:	428a      	cmp	r2, r1
 8006956:	d100      	bne.n	800695a <memmove+0x2a>
 8006958:	bd10      	pop	{r4, pc}
 800695a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800695e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006962:	e7f7      	b.n	8006954 <memmove+0x24>

08006964 <_sbrk_r>:
 8006964:	b538      	push	{r3, r4, r5, lr}
 8006966:	4d06      	ldr	r5, [pc, #24]	@ (8006980 <_sbrk_r+0x1c>)
 8006968:	2300      	movs	r3, #0
 800696a:	4604      	mov	r4, r0
 800696c:	4608      	mov	r0, r1
 800696e:	602b      	str	r3, [r5, #0]
 8006970:	f7fb f8b2 	bl	8001ad8 <_sbrk>
 8006974:	1c43      	adds	r3, r0, #1
 8006976:	d102      	bne.n	800697e <_sbrk_r+0x1a>
 8006978:	682b      	ldr	r3, [r5, #0]
 800697a:	b103      	cbz	r3, 800697e <_sbrk_r+0x1a>
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	bd38      	pop	{r3, r4, r5, pc}
 8006980:	20000e98 	.word	0x20000e98

08006984 <memcpy>:
 8006984:	440a      	add	r2, r1
 8006986:	4291      	cmp	r1, r2
 8006988:	f100 33ff 	add.w	r3, r0, #4294967295
 800698c:	d100      	bne.n	8006990 <memcpy+0xc>
 800698e:	4770      	bx	lr
 8006990:	b510      	push	{r4, lr}
 8006992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800699a:	4291      	cmp	r1, r2
 800699c:	d1f9      	bne.n	8006992 <memcpy+0xe>
 800699e:	bd10      	pop	{r4, pc}

080069a0 <_realloc_r>:
 80069a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069a4:	4680      	mov	r8, r0
 80069a6:	4615      	mov	r5, r2
 80069a8:	460c      	mov	r4, r1
 80069aa:	b921      	cbnz	r1, 80069b6 <_realloc_r+0x16>
 80069ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069b0:	4611      	mov	r1, r2
 80069b2:	f7ff bc4b 	b.w	800624c <_malloc_r>
 80069b6:	b92a      	cbnz	r2, 80069c4 <_realloc_r+0x24>
 80069b8:	f7ff fbdc 	bl	8006174 <_free_r>
 80069bc:	2400      	movs	r4, #0
 80069be:	4620      	mov	r0, r4
 80069c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069c4:	f000 f81a 	bl	80069fc <_malloc_usable_size_r>
 80069c8:	4285      	cmp	r5, r0
 80069ca:	4606      	mov	r6, r0
 80069cc:	d802      	bhi.n	80069d4 <_realloc_r+0x34>
 80069ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80069d2:	d8f4      	bhi.n	80069be <_realloc_r+0x1e>
 80069d4:	4629      	mov	r1, r5
 80069d6:	4640      	mov	r0, r8
 80069d8:	f7ff fc38 	bl	800624c <_malloc_r>
 80069dc:	4607      	mov	r7, r0
 80069de:	2800      	cmp	r0, #0
 80069e0:	d0ec      	beq.n	80069bc <_realloc_r+0x1c>
 80069e2:	42b5      	cmp	r5, r6
 80069e4:	462a      	mov	r2, r5
 80069e6:	4621      	mov	r1, r4
 80069e8:	bf28      	it	cs
 80069ea:	4632      	movcs	r2, r6
 80069ec:	f7ff ffca 	bl	8006984 <memcpy>
 80069f0:	4621      	mov	r1, r4
 80069f2:	4640      	mov	r0, r8
 80069f4:	f7ff fbbe 	bl	8006174 <_free_r>
 80069f8:	463c      	mov	r4, r7
 80069fa:	e7e0      	b.n	80069be <_realloc_r+0x1e>

080069fc <_malloc_usable_size_r>:
 80069fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a00:	1f18      	subs	r0, r3, #4
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	bfbc      	itt	lt
 8006a06:	580b      	ldrlt	r3, [r1, r0]
 8006a08:	18c0      	addlt	r0, r0, r3
 8006a0a:	4770      	bx	lr

08006a0c <_init>:
 8006a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0e:	bf00      	nop
 8006a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a12:	bc08      	pop	{r3}
 8006a14:	469e      	mov	lr, r3
 8006a16:	4770      	bx	lr

08006a18 <_fini>:
 8006a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1a:	bf00      	nop
 8006a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1e:	bc08      	pop	{r3}
 8006a20:	469e      	mov	lr, r3
 8006a22:	4770      	bx	lr
