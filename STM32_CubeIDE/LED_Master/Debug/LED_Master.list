
LED_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a14  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08005bc4  08005bc4  00006bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d48  08005d48  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005d48  08005d48  00006d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d50  08005d50  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d50  08005d50  00006d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d54  08005d54  00006d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005d58  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          00000c18  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c78  20000c78  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012412  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000323b  00000000  00000000  000194a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001008  00000000  00000000  0001c6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c42  00000000  00000000  0001d6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000270f7  00000000  00000000  0001e32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ce1  00000000  00000000  00045421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e78aa  00000000  00000000  0005c102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001439ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004490  00000000  00000000  001439f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00147e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005bac 	.word	0x08005bac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08005bac 	.word	0x08005bac

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Bsp_AdcStart>:

uint32_t AdcValue[2] = {0};
uint16_t AdcValueGroup[4] = {0};

void Bsp_AdcStart(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
//	HAL_ADC_Start(&hadc1);
//	HAL_ADC_Start(&hadc3);
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcValueGroup, 4);
 8000584:	2204      	movs	r2, #4
 8000586:	4903      	ldr	r1, [pc, #12]	@ (8000594 <Bsp_AdcStart+0x14>)
 8000588:	4803      	ldr	r0, [pc, #12]	@ (8000598 <Bsp_AdcStart+0x18>)
 800058a:	f001 f827 	bl	80015dc <HAL_ADC_Start_DMA>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	2000007c 	.word	0x2000007c
 8000598:	20000888 	.word	0x20000888

0800059c <Bsp_AdcValuePrint>:

void Bsp_AdcValuePrint(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af02      	add	r7, sp, #8
//	AdcValue[1] = HAL_ADC_GetValue(&hadc3);
//	LOG_RELEASE("ADC1 Value is %d V\n", AdcValue[0]);
//	LOG_RELEASE("ADC3 Value is %d V\n", AdcValue[1]);
//	LOG_RELEASE("ADC1 Value is %.2f V\n", (float)((AdcValue[0] / 4095.0) * 3.3));
//	LOG_RELEASE("ADC3 Value is %.2f V\n", (float)((AdcValue[1] / 4095.0) * 3.3));
	LOG_RELEASE("ADC1 Value is %d %d %d %d V\n", AdcValueGroup[0], AdcValueGroup[1], AdcValueGroup[2], AdcValueGroup[3]);
 80005a2:	4b09      	ldr	r3, [pc, #36]	@ (80005c8 <Bsp_AdcValuePrint+0x2c>)
 80005a4:	881b      	ldrh	r3, [r3, #0]
 80005a6:	4619      	mov	r1, r3
 80005a8:	4b07      	ldr	r3, [pc, #28]	@ (80005c8 <Bsp_AdcValuePrint+0x2c>)
 80005aa:	885b      	ldrh	r3, [r3, #2]
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <Bsp_AdcValuePrint+0x2c>)
 80005b0:	889b      	ldrh	r3, [r3, #4]
 80005b2:	4618      	mov	r0, r3
 80005b4:	4b04      	ldr	r3, [pc, #16]	@ (80005c8 <Bsp_AdcValuePrint+0x2c>)
 80005b6:	88db      	ldrh	r3, [r3, #6]
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	4603      	mov	r3, r0
 80005bc:	4803      	ldr	r0, [pc, #12]	@ (80005cc <Bsp_AdcValuePrint+0x30>)
 80005be:	f000 f965 	bl	800088c <DEBUG_PRINTF>
//	LOG_RELEASE("cpt %d.\n", AdcValue[0]);
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	2000007c 	.word	0x2000007c
 80005cc:	08005bc4 	.word	0x08005bc4

080005d0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	if(&hadc1 == hadc)
	{
//		AdcValue[0] += 1;
	}
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <HAL_TIM_PeriodElapsedCallback>:
{
	return timestamp1ms;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	if(GLOBAL_TIMER == htim)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a0f      	ldr	r2, [pc, #60]	@ (800062c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d105      	bne.n	8000600 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		timestamp1ms++;
 80005f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000630 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80005fc:	6013      	str	r3, [r2, #0]
	{
		timestamp1000ms++;
		SET_1000MS_TASK;
	}

}
 80005fe:	e00e      	b.n	800061e <HAL_TIM_PeriodElapsedCallback+0x3a>
	else if (PRINT_TIMER == htim)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4a0c      	ldr	r2, [pc, #48]	@ (8000634 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d10a      	bne.n	800061e <HAL_TIM_PeriodElapsedCallback+0x3a>
		timestamp1000ms++;
 8000608:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	3301      	adds	r3, #1
 800060e:	4a0a      	ldr	r2, [pc, #40]	@ (8000638 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000610:	6013      	str	r3, [r2, #0]
		SET_1000MS_TASK;
 8000612:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800061a:	4a08      	ldr	r2, [pc, #32]	@ (800063c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800061c:	6013      	str	r3, [r2, #0]
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	200009dc 	.word	0x200009dc
 8000630:	20000084 	.word	0x20000084
 8000634:	20000994 	.word	0x20000994
 8000638:	20000088 	.word	0x20000088
 800063c:	2000008c 	.word	0x2000008c

08000640 <HAL_GPIO_EXTI_Callback>:
 */
#include "led_bsp.h"
#include "key_bsp.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	80fb      	strh	r3, [r7, #6]
	if(KEY2_Pin == GPIO_Pin)
 800064a:	88fb      	ldrh	r3, [r7, #6]
 800064c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000650:	d101      	bne.n	8000656 <HAL_GPIO_EXTI_Callback+0x16>
	{
		Led_BlueFlip();
 8000652:	f000 f811 	bl	8000678 <Led_BlueFlip>
	}
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <Led_RedFlip>:
 *      Author: 18283
 */
#include "led_bsp.h"

void Led_RedFlip(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000664:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000668:	4802      	ldr	r0, [pc, #8]	@ (8000674 <Led_RedFlip+0x14>)
 800066a:	f002 fa64 	bl	8002b36 <HAL_GPIO_TogglePin>
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40021c00 	.word	0x40021c00

08000678 <Led_BlueFlip>:
{
	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
}

void Led_BlueFlip(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 800067c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000680:	4802      	ldr	r0, [pc, #8]	@ (800068c <Led_BlueFlip+0x14>)
 8000682:	f002 fa58 	bl	8002b36 <HAL_GPIO_TogglePin>
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40021c00 	.word	0x40021c00

08000690 <Led_task>:
#include "task_bsp.h"

volatile uint32_t Task_Cmd;

void Led_task(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	Led_RedFlip();
 8000694:	f7ff ffe4 	bl	8000660 <Led_RedFlip>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <Task_1ms_Entry>:

void Task_1ms_Entry(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 1ms message\n");
 80006a0:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <Task_1ms_Entry+0x1c>)
 80006a2:	f000 f8f3 	bl	800088c <DEBUG_PRINTF>
	RESET_1MS_TASK;
 80006a6:	4b05      	ldr	r3, [pc, #20]	@ (80006bc <Task_1ms_Entry+0x20>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f023 0301 	bic.w	r3, r3, #1
 80006ae:	4a03      	ldr	r2, [pc, #12]	@ (80006bc <Task_1ms_Entry+0x20>)
 80006b0:	6013      	str	r3, [r2, #0]
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	08005bec 	.word	0x08005bec
 80006bc:	2000008c 	.word	0x2000008c

080006c0 <Task_5ms_Entry>:

void Task_5ms_Entry(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 5ms message\n");
 80006c4:	4805      	ldr	r0, [pc, #20]	@ (80006dc <Task_5ms_Entry+0x1c>)
 80006c6:	f000 f8e1 	bl	800088c <DEBUG_PRINTF>
	RESET_5MS_TASK;
 80006ca:	4b05      	ldr	r3, [pc, #20]	@ (80006e0 <Task_5ms_Entry+0x20>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f023 0302 	bic.w	r3, r3, #2
 80006d2:	4a03      	ldr	r2, [pc, #12]	@ (80006e0 <Task_5ms_Entry+0x20>)
 80006d4:	6013      	str	r3, [r2, #0]
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	08005c10 	.word	0x08005c10
 80006e0:	2000008c 	.word	0x2000008c

080006e4 <Task_10ms_Entry>:

void Task_10ms_Entry(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 10ms message\n");
 80006e8:	4805      	ldr	r0, [pc, #20]	@ (8000700 <Task_10ms_Entry+0x1c>)
 80006ea:	f000 f8cf 	bl	800088c <DEBUG_PRINTF>
	RESET_10MS_TASK;
 80006ee:	4b05      	ldr	r3, [pc, #20]	@ (8000704 <Task_10ms_Entry+0x20>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 0304 	bic.w	r3, r3, #4
 80006f6:	4a03      	ldr	r2, [pc, #12]	@ (8000704 <Task_10ms_Entry+0x20>)
 80006f8:	6013      	str	r3, [r2, #0]
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	08005c34 	.word	0x08005c34
 8000704:	2000008c 	.word	0x2000008c

08000708 <Task_50ms_Entry>:

void Task_50ms_Entry(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 50ms message\n");
 800070c:	4805      	ldr	r0, [pc, #20]	@ (8000724 <Task_50ms_Entry+0x1c>)
 800070e:	f000 f8bd 	bl	800088c <DEBUG_PRINTF>
	RESET_50MS_TASK;
 8000712:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <Task_50ms_Entry+0x20>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f023 0308 	bic.w	r3, r3, #8
 800071a:	4a03      	ldr	r2, [pc, #12]	@ (8000728 <Task_50ms_Entry+0x20>)
 800071c:	6013      	str	r3, [r2, #0]
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	08005c58 	.word	0x08005c58
 8000728:	2000008c 	.word	0x2000008c

0800072c <Task_100ms_Entry>:

void Task_100ms_Entry(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 100ms message\n");
 8000730:	4805      	ldr	r0, [pc, #20]	@ (8000748 <Task_100ms_Entry+0x1c>)
 8000732:	f000 f8ab 	bl	800088c <DEBUG_PRINTF>
	RESET_100MS_TASK;
 8000736:	4b05      	ldr	r3, [pc, #20]	@ (800074c <Task_100ms_Entry+0x20>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f023 0310 	bic.w	r3, r3, #16
 800073e:	4a03      	ldr	r2, [pc, #12]	@ (800074c <Task_100ms_Entry+0x20>)
 8000740:	6013      	str	r3, [r2, #0]
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	08005c7c 	.word	0x08005c7c
 800074c:	2000008c 	.word	0x2000008c

08000750 <Task_500ms_Entry>:

void Task_500ms_Entry(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 500ms message\n");
 8000754:	4805      	ldr	r0, [pc, #20]	@ (800076c <Task_500ms_Entry+0x1c>)
 8000756:	f000 f899 	bl	800088c <DEBUG_PRINTF>
	RESET_500MS_TASK;
 800075a:	4b05      	ldr	r3, [pc, #20]	@ (8000770 <Task_500ms_Entry+0x20>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f023 0320 	bic.w	r3, r3, #32
 8000762:	4a03      	ldr	r2, [pc, #12]	@ (8000770 <Task_500ms_Entry+0x20>)
 8000764:	6013      	str	r3, [r2, #0]
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	08005ca0 	.word	0x08005ca0
 8000770:	2000008c 	.word	0x2000008c

08000774 <Task_1000ms_Entry>:

void Task_1000ms_Entry(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	LOG_RELEASE("This is a 1000ms message\n");
 8000778:	4807      	ldr	r0, [pc, #28]	@ (8000798 <Task_1000ms_Entry+0x24>)
 800077a:	f000 f887 	bl	800088c <DEBUG_PRINTF>
	Led_task();
 800077e:	f7ff ff87 	bl	8000690 <Led_task>
	Bsp_AdcValuePrint();
 8000782:	f7ff ff0b 	bl	800059c <Bsp_AdcValuePrint>
	RESET_1000MS_TASK;
 8000786:	4b05      	ldr	r3, [pc, #20]	@ (800079c <Task_1000ms_Entry+0x28>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800078e:	4a03      	ldr	r2, [pc, #12]	@ (800079c <Task_1000ms_Entry+0x28>)
 8000790:	6013      	str	r3, [r2, #0]
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	08005cc4 	.word	0x08005cc4
 800079c:	2000008c 	.word	0x2000008c

080007a0 <OS_Init>:

void OS_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	Msg_Init();
 80007a4:	f000 f856 	bl	8000854 <Msg_Init>
	HAL_TIM_Base_Start_IT(PRINT_TIMER);
 80007a8:	4807      	ldr	r0, [pc, #28]	@ (80007c8 <OS_Init+0x28>)
 80007aa:	f002 feef 	bl	800358c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(GLOBAL_TIMER);
 80007ae:	4807      	ldr	r0, [pc, #28]	@ (80007cc <OS_Init+0x2c>)
 80007b0:	f002 feec 	bl	800358c <HAL_TIM_Base_Start_IT>
	HAL_UARTEx_ReceiveToIdle_DMA(RECEIVE_COMPORT, RxMsg, RX_MESSAGE_LEN);
 80007b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007b8:	4905      	ldr	r1, [pc, #20]	@ (80007d0 <OS_Init+0x30>)
 80007ba:	4806      	ldr	r0, [pc, #24]	@ (80007d4 <OS_Init+0x34>)
 80007bc:	f003 fbcc 	bl	8003f58 <HAL_UARTEx_ReceiveToIdle_DMA>
	Bsp_AdcStart();
 80007c0:	f7ff fede 	bl	8000580 <Bsp_AdcStart>
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000994 	.word	0x20000994
 80007cc:	200009dc 	.word	0x200009dc
 80007d0:	20000190 	.word	0x20000190
 80007d4:	20000a24 	.word	0x20000a24

080007d8 <Start_OS>:

void Start_OS(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	while(1)
	{
		if(GET_1MS_TASK)
 80007dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000850 <Start_OS+0x78>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d101      	bne.n	80007ec <Start_OS+0x14>
		{
			Task_1ms_Entry();
 80007e8:	f7ff ff58 	bl	800069c <Task_1ms_Entry>
		}
		if(GET_5MS_TASK)
 80007ec:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <Start_OS+0x78>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f003 0302 	and.w	r3, r3, #2
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d101      	bne.n	80007fc <Start_OS+0x24>
		{
			Task_5ms_Entry();
 80007f8:	f7ff ff62 	bl	80006c0 <Task_5ms_Entry>
		}
		if(GET_10MS_TASK)
 80007fc:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <Start_OS+0x78>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	2b04      	cmp	r3, #4
 8000806:	d101      	bne.n	800080c <Start_OS+0x34>
		{
			Task_10ms_Entry();
 8000808:	f7ff ff6c 	bl	80006e4 <Task_10ms_Entry>
		}
		if(GET_50MS_TASK)
 800080c:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <Start_OS+0x78>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f003 0308 	and.w	r3, r3, #8
 8000814:	2b08      	cmp	r3, #8
 8000816:	d101      	bne.n	800081c <Start_OS+0x44>
		{
			Task_50ms_Entry();
 8000818:	f7ff ff76 	bl	8000708 <Task_50ms_Entry>
		}
		if(GET_100MS_TASK)
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <Start_OS+0x78>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f003 0310 	and.w	r3, r3, #16
 8000824:	2b10      	cmp	r3, #16
 8000826:	d101      	bne.n	800082c <Start_OS+0x54>
		{
			Task_100ms_Entry();
 8000828:	f7ff ff80 	bl	800072c <Task_100ms_Entry>
		}
		if(GET_500MS_TASK)
 800082c:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <Start_OS+0x78>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f003 0320 	and.w	r3, r3, #32
 8000834:	2b20      	cmp	r3, #32
 8000836:	d101      	bne.n	800083c <Start_OS+0x64>
		{
			Task_500ms_Entry();
 8000838:	f7ff ff8a 	bl	8000750 <Task_500ms_Entry>
		}
		if(GET_1000MS_TASK)
 800083c:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <Start_OS+0x78>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000844:	2b40      	cmp	r3, #64	@ 0x40
 8000846:	d1c9      	bne.n	80007dc <Start_OS+0x4>
		{
			Task_1000ms_Entry();
 8000848:	f7ff ff94 	bl	8000774 <Task_1000ms_Entry>
		if(GET_1MS_TASK)
 800084c:	e7c6      	b.n	80007dc <Start_OS+0x4>
 800084e:	bf00      	nop
 8000850:	2000008c 	.word	0x2000008c

08000854 <Msg_Init>:
char msg_log[MSGLOG_LEN];
uint8_t TxStatus = STD_ON;
MsgLog msg;

void Msg_Init(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
	msg.msgptr = msg_log;
 8000858:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <Msg_Init+0x30>)
 800085a:	4a0b      	ldr	r2, [pc, #44]	@ (8000888 <Msg_Init+0x34>)
 800085c:	601a      	str	r2, [r3, #0]
	msg.msglen = 0;
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <Msg_Init+0x30>)
 8000860:	2200      	movs	r2, #0
 8000862:	809a      	strh	r2, [r3, #4]
	msg.msghead = 0;
 8000864:	4b07      	ldr	r3, [pc, #28]	@ (8000884 <Msg_Init+0x30>)
 8000866:	2200      	movs	r2, #0
 8000868:	80da      	strh	r2, [r3, #6]
	msg.msgtail = 0;
 800086a:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <Msg_Init+0x30>)
 800086c:	2200      	movs	r2, #0
 800086e:	811a      	strh	r2, [r3, #8]
	msg.emptylen = MSGLOG_LEN;
 8000870:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <Msg_Init+0x30>)
 8000872:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 8000876:	815a      	strh	r2, [r3, #10]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	2000087c 	.word	0x2000087c
 8000888:	20000290 	.word	0x20000290

0800088c <DEBUG_PRINTF>:
		msg.msglen = 0;
		msg.emptylen = MSGLOG_LEN;
	}
}

uint32_t DEBUG_PRINTF(const char *format, ...) {
 800088c:	b40f      	push	{r0, r1, r2, r3}
 800088e:	b580      	push	{r7, lr}
 8000890:	b086      	sub	sp, #24
 8000892:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, format);
 8000894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000898:	603b      	str	r3, [r7, #0]

    uint8_t ret = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	74fb      	strb	r3, [r7, #19]
    uint32_t tsLen = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
    uint32_t msgLen = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
    uint32_t totalLen = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]

    uint32_t currentTime = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]

    while(TxStatus != STD_ON);
 80008ae:	bf00      	nop
 80008b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000928 <DEBUG_PRINTF+0x9c>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d1fb      	bne.n	80008b0 <DEBUG_PRINTF+0x24>
    TxStatus = STD_OFF;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000928 <DEBUG_PRINTF+0x9c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
    currentTime = HAL_GetTick();
 80008be:	f000 fe3d 	bl	800153c <HAL_GetTick>
 80008c2:	6078      	str	r0, [r7, #4]
	tsLen = snprintf(TxMsg, sizeof(TxMsg), "%010u", currentTime);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a19      	ldr	r2, [pc, #100]	@ (800092c <DEBUG_PRINTF+0xa0>)
 80008c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008cc:	4818      	ldr	r0, [pc, #96]	@ (8000930 <DEBUG_PRINTF+0xa4>)
 80008ce:	f004 fc7f 	bl	80051d0 <sniprintf>
 80008d2:	4603      	mov	r3, r0
 80008d4:	60fb      	str	r3, [r7, #12]
	msgLen = vsnprintf(TxMsg+tsLen, sizeof(TxMsg), format, args);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	4a15      	ldr	r2, [pc, #84]	@ (8000930 <DEBUG_PRINTF+0xa4>)
 80008da:	1898      	adds	r0, r3, r2
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	6a3a      	ldr	r2, [r7, #32]
 80008e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008e4:	f004 fcd4 	bl	8005290 <vsniprintf>
 80008e8:	4603      	mov	r3, r0
 80008ea:	60bb      	str	r3, [r7, #8]
	totalLen = tsLen + msgLen;
 80008ec:	68fa      	ldr	r2, [r7, #12]
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	4413      	add	r3, r2
 80008f2:	617b      	str	r3, [r7, #20]

    va_end(args);

    if (totalLen == sizeof(TxMsg))
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80008fa:	d101      	bne.n	8000900 <DEBUG_PRINTF+0x74>
    {
    	totalLen = sizeof(TxMsg) - 1;
 80008fc:	23ff      	movs	r3, #255	@ 0xff
 80008fe:	617b      	str	r3, [r7, #20]
//    while(!(HAL_UART_STATE_READY == HAL_UART_GetState(TRANSMIT_COMPORT)));
#if (MSG_PRINT_METHOD == PRINT_IMM)
#if (TRANSMIT_METHOD == POLLING)
    ret = HAL_UART_Transmit(TRANSMIT_COMPORT, (const uint8_t *)TxMsg, totalLen, TRANSMIT_TIMEOUT);
#elif (TRANSMIT_METHOD == DMA)
    ret = HAL_UART_Transmit_DMA(TRANSMIT_COMPORT, (const uint8_t *)TxMsg, totalLen);
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	b29b      	uxth	r3, r3
 8000904:	461a      	mov	r2, r3
 8000906:	490a      	ldr	r1, [pc, #40]	@ (8000930 <DEBUG_PRINTF+0xa4>)
 8000908:	480a      	ldr	r0, [pc, #40]	@ (8000934 <DEBUG_PRINTF+0xa8>)
 800090a:	f003 fab5 	bl	8003e78 <HAL_UART_Transmit_DMA>
 800090e:	4603      	mov	r3, r0
 8000910:	74fb      	strb	r3, [r7, #19]
    ret = HAL_UART_Transmit_IT(TRANSMIT_COMPORT, (const uint8_t *)TxMsg, totalLen);
#endif
#elif (MSG_PRINT_METHOD == PRINT_TASK)
    Msg_Copy(TxMsg, totalLen);
#endif
    return ((totalLen<< 2) | ret);
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	009a      	lsls	r2, r3, #2
 8000916:	7cfb      	ldrb	r3, [r7, #19]
 8000918:	4313      	orrs	r3, r2
}
 800091a:	4618      	mov	r0, r3
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000924:	b004      	add	sp, #16
 8000926:	4770      	bx	lr
 8000928:	20000000 	.word	0x20000000
 800092c:	08005cec 	.word	0x08005cec
 8000930:	20000090 	.word	0x20000090
 8000934:	20000a24 	.word	0x20000a24

08000938 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	807b      	strh	r3, [r7, #2]
	if(RECEIVE_COMPORT == huart)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a0d      	ldr	r2, [pc, #52]	@ (800097c <HAL_UARTEx_RxEventCallback+0x44>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d113      	bne.n	8000974 <HAL_UARTEx_RxEventCallback+0x3c>
	{
		HAL_UART_Transmit_DMA(TRANSMIT_COMPORT, (const uint8_t *)RxMsg, Size);
 800094c:	887b      	ldrh	r3, [r7, #2]
 800094e:	461a      	mov	r2, r3
 8000950:	490b      	ldr	r1, [pc, #44]	@ (8000980 <HAL_UARTEx_RxEventCallback+0x48>)
 8000952:	480a      	ldr	r0, [pc, #40]	@ (800097c <HAL_UARTEx_RxEventCallback+0x44>)
 8000954:	f003 fa90 	bl	8003e78 <HAL_UART_Transmit_DMA>
		HAL_UARTEx_ReceiveToIdle_DMA(RECEIVE_COMPORT, RxMsg, RX_MESSAGE_LEN);
 8000958:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800095c:	4908      	ldr	r1, [pc, #32]	@ (8000980 <HAL_UARTEx_RxEventCallback+0x48>)
 800095e:	4807      	ldr	r0, [pc, #28]	@ (800097c <HAL_UARTEx_RxEventCallback+0x44>)
 8000960:	f003 fafa 	bl	8003f58 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(RECEIVE_DMA, DMA_IT_HT);
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_UARTEx_RxEventCallback+0x4c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f022 0208 	bic.w	r2, r2, #8
 8000972:	601a      	str	r2, [r3, #0]
	}
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000a24 	.word	0x20000a24
 8000980:	20000190 	.word	0x20000190
 8000984:	20000a6c 	.word	0x20000a6c

08000988 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	if(RECEIVE_COMPORT == huart)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a06      	ldr	r2, [pc, #24]	@ (80009ac <HAL_UART_TxCpltCallback+0x24>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d102      	bne.n	800099e <HAL_UART_TxCpltCallback+0x16>
	{
		TxStatus = STD_ON;
 8000998:	4b05      	ldr	r3, [pc, #20]	@ (80009b0 <HAL_UART_TxCpltCallback+0x28>)
 800099a:	2201      	movs	r2, #1
 800099c:	701a      	strb	r2, [r3, #0]
	}
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000a24 	.word	0x20000a24
 80009b0:	20000000 	.word	0x20000000

080009b4 <HAL_UART_RxCpltCallback>:
#include "usart_bsp.h"
#include "usart.h"


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]

}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ce:	463b      	mov	r3, r7
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009da:	4b35      	ldr	r3, [pc, #212]	@ (8000ab0 <MX_ADC1_Init+0xe8>)
 80009dc:	4a35      	ldr	r2, [pc, #212]	@ (8000ab4 <MX_ADC1_Init+0xec>)
 80009de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009e0:	4b33      	ldr	r3, [pc, #204]	@ (8000ab0 <MX_ADC1_Init+0xe8>)
 80009e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009e8:	4b31      	ldr	r3, [pc, #196]	@ (8000ab0 <MX_ADC1_Init+0xe8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009ee:	4b30      	ldr	r3, [pc, #192]	@ (8000ab0 <MX_ADC1_Init+0xe8>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009f4:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab0 <MX_ADC1_Init+0xe8>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009fa:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab0 <MX_ADC1_Init+0xe8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a02:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab0 <MX_ADC1_Init+0xe8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a08:	4b29      	ldr	r3, [pc, #164]	@ (8000ab0 <MX_ADC1_Init+0xe8>)
 8000a0a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ab8 <MX_ADC1_Init+0xf0>)
 8000a0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a0e:	4b28      	ldr	r3, [pc, #160]	@ (8000ab0 <MX_ADC1_Init+0xe8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000a14:	4b26      	ldr	r3, [pc, #152]	@ (8000ab0 <MX_ADC1_Init+0xe8>)
 8000a16:	2204      	movs	r2, #4
 8000a18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a1a:	4b25      	ldr	r3, [pc, #148]	@ (8000ab0 <MX_ADC1_Init+0xe8>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a22:	4b23      	ldr	r3, [pc, #140]	@ (8000ab0 <MX_ADC1_Init+0xe8>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a28:	4821      	ldr	r0, [pc, #132]	@ (8000ab0 <MX_ADC1_Init+0xe8>)
 8000a2a:	f000 fd93 	bl	8001554 <HAL_ADC_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a34:	f000 fa34 	bl	8000ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a38:	2306      	movs	r3, #6
 8000a3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000a40:	2304      	movs	r3, #4
 8000a42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	4619      	mov	r1, r3
 8000a48:	4819      	ldr	r0, [pc, #100]	@ (8000ab0 <MX_ADC1_Init+0xe8>)
 8000a4a:	f000 feeb 	bl	8001824 <HAL_ADC_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a54:	f000 fa24 	bl	8000ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000a58:	230d      	movs	r3, #13
 8000a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a60:	463b      	mov	r3, r7
 8000a62:	4619      	mov	r1, r3
 8000a64:	4812      	ldr	r0, [pc, #72]	@ (8000ab0 <MX_ADC1_Init+0xe8>)
 8000a66:	f000 fedd 	bl	8001824 <HAL_ADC_ConfigChannel>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a70:	f000 fa16 	bl	8000ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000a74:	2311      	movs	r3, #17
 8000a76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480b      	ldr	r0, [pc, #44]	@ (8000ab0 <MX_ADC1_Init+0xe8>)
 8000a82:	f000 fecf 	bl	8001824 <HAL_ADC_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000a8c:	f000 fa08 	bl	8000ea0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8000a90:	2304      	movs	r3, #4
 8000a92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a94:	463b      	mov	r3, r7
 8000a96:	4619      	mov	r1, r3
 8000a98:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <MX_ADC1_Init+0xe8>)
 8000a9a:	f000 fec3 	bl	8001824 <HAL_ADC_ConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000aa4:	f000 f9fc 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000888 	.word	0x20000888
 8000ab4:	40012000 	.word	0x40012000
 8000ab8:	0f000001 	.word	0x0f000001

08000abc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	@ 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a3c      	ldr	r2, [pc, #240]	@ (8000bcc <HAL_ADC_MspInit+0x110>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d171      	bne.n	8000bc2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b3b      	ldr	r3, [pc, #236]	@ (8000bd0 <HAL_ADC_MspInit+0x114>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae6:	4a3a      	ldr	r2, [pc, #232]	@ (8000bd0 <HAL_ADC_MspInit+0x114>)
 8000ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aee:	4b38      	ldr	r3, [pc, #224]	@ (8000bd0 <HAL_ADC_MspInit+0x114>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b34      	ldr	r3, [pc, #208]	@ (8000bd0 <HAL_ADC_MspInit+0x114>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a33      	ldr	r2, [pc, #204]	@ (8000bd0 <HAL_ADC_MspInit+0x114>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b31      	ldr	r3, [pc, #196]	@ (8000bd0 <HAL_ADC_MspInit+0x114>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd0 <HAL_ADC_MspInit+0x114>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd0 <HAL_ADC_MspInit+0x114>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd0 <HAL_ADC_MspInit+0x114>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b32:	2308      	movs	r3, #8
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b36:	2303      	movs	r3, #3
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4823      	ldr	r0, [pc, #140]	@ (8000bd4 <HAL_ADC_MspInit+0x118>)
 8000b46:	f001 fe31 	bl	80027ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b4a:	2340      	movs	r3, #64	@ 0x40
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	481e      	ldr	r0, [pc, #120]	@ (8000bd8 <HAL_ADC_MspInit+0x11c>)
 8000b5e:	f001 fe25 	bl	80027ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000b62:	4b1e      	ldr	r3, [pc, #120]	@ (8000bdc <HAL_ADC_MspInit+0x120>)
 8000b64:	4a1e      	ldr	r2, [pc, #120]	@ (8000be0 <HAL_ADC_MspInit+0x124>)
 8000b66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b68:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <HAL_ADC_MspInit+0x120>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <HAL_ADC_MspInit+0x120>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b74:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <HAL_ADC_MspInit+0x120>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b7a:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <HAL_ADC_MspInit+0x120>)
 8000b7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b82:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <HAL_ADC_MspInit+0x120>)
 8000b84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <HAL_ADC_MspInit+0x120>)
 8000b8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b92:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <HAL_ADC_MspInit+0x120>)
 8000b94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b98:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <HAL_ADC_MspInit+0x120>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <HAL_ADC_MspInit+0x120>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ba6:	480d      	ldr	r0, [pc, #52]	@ (8000bdc <HAL_ADC_MspInit+0x120>)
 8000ba8:	f001 f9fe 	bl	8001fa8 <HAL_DMA_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000bb2:	f000 f975 	bl	8000ea0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a08      	ldr	r2, [pc, #32]	@ (8000bdc <HAL_ADC_MspInit+0x120>)
 8000bba:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bbc:	4a07      	ldr	r2, [pc, #28]	@ (8000bdc <HAL_ADC_MspInit+0x120>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	@ 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40012000 	.word	0x40012000
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020000 	.word	0x40020000
 8000bdc:	200008d0 	.word	0x200008d0
 8000be0:	40026470 	.word	0x40026470

08000be4 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b30      	ldr	r3, [pc, #192]	@ (8000cb0 <MX_DMA_Init+0xcc>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a2f      	ldr	r2, [pc, #188]	@ (8000cb0 <MX_DMA_Init+0xcc>)
 8000bf4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb0 <MX_DMA_Init+0xcc>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000c06:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb4 <MX_DMA_Init+0xd0>)
 8000c08:	4a2b      	ldr	r2, [pc, #172]	@ (8000cb8 <MX_DMA_Init+0xd4>)
 8000c0a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000c0c:	4b29      	ldr	r3, [pc, #164]	@ (8000cb4 <MX_DMA_Init+0xd0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000c12:	4b28      	ldr	r3, [pc, #160]	@ (8000cb4 <MX_DMA_Init+0xd0>)
 8000c14:	2280      	movs	r2, #128	@ 0x80
 8000c16:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000c18:	4b26      	ldr	r3, [pc, #152]	@ (8000cb4 <MX_DMA_Init+0xd0>)
 8000c1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c1e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000c20:	4b24      	ldr	r3, [pc, #144]	@ (8000cb4 <MX_DMA_Init+0xd0>)
 8000c22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c26:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c28:	4b22      	ldr	r3, [pc, #136]	@ (8000cb4 <MX_DMA_Init+0xd0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c2e:	4b21      	ldr	r3, [pc, #132]	@ (8000cb4 <MX_DMA_Init+0xd0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000c34:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb4 <MX_DMA_Init+0xd0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb4 <MX_DMA_Init+0xd0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c40:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb4 <MX_DMA_Init+0xd0>)
 8000c42:	2204      	movs	r2, #4
 8000c44:	625a      	str	r2, [r3, #36]	@ 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c46:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb4 <MX_DMA_Init+0xd0>)
 8000c48:	2203      	movs	r2, #3
 8000c4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000c4c:	4b19      	ldr	r3, [pc, #100]	@ (8000cb4 <MX_DMA_Init+0xd0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c52:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <MX_DMA_Init+0xd0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000c58:	4816      	ldr	r0, [pc, #88]	@ (8000cb4 <MX_DMA_Init+0xd0>)
 8000c5a:	f001 f9a5 	bl	8001fa8 <HAL_DMA_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_DMA_Init+0x84>
  {
    Error_Handler();
 8000c64:	f000 f91c 	bl	8000ea0 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 13, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	210d      	movs	r1, #13
 8000c6c:	2038      	movs	r0, #56	@ 0x38
 8000c6e:	f001 f964 	bl	8001f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c72:	2038      	movs	r0, #56	@ 0x38
 8000c74:	f001 f97d 	bl	8001f72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 15, 0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	203a      	movs	r0, #58	@ 0x3a
 8000c7e:	f001 f95c 	bl	8001f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000c82:	203a      	movs	r0, #58	@ 0x3a
 8000c84:	f001 f975 	bl	8001f72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	203c      	movs	r0, #60	@ 0x3c
 8000c8e:	f001 f954 	bl	8001f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000c92:	203c      	movs	r0, #60	@ 0x3c
 8000c94:	f001 f96d 	bl	8001f72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 15, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	2046      	movs	r0, #70	@ 0x46
 8000c9e:	f001 f94c 	bl	8001f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000ca2:	2046      	movs	r0, #70	@ 0x46
 8000ca4:	f001 f965 	bl	8001f72 <HAL_NVIC_EnableIRQ>

}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	20000930 	.word	0x20000930
 8000cb8:	40026410 	.word	0x40026410

08000cbc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	4b2b      	ldr	r3, [pc, #172]	@ (8000d84 <MX_GPIO_Init+0xc8>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a2a      	ldr	r2, [pc, #168]	@ (8000d84 <MX_GPIO_Init+0xc8>)
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b28      	ldr	r3, [pc, #160]	@ (8000d84 <MX_GPIO_Init+0xc8>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	4b24      	ldr	r3, [pc, #144]	@ (8000d84 <MX_GPIO_Init+0xc8>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a23      	ldr	r2, [pc, #140]	@ (8000d84 <MX_GPIO_Init+0xc8>)
 8000cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b21      	ldr	r3, [pc, #132]	@ (8000d84 <MX_GPIO_Init+0xc8>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <MX_GPIO_Init+0xc8>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a1c      	ldr	r2, [pc, #112]	@ (8000d84 <MX_GPIO_Init+0xc8>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <MX_GPIO_Init+0xc8>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8000d2c:	4816      	ldr	r0, [pc, #88]	@ (8000d88 <MX_GPIO_Init+0xcc>)
 8000d2e:	f001 fee9 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KEY2_Pin */
  GPIO_InitStruct.Pin = KEY2_Pin;
 8000d32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d38:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4619      	mov	r1, r3
 8000d48:	4810      	ldr	r0, [pc, #64]	@ (8000d8c <MX_GPIO_Init+0xd0>)
 8000d4a:	f001 fd2f 	bl	80027ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 8000d4e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000d52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	4808      	ldr	r0, [pc, #32]	@ (8000d88 <MX_GPIO_Init+0xcc>)
 8000d68:	f001 fd20 	bl	80027ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 14, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	210e      	movs	r1, #14
 8000d70:	2028      	movs	r0, #40	@ 0x28
 8000d72:	f001 f8e2 	bl	8001f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d76:	2028      	movs	r0, #40	@ 0x28
 8000d78:	f001 f8fb 	bl	8001f72 <HAL_NVIC_EnableIRQ>

}
 8000d7c:	bf00      	nop
 8000d7e:	3720      	adds	r7, #32
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40021c00 	.word	0x40021c00
 8000d8c:	40020800 	.word	0x40020800

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d94:	f000 fb6c 	bl	8001470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d98:	f000 f812 	bl	8000dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9c:	f7ff ff8e 	bl	8000cbc <MX_GPIO_Init>
  MX_DMA_Init();
 8000da0:	f7ff ff20 	bl	8000be4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000da4:	f000 fa52 	bl	800124c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000da8:	f000 f9bc 	bl	8001124 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000dac:	f000 f96c 	bl	8001088 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000db0:	f7ff fe0a 	bl	80009c8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  OS_Init();
 8000db4:	f7ff fcf4 	bl	80007a0 <OS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Start_OS();
 8000db8:	f7ff fd0e 	bl	80007d8 <Start_OS>
 8000dbc:	e7fc      	b.n	8000db8 <main+0x28>
	...

08000dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b094      	sub	sp, #80	@ 0x50
 8000dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	2230      	movs	r2, #48	@ 0x30
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f004 fa6c 	bl	80052ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	4b2b      	ldr	r3, [pc, #172]	@ (8000e98 <SystemClock_Config+0xd8>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dec:	4a2a      	ldr	r2, [pc, #168]	@ (8000e98 <SystemClock_Config+0xd8>)
 8000dee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df4:	4b28      	ldr	r3, [pc, #160]	@ (8000e98 <SystemClock_Config+0xd8>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e00:	2300      	movs	r3, #0
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	4b25      	ldr	r3, [pc, #148]	@ (8000e9c <SystemClock_Config+0xdc>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a24      	ldr	r2, [pc, #144]	@ (8000e9c <SystemClock_Config+0xdc>)
 8000e0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	4b22      	ldr	r3, [pc, #136]	@ (8000e9c <SystemClock_Config+0xdc>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e20:	2301      	movs	r3, #1
 8000e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e24:	2310      	movs	r3, #16
 8000e26:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e30:	2308      	movs	r3, #8
 8000e32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e34:	23b4      	movs	r3, #180	@ 0xb4
 8000e36:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e40:	f107 0320 	add.w	r3, r7, #32
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 fef9 	bl	8002c3c <HAL_RCC_OscConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e50:	f000 f826 	bl	8000ea0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e54:	f001 fea2 	bl	8002b9c <HAL_PWREx_EnableOverDrive>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e5e:	f000 f81f 	bl	8000ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e62:	230f      	movs	r3, #15
 8000e64:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e66:	2302      	movs	r3, #2
 8000e68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e6e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	2105      	movs	r1, #5
 8000e80:	4618      	mov	r0, r3
 8000e82:	f002 f953 	bl	800312c <HAL_RCC_ClockConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000e8c:	f000 f808 	bl	8000ea0 <Error_Handler>
  }
}
 8000e90:	bf00      	nop
 8000e92:	3750      	adds	r7, #80	@ 0x50
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40007000 	.word	0x40007000

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
}
 8000ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <Error_Handler+0x8>

08000eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <HAL_MspInit+0x4c>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef8 <HAL_MspInit+0x4c>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef8 <HAL_MspInit+0x4c>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <HAL_MspInit+0x4c>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed6:	4a08      	ldr	r2, [pc, #32]	@ (8000ef8 <HAL_MspInit+0x4c>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000edc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ede:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <HAL_MspInit+0x4c>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <NMI_Handler+0x4>

08000f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <MemManage_Handler+0x4>

08000f14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f52:	f000 fadf 	bl	8001514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f60:	4802      	ldr	r0, [pc, #8]	@ (8000f6c <TIM3_IRQHandler+0x10>)
 8000f62:	f002 fb83 	bl	800366c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000994 	.word	0x20000994

08000f70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f74:	4802      	ldr	r0, [pc, #8]	@ (8000f80 <TIM4_IRQHandler+0x10>)
 8000f76:	f002 fb79 	bl	800366c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200009dc 	.word	0x200009dc

08000f84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f88:	4802      	ldr	r0, [pc, #8]	@ (8000f94 <USART1_IRQHandler+0x10>)
 8000f8a:	f003 f843 	bl	8004014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000a24 	.word	0x20000a24

08000f98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY2_Pin);
 8000f9c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fa0:	f001 fde4 	bl	8002b6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8000fac:	4802      	ldr	r0, [pc, #8]	@ (8000fb8 <DMA2_Stream0_IRQHandler+0x10>)
 8000fae:	f001 f993 	bl	80022d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000930 	.word	0x20000930

08000fbc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000fc0:	4802      	ldr	r0, [pc, #8]	@ (8000fcc <DMA2_Stream2_IRQHandler+0x10>)
 8000fc2:	f001 f989 	bl	80022d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000a6c 	.word	0x20000a6c

08000fd0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <DMA2_Stream4_IRQHandler+0x10>)
 8000fd6:	f001 f97f 	bl	80022d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200008d0 	.word	0x200008d0

08000fe4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <DMA2_Stream7_IRQHandler+0x10>)
 8000fea:	f001 f975 	bl	80022d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000acc 	.word	0x20000acc

08000ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001000:	4a14      	ldr	r2, [pc, #80]	@ (8001054 <_sbrk+0x5c>)
 8001002:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <_sbrk+0x60>)
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800100c:	4b13      	ldr	r3, [pc, #76]	@ (800105c <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d102      	bne.n	800101a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001014:	4b11      	ldr	r3, [pc, #68]	@ (800105c <_sbrk+0x64>)
 8001016:	4a12      	ldr	r2, [pc, #72]	@ (8001060 <_sbrk+0x68>)
 8001018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	429a      	cmp	r2, r3
 8001026:	d207      	bcs.n	8001038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001028:	f004 f948 	bl	80052bc <__errno>
 800102c:	4603      	mov	r3, r0
 800102e:	220c      	movs	r2, #12
 8001030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	e009      	b.n	800104c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001038:	4b08      	ldr	r3, [pc, #32]	@ (800105c <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103e:	4b07      	ldr	r3, [pc, #28]	@ (800105c <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	4a05      	ldr	r2, [pc, #20]	@ (800105c <_sbrk+0x64>)
 8001048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104a:	68fb      	ldr	r3, [r7, #12]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20030000 	.word	0x20030000
 8001058:	00000400 	.word	0x00000400
 800105c:	20000990 	.word	0x20000990
 8001060:	20000c78 	.word	0x20000c78

08001064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <SystemInit+0x20>)
 800106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800106e:	4a05      	ldr	r2, [pc, #20]	@ (8001084 <SystemInit+0x20>)
 8001070:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001074:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010a4:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_TIM3_Init+0x94>)
 80010a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001120 <MX_TIM3_Init+0x98>)
 80010a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9000-1;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <MX_TIM3_Init+0x94>)
 80010ac:	f242 3227 	movw	r2, #8999	@ 0x2327
 80010b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <MX_TIM3_Init+0x94>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80010b8:	4b18      	ldr	r3, [pc, #96]	@ (800111c <MX_TIM3_Init+0x94>)
 80010ba:	f242 720f 	movw	r2, #9999	@ 0x270f
 80010be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c0:	4b16      	ldr	r3, [pc, #88]	@ (800111c <MX_TIM3_Init+0x94>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <MX_TIM3_Init+0x94>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010cc:	4813      	ldr	r0, [pc, #76]	@ (800111c <MX_TIM3_Init+0x94>)
 80010ce:	f002 fa0d 	bl	80034ec <HAL_TIM_Base_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80010d8:	f7ff fee2 	bl	8000ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	4619      	mov	r1, r3
 80010e8:	480c      	ldr	r0, [pc, #48]	@ (800111c <MX_TIM3_Init+0x94>)
 80010ea:	f002 fbaf 	bl	800384c <HAL_TIM_ConfigClockSource>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80010f4:	f7ff fed4 	bl	8000ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f8:	2300      	movs	r3, #0
 80010fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	@ (800111c <MX_TIM3_Init+0x94>)
 8001106:	f002 fdd7 	bl	8003cb8 <HAL_TIMEx_MasterConfigSynchronization>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001110:	f7ff fec6 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000994 	.word	0x20000994
 8001120:	40000400 	.word	0x40000400

08001124 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001138:	463b      	mov	r3, r7
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001140:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <MX_TIM4_Init+0x94>)
 8001142:	4a1e      	ldr	r2, [pc, #120]	@ (80011bc <MX_TIM4_Init+0x98>)
 8001144:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 900-1;
 8001146:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <MX_TIM4_Init+0x94>)
 8001148:	f240 3283 	movw	r2, #899	@ 0x383
 800114c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114e:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <MX_TIM4_Init+0x94>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001154:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <MX_TIM4_Init+0x94>)
 8001156:	2263      	movs	r2, #99	@ 0x63
 8001158:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115a:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <MX_TIM4_Init+0x94>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001160:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <MX_TIM4_Init+0x94>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001166:	4814      	ldr	r0, [pc, #80]	@ (80011b8 <MX_TIM4_Init+0x94>)
 8001168:	f002 f9c0 	bl	80034ec <HAL_TIM_Base_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001172:	f7ff fe95 	bl	8000ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001176:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800117a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	4619      	mov	r1, r3
 8001182:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <MX_TIM4_Init+0x94>)
 8001184:	f002 fb62 	bl	800384c <HAL_TIM_ConfigClockSource>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800118e:	f7ff fe87 	bl	8000ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	@ (80011b8 <MX_TIM4_Init+0x94>)
 80011a0:	f002 fd8a 	bl	8003cb8 <HAL_TIMEx_MasterConfigSynchronization>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80011aa:	f7ff fe79 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200009dc 	.word	0x200009dc
 80011bc:	40000800 	.word	0x40000800

080011c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001240 <HAL_TIM_Base_MspInit+0x80>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d116      	bne.n	8001200 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <HAL_TIM_Base_MspInit+0x84>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	4a1a      	ldr	r2, [pc, #104]	@ (8001244 <HAL_TIM_Base_MspInit+0x84>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e2:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <HAL_TIM_Base_MspInit+0x84>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2101      	movs	r1, #1
 80011f2:	201d      	movs	r0, #29
 80011f4:	f000 fea1 	bl	8001f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011f8:	201d      	movs	r0, #29
 80011fa:	f000 feba 	bl	8001f72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80011fe:	e01a      	b.n	8001236 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a10      	ldr	r2, [pc, #64]	@ (8001248 <HAL_TIM_Base_MspInit+0x88>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d115      	bne.n	8001236 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4b0d      	ldr	r3, [pc, #52]	@ (8001244 <HAL_TIM_Base_MspInit+0x84>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	4a0c      	ldr	r2, [pc, #48]	@ (8001244 <HAL_TIM_Base_MspInit+0x84>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	6413      	str	r3, [r2, #64]	@ 0x40
 800121a:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <HAL_TIM_Base_MspInit+0x84>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2105      	movs	r1, #5
 800122a:	201e      	movs	r0, #30
 800122c:	f000 fe85 	bl	8001f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001230:	201e      	movs	r0, #30
 8001232:	f000 fe9e 	bl	8001f72 <HAL_NVIC_EnableIRQ>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40000400 	.word	0x40000400
 8001244:	40023800 	.word	0x40023800
 8001248:	40000800 	.word	0x40000800

0800124c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001250:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001252:	4a12      	ldr	r2, [pc, #72]	@ (800129c <MX_USART1_UART_Init+0x50>)
 8001254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001256:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_USART1_UART_Init+0x4c>)
 8001284:	f002 fda8 	bl	8003dd8 <HAL_UART_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800128e:	f7ff fe07 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000a24 	.word	0x20000a24
 800129c:	40011000 	.word	0x40011000

080012a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	@ 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a50      	ldr	r2, [pc, #320]	@ (8001400 <HAL_UART_MspInit+0x160>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	f040 809a 	bne.w	80013f8 <HAL_UART_MspInit+0x158>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	4b4e      	ldr	r3, [pc, #312]	@ (8001404 <HAL_UART_MspInit+0x164>)
 80012ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001404 <HAL_UART_MspInit+0x164>)
 80012ce:	f043 0310 	orr.w	r3, r3, #16
 80012d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001404 <HAL_UART_MspInit+0x164>)
 80012d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d8:	f003 0310 	and.w	r3, r3, #16
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	4b47      	ldr	r3, [pc, #284]	@ (8001404 <HAL_UART_MspInit+0x164>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e8:	4a46      	ldr	r2, [pc, #280]	@ (8001404 <HAL_UART_MspInit+0x164>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f0:	4b44      	ldr	r3, [pc, #272]	@ (8001404 <HAL_UART_MspInit+0x164>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USBUART_TX_Pin|USBUART_RX_Pin;
 80012fc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800130e:	2307      	movs	r3, #7
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	483b      	ldr	r0, [pc, #236]	@ (8001408 <HAL_UART_MspInit+0x168>)
 800131a:	f001 fa47 	bl	80027ac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800131e:	4b3b      	ldr	r3, [pc, #236]	@ (800140c <HAL_UART_MspInit+0x16c>)
 8001320:	4a3b      	ldr	r2, [pc, #236]	@ (8001410 <HAL_UART_MspInit+0x170>)
 8001322:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001324:	4b39      	ldr	r3, [pc, #228]	@ (800140c <HAL_UART_MspInit+0x16c>)
 8001326:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800132a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800132c:	4b37      	ldr	r3, [pc, #220]	@ (800140c <HAL_UART_MspInit+0x16c>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001332:	4b36      	ldr	r3, [pc, #216]	@ (800140c <HAL_UART_MspInit+0x16c>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001338:	4b34      	ldr	r3, [pc, #208]	@ (800140c <HAL_UART_MspInit+0x16c>)
 800133a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800133e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001340:	4b32      	ldr	r3, [pc, #200]	@ (800140c <HAL_UART_MspInit+0x16c>)
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001346:	4b31      	ldr	r3, [pc, #196]	@ (800140c <HAL_UART_MspInit+0x16c>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800134c:	4b2f      	ldr	r3, [pc, #188]	@ (800140c <HAL_UART_MspInit+0x16c>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001352:	4b2e      	ldr	r3, [pc, #184]	@ (800140c <HAL_UART_MspInit+0x16c>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001358:	4b2c      	ldr	r3, [pc, #176]	@ (800140c <HAL_UART_MspInit+0x16c>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800135e:	482b      	ldr	r0, [pc, #172]	@ (800140c <HAL_UART_MspInit+0x16c>)
 8001360:	f000 fe22 	bl	8001fa8 <HAL_DMA_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800136a:	f7ff fd99 	bl	8000ea0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a26      	ldr	r2, [pc, #152]	@ (800140c <HAL_UART_MspInit+0x16c>)
 8001372:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001374:	4a25      	ldr	r2, [pc, #148]	@ (800140c <HAL_UART_MspInit+0x16c>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800137a:	4b26      	ldr	r3, [pc, #152]	@ (8001414 <HAL_UART_MspInit+0x174>)
 800137c:	4a26      	ldr	r2, [pc, #152]	@ (8001418 <HAL_UART_MspInit+0x178>)
 800137e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001380:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <HAL_UART_MspInit+0x174>)
 8001382:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001386:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001388:	4b22      	ldr	r3, [pc, #136]	@ (8001414 <HAL_UART_MspInit+0x174>)
 800138a:	2240      	movs	r2, #64	@ 0x40
 800138c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800138e:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <HAL_UART_MspInit+0x174>)
 8001390:	2200      	movs	r2, #0
 8001392:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001394:	4b1f      	ldr	r3, [pc, #124]	@ (8001414 <HAL_UART_MspInit+0x174>)
 8001396:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800139a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800139c:	4b1d      	ldr	r3, [pc, #116]	@ (8001414 <HAL_UART_MspInit+0x174>)
 800139e:	2200      	movs	r2, #0
 80013a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001414 <HAL_UART_MspInit+0x174>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <HAL_UART_MspInit+0x174>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013ae:	4b19      	ldr	r3, [pc, #100]	@ (8001414 <HAL_UART_MspInit+0x174>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013b4:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <HAL_UART_MspInit+0x174>)
 80013b6:	2204      	movs	r2, #4
 80013b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013ba:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <HAL_UART_MspInit+0x174>)
 80013bc:	2203      	movs	r2, #3
 80013be:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80013c0:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <HAL_UART_MspInit+0x174>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80013c6:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <HAL_UART_MspInit+0x174>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80013cc:	4811      	ldr	r0, [pc, #68]	@ (8001414 <HAL_UART_MspInit+0x174>)
 80013ce:	f000 fdeb 	bl	8001fa8 <HAL_DMA_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 80013d8:	f7ff fd62 	bl	8000ea0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a0d      	ldr	r2, [pc, #52]	@ (8001414 <HAL_UART_MspInit+0x174>)
 80013e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80013e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001414 <HAL_UART_MspInit+0x174>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	210e      	movs	r1, #14
 80013ec:	2025      	movs	r0, #37	@ 0x25
 80013ee:	f000 fda4 	bl	8001f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013f2:	2025      	movs	r0, #37	@ 0x25
 80013f4:	f000 fdbd 	bl	8001f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	@ 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40011000 	.word	0x40011000
 8001404:	40023800 	.word	0x40023800
 8001408:	40020000 	.word	0x40020000
 800140c:	20000a6c 	.word	0x20000a6c
 8001410:	40026440 	.word	0x40026440
 8001414:	20000acc 	.word	0x20000acc
 8001418:	400264b8 	.word	0x400264b8

0800141c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800141c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001454 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001420:	f7ff fe20 	bl	8001064 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001424:	480c      	ldr	r0, [pc, #48]	@ (8001458 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001426:	490d      	ldr	r1, [pc, #52]	@ (800145c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001428:	4a0d      	ldr	r2, [pc, #52]	@ (8001460 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800142c:	e002      	b.n	8001434 <LoopCopyDataInit>

0800142e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001432:	3304      	adds	r3, #4

08001434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001438:	d3f9      	bcc.n	800142e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143a:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800143c:	4c0a      	ldr	r4, [pc, #40]	@ (8001468 <LoopFillZerobss+0x22>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001440:	e001      	b.n	8001446 <LoopFillZerobss>

08001442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001444:	3204      	adds	r2, #4

08001446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001448:	d3fb      	bcc.n	8001442 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800144a:	f003 ff3d 	bl	80052c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800144e:	f7ff fc9f 	bl	8000d90 <main>
  bx  lr    
 8001452:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001454:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800145c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001460:	08005d58 	.word	0x08005d58
  ldr r2, =_sbss
 8001464:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001468:	20000c78 	.word	0x20000c78

0800146c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800146c:	e7fe      	b.n	800146c <ADC_IRQHandler>
	...

08001470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001474:	4b0e      	ldr	r3, [pc, #56]	@ (80014b0 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0d      	ldr	r2, [pc, #52]	@ (80014b0 <HAL_Init+0x40>)
 800147a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800147e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001480:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0a      	ldr	r2, [pc, #40]	@ (80014b0 <HAL_Init+0x40>)
 8001486:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800148a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800148c:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <HAL_Init+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a07      	ldr	r2, [pc, #28]	@ (80014b0 <HAL_Init+0x40>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001498:	2003      	movs	r0, #3
 800149a:	f000 fd43 	bl	8001f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800149e:	200f      	movs	r0, #15
 80014a0:	f000 f808 	bl	80014b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a4:	f7ff fd02 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023c00 	.word	0x40023c00

080014b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014bc:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <HAL_InitTick+0x54>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b12      	ldr	r3, [pc, #72]	@ (800150c <HAL_InitTick+0x58>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4619      	mov	r1, r3
 80014c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fd5b 	bl	8001f8e <HAL_SYSTICK_Config>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e00e      	b.n	8001500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b0f      	cmp	r3, #15
 80014e6:	d80a      	bhi.n	80014fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e8:	2200      	movs	r2, #0
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	f000 fd23 	bl	8001f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f4:	4a06      	ldr	r2, [pc, #24]	@ (8001510 <HAL_InitTick+0x5c>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e000      	b.n	8001500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000004 	.word	0x20000004
 800150c:	2000000c 	.word	0x2000000c
 8001510:	20000008 	.word	0x20000008

08001514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <HAL_IncTick+0x20>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_IncTick+0x24>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4413      	add	r3, r2
 8001524:	4a04      	ldr	r2, [pc, #16]	@ (8001538 <HAL_IncTick+0x24>)
 8001526:	6013      	str	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	2000000c 	.word	0x2000000c
 8001538:	20000b2c 	.word	0x20000b2c

0800153c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return uwTick;
 8001540:	4b03      	ldr	r3, [pc, #12]	@ (8001550 <HAL_GetTick+0x14>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000b2c 	.word	0x20000b2c

08001554 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e033      	b.n	80015d2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	2b00      	cmp	r3, #0
 8001570:	d109      	bne.n	8001586 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff faa2 	bl	8000abc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	2b00      	cmp	r3, #0
 8001590:	d118      	bne.n	80015c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800159a:	f023 0302 	bic.w	r3, r3, #2
 800159e:	f043 0202 	orr.w	r2, r3, #2
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 fa6e 	bl	8001a88 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	f023 0303 	bic.w	r3, r3, #3
 80015ba:	f043 0201 	orr.w	r2, r3, #1
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80015c2:	e001      	b.n	80015c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_ADC_Start_DMA+0x1e>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e0e9      	b.n	80017ce <HAL_ADC_Start_DMA+0x1f2>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b01      	cmp	r3, #1
 800160e:	d018      	beq.n	8001642 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0201 	orr.w	r2, r2, #1
 800161e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001620:	4b6d      	ldr	r3, [pc, #436]	@ (80017d8 <HAL_ADC_Start_DMA+0x1fc>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a6d      	ldr	r2, [pc, #436]	@ (80017dc <HAL_ADC_Start_DMA+0x200>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	0c9a      	lsrs	r2, r3, #18
 800162c:	4613      	mov	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4413      	add	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001634:	e002      	b.n	800163c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	3b01      	subs	r3, #1
 800163a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f9      	bne.n	8001636 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800164c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001650:	d107      	bne.n	8001662 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001660:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b01      	cmp	r3, #1
 800166e:	f040 80a1 	bne.w	80017b4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800167a:	f023 0301 	bic.w	r3, r3, #1
 800167e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001690:	2b00      	cmp	r3, #0
 8001692:	d007      	beq.n	80016a4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800169c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016b0:	d106      	bne.n	80016c0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	f023 0206 	bic.w	r2, r3, #6
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80016be:	e002      	b.n	80016c6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016ce:	4b44      	ldr	r3, [pc, #272]	@ (80017e0 <HAL_ADC_Start_DMA+0x204>)
 80016d0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016d6:	4a43      	ldr	r2, [pc, #268]	@ (80017e4 <HAL_ADC_Start_DMA+0x208>)
 80016d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016de:	4a42      	ldr	r2, [pc, #264]	@ (80017e8 <HAL_ADC_Start_DMA+0x20c>)
 80016e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016e6:	4a41      	ldr	r2, [pc, #260]	@ (80017ec <HAL_ADC_Start_DMA+0x210>)
 80016e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80016f2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001702:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001712:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	334c      	adds	r3, #76	@ 0x4c
 800171e:	4619      	mov	r1, r3
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f000 fcee 	bl	8002104 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 031f 	and.w	r3, r3, #31
 8001730:	2b00      	cmp	r3, #0
 8001732:	d12a      	bne.n	800178a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a2d      	ldr	r2, [pc, #180]	@ (80017f0 <HAL_ADC_Start_DMA+0x214>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d015      	beq.n	800176a <HAL_ADC_Start_DMA+0x18e>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a2c      	ldr	r2, [pc, #176]	@ (80017f4 <HAL_ADC_Start_DMA+0x218>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d105      	bne.n	8001754 <HAL_ADC_Start_DMA+0x178>
 8001748:	4b25      	ldr	r3, [pc, #148]	@ (80017e0 <HAL_ADC_Start_DMA+0x204>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 031f 	and.w	r3, r3, #31
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00a      	beq.n	800176a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a27      	ldr	r2, [pc, #156]	@ (80017f8 <HAL_ADC_Start_DMA+0x21c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d136      	bne.n	80017cc <HAL_ADC_Start_DMA+0x1f0>
 800175e:	4b20      	ldr	r3, [pc, #128]	@ (80017e0 <HAL_ADC_Start_DMA+0x204>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	2b00      	cmp	r3, #0
 8001768:	d130      	bne.n	80017cc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d129      	bne.n	80017cc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	e020      	b.n	80017cc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a18      	ldr	r2, [pc, #96]	@ (80017f0 <HAL_ADC_Start_DMA+0x214>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d11b      	bne.n	80017cc <HAL_ADC_Start_DMA+0x1f0>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d114      	bne.n	80017cc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	e00b      	b.n	80017cc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	f043 0210 	orr.w	r2, r3, #16
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c4:	f043 0201 	orr.w	r2, r3, #1
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000004 	.word	0x20000004
 80017dc:	431bde83 	.word	0x431bde83
 80017e0:	40012300 	.word	0x40012300
 80017e4:	08001c81 	.word	0x08001c81
 80017e8:	08001d3b 	.word	0x08001d3b
 80017ec:	08001d57 	.word	0x08001d57
 80017f0:	40012000 	.word	0x40012000
 80017f4:	40012100 	.word	0x40012100
 80017f8:	40012200 	.word	0x40012200

080017fc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_ADC_ConfigChannel+0x1c>
 800183c:	2302      	movs	r3, #2
 800183e:	e113      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x244>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b09      	cmp	r3, #9
 800184e:	d925      	bls.n	800189c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68d9      	ldr	r1, [r3, #12]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	b29b      	uxth	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	3b1e      	subs	r3, #30
 8001866:	2207      	movs	r2, #7
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43da      	mvns	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	400a      	ands	r2, r1
 8001874:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68d9      	ldr	r1, [r3, #12]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	b29b      	uxth	r3, r3
 8001886:	4618      	mov	r0, r3
 8001888:	4603      	mov	r3, r0
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4403      	add	r3, r0
 800188e:	3b1e      	subs	r3, #30
 8001890:	409a      	lsls	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	e022      	b.n	80018e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6919      	ldr	r1, [r3, #16]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	4613      	mov	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	2207      	movs	r2, #7
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	400a      	ands	r2, r1
 80018be:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6919      	ldr	r1, [r3, #16]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	4618      	mov	r0, r3
 80018d2:	4603      	mov	r3, r0
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4403      	add	r3, r0
 80018d8:	409a      	lsls	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d824      	bhi.n	8001934 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	3b05      	subs	r3, #5
 80018fc:	221f      	movs	r2, #31
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43da      	mvns	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	400a      	ands	r2, r1
 800190a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	b29b      	uxth	r3, r3
 8001918:	4618      	mov	r0, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	3b05      	subs	r3, #5
 8001926:	fa00 f203 	lsl.w	r2, r0, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	635a      	str	r2, [r3, #52]	@ 0x34
 8001932:	e04c      	b.n	80019ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b0c      	cmp	r3, #12
 800193a:	d824      	bhi.n	8001986 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	3b23      	subs	r3, #35	@ 0x23
 800194e:	221f      	movs	r2, #31
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43da      	mvns	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	400a      	ands	r2, r1
 800195c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	b29b      	uxth	r3, r3
 800196a:	4618      	mov	r0, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	3b23      	subs	r3, #35	@ 0x23
 8001978:	fa00 f203 	lsl.w	r2, r0, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	631a      	str	r2, [r3, #48]	@ 0x30
 8001984:	e023      	b.n	80019ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	3b41      	subs	r3, #65	@ 0x41
 8001998:	221f      	movs	r2, #31
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	400a      	ands	r2, r1
 80019a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	4618      	mov	r0, r3
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	3b41      	subs	r3, #65	@ 0x41
 80019c2:	fa00 f203 	lsl.w	r2, r0, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019ce:	4b29      	ldr	r3, [pc, #164]	@ (8001a74 <HAL_ADC_ConfigChannel+0x250>)
 80019d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a28      	ldr	r2, [pc, #160]	@ (8001a78 <HAL_ADC_ConfigChannel+0x254>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d10f      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x1d8>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b12      	cmp	r3, #18
 80019e2:	d10b      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1d      	ldr	r2, [pc, #116]	@ (8001a78 <HAL_ADC_ConfigChannel+0x254>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d12b      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x23a>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a7c <HAL_ADC_ConfigChannel+0x258>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d003      	beq.n	8001a18 <HAL_ADC_ConfigChannel+0x1f4>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b11      	cmp	r3, #17
 8001a16:	d122      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a11      	ldr	r2, [pc, #68]	@ (8001a7c <HAL_ADC_ConfigChannel+0x258>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d111      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a3a:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <HAL_ADC_ConfigChannel+0x25c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a11      	ldr	r2, [pc, #68]	@ (8001a84 <HAL_ADC_ConfigChannel+0x260>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	0c9a      	lsrs	r2, r3, #18
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a50:	e002      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f9      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	40012300 	.word	0x40012300
 8001a78:	40012000 	.word	0x40012000
 8001a7c:	10000012 	.word	0x10000012
 8001a80:	20000004 	.word	0x20000004
 8001a84:	431bde83 	.word	0x431bde83

08001a88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a90:	4b79      	ldr	r3, [pc, #484]	@ (8001c78 <ADC_Init+0x1f0>)
 8001a92:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001abc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6859      	ldr	r1, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	021a      	lsls	r2, r3, #8
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ae0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6859      	ldr	r1, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6899      	ldr	r1, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1a:	4a58      	ldr	r2, [pc, #352]	@ (8001c7c <ADC_Init+0x1f4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d022      	beq.n	8001b66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6899      	ldr	r1, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6899      	ldr	r1, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	e00f      	b.n	8001b86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b84:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0202 	bic.w	r2, r2, #2
 8001b94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6899      	ldr	r1, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	7e1b      	ldrb	r3, [r3, #24]
 8001ba0:	005a      	lsls	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d01b      	beq.n	8001bec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bc2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001bd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6859      	ldr	r1, [r3, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bde:	3b01      	subs	r3, #1
 8001be0:	035a      	lsls	r2, r3, #13
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	e007      	b.n	8001bfc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bfa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	051a      	lsls	r2, r3, #20
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6899      	ldr	r1, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c3e:	025a      	lsls	r2, r3, #9
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6899      	ldr	r1, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	029a      	lsls	r2, r3, #10
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	609a      	str	r2, [r3, #8]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	40012300 	.word	0x40012300
 8001c7c:	0f000001 	.word	0x0f000001

08001c80 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d13c      	bne.n	8001d14 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d12b      	bne.n	8001d0c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d127      	bne.n	8001d0c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d006      	beq.n	8001cd8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d119      	bne.n	8001d0c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0220 	bic.w	r2, r2, #32
 8001ce6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d105      	bne.n	8001d0c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d04:	f043 0201 	orr.w	r2, r3, #1
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f7fe fc5f 	bl	80005d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d12:	e00e      	b.n	8001d32 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f7ff fd75 	bl	8001810 <HAL_ADC_ErrorCallback>
}
 8001d26:	e004      	b.n	8001d32 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	4798      	blx	r3
}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d46:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f7ff fd57 	bl	80017fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d62:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2240      	movs	r2, #64	@ 0x40
 8001d68:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6e:	f043 0204 	orr.w	r2, r3, #4
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f7ff fd4a 	bl	8001810 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d7c:	bf00      	nop
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d94:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001da0:	4013      	ands	r3, r2
 8001da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db6:	4a04      	ldr	r2, [pc, #16]	@ (8001dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	60d3      	str	r3, [r2, #12]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd0:	4b04      	ldr	r3, [pc, #16]	@ (8001de4 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	f003 0307 	and.w	r3, r3, #7
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	db0b      	blt.n	8001e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	f003 021f 	and.w	r2, r3, #31
 8001e00:	4907      	ldr	r1, [pc, #28]	@ (8001e20 <__NVIC_EnableIRQ+0x38>)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	2001      	movs	r0, #1
 8001e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000e100 	.word	0xe000e100

08001e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	6039      	str	r1, [r7, #0]
 8001e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	db0a      	blt.n	8001e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	490c      	ldr	r1, [pc, #48]	@ (8001e70 <__NVIC_SetPriority+0x4c>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	0112      	lsls	r2, r2, #4
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	440b      	add	r3, r1
 8001e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e4c:	e00a      	b.n	8001e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4908      	ldr	r1, [pc, #32]	@ (8001e74 <__NVIC_SetPriority+0x50>)
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	3b04      	subs	r3, #4
 8001e5c:	0112      	lsls	r2, r2, #4
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	440b      	add	r3, r1
 8001e62:	761a      	strb	r2, [r3, #24]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000e100 	.word	0xe000e100
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	@ 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f1c3 0307 	rsb	r3, r3, #7
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	bf28      	it	cs
 8001e96:	2304      	movcs	r3, #4
 8001e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d902      	bls.n	8001ea8 <NVIC_EncodePriority+0x30>
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3b03      	subs	r3, #3
 8001ea6:	e000      	b.n	8001eaa <NVIC_EncodePriority+0x32>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	401a      	ands	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43d9      	mvns	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	4313      	orrs	r3, r2
         );
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3724      	adds	r7, #36	@ 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ef0:	d301      	bcc.n	8001ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00f      	b.n	8001f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f20 <SysTick_Config+0x40>)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001efe:	210f      	movs	r1, #15
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f7ff ff8e 	bl	8001e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f08:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <SysTick_Config+0x40>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0e:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <SysTick_Config+0x40>)
 8001f10:	2207      	movs	r2, #7
 8001f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	e000e010 	.word	0xe000e010

08001f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ff29 	bl	8001d84 <__NVIC_SetPriorityGrouping>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
 8001f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f4c:	f7ff ff3e 	bl	8001dcc <__NVIC_GetPriorityGrouping>
 8001f50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	6978      	ldr	r0, [r7, #20]
 8001f58:	f7ff ff8e 	bl	8001e78 <NVIC_EncodePriority>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff5d 	bl	8001e24 <__NVIC_SetPriority>
}
 8001f6a:	bf00      	nop
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4603      	mov	r3, r0
 8001f7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff31 	bl	8001de8 <__NVIC_EnableIRQ>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ffa2 	bl	8001ee0 <SysTick_Config>
 8001f9c:	4603      	mov	r3, r0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fb4:	f7ff fac2 	bl	800153c <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e099      	b.n	80020f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0201 	bic.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe4:	e00f      	b.n	8002006 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fe6:	f7ff faa9 	bl	800153c <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b05      	cmp	r3, #5
 8001ff2:	d908      	bls.n	8002006 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e078      	b.n	80020f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1e8      	bne.n	8001fe6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	4b38      	ldr	r3, [pc, #224]	@ (8002100 <HAL_DMA_Init+0x158>)
 8002020:	4013      	ands	r3, r2
 8002022:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002032:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800204a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	4313      	orrs	r3, r2
 8002056:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205c:	2b04      	cmp	r3, #4
 800205e:	d107      	bne.n	8002070 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002068:	4313      	orrs	r3, r2
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4313      	orrs	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f023 0307 	bic.w	r3, r3, #7
 8002086:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	4313      	orrs	r3, r2
 8002090:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	2b04      	cmp	r3, #4
 8002098:	d117      	bne.n	80020ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00e      	beq.n	80020ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 fb01 	bl	80026b4 <DMA_CheckFifoParam>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2240      	movs	r2, #64	@ 0x40
 80020bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020c6:	2301      	movs	r3, #1
 80020c8:	e016      	b.n	80020f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 fab8 	bl	8002648 <DMA_CalcBaseAndBitshift>
 80020d8:	4603      	mov	r3, r0
 80020da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e0:	223f      	movs	r2, #63	@ 0x3f
 80020e2:	409a      	lsls	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	f010803f 	.word	0xf010803f

08002104 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_DMA_Start_IT+0x26>
 8002126:	2302      	movs	r3, #2
 8002128:	e040      	b.n	80021ac <HAL_DMA_Start_IT+0xa8>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b01      	cmp	r3, #1
 800213c:	d12f      	bne.n	800219e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2202      	movs	r2, #2
 8002142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 fa4a 	bl	80025ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215c:	223f      	movs	r2, #63	@ 0x3f
 800215e:	409a      	lsls	r2, r3
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0216 	orr.w	r2, r2, #22
 8002172:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0208 	orr.w	r2, r2, #8
 800218a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	e005      	b.n	80021aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021a6:	2302      	movs	r3, #2
 80021a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021c2:	f7ff f9bb 	bl	800153c <HAL_GetTick>
 80021c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d008      	beq.n	80021e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2280      	movs	r2, #128	@ 0x80
 80021d8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e052      	b.n	800228c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0216 	bic.w	r2, r2, #22
 80021f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695a      	ldr	r2, [r3, #20]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002204:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	2b00      	cmp	r3, #0
 800220c:	d103      	bne.n	8002216 <HAL_DMA_Abort+0x62>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0208 	bic.w	r2, r2, #8
 8002224:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0201 	bic.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002236:	e013      	b.n	8002260 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002238:	f7ff f980 	bl	800153c <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b05      	cmp	r3, #5
 8002244:	d90c      	bls.n	8002260 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2220      	movs	r2, #32
 800224a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2203      	movs	r2, #3
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e015      	b.n	800228c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1e4      	bne.n	8002238 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002272:	223f      	movs	r2, #63	@ 0x3f
 8002274:	409a      	lsls	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d004      	beq.n	80022b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2280      	movs	r2, #128	@ 0x80
 80022ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00c      	b.n	80022cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2205      	movs	r2, #5
 80022b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022e4:	4b8e      	ldr	r3, [pc, #568]	@ (8002520 <HAL_DMA_IRQHandler+0x248>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a8e      	ldr	r2, [pc, #568]	@ (8002524 <HAL_DMA_IRQHandler+0x24c>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	0a9b      	lsrs	r3, r3, #10
 80022f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002302:	2208      	movs	r2, #8
 8002304:	409a      	lsls	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d01a      	beq.n	8002344 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d013      	beq.n	8002344 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0204 	bic.w	r2, r2, #4
 800232a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002330:	2208      	movs	r2, #8
 8002332:	409a      	lsls	r2, r3
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800233c:	f043 0201 	orr.w	r2, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002348:	2201      	movs	r2, #1
 800234a:	409a      	lsls	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d012      	beq.n	800237a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00b      	beq.n	800237a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002366:	2201      	movs	r2, #1
 8002368:	409a      	lsls	r2, r3
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002372:	f043 0202 	orr.w	r2, r3, #2
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237e:	2204      	movs	r2, #4
 8002380:	409a      	lsls	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d012      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00b      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239c:	2204      	movs	r2, #4
 800239e:	409a      	lsls	r2, r3
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a8:	f043 0204 	orr.w	r2, r3, #4
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b4:	2210      	movs	r2, #16
 80023b6:	409a      	lsls	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d043      	beq.n	8002448 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d03c      	beq.n	8002448 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d2:	2210      	movs	r2, #16
 80023d4:	409a      	lsls	r2, r3
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d018      	beq.n	800241a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d108      	bne.n	8002408 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d024      	beq.n	8002448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	4798      	blx	r3
 8002406:	e01f      	b.n	8002448 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800240c:	2b00      	cmp	r3, #0
 800240e:	d01b      	beq.n	8002448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
 8002418:	e016      	b.n	8002448 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d107      	bne.n	8002438 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0208 	bic.w	r2, r2, #8
 8002436:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244c:	2220      	movs	r2, #32
 800244e:	409a      	lsls	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 808f 	beq.w	8002578 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8087 	beq.w	8002578 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246e:	2220      	movs	r2, #32
 8002470:	409a      	lsls	r2, r3
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b05      	cmp	r3, #5
 8002480:	d136      	bne.n	80024f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0216 	bic.w	r2, r2, #22
 8002490:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695a      	ldr	r2, [r3, #20]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d103      	bne.n	80024b2 <HAL_DMA_IRQHandler+0x1da>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0208 	bic.w	r2, r2, #8
 80024c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c6:	223f      	movs	r2, #63	@ 0x3f
 80024c8:	409a      	lsls	r2, r3
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d07e      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	4798      	blx	r3
        }
        return;
 80024ee:	e079      	b.n	80025e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d01d      	beq.n	800253a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10d      	bne.n	8002528 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002510:	2b00      	cmp	r3, #0
 8002512:	d031      	beq.n	8002578 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4798      	blx	r3
 800251c:	e02c      	b.n	8002578 <HAL_DMA_IRQHandler+0x2a0>
 800251e:	bf00      	nop
 8002520:	20000004 	.word	0x20000004
 8002524:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d023      	beq.n	8002578 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	4798      	blx	r3
 8002538:	e01e      	b.n	8002578 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10f      	bne.n	8002568 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0210 	bic.w	r2, r2, #16
 8002556:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257c:	2b00      	cmp	r3, #0
 800257e:	d032      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d022      	beq.n	80025d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2205      	movs	r2, #5
 8002590:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	3301      	adds	r3, #1
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d307      	bcc.n	80025c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f2      	bne.n	80025a4 <HAL_DMA_IRQHandler+0x2cc>
 80025be:	e000      	b.n	80025c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	4798      	blx	r3
 80025e2:	e000      	b.n	80025e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80025e4:	bf00      	nop
    }
  }
}
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002608:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b40      	cmp	r3, #64	@ 0x40
 8002618:	d108      	bne.n	800262c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800262a:	e007      	b.n	800263c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	60da      	str	r2, [r3, #12]
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	3b10      	subs	r3, #16
 8002658:	4a14      	ldr	r2, [pc, #80]	@ (80026ac <DMA_CalcBaseAndBitshift+0x64>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002662:	4a13      	ldr	r2, [pc, #76]	@ (80026b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4413      	add	r3, r2
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b03      	cmp	r3, #3
 8002674:	d909      	bls.n	800268a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800267e:	f023 0303 	bic.w	r3, r3, #3
 8002682:	1d1a      	adds	r2, r3, #4
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	659a      	str	r2, [r3, #88]	@ 0x58
 8002688:	e007      	b.n	800269a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002692:	f023 0303 	bic.w	r3, r3, #3
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	aaaaaaab 	.word	0xaaaaaaab
 80026b0:	08005d0c 	.word	0x08005d0c

080026b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d11f      	bne.n	800270e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d856      	bhi.n	8002782 <DMA_CheckFifoParam+0xce>
 80026d4:	a201      	add	r2, pc, #4	@ (adr r2, 80026dc <DMA_CheckFifoParam+0x28>)
 80026d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026da:	bf00      	nop
 80026dc:	080026ed 	.word	0x080026ed
 80026e0:	080026ff 	.word	0x080026ff
 80026e4:	080026ed 	.word	0x080026ed
 80026e8:	08002783 	.word	0x08002783
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d046      	beq.n	8002786 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026fc:	e043      	b.n	8002786 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002702:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002706:	d140      	bne.n	800278a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270c:	e03d      	b.n	800278a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002716:	d121      	bne.n	800275c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b03      	cmp	r3, #3
 800271c:	d837      	bhi.n	800278e <DMA_CheckFifoParam+0xda>
 800271e:	a201      	add	r2, pc, #4	@ (adr r2, 8002724 <DMA_CheckFifoParam+0x70>)
 8002720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002724:	08002735 	.word	0x08002735
 8002728:	0800273b 	.word	0x0800273b
 800272c:	08002735 	.word	0x08002735
 8002730:	0800274d 	.word	0x0800274d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
      break;
 8002738:	e030      	b.n	800279c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d025      	beq.n	8002792 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800274a:	e022      	b.n	8002792 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002750:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002754:	d11f      	bne.n	8002796 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800275a:	e01c      	b.n	8002796 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d903      	bls.n	800276a <DMA_CheckFifoParam+0xb6>
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b03      	cmp	r3, #3
 8002766:	d003      	beq.n	8002770 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002768:	e018      	b.n	800279c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
      break;
 800276e:	e015      	b.n	800279c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002774:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00e      	beq.n	800279a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
      break;
 8002780:	e00b      	b.n	800279a <DMA_CheckFifoParam+0xe6>
      break;
 8002782:	bf00      	nop
 8002784:	e00a      	b.n	800279c <DMA_CheckFifoParam+0xe8>
      break;
 8002786:	bf00      	nop
 8002788:	e008      	b.n	800279c <DMA_CheckFifoParam+0xe8>
      break;
 800278a:	bf00      	nop
 800278c:	e006      	b.n	800279c <DMA_CheckFifoParam+0xe8>
      break;
 800278e:	bf00      	nop
 8002790:	e004      	b.n	800279c <DMA_CheckFifoParam+0xe8>
      break;
 8002792:	bf00      	nop
 8002794:	e002      	b.n	800279c <DMA_CheckFifoParam+0xe8>
      break;   
 8002796:	bf00      	nop
 8002798:	e000      	b.n	800279c <DMA_CheckFifoParam+0xe8>
      break;
 800279a:	bf00      	nop
    }
  } 
  
  return status; 
 800279c:	7bfb      	ldrb	r3, [r7, #15]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop

080027ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b089      	sub	sp, #36	@ 0x24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027be:	2300      	movs	r3, #0
 80027c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	e177      	b.n	8002ab8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027c8:	2201      	movs	r2, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	f040 8166 	bne.w	8002ab2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d005      	beq.n	80027fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d130      	bne.n	8002860 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2203      	movs	r2, #3
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002834:	2201      	movs	r2, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 0201 	and.w	r2, r3, #1
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	2b03      	cmp	r3, #3
 800286a:	d017      	beq.n	800289c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	2203      	movs	r2, #3
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d123      	bne.n	80028f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	08da      	lsrs	r2, r3, #3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3208      	adds	r2, #8
 80028b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	220f      	movs	r2, #15
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	08da      	lsrs	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3208      	adds	r2, #8
 80028ea:	69b9      	ldr	r1, [r7, #24]
 80028ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	2203      	movs	r2, #3
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0203 	and.w	r2, r3, #3
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80c0 	beq.w	8002ab2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	4b66      	ldr	r3, [pc, #408]	@ (8002ad0 <HAL_GPIO_Init+0x324>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293a:	4a65      	ldr	r2, [pc, #404]	@ (8002ad0 <HAL_GPIO_Init+0x324>)
 800293c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002940:	6453      	str	r3, [r2, #68]	@ 0x44
 8002942:	4b63      	ldr	r3, [pc, #396]	@ (8002ad0 <HAL_GPIO_Init+0x324>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800294e:	4a61      	ldr	r2, [pc, #388]	@ (8002ad4 <HAL_GPIO_Init+0x328>)
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	3302      	adds	r3, #2
 8002956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	220f      	movs	r2, #15
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a58      	ldr	r2, [pc, #352]	@ (8002ad8 <HAL_GPIO_Init+0x32c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d037      	beq.n	80029ea <HAL_GPIO_Init+0x23e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a57      	ldr	r2, [pc, #348]	@ (8002adc <HAL_GPIO_Init+0x330>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d031      	beq.n	80029e6 <HAL_GPIO_Init+0x23a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a56      	ldr	r2, [pc, #344]	@ (8002ae0 <HAL_GPIO_Init+0x334>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d02b      	beq.n	80029e2 <HAL_GPIO_Init+0x236>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a55      	ldr	r2, [pc, #340]	@ (8002ae4 <HAL_GPIO_Init+0x338>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d025      	beq.n	80029de <HAL_GPIO_Init+0x232>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a54      	ldr	r2, [pc, #336]	@ (8002ae8 <HAL_GPIO_Init+0x33c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d01f      	beq.n	80029da <HAL_GPIO_Init+0x22e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a53      	ldr	r2, [pc, #332]	@ (8002aec <HAL_GPIO_Init+0x340>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d019      	beq.n	80029d6 <HAL_GPIO_Init+0x22a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a52      	ldr	r2, [pc, #328]	@ (8002af0 <HAL_GPIO_Init+0x344>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d013      	beq.n	80029d2 <HAL_GPIO_Init+0x226>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a51      	ldr	r2, [pc, #324]	@ (8002af4 <HAL_GPIO_Init+0x348>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00d      	beq.n	80029ce <HAL_GPIO_Init+0x222>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a50      	ldr	r2, [pc, #320]	@ (8002af8 <HAL_GPIO_Init+0x34c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d007      	beq.n	80029ca <HAL_GPIO_Init+0x21e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a4f      	ldr	r2, [pc, #316]	@ (8002afc <HAL_GPIO_Init+0x350>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d101      	bne.n	80029c6 <HAL_GPIO_Init+0x21a>
 80029c2:	2309      	movs	r3, #9
 80029c4:	e012      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029c6:	230a      	movs	r3, #10
 80029c8:	e010      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029ca:	2308      	movs	r3, #8
 80029cc:	e00e      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029ce:	2307      	movs	r3, #7
 80029d0:	e00c      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029d2:	2306      	movs	r3, #6
 80029d4:	e00a      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029d6:	2305      	movs	r3, #5
 80029d8:	e008      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029da:	2304      	movs	r3, #4
 80029dc:	e006      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029de:	2303      	movs	r3, #3
 80029e0:	e004      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e002      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029ea:	2300      	movs	r3, #0
 80029ec:	69fa      	ldr	r2, [r7, #28]
 80029ee:	f002 0203 	and.w	r2, r2, #3
 80029f2:	0092      	lsls	r2, r2, #2
 80029f4:	4093      	lsls	r3, r2
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029fc:	4935      	ldr	r1, [pc, #212]	@ (8002ad4 <HAL_GPIO_Init+0x328>)
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	089b      	lsrs	r3, r3, #2
 8002a02:	3302      	adds	r3, #2
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b00 <HAL_GPIO_Init+0x354>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a2e:	4a34      	ldr	r2, [pc, #208]	@ (8002b00 <HAL_GPIO_Init+0x354>)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a34:	4b32      	ldr	r3, [pc, #200]	@ (8002b00 <HAL_GPIO_Init+0x354>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a58:	4a29      	ldr	r2, [pc, #164]	@ (8002b00 <HAL_GPIO_Init+0x354>)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a5e:	4b28      	ldr	r3, [pc, #160]	@ (8002b00 <HAL_GPIO_Init+0x354>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a82:	4a1f      	ldr	r2, [pc, #124]	@ (8002b00 <HAL_GPIO_Init+0x354>)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a88:	4b1d      	ldr	r3, [pc, #116]	@ (8002b00 <HAL_GPIO_Init+0x354>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aac:	4a14      	ldr	r2, [pc, #80]	@ (8002b00 <HAL_GPIO_Init+0x354>)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	61fb      	str	r3, [r7, #28]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	2b0f      	cmp	r3, #15
 8002abc:	f67f ae84 	bls.w	80027c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop
 8002ac4:	3724      	adds	r7, #36	@ 0x24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40013800 	.word	0x40013800
 8002ad8:	40020000 	.word	0x40020000
 8002adc:	40020400 	.word	0x40020400
 8002ae0:	40020800 	.word	0x40020800
 8002ae4:	40020c00 	.word	0x40020c00
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40021400 	.word	0x40021400
 8002af0:	40021800 	.word	0x40021800
 8002af4:	40021c00 	.word	0x40021c00
 8002af8:	40022000 	.word	0x40022000
 8002afc:	40022400 	.word	0x40022400
 8002b00:	40013c00 	.word	0x40013c00

08002b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
 8002b10:	4613      	mov	r3, r2
 8002b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b14:	787b      	ldrb	r3, [r7, #1]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b20:	e003      	b.n	8002b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b22:	887b      	ldrh	r3, [r7, #2]
 8002b24:	041a      	lsls	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	619a      	str	r2, [r3, #24]
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b085      	sub	sp, #20
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b48:	887a      	ldrh	r2, [r7, #2]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	041a      	lsls	r2, r3, #16
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	43d9      	mvns	r1, r3
 8002b54:	887b      	ldrh	r3, [r7, #2]
 8002b56:	400b      	ands	r3, r1
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	619a      	str	r2, [r3, #24]
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b76:	4b08      	ldr	r3, [pc, #32]	@ (8002b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b78:	695a      	ldr	r2, [r3, #20]
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d006      	beq.n	8002b90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b82:	4a05      	ldr	r2, [pc, #20]	@ (8002b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fd fd58 	bl	8000640 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40013c00 	.word	0x40013c00

08002b9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	603b      	str	r3, [r7, #0]
 8002baa:	4b20      	ldr	r3, [pc, #128]	@ (8002c2c <HAL_PWREx_EnableOverDrive+0x90>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	4a1f      	ldr	r2, [pc, #124]	@ (8002c2c <HAL_PWREx_EnableOverDrive+0x90>)
 8002bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c2c <HAL_PWREx_EnableOverDrive+0x90>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c30 <HAL_PWREx_EnableOverDrive+0x94>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bc8:	f7fe fcb8 	bl	800153c <HAL_GetTick>
 8002bcc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bce:	e009      	b.n	8002be4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bd0:	f7fe fcb4 	bl	800153c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bde:	d901      	bls.n	8002be4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e01f      	b.n	8002c24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002be4:	4b13      	ldr	r3, [pc, #76]	@ (8002c34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bf0:	d1ee      	bne.n	8002bd0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002bf2:	4b11      	ldr	r3, [pc, #68]	@ (8002c38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bf8:	f7fe fca0 	bl	800153c <HAL_GetTick>
 8002bfc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bfe:	e009      	b.n	8002c14 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c00:	f7fe fc9c 	bl	800153c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c0e:	d901      	bls.n	8002c14 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e007      	b.n	8002c24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c14:	4b07      	ldr	r3, [pc, #28]	@ (8002c34 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c20:	d1ee      	bne.n	8002c00 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	420e0040 	.word	0x420e0040
 8002c34:	40007000 	.word	0x40007000
 8002c38:	420e0044 	.word	0x420e0044

08002c3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e267      	b.n	800311e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d075      	beq.n	8002d46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c5a:	4b88      	ldr	r3, [pc, #544]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d00c      	beq.n	8002c80 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c66:	4b85      	ldr	r3, [pc, #532]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d112      	bne.n	8002c98 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c72:	4b82      	ldr	r3, [pc, #520]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c7e:	d10b      	bne.n	8002c98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c80:	4b7e      	ldr	r3, [pc, #504]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d05b      	beq.n	8002d44 <HAL_RCC_OscConfig+0x108>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d157      	bne.n	8002d44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e242      	b.n	800311e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca0:	d106      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x74>
 8002ca2:	4b76      	ldr	r3, [pc, #472]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a75      	ldr	r2, [pc, #468]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e01d      	b.n	8002cec <HAL_RCC_OscConfig+0xb0>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x98>
 8002cba:	4b70      	ldr	r3, [pc, #448]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a6f      	ldr	r2, [pc, #444]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002cc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	4b6d      	ldr	r3, [pc, #436]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a6c      	ldr	r2, [pc, #432]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e00b      	b.n	8002cec <HAL_RCC_OscConfig+0xb0>
 8002cd4:	4b69      	ldr	r3, [pc, #420]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a68      	ldr	r2, [pc, #416]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002cda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	4b66      	ldr	r3, [pc, #408]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a65      	ldr	r2, [pc, #404]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002ce6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d013      	beq.n	8002d1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7fe fc22 	bl	800153c <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7fe fc1e 	bl	800153c <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	@ 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e207      	b.n	800311e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	4b5b      	ldr	r3, [pc, #364]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0xc0>
 8002d1a:	e014      	b.n	8002d46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fc0e 	bl	800153c <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d24:	f7fe fc0a 	bl	800153c <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	@ 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e1f3      	b.n	800311e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d36:	4b51      	ldr	r3, [pc, #324]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0xe8>
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d063      	beq.n	8002e1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d52:	4b4a      	ldr	r3, [pc, #296]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d5e:	4b47      	ldr	r3, [pc, #284]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d11c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d6a:	4b44      	ldr	r3, [pc, #272]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d116      	bne.n	8002da4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d76:	4b41      	ldr	r3, [pc, #260]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_RCC_OscConfig+0x152>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d001      	beq.n	8002d8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e1c7      	b.n	800311e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4937      	ldr	r1, [pc, #220]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da2:	e03a      	b.n	8002e1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dac:	4b34      	ldr	r3, [pc, #208]	@ (8002e80 <HAL_RCC_OscConfig+0x244>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db2:	f7fe fbc3 	bl	800153c <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dba:	f7fe fbbf 	bl	800153c <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e1a8      	b.n	800311e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd8:	4b28      	ldr	r3, [pc, #160]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4925      	ldr	r1, [pc, #148]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]
 8002dec:	e015      	b.n	8002e1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dee:	4b24      	ldr	r3, [pc, #144]	@ (8002e80 <HAL_RCC_OscConfig+0x244>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7fe fba2 	bl	800153c <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfc:	f7fe fb9e 	bl	800153c <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e187      	b.n	800311e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d036      	beq.n	8002e94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d016      	beq.n	8002e5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e2e:	4b15      	ldr	r3, [pc, #84]	@ (8002e84 <HAL_RCC_OscConfig+0x248>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e34:	f7fe fb82 	bl	800153c <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3c:	f7fe fb7e 	bl	800153c <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e167      	b.n	800311e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <HAL_RCC_OscConfig+0x240>)
 8002e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x200>
 8002e5a:	e01b      	b.n	8002e94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e5c:	4b09      	ldr	r3, [pc, #36]	@ (8002e84 <HAL_RCC_OscConfig+0x248>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e62:	f7fe fb6b 	bl	800153c <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e68:	e00e      	b.n	8002e88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e6a:	f7fe fb67 	bl	800153c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d907      	bls.n	8002e88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e150      	b.n	800311e <HAL_RCC_OscConfig+0x4e2>
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	42470000 	.word	0x42470000
 8002e84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e88:	4b88      	ldr	r3, [pc, #544]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8002e8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1ea      	bne.n	8002e6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 8097 	beq.w	8002fd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea6:	4b81      	ldr	r3, [pc, #516]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10f      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	4b7d      	ldr	r3, [pc, #500]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	4a7c      	ldr	r2, [pc, #496]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8002ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ec2:	4b7a      	ldr	r3, [pc, #488]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed2:	4b77      	ldr	r3, [pc, #476]	@ (80030b0 <HAL_RCC_OscConfig+0x474>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d118      	bne.n	8002f10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ede:	4b74      	ldr	r3, [pc, #464]	@ (80030b0 <HAL_RCC_OscConfig+0x474>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a73      	ldr	r2, [pc, #460]	@ (80030b0 <HAL_RCC_OscConfig+0x474>)
 8002ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eea:	f7fe fb27 	bl	800153c <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef2:	f7fe fb23 	bl	800153c <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e10c      	b.n	800311e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f04:	4b6a      	ldr	r3, [pc, #424]	@ (80030b0 <HAL_RCC_OscConfig+0x474>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d106      	bne.n	8002f26 <HAL_RCC_OscConfig+0x2ea>
 8002f18:	4b64      	ldr	r3, [pc, #400]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1c:	4a63      	ldr	r2, [pc, #396]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f24:	e01c      	b.n	8002f60 <HAL_RCC_OscConfig+0x324>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b05      	cmp	r3, #5
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x30c>
 8002f2e:	4b5f      	ldr	r3, [pc, #380]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f32:	4a5e      	ldr	r2, [pc, #376]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8002f34:	f043 0304 	orr.w	r3, r3, #4
 8002f38:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f3a:	4b5c      	ldr	r3, [pc, #368]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3e:	4a5b      	ldr	r2, [pc, #364]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f46:	e00b      	b.n	8002f60 <HAL_RCC_OscConfig+0x324>
 8002f48:	4b58      	ldr	r3, [pc, #352]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4c:	4a57      	ldr	r2, [pc, #348]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8002f4e:	f023 0301 	bic.w	r3, r3, #1
 8002f52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f54:	4b55      	ldr	r3, [pc, #340]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f58:	4a54      	ldr	r2, [pc, #336]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8002f5a:	f023 0304 	bic.w	r3, r3, #4
 8002f5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d015      	beq.n	8002f94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f68:	f7fe fae8 	bl	800153c <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6e:	e00a      	b.n	8002f86 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f70:	f7fe fae4 	bl	800153c <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e0cb      	b.n	800311e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f86:	4b49      	ldr	r3, [pc, #292]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0ee      	beq.n	8002f70 <HAL_RCC_OscConfig+0x334>
 8002f92:	e014      	b.n	8002fbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f94:	f7fe fad2 	bl	800153c <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9a:	e00a      	b.n	8002fb2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9c:	f7fe face 	bl	800153c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e0b5      	b.n	800311e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb2:	4b3e      	ldr	r3, [pc, #248]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1ee      	bne.n	8002f9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fbe:	7dfb      	ldrb	r3, [r7, #23]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d105      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc4:	4b39      	ldr	r3, [pc, #228]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc8:	4a38      	ldr	r2, [pc, #224]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8002fca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80a1 	beq.w	800311c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fda:	4b34      	ldr	r3, [pc, #208]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d05c      	beq.n	80030a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d141      	bne.n	8003072 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fee:	4b31      	ldr	r3, [pc, #196]	@ (80030b4 <HAL_RCC_OscConfig+0x478>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7fe faa2 	bl	800153c <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffc:	f7fe fa9e 	bl	800153c <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e087      	b.n	800311e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300e:	4b27      	ldr	r3, [pc, #156]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69da      	ldr	r2, [r3, #28]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	019b      	lsls	r3, r3, #6
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003030:	085b      	lsrs	r3, r3, #1
 8003032:	3b01      	subs	r3, #1
 8003034:	041b      	lsls	r3, r3, #16
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303c:	061b      	lsls	r3, r3, #24
 800303e:	491b      	ldr	r1, [pc, #108]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8003040:	4313      	orrs	r3, r2
 8003042:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003044:	4b1b      	ldr	r3, [pc, #108]	@ (80030b4 <HAL_RCC_OscConfig+0x478>)
 8003046:	2201      	movs	r2, #1
 8003048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7fe fa77 	bl	800153c <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003052:	f7fe fa73 	bl	800153c <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e05c      	b.n	800311e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003064:	4b11      	ldr	r3, [pc, #68]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0f0      	beq.n	8003052 <HAL_RCC_OscConfig+0x416>
 8003070:	e054      	b.n	800311c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003072:	4b10      	ldr	r3, [pc, #64]	@ (80030b4 <HAL_RCC_OscConfig+0x478>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fe fa60 	bl	800153c <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003080:	f7fe fa5c 	bl	800153c <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e045      	b.n	800311e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003092:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <HAL_RCC_OscConfig+0x470>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x444>
 800309e:	e03d      	b.n	800311c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d107      	bne.n	80030b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e038      	b.n	800311e <HAL_RCC_OscConfig+0x4e2>
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40007000 	.word	0x40007000
 80030b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003128 <HAL_RCC_OscConfig+0x4ec>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d028      	beq.n	8003118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d121      	bne.n	8003118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030de:	429a      	cmp	r2, r3
 80030e0:	d11a      	bne.n	8003118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030e8:	4013      	ands	r3, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d111      	bne.n	8003118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fe:	085b      	lsrs	r3, r3, #1
 8003100:	3b01      	subs	r3, #1
 8003102:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003104:	429a      	cmp	r2, r3
 8003106:	d107      	bne.n	8003118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003112:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40023800 	.word	0x40023800

0800312c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0cc      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003140:	4b68      	ldr	r3, [pc, #416]	@ (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d90c      	bls.n	8003168 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b65      	ldr	r3, [pc, #404]	@ (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b63      	ldr	r3, [pc, #396]	@ (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0b8      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d020      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003180:	4b59      	ldr	r3, [pc, #356]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4a58      	ldr	r2, [pc, #352]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800318a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003198:	4b53      	ldr	r3, [pc, #332]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	4a52      	ldr	r2, [pc, #328]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a4:	4b50      	ldr	r3, [pc, #320]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	494d      	ldr	r1, [pc, #308]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d044      	beq.n	800324c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	4b47      	ldr	r3, [pc, #284]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d119      	bne.n	800320a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e07f      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d003      	beq.n	80031ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d107      	bne.n	80031fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ea:	4b3f      	ldr	r3, [pc, #252]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e06f      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fa:	4b3b      	ldr	r3, [pc, #236]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e067      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800320a:	4b37      	ldr	r3, [pc, #220]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f023 0203 	bic.w	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4934      	ldr	r1, [pc, #208]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	4313      	orrs	r3, r2
 800321a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800321c:	f7fe f98e 	bl	800153c <HAL_GetTick>
 8003220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003222:	e00a      	b.n	800323a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003224:	f7fe f98a 	bl	800153c <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003232:	4293      	cmp	r3, r2
 8003234:	d901      	bls.n	800323a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e04f      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323a:	4b2b      	ldr	r3, [pc, #172]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 020c 	and.w	r2, r3, #12
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	429a      	cmp	r2, r3
 800324a:	d1eb      	bne.n	8003224 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800324c:	4b25      	ldr	r3, [pc, #148]	@ (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d20c      	bcs.n	8003274 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	4b22      	ldr	r3, [pc, #136]	@ (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003262:	4b20      	ldr	r3, [pc, #128]	@ (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d001      	beq.n	8003274 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e032      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003280:	4b19      	ldr	r3, [pc, #100]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4916      	ldr	r1, [pc, #88]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	4313      	orrs	r3, r2
 8003290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800329e:	4b12      	ldr	r3, [pc, #72]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	490e      	ldr	r1, [pc, #56]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032b2:	f000 f821 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 80032b6:	4602      	mov	r2, r0
 80032b8:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	490a      	ldr	r1, [pc, #40]	@ (80032ec <HAL_RCC_ClockConfig+0x1c0>)
 80032c4:	5ccb      	ldrb	r3, [r1, r3]
 80032c6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ca:	4a09      	ldr	r2, [pc, #36]	@ (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80032ce:	4b09      	ldr	r3, [pc, #36]	@ (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe f8ee 	bl	80014b4 <HAL_InitTick>

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40023c00 	.word	0x40023c00
 80032e8:	40023800 	.word	0x40023800
 80032ec:	08005cf4 	.word	0x08005cf4
 80032f0:	20000004 	.word	0x20000004
 80032f4:	20000008 	.word	0x20000008

080032f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032fc:	b090      	sub	sp, #64	@ 0x40
 80032fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003310:	4b59      	ldr	r3, [pc, #356]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x180>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 030c 	and.w	r3, r3, #12
 8003318:	2b08      	cmp	r3, #8
 800331a:	d00d      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x40>
 800331c:	2b08      	cmp	r3, #8
 800331e:	f200 80a1 	bhi.w	8003464 <HAL_RCC_GetSysClockFreq+0x16c>
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0x34>
 8003326:	2b04      	cmp	r3, #4
 8003328:	d003      	beq.n	8003332 <HAL_RCC_GetSysClockFreq+0x3a>
 800332a:	e09b      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800332c:	4b53      	ldr	r3, [pc, #332]	@ (800347c <HAL_RCC_GetSysClockFreq+0x184>)
 800332e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003330:	e09b      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003332:	4b53      	ldr	r3, [pc, #332]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x188>)
 8003334:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003336:	e098      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003338:	4b4f      	ldr	r3, [pc, #316]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x180>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003340:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003342:	4b4d      	ldr	r3, [pc, #308]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x180>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d028      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800334e:	4b4a      	ldr	r3, [pc, #296]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x180>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	099b      	lsrs	r3, r3, #6
 8003354:	2200      	movs	r2, #0
 8003356:	623b      	str	r3, [r7, #32]
 8003358:	627a      	str	r2, [r7, #36]	@ 0x24
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003360:	2100      	movs	r1, #0
 8003362:	4b47      	ldr	r3, [pc, #284]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x188>)
 8003364:	fb03 f201 	mul.w	r2, r3, r1
 8003368:	2300      	movs	r3, #0
 800336a:	fb00 f303 	mul.w	r3, r0, r3
 800336e:	4413      	add	r3, r2
 8003370:	4a43      	ldr	r2, [pc, #268]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x188>)
 8003372:	fba0 1202 	umull	r1, r2, r0, r2
 8003376:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003378:	460a      	mov	r2, r1
 800337a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800337c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800337e:	4413      	add	r3, r2
 8003380:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003384:	2200      	movs	r2, #0
 8003386:	61bb      	str	r3, [r7, #24]
 8003388:	61fa      	str	r2, [r7, #28]
 800338a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800338e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003392:	f7fc ff7d 	bl	8000290 <__aeabi_uldivmod>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4613      	mov	r3, r2
 800339c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800339e:	e053      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a0:	4b35      	ldr	r3, [pc, #212]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x180>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	099b      	lsrs	r3, r3, #6
 80033a6:	2200      	movs	r2, #0
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	617a      	str	r2, [r7, #20]
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033b2:	f04f 0b00 	mov.w	fp, #0
 80033b6:	4652      	mov	r2, sl
 80033b8:	465b      	mov	r3, fp
 80033ba:	f04f 0000 	mov.w	r0, #0
 80033be:	f04f 0100 	mov.w	r1, #0
 80033c2:	0159      	lsls	r1, r3, #5
 80033c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033c8:	0150      	lsls	r0, r2, #5
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	ebb2 080a 	subs.w	r8, r2, sl
 80033d2:	eb63 090b 	sbc.w	r9, r3, fp
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033ea:	ebb2 0408 	subs.w	r4, r2, r8
 80033ee:	eb63 0509 	sbc.w	r5, r3, r9
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	00eb      	lsls	r3, r5, #3
 80033fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003400:	00e2      	lsls	r2, r4, #3
 8003402:	4614      	mov	r4, r2
 8003404:	461d      	mov	r5, r3
 8003406:	eb14 030a 	adds.w	r3, r4, sl
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	eb45 030b 	adc.w	r3, r5, fp
 8003410:	607b      	str	r3, [r7, #4]
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800341e:	4629      	mov	r1, r5
 8003420:	028b      	lsls	r3, r1, #10
 8003422:	4621      	mov	r1, r4
 8003424:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003428:	4621      	mov	r1, r4
 800342a:	028a      	lsls	r2, r1, #10
 800342c:	4610      	mov	r0, r2
 800342e:	4619      	mov	r1, r3
 8003430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003432:	2200      	movs	r2, #0
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	60fa      	str	r2, [r7, #12]
 8003438:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800343c:	f7fc ff28 	bl	8000290 <__aeabi_uldivmod>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4613      	mov	r3, r2
 8003446:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003448:	4b0b      	ldr	r3, [pc, #44]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x180>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	0c1b      	lsrs	r3, r3, #16
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	3301      	adds	r3, #1
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003458:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800345a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003462:	e002      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003464:	4b05      	ldr	r3, [pc, #20]	@ (800347c <HAL_RCC_GetSysClockFreq+0x184>)
 8003466:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800346a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800346c:	4618      	mov	r0, r3
 800346e:	3740      	adds	r7, #64	@ 0x40
 8003470:	46bd      	mov	sp, r7
 8003472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003476:	bf00      	nop
 8003478:	40023800 	.word	0x40023800
 800347c:	00f42400 	.word	0x00f42400
 8003480:	017d7840 	.word	0x017d7840

08003484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003488:	4b03      	ldr	r3, [pc, #12]	@ (8003498 <HAL_RCC_GetHCLKFreq+0x14>)
 800348a:	681b      	ldr	r3, [r3, #0]
}
 800348c:	4618      	mov	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	20000004 	.word	0x20000004

0800349c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034a0:	f7ff fff0 	bl	8003484 <HAL_RCC_GetHCLKFreq>
 80034a4:	4602      	mov	r2, r0
 80034a6:	4b05      	ldr	r3, [pc, #20]	@ (80034bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	0a9b      	lsrs	r3, r3, #10
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	4903      	ldr	r1, [pc, #12]	@ (80034c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034b2:	5ccb      	ldrb	r3, [r1, r3]
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40023800 	.word	0x40023800
 80034c0:	08005d04 	.word	0x08005d04

080034c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034c8:	f7ff ffdc 	bl	8003484 <HAL_RCC_GetHCLKFreq>
 80034cc:	4602      	mov	r2, r0
 80034ce:	4b05      	ldr	r3, [pc, #20]	@ (80034e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	0b5b      	lsrs	r3, r3, #13
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	4903      	ldr	r1, [pc, #12]	@ (80034e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034da:	5ccb      	ldrb	r3, [r1, r3]
 80034dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40023800 	.word	0x40023800
 80034e8:	08005d04 	.word	0x08005d04

080034ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e041      	b.n	8003582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fd fe54 	bl	80011c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3304      	adds	r3, #4
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f000 fa7e 	bl	8003a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d001      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e04e      	b.n	8003642 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a23      	ldr	r2, [pc, #140]	@ (8003650 <HAL_TIM_Base_Start_IT+0xc4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d022      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x80>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ce:	d01d      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x80>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003654 <HAL_TIM_Base_Start_IT+0xc8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d018      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x80>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a1e      	ldr	r2, [pc, #120]	@ (8003658 <HAL_TIM_Base_Start_IT+0xcc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d013      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x80>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1c      	ldr	r2, [pc, #112]	@ (800365c <HAL_TIM_Base_Start_IT+0xd0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00e      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x80>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003660 <HAL_TIM_Base_Start_IT+0xd4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d009      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x80>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a19      	ldr	r2, [pc, #100]	@ (8003664 <HAL_TIM_Base_Start_IT+0xd8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d004      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x80>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a18      	ldr	r2, [pc, #96]	@ (8003668 <HAL_TIM_Base_Start_IT+0xdc>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d111      	bne.n	8003630 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b06      	cmp	r3, #6
 800361c:	d010      	beq.n	8003640 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 0201 	orr.w	r2, r2, #1
 800362c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362e:	e007      	b.n	8003640 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40010000 	.word	0x40010000
 8003654:	40000400 	.word	0x40000400
 8003658:	40000800 	.word	0x40000800
 800365c:	40000c00 	.word	0x40000c00
 8003660:	40010400 	.word	0x40010400
 8003664:	40014000 	.word	0x40014000
 8003668:	40001800 	.word	0x40001800

0800366c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d020      	beq.n	80036d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01b      	beq.n	80036d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0202 	mvn.w	r2, #2
 80036a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f999 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 80036bc:	e005      	b.n	80036ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f98b 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f99c 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d020      	beq.n	800371c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d01b      	beq.n	800371c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0204 	mvn.w	r2, #4
 80036ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2202      	movs	r2, #2
 80036f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f973 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 8003708:	e005      	b.n	8003716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f965 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f976 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d020      	beq.n	8003768 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01b      	beq.n	8003768 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0208 	mvn.w	r2, #8
 8003738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2204      	movs	r2, #4
 800373e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f94d 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 8003754:	e005      	b.n	8003762 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f93f 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f950 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	2b00      	cmp	r3, #0
 8003770:	d020      	beq.n	80037b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01b      	beq.n	80037b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0210 	mvn.w	r2, #16
 8003784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2208      	movs	r2, #8
 800378a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f927 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f919 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f92a 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00c      	beq.n	80037d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d007      	beq.n	80037d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0201 	mvn.w	r2, #1
 80037d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fc ff06 	bl	80005e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00c      	beq.n	80037fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d007      	beq.n	80037fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80037f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fae4 	bl	8003dc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00c      	beq.n	8003820 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f8fb 	bl	8003a16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00c      	beq.n	8003844 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d007      	beq.n	8003844 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0220 	mvn.w	r2, #32
 800383c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fab6 	bl	8003db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_TIM_ConfigClockSource+0x1c>
 8003864:	2302      	movs	r3, #2
 8003866:	e0b4      	b.n	80039d2 <HAL_TIM_ConfigClockSource+0x186>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800388e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038a0:	d03e      	beq.n	8003920 <HAL_TIM_ConfigClockSource+0xd4>
 80038a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038a6:	f200 8087 	bhi.w	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ae:	f000 8086 	beq.w	80039be <HAL_TIM_ConfigClockSource+0x172>
 80038b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b6:	d87f      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038b8:	2b70      	cmp	r3, #112	@ 0x70
 80038ba:	d01a      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0xa6>
 80038bc:	2b70      	cmp	r3, #112	@ 0x70
 80038be:	d87b      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038c0:	2b60      	cmp	r3, #96	@ 0x60
 80038c2:	d050      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0x11a>
 80038c4:	2b60      	cmp	r3, #96	@ 0x60
 80038c6:	d877      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038c8:	2b50      	cmp	r3, #80	@ 0x50
 80038ca:	d03c      	beq.n	8003946 <HAL_TIM_ConfigClockSource+0xfa>
 80038cc:	2b50      	cmp	r3, #80	@ 0x50
 80038ce:	d873      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038d0:	2b40      	cmp	r3, #64	@ 0x40
 80038d2:	d058      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x13a>
 80038d4:	2b40      	cmp	r3, #64	@ 0x40
 80038d6:	d86f      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038d8:	2b30      	cmp	r3, #48	@ 0x30
 80038da:	d064      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x15a>
 80038dc:	2b30      	cmp	r3, #48	@ 0x30
 80038de:	d86b      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d060      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x15a>
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d867      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d05c      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x15a>
 80038ec:	2b10      	cmp	r3, #16
 80038ee:	d05a      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x15a>
 80038f0:	e062      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003902:	f000 f9b9 	bl	8003c78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003914:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	609a      	str	r2, [r3, #8]
      break;
 800391e:	e04f      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003930:	f000 f9a2 	bl	8003c78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003942:	609a      	str	r2, [r3, #8]
      break;
 8003944:	e03c      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003952:	461a      	mov	r2, r3
 8003954:	f000 f916 	bl	8003b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2150      	movs	r1, #80	@ 0x50
 800395e:	4618      	mov	r0, r3
 8003960:	f000 f96f 	bl	8003c42 <TIM_ITRx_SetConfig>
      break;
 8003964:	e02c      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003972:	461a      	mov	r2, r3
 8003974:	f000 f935 	bl	8003be2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2160      	movs	r1, #96	@ 0x60
 800397e:	4618      	mov	r0, r3
 8003980:	f000 f95f 	bl	8003c42 <TIM_ITRx_SetConfig>
      break;
 8003984:	e01c      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003992:	461a      	mov	r2, r3
 8003994:	f000 f8f6 	bl	8003b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2140      	movs	r1, #64	@ 0x40
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 f94f 	bl	8003c42 <TIM_ITRx_SetConfig>
      break;
 80039a4:	e00c      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4619      	mov	r1, r3
 80039b0:	4610      	mov	r0, r2
 80039b2:	f000 f946 	bl	8003c42 <TIM_ITRx_SetConfig>
      break;
 80039b6:	e003      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
      break;
 80039bc:	e000      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a46      	ldr	r2, [pc, #280]	@ (8003b58 <TIM_Base_SetConfig+0x12c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d013      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a4a:	d00f      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a43      	ldr	r2, [pc, #268]	@ (8003b5c <TIM_Base_SetConfig+0x130>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00b      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a42      	ldr	r2, [pc, #264]	@ (8003b60 <TIM_Base_SetConfig+0x134>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d007      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a41      	ldr	r2, [pc, #260]	@ (8003b64 <TIM_Base_SetConfig+0x138>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d003      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a40      	ldr	r2, [pc, #256]	@ (8003b68 <TIM_Base_SetConfig+0x13c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d108      	bne.n	8003a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a35      	ldr	r2, [pc, #212]	@ (8003b58 <TIM_Base_SetConfig+0x12c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d02b      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a8c:	d027      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a32      	ldr	r2, [pc, #200]	@ (8003b5c <TIM_Base_SetConfig+0x130>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d023      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a31      	ldr	r2, [pc, #196]	@ (8003b60 <TIM_Base_SetConfig+0x134>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d01f      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a30      	ldr	r2, [pc, #192]	@ (8003b64 <TIM_Base_SetConfig+0x138>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01b      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a2f      	ldr	r2, [pc, #188]	@ (8003b68 <TIM_Base_SetConfig+0x13c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d017      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a2e      	ldr	r2, [pc, #184]	@ (8003b6c <TIM_Base_SetConfig+0x140>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d013      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a2d      	ldr	r2, [pc, #180]	@ (8003b70 <TIM_Base_SetConfig+0x144>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00f      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a2c      	ldr	r2, [pc, #176]	@ (8003b74 <TIM_Base_SetConfig+0x148>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00b      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a2b      	ldr	r2, [pc, #172]	@ (8003b78 <TIM_Base_SetConfig+0x14c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d007      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a2a      	ldr	r2, [pc, #168]	@ (8003b7c <TIM_Base_SetConfig+0x150>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d003      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a29      	ldr	r2, [pc, #164]	@ (8003b80 <TIM_Base_SetConfig+0x154>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d108      	bne.n	8003af0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a10      	ldr	r2, [pc, #64]	@ (8003b58 <TIM_Base_SetConfig+0x12c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d003      	beq.n	8003b24 <TIM_Base_SetConfig+0xf8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a12      	ldr	r2, [pc, #72]	@ (8003b68 <TIM_Base_SetConfig+0x13c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d103      	bne.n	8003b2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d105      	bne.n	8003b4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f023 0201 	bic.w	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	611a      	str	r2, [r3, #16]
  }
}
 8003b4a:	bf00      	nop
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	40000400 	.word	0x40000400
 8003b60:	40000800 	.word	0x40000800
 8003b64:	40000c00 	.word	0x40000c00
 8003b68:	40010400 	.word	0x40010400
 8003b6c:	40014000 	.word	0x40014000
 8003b70:	40014400 	.word	0x40014400
 8003b74:	40014800 	.word	0x40014800
 8003b78:	40001800 	.word	0x40001800
 8003b7c:	40001c00 	.word	0x40001c00
 8003b80:	40002000 	.word	0x40002000

08003b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	f023 0201 	bic.w	r2, r3, #1
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f023 030a 	bic.w	r3, r3, #10
 8003bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	621a      	str	r2, [r3, #32]
}
 8003bd6:	bf00      	nop
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b087      	sub	sp, #28
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	f023 0210 	bic.w	r2, r3, #16
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	031b      	lsls	r3, r3, #12
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	621a      	str	r2, [r3, #32]
}
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b085      	sub	sp, #20
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f043 0307 	orr.w	r3, r3, #7
 8003c64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	609a      	str	r2, [r3, #8]
}
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	021a      	lsls	r2, r3, #8
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	609a      	str	r2, [r3, #8]
}
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e05a      	b.n	8003d86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a21      	ldr	r2, [pc, #132]	@ (8003d94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d022      	beq.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d1c:	d01d      	beq.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1d      	ldr	r2, [pc, #116]	@ (8003d98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d018      	beq.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8003d9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a1a      	ldr	r2, [pc, #104]	@ (8003da0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00e      	beq.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a18      	ldr	r2, [pc, #96]	@ (8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d009      	beq.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a17      	ldr	r2, [pc, #92]	@ (8003da8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d004      	beq.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a15      	ldr	r2, [pc, #84]	@ (8003dac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d10c      	bne.n	8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	40010000 	.word	0x40010000
 8003d98:	40000400 	.word	0x40000400
 8003d9c:	40000800 	.word	0x40000800
 8003da0:	40000c00 	.word	0x40000c00
 8003da4:	40010400 	.word	0x40010400
 8003da8:	40014000 	.word	0x40014000
 8003dac:	40001800 	.word	0x40001800

08003db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e042      	b.n	8003e70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fd fa4e 	bl	80012a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2224      	movs	r2, #36	@ 0x24
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 ff63 	bl	8004ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08c      	sub	sp, #48	@ 0x30
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	4613      	mov	r3, r2
 8003e84:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d156      	bne.n	8003f40 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <HAL_UART_Transmit_DMA+0x26>
 8003e98:	88fb      	ldrh	r3, [r7, #6]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e04f      	b.n	8003f42 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	88fa      	ldrh	r2, [r7, #6]
 8003eac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	88fa      	ldrh	r2, [r7, #6]
 8003eb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2221      	movs	r2, #33	@ 0x21
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec6:	4a21      	ldr	r2, [pc, #132]	@ (8003f4c <HAL_UART_Transmit_DMA+0xd4>)
 8003ec8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ece:	4a20      	ldr	r2, [pc, #128]	@ (8003f50 <HAL_UART_Transmit_DMA+0xd8>)
 8003ed0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8003f54 <HAL_UART_Transmit_DMA+0xdc>)
 8003ed8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ede:	2200      	movs	r2, #0
 8003ee0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003ee2:	f107 0308 	add.w	r3, r7, #8
 8003ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eee:	6819      	ldr	r1, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	88fb      	ldrh	r3, [r7, #6]
 8003efa:	f7fe f903 	bl	8002104 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f06:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3314      	adds	r3, #20
 8003f0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	e853 3f00 	ldrex	r3, [r3]
 8003f16:	617b      	str	r3, [r7, #20]
   return(result);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3314      	adds	r3, #20
 8003f26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f28:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	6a39      	ldr	r1, [r7, #32]
 8003f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f30:	e841 2300 	strex	r3, r2, [r1]
 8003f34:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e5      	bne.n	8003f08 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e000      	b.n	8003f42 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003f40:	2302      	movs	r3, #2
  }
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3730      	adds	r7, #48	@ 0x30
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	08004575 	.word	0x08004575
 8003f50:	0800460f 	.word	0x0800460f
 8003f54:	08004793 	.word	0x08004793

08003f58 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08c      	sub	sp, #48	@ 0x30
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	4613      	mov	r3, r2
 8003f64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	d14a      	bne.n	8004008 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003f78:	88fb      	ldrh	r3, [r7, #6]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e043      	b.n	800400a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	461a      	mov	r2, r3
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 fc47 	bl	8004828 <UART_Start_Receive_DMA>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003fa0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d12c      	bne.n	8004002 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d125      	bne.n	8003ffc <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	330c      	adds	r3, #12
 8003fcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	617b      	str	r3, [r7, #20]
   return(result);
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f043 0310 	orr.w	r3, r3, #16
 8003fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	330c      	adds	r3, #12
 8003fe4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fe6:	627a      	str	r2, [r7, #36]	@ 0x24
 8003fe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fea:	6a39      	ldr	r1, [r7, #32]
 8003fec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e5      	bne.n	8003fc6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8003ffa:	e002      	b.n	8004002 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004002:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004006:	e000      	b.n	800400a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004008:	2302      	movs	r3, #2
  }
}
 800400a:	4618      	mov	r0, r3
 800400c:	3730      	adds	r7, #48	@ 0x30
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b0ba      	sub	sp, #232	@ 0xe8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800403a:	2300      	movs	r3, #0
 800403c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004040:	2300      	movs	r3, #0
 8004042:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004052:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10f      	bne.n	800407a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800405a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <HAL_UART_IRQHandler+0x66>
 8004066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fd79 	bl	8004b6a <UART_Receive_IT>
      return;
 8004078:	e25b      	b.n	8004532 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800407a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 80de 	beq.w	8004240 <HAL_UART_IRQHandler+0x22c>
 8004084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d106      	bne.n	800409e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004094:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80d1 	beq.w	8004240 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800409e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00b      	beq.n	80040c2 <HAL_UART_IRQHandler+0xae>
 80040aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d005      	beq.n	80040c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ba:	f043 0201 	orr.w	r2, r3, #1
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00b      	beq.n	80040e6 <HAL_UART_IRQHandler+0xd2>
 80040ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040de:	f043 0202 	orr.w	r2, r3, #2
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00b      	beq.n	800410a <HAL_UART_IRQHandler+0xf6>
 80040f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d005      	beq.n	800410a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004102:	f043 0204 	orr.w	r2, r3, #4
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800410a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d011      	beq.n	800413a <HAL_UART_IRQHandler+0x126>
 8004116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b00      	cmp	r3, #0
 8004120:	d105      	bne.n	800412e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004132:	f043 0208 	orr.w	r2, r3, #8
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 81f2 	beq.w	8004528 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <HAL_UART_IRQHandler+0x14e>
 8004150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fd04 	bl	8004b6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416c:	2b40      	cmp	r3, #64	@ 0x40
 800416e:	bf0c      	ite	eq
 8004170:	2301      	moveq	r3, #1
 8004172:	2300      	movne	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d103      	bne.n	800418e <HAL_UART_IRQHandler+0x17a>
 8004186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800418a:	2b00      	cmp	r3, #0
 800418c:	d04f      	beq.n	800422e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fc0c 	bl	80049ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419e:	2b40      	cmp	r3, #64	@ 0x40
 80041a0:	d141      	bne.n	8004226 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3314      	adds	r3, #20
 80041a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80041b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3314      	adds	r3, #20
 80041ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80041ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80041d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1d9      	bne.n	80041a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d013      	beq.n	800421e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fa:	4a7e      	ldr	r2, [pc, #504]	@ (80043f4 <HAL_UART_IRQHandler+0x3e0>)
 80041fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe f846 	bl	8002294 <HAL_DMA_Abort_IT>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d016      	beq.n	800423c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004218:	4610      	mov	r0, r2
 800421a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800421c:	e00e      	b.n	800423c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f99e 	bl	8004560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004224:	e00a      	b.n	800423c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f99a 	bl	8004560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422c:	e006      	b.n	800423c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f996 	bl	8004560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800423a:	e175      	b.n	8004528 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800423c:	bf00      	nop
    return;
 800423e:	e173      	b.n	8004528 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004244:	2b01      	cmp	r3, #1
 8004246:	f040 814f 	bne.w	80044e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800424a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 8148 	beq.w	80044e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 8141 	beq.w	80044e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004266:	2300      	movs	r3, #0
 8004268:	60bb      	str	r3, [r7, #8]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004286:	2b40      	cmp	r3, #64	@ 0x40
 8004288:	f040 80b6 	bne.w	80043f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004298:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8145 	beq.w	800452c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042aa:	429a      	cmp	r2, r3
 80042ac:	f080 813e 	bcs.w	800452c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042c2:	f000 8088 	beq.w	80043d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	330c      	adds	r3, #12
 80042cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042d4:	e853 3f00 	ldrex	r3, [r3]
 80042d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	330c      	adds	r3, #12
 80042ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800430a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1d9      	bne.n	80042c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3314      	adds	r3, #20
 8004318:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004322:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004324:	f023 0301 	bic.w	r3, r3, #1
 8004328:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3314      	adds	r3, #20
 8004332:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004336:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800433a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800433e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004348:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e1      	bne.n	8004312 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3314      	adds	r3, #20
 8004354:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800435e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004360:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004364:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3314      	adds	r3, #20
 800436e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004372:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004374:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004376:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004378:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800437a:	e841 2300 	strex	r3, r2, [r1]
 800437e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004380:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1e3      	bne.n	800434e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2220      	movs	r2, #32
 800438a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	330c      	adds	r3, #12
 800439a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800439e:	e853 3f00 	ldrex	r3, [r3]
 80043a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043a6:	f023 0310 	bic.w	r3, r3, #16
 80043aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	330c      	adds	r3, #12
 80043b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80043b8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80043ba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e3      	bne.n	8004394 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fd feef 	bl	80021b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2202      	movs	r2, #2
 80043da:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	4619      	mov	r1, r3
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7fc faa3 	bl	8000938 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043f2:	e09b      	b.n	800452c <HAL_UART_IRQHandler+0x518>
 80043f4:	08004a73 	.word	0x08004a73
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004400:	b29b      	uxth	r3, r3
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 808e 	beq.w	8004530 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004414:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 8089 	beq.w	8004530 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	330c      	adds	r3, #12
 8004424:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800442e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004430:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004434:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	330c      	adds	r3, #12
 800443e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004442:	647a      	str	r2, [r7, #68]	@ 0x44
 8004444:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004448:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e3      	bne.n	800441e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3314      	adds	r3, #20
 800445c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	623b      	str	r3, [r7, #32]
   return(result);
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3314      	adds	r3, #20
 8004476:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800447a:	633a      	str	r2, [r7, #48]	@ 0x30
 800447c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004482:	e841 2300 	strex	r3, r2, [r1]
 8004486:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1e3      	bne.n	8004456 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	330c      	adds	r3, #12
 80044a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	e853 3f00 	ldrex	r3, [r3]
 80044aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0310 	bic.w	r3, r3, #16
 80044b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	330c      	adds	r3, #12
 80044bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80044c0:	61fa      	str	r2, [r7, #28]
 80044c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	69b9      	ldr	r1, [r7, #24]
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	e841 2300 	strex	r3, r2, [r1]
 80044cc:	617b      	str	r3, [r7, #20]
   return(result);
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e3      	bne.n	800449c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044de:	4619      	mov	r1, r3
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7fc fa29 	bl	8000938 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044e6:	e023      	b.n	8004530 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d009      	beq.n	8004508 <HAL_UART_IRQHandler+0x4f4>
 80044f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 faca 	bl	8004a9a <UART_Transmit_IT>
    return;
 8004506:	e014      	b.n	8004532 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800450c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00e      	beq.n	8004532 <HAL_UART_IRQHandler+0x51e>
 8004514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800451c:	2b00      	cmp	r3, #0
 800451e:	d008      	beq.n	8004532 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fb0a 	bl	8004b3a <UART_EndTransmit_IT>
    return;
 8004526:	e004      	b.n	8004532 <HAL_UART_IRQHandler+0x51e>
    return;
 8004528:	bf00      	nop
 800452a:	e002      	b.n	8004532 <HAL_UART_IRQHandler+0x51e>
      return;
 800452c:	bf00      	nop
 800452e:	e000      	b.n	8004532 <HAL_UART_IRQHandler+0x51e>
      return;
 8004530:	bf00      	nop
  }
}
 8004532:	37e8      	adds	r7, #232	@ 0xe8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b090      	sub	sp, #64	@ 0x40
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004580:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d137      	bne.n	8004600 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004592:	2200      	movs	r2, #0
 8004594:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3314      	adds	r3, #20
 800459c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	623b      	str	r3, [r7, #32]
   return(result);
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3314      	adds	r3, #20
 80045b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80045b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80045b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e5      	bne.n	8004596 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	330c      	adds	r3, #12
 80045d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80045e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	330c      	adds	r3, #12
 80045e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045ea:	61fa      	str	r2, [r7, #28]
 80045ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	69b9      	ldr	r1, [r7, #24]
 80045f0:	69fa      	ldr	r2, [r7, #28]
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	617b      	str	r3, [r7, #20]
   return(result);
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e5      	bne.n	80045ca <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045fe:	e002      	b.n	8004606 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004600:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004602:	f7fc f9c1 	bl	8000988 <HAL_UART_TxCpltCallback>
}
 8004606:	bf00      	nop
 8004608:	3740      	adds	r7, #64	@ 0x40
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f7ff ff8b 	bl	8004538 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004622:	bf00      	nop
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b09c      	sub	sp, #112	@ 0x70
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004636:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d172      	bne.n	800472c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004648:	2200      	movs	r2, #0
 800464a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800464c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	330c      	adds	r3, #12
 8004652:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800465c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800465e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004662:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004664:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	330c      	adds	r3, #12
 800466a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800466c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800466e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004670:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004672:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004674:	e841 2300 	strex	r3, r2, [r1]
 8004678:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800467a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e5      	bne.n	800464c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004680:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3314      	adds	r3, #20
 8004686:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468a:	e853 3f00 	ldrex	r3, [r3]
 800468e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004692:	f023 0301 	bic.w	r3, r3, #1
 8004696:	667b      	str	r3, [r7, #100]	@ 0x64
 8004698:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3314      	adds	r3, #20
 800469e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80046a0:	647a      	str	r2, [r7, #68]	@ 0x44
 80046a2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046a8:	e841 2300 	strex	r3, r2, [r1]
 80046ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e5      	bne.n	8004680 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3314      	adds	r3, #20
 80046ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046be:	e853 3f00 	ldrex	r3, [r3]
 80046c2:	623b      	str	r3, [r7, #32]
   return(result);
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80046cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3314      	adds	r3, #20
 80046d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80046d4:	633a      	str	r2, [r7, #48]	@ 0x30
 80046d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046dc:	e841 2300 	strex	r3, r2, [r1]
 80046e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1e5      	bne.n	80046b4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d119      	bne.n	800472c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	60fb      	str	r3, [r7, #12]
   return(result);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0310 	bic.w	r3, r3, #16
 800470e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004710:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004718:	61fa      	str	r2, [r7, #28]
 800471a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	69b9      	ldr	r1, [r7, #24]
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	617b      	str	r3, [r7, #20]
   return(result);
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e5      	bne.n	80046f8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800472c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800472e:	2200      	movs	r2, #0
 8004730:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004732:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004736:	2b01      	cmp	r3, #1
 8004738:	d106      	bne.n	8004748 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800473a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800473c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800473e:	4619      	mov	r1, r3
 8004740:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004742:	f7fc f8f9 	bl	8000938 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004746:	e002      	b.n	800474e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004748:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800474a:	f7fc f933 	bl	80009b4 <HAL_UART_RxCpltCallback>
}
 800474e:	bf00      	nop
 8004750:	3770      	adds	r7, #112	@ 0x70
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004762:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2201      	movs	r2, #1
 8004768:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476e:	2b01      	cmp	r3, #1
 8004770:	d108      	bne.n	8004784 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004776:	085b      	lsrs	r3, r3, #1
 8004778:	b29b      	uxth	r3, r3
 800477a:	4619      	mov	r1, r3
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7fc f8db 	bl	8000938 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004782:	e002      	b.n	800478a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f7ff fee1 	bl	800454c <HAL_UART_RxHalfCpltCallback>
}
 800478a:	bf00      	nop
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b084      	sub	sp, #16
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ae:	2b80      	cmp	r3, #128	@ 0x80
 80047b0:	bf0c      	ite	eq
 80047b2:	2301      	moveq	r3, #1
 80047b4:	2300      	movne	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b21      	cmp	r3, #33	@ 0x21
 80047c4:	d108      	bne.n	80047d8 <UART_DMAError+0x46>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2200      	movs	r2, #0
 80047d0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80047d2:	68b8      	ldr	r0, [r7, #8]
 80047d4:	f000 f8c2 	bl	800495c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e2:	2b40      	cmp	r3, #64	@ 0x40
 80047e4:	bf0c      	ite	eq
 80047e6:	2301      	moveq	r3, #1
 80047e8:	2300      	movne	r3, #0
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b22      	cmp	r3, #34	@ 0x22
 80047f8:	d108      	bne.n	800480c <UART_DMAError+0x7a>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2200      	movs	r2, #0
 8004804:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004806:	68b8      	ldr	r0, [r7, #8]
 8004808:	f000 f8d0 	bl	80049ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004810:	f043 0210 	orr.w	r2, r3, #16
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004818:	68b8      	ldr	r0, [r7, #8]
 800481a:	f7ff fea1 	bl	8004560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800481e:	bf00      	nop
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b098      	sub	sp, #96	@ 0x60
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	4613      	mov	r3, r2
 8004834:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	88fa      	ldrh	r2, [r7, #6]
 8004840:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2222      	movs	r2, #34	@ 0x22
 800484c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004854:	4a3e      	ldr	r2, [pc, #248]	@ (8004950 <UART_Start_Receive_DMA+0x128>)
 8004856:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485c:	4a3d      	ldr	r2, [pc, #244]	@ (8004954 <UART_Start_Receive_DMA+0x12c>)
 800485e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004864:	4a3c      	ldr	r2, [pc, #240]	@ (8004958 <UART_Start_Receive_DMA+0x130>)
 8004866:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486c:	2200      	movs	r2, #0
 800486e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004870:	f107 0308 	add.w	r3, r7, #8
 8004874:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3304      	adds	r3, #4
 8004880:	4619      	mov	r1, r3
 8004882:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	f7fd fc3c 	bl	8002104 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800488c:	2300      	movs	r3, #0
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	613b      	str	r3, [r7, #16]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d019      	beq.n	80048de <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	330c      	adds	r3, #12
 80048b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	330c      	adds	r3, #12
 80048c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048ca:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80048cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80048d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80048d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e5      	bne.n	80048aa <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3314      	adds	r3, #20
 80048e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3314      	adds	r3, #20
 80048fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80048fe:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004900:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004904:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800490c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e5      	bne.n	80048de <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3314      	adds	r3, #20
 8004918:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	617b      	str	r3, [r7, #20]
   return(result);
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004928:	653b      	str	r3, [r7, #80]	@ 0x50
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3314      	adds	r3, #20
 8004930:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004932:	627a      	str	r2, [r7, #36]	@ 0x24
 8004934:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	6a39      	ldr	r1, [r7, #32]
 8004938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e5      	bne.n	8004912 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3760      	adds	r7, #96	@ 0x60
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	0800462b 	.word	0x0800462b
 8004954:	08004757 	.word	0x08004757
 8004958:	08004793 	.word	0x08004793

0800495c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800495c:	b480      	push	{r7}
 800495e:	b089      	sub	sp, #36	@ 0x24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	330c      	adds	r3, #12
 800496a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	e853 3f00 	ldrex	r3, [r3]
 8004972:	60bb      	str	r3, [r7, #8]
   return(result);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800497a:	61fb      	str	r3, [r7, #28]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	330c      	adds	r3, #12
 8004982:	69fa      	ldr	r2, [r7, #28]
 8004984:	61ba      	str	r2, [r7, #24]
 8004986:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004988:	6979      	ldr	r1, [r7, #20]
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	e841 2300 	strex	r3, r2, [r1]
 8004990:	613b      	str	r3, [r7, #16]
   return(result);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e5      	bne.n	8004964 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80049a0:	bf00      	nop
 80049a2:	3724      	adds	r7, #36	@ 0x24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b095      	sub	sp, #84	@ 0x54
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	330c      	adds	r3, #12
 80049ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049be:	e853 3f00 	ldrex	r3, [r3]
 80049c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	330c      	adds	r3, #12
 80049d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80049d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049dc:	e841 2300 	strex	r3, r2, [r1]
 80049e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e5      	bne.n	80049b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3314      	adds	r3, #20
 80049ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	e853 3f00 	ldrex	r3, [r3]
 80049f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f023 0301 	bic.w	r3, r3, #1
 80049fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3314      	adds	r3, #20
 8004a06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a10:	e841 2300 	strex	r3, r2, [r1]
 8004a14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e5      	bne.n	80049e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d119      	bne.n	8004a58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	330c      	adds	r3, #12
 8004a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	e853 3f00 	ldrex	r3, [r3]
 8004a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f023 0310 	bic.w	r3, r3, #16
 8004a3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	330c      	adds	r3, #12
 8004a42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a44:	61ba      	str	r2, [r7, #24]
 8004a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a48:	6979      	ldr	r1, [r7, #20]
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	613b      	str	r3, [r7, #16]
   return(result);
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e5      	bne.n	8004a24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a66:	bf00      	nop
 8004a68:	3754      	adds	r7, #84	@ 0x54
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b084      	sub	sp, #16
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f7ff fd67 	bl	8004560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a92:	bf00      	nop
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b085      	sub	sp, #20
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b21      	cmp	r3, #33	@ 0x21
 8004aac:	d13e      	bne.n	8004b2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ab6:	d114      	bne.n	8004ae2 <UART_Transmit_IT+0x48>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d110      	bne.n	8004ae2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ad4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	1c9a      	adds	r2, r3, #2
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	621a      	str	r2, [r3, #32]
 8004ae0:	e008      	b.n	8004af4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	1c59      	adds	r1, r3, #1
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6211      	str	r1, [r2, #32]
 8004aec:	781a      	ldrb	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	4619      	mov	r1, r3
 8004b02:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10f      	bne.n	8004b28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e000      	b.n	8004b2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b2c:	2302      	movs	r3, #2
  }
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fb ff14 	bl	8000988 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b08c      	sub	sp, #48	@ 0x30
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b22      	cmp	r3, #34	@ 0x22
 8004b7c:	f040 80ae 	bne.w	8004cdc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b88:	d117      	bne.n	8004bba <UART_Receive_IT+0x50>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d113      	bne.n	8004bba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb2:	1c9a      	adds	r2, r3, #2
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bb8:	e026      	b.n	8004c08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bcc:	d007      	beq.n	8004bde <UART_Receive_IT+0x74>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10a      	bne.n	8004bec <UART_Receive_IT+0x82>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d106      	bne.n	8004bec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004be8:	701a      	strb	r2, [r3, #0]
 8004bea:	e008      	b.n	8004bfe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	4619      	mov	r1, r3
 8004c16:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d15d      	bne.n	8004cd8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0220 	bic.w	r2, r2, #32
 8004c2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695a      	ldr	r2, [r3, #20]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0201 	bic.w	r2, r2, #1
 8004c4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d135      	bne.n	8004cce <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	330c      	adds	r3, #12
 8004c6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	e853 3f00 	ldrex	r3, [r3]
 8004c76:	613b      	str	r3, [r7, #16]
   return(result);
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f023 0310 	bic.w	r3, r3, #16
 8004c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	330c      	adds	r3, #12
 8004c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c88:	623a      	str	r2, [r7, #32]
 8004c8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8c:	69f9      	ldr	r1, [r7, #28]
 8004c8e:	6a3a      	ldr	r2, [r7, #32]
 8004c90:	e841 2300 	strex	r3, r2, [r1]
 8004c94:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1e5      	bne.n	8004c68 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0310 	and.w	r3, r3, #16
 8004ca6:	2b10      	cmp	r3, #16
 8004ca8:	d10a      	bne.n	8004cc0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fb fe36 	bl	8000938 <HAL_UARTEx_RxEventCallback>
 8004ccc:	e002      	b.n	8004cd4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fb fe70 	bl	80009b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	e002      	b.n	8004cde <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	e000      	b.n	8004cde <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004cdc:	2302      	movs	r3, #2
  }
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3730      	adds	r7, #48	@ 0x30
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cec:	b0c0      	sub	sp, #256	@ 0x100
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d04:	68d9      	ldr	r1, [r3, #12]
 8004d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	ea40 0301 	orr.w	r3, r0, r1
 8004d10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d40:	f021 010c 	bic.w	r1, r1, #12
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d62:	6999      	ldr	r1, [r3, #24]
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	ea40 0301 	orr.w	r3, r0, r1
 8004d6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	4b8f      	ldr	r3, [pc, #572]	@ (8004fb4 <UART_SetConfig+0x2cc>)
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d005      	beq.n	8004d88 <UART_SetConfig+0xa0>
 8004d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	4b8d      	ldr	r3, [pc, #564]	@ (8004fb8 <UART_SetConfig+0x2d0>)
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d104      	bne.n	8004d92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d88:	f7fe fb9c 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 8004d8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d90:	e003      	b.n	8004d9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d92:	f7fe fb83 	bl	800349c <HAL_RCC_GetPCLK1Freq>
 8004d96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004da4:	f040 810c 	bne.w	8004fc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dac:	2200      	movs	r2, #0
 8004dae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004db2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004db6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004dba:	4622      	mov	r2, r4
 8004dbc:	462b      	mov	r3, r5
 8004dbe:	1891      	adds	r1, r2, r2
 8004dc0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004dc2:	415b      	adcs	r3, r3
 8004dc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004dca:	4621      	mov	r1, r4
 8004dcc:	eb12 0801 	adds.w	r8, r2, r1
 8004dd0:	4629      	mov	r1, r5
 8004dd2:	eb43 0901 	adc.w	r9, r3, r1
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	f04f 0300 	mov.w	r3, #0
 8004dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dea:	4690      	mov	r8, r2
 8004dec:	4699      	mov	r9, r3
 8004dee:	4623      	mov	r3, r4
 8004df0:	eb18 0303 	adds.w	r3, r8, r3
 8004df4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004df8:	462b      	mov	r3, r5
 8004dfa:	eb49 0303 	adc.w	r3, r9, r3
 8004dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e16:	460b      	mov	r3, r1
 8004e18:	18db      	adds	r3, r3, r3
 8004e1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	eb42 0303 	adc.w	r3, r2, r3
 8004e22:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e2c:	f7fb fa30 	bl	8000290 <__aeabi_uldivmod>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4b61      	ldr	r3, [pc, #388]	@ (8004fbc <UART_SetConfig+0x2d4>)
 8004e36:	fba3 2302 	umull	r2, r3, r3, r2
 8004e3a:	095b      	lsrs	r3, r3, #5
 8004e3c:	011c      	lsls	r4, r3, #4
 8004e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e50:	4642      	mov	r2, r8
 8004e52:	464b      	mov	r3, r9
 8004e54:	1891      	adds	r1, r2, r2
 8004e56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e58:	415b      	adcs	r3, r3
 8004e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e60:	4641      	mov	r1, r8
 8004e62:	eb12 0a01 	adds.w	sl, r2, r1
 8004e66:	4649      	mov	r1, r9
 8004e68:	eb43 0b01 	adc.w	fp, r3, r1
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e80:	4692      	mov	sl, r2
 8004e82:	469b      	mov	fp, r3
 8004e84:	4643      	mov	r3, r8
 8004e86:	eb1a 0303 	adds.w	r3, sl, r3
 8004e8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e8e:	464b      	mov	r3, r9
 8004e90:	eb4b 0303 	adc.w	r3, fp, r3
 8004e94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ea4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ea8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004eac:	460b      	mov	r3, r1
 8004eae:	18db      	adds	r3, r3, r3
 8004eb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	eb42 0303 	adc.w	r3, r2, r3
 8004eb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ebe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ec2:	f7fb f9e5 	bl	8000290 <__aeabi_uldivmod>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4611      	mov	r1, r2
 8004ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8004fbc <UART_SetConfig+0x2d4>)
 8004ece:	fba3 2301 	umull	r2, r3, r3, r1
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	2264      	movs	r2, #100	@ 0x64
 8004ed6:	fb02 f303 	mul.w	r3, r2, r3
 8004eda:	1acb      	subs	r3, r1, r3
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004ee2:	4b36      	ldr	r3, [pc, #216]	@ (8004fbc <UART_SetConfig+0x2d4>)
 8004ee4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ef0:	441c      	add	r4, r3
 8004ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004efc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f04:	4642      	mov	r2, r8
 8004f06:	464b      	mov	r3, r9
 8004f08:	1891      	adds	r1, r2, r2
 8004f0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f0c:	415b      	adcs	r3, r3
 8004f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f14:	4641      	mov	r1, r8
 8004f16:	1851      	adds	r1, r2, r1
 8004f18:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f1a:	4649      	mov	r1, r9
 8004f1c:	414b      	adcs	r3, r1
 8004f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f2c:	4659      	mov	r1, fp
 8004f2e:	00cb      	lsls	r3, r1, #3
 8004f30:	4651      	mov	r1, sl
 8004f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f36:	4651      	mov	r1, sl
 8004f38:	00ca      	lsls	r2, r1, #3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4642      	mov	r2, r8
 8004f42:	189b      	adds	r3, r3, r2
 8004f44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f48:	464b      	mov	r3, r9
 8004f4a:	460a      	mov	r2, r1
 8004f4c:	eb42 0303 	adc.w	r3, r2, r3
 8004f50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004f64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f68:	460b      	mov	r3, r1
 8004f6a:	18db      	adds	r3, r3, r3
 8004f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f6e:	4613      	mov	r3, r2
 8004f70:	eb42 0303 	adc.w	r3, r2, r3
 8004f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f7e:	f7fb f987 	bl	8000290 <__aeabi_uldivmod>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4b0d      	ldr	r3, [pc, #52]	@ (8004fbc <UART_SetConfig+0x2d4>)
 8004f88:	fba3 1302 	umull	r1, r3, r3, r2
 8004f8c:	095b      	lsrs	r3, r3, #5
 8004f8e:	2164      	movs	r1, #100	@ 0x64
 8004f90:	fb01 f303 	mul.w	r3, r1, r3
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	3332      	adds	r3, #50	@ 0x32
 8004f9a:	4a08      	ldr	r2, [pc, #32]	@ (8004fbc <UART_SetConfig+0x2d4>)
 8004f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	f003 0207 	and.w	r2, r3, #7
 8004fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4422      	add	r2, r4
 8004fae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fb0:	e106      	b.n	80051c0 <UART_SetConfig+0x4d8>
 8004fb2:	bf00      	nop
 8004fb4:	40011000 	.word	0x40011000
 8004fb8:	40011400 	.word	0x40011400
 8004fbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004fca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004fce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004fd2:	4642      	mov	r2, r8
 8004fd4:	464b      	mov	r3, r9
 8004fd6:	1891      	adds	r1, r2, r2
 8004fd8:	6239      	str	r1, [r7, #32]
 8004fda:	415b      	adcs	r3, r3
 8004fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fe2:	4641      	mov	r1, r8
 8004fe4:	1854      	adds	r4, r2, r1
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	eb43 0501 	adc.w	r5, r3, r1
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	00eb      	lsls	r3, r5, #3
 8004ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ffa:	00e2      	lsls	r2, r4, #3
 8004ffc:	4614      	mov	r4, r2
 8004ffe:	461d      	mov	r5, r3
 8005000:	4643      	mov	r3, r8
 8005002:	18e3      	adds	r3, r4, r3
 8005004:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005008:	464b      	mov	r3, r9
 800500a:	eb45 0303 	adc.w	r3, r5, r3
 800500e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800501e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800502e:	4629      	mov	r1, r5
 8005030:	008b      	lsls	r3, r1, #2
 8005032:	4621      	mov	r1, r4
 8005034:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005038:	4621      	mov	r1, r4
 800503a:	008a      	lsls	r2, r1, #2
 800503c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005040:	f7fb f926 	bl	8000290 <__aeabi_uldivmod>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4b60      	ldr	r3, [pc, #384]	@ (80051cc <UART_SetConfig+0x4e4>)
 800504a:	fba3 2302 	umull	r2, r3, r3, r2
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	011c      	lsls	r4, r3, #4
 8005052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005056:	2200      	movs	r2, #0
 8005058:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800505c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005060:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005064:	4642      	mov	r2, r8
 8005066:	464b      	mov	r3, r9
 8005068:	1891      	adds	r1, r2, r2
 800506a:	61b9      	str	r1, [r7, #24]
 800506c:	415b      	adcs	r3, r3
 800506e:	61fb      	str	r3, [r7, #28]
 8005070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005074:	4641      	mov	r1, r8
 8005076:	1851      	adds	r1, r2, r1
 8005078:	6139      	str	r1, [r7, #16]
 800507a:	4649      	mov	r1, r9
 800507c:	414b      	adcs	r3, r1
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800508c:	4659      	mov	r1, fp
 800508e:	00cb      	lsls	r3, r1, #3
 8005090:	4651      	mov	r1, sl
 8005092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005096:	4651      	mov	r1, sl
 8005098:	00ca      	lsls	r2, r1, #3
 800509a:	4610      	mov	r0, r2
 800509c:	4619      	mov	r1, r3
 800509e:	4603      	mov	r3, r0
 80050a0:	4642      	mov	r2, r8
 80050a2:	189b      	adds	r3, r3, r2
 80050a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050a8:	464b      	mov	r3, r9
 80050aa:	460a      	mov	r2, r1
 80050ac:	eb42 0303 	adc.w	r3, r2, r3
 80050b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80050cc:	4649      	mov	r1, r9
 80050ce:	008b      	lsls	r3, r1, #2
 80050d0:	4641      	mov	r1, r8
 80050d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050d6:	4641      	mov	r1, r8
 80050d8:	008a      	lsls	r2, r1, #2
 80050da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80050de:	f7fb f8d7 	bl	8000290 <__aeabi_uldivmod>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4611      	mov	r1, r2
 80050e8:	4b38      	ldr	r3, [pc, #224]	@ (80051cc <UART_SetConfig+0x4e4>)
 80050ea:	fba3 2301 	umull	r2, r3, r3, r1
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	2264      	movs	r2, #100	@ 0x64
 80050f2:	fb02 f303 	mul.w	r3, r2, r3
 80050f6:	1acb      	subs	r3, r1, r3
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	3332      	adds	r3, #50	@ 0x32
 80050fc:	4a33      	ldr	r2, [pc, #204]	@ (80051cc <UART_SetConfig+0x4e4>)
 80050fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005108:	441c      	add	r4, r3
 800510a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800510e:	2200      	movs	r2, #0
 8005110:	673b      	str	r3, [r7, #112]	@ 0x70
 8005112:	677a      	str	r2, [r7, #116]	@ 0x74
 8005114:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005118:	4642      	mov	r2, r8
 800511a:	464b      	mov	r3, r9
 800511c:	1891      	adds	r1, r2, r2
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	415b      	adcs	r3, r3
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005128:	4641      	mov	r1, r8
 800512a:	1851      	adds	r1, r2, r1
 800512c:	6039      	str	r1, [r7, #0]
 800512e:	4649      	mov	r1, r9
 8005130:	414b      	adcs	r3, r1
 8005132:	607b      	str	r3, [r7, #4]
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	f04f 0300 	mov.w	r3, #0
 800513c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005140:	4659      	mov	r1, fp
 8005142:	00cb      	lsls	r3, r1, #3
 8005144:	4651      	mov	r1, sl
 8005146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800514a:	4651      	mov	r1, sl
 800514c:	00ca      	lsls	r2, r1, #3
 800514e:	4610      	mov	r0, r2
 8005150:	4619      	mov	r1, r3
 8005152:	4603      	mov	r3, r0
 8005154:	4642      	mov	r2, r8
 8005156:	189b      	adds	r3, r3, r2
 8005158:	66bb      	str	r3, [r7, #104]	@ 0x68
 800515a:	464b      	mov	r3, r9
 800515c:	460a      	mov	r2, r1
 800515e:	eb42 0303 	adc.w	r3, r2, r3
 8005162:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	663b      	str	r3, [r7, #96]	@ 0x60
 800516e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800517c:	4649      	mov	r1, r9
 800517e:	008b      	lsls	r3, r1, #2
 8005180:	4641      	mov	r1, r8
 8005182:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005186:	4641      	mov	r1, r8
 8005188:	008a      	lsls	r2, r1, #2
 800518a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800518e:	f7fb f87f 	bl	8000290 <__aeabi_uldivmod>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4b0d      	ldr	r3, [pc, #52]	@ (80051cc <UART_SetConfig+0x4e4>)
 8005198:	fba3 1302 	umull	r1, r3, r3, r2
 800519c:	095b      	lsrs	r3, r3, #5
 800519e:	2164      	movs	r1, #100	@ 0x64
 80051a0:	fb01 f303 	mul.w	r3, r1, r3
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	3332      	adds	r3, #50	@ 0x32
 80051aa:	4a08      	ldr	r2, [pc, #32]	@ (80051cc <UART_SetConfig+0x4e4>)
 80051ac:	fba2 2303 	umull	r2, r3, r2, r3
 80051b0:	095b      	lsrs	r3, r3, #5
 80051b2:	f003 020f 	and.w	r2, r3, #15
 80051b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4422      	add	r2, r4
 80051be:	609a      	str	r2, [r3, #8]
}
 80051c0:	bf00      	nop
 80051c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80051c6:	46bd      	mov	sp, r7
 80051c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051cc:	51eb851f 	.word	0x51eb851f

080051d0 <sniprintf>:
 80051d0:	b40c      	push	{r2, r3}
 80051d2:	b530      	push	{r4, r5, lr}
 80051d4:	4b17      	ldr	r3, [pc, #92]	@ (8005234 <sniprintf+0x64>)
 80051d6:	1e0c      	subs	r4, r1, #0
 80051d8:	681d      	ldr	r5, [r3, #0]
 80051da:	b09d      	sub	sp, #116	@ 0x74
 80051dc:	da08      	bge.n	80051f0 <sniprintf+0x20>
 80051de:	238b      	movs	r3, #139	@ 0x8b
 80051e0:	602b      	str	r3, [r5, #0]
 80051e2:	f04f 30ff 	mov.w	r0, #4294967295
 80051e6:	b01d      	add	sp, #116	@ 0x74
 80051e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051ec:	b002      	add	sp, #8
 80051ee:	4770      	bx	lr
 80051f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80051f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80051f8:	bf14      	ite	ne
 80051fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80051fe:	4623      	moveq	r3, r4
 8005200:	9304      	str	r3, [sp, #16]
 8005202:	9307      	str	r3, [sp, #28]
 8005204:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005208:	9002      	str	r0, [sp, #8]
 800520a:	9006      	str	r0, [sp, #24]
 800520c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005210:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005212:	ab21      	add	r3, sp, #132	@ 0x84
 8005214:	a902      	add	r1, sp, #8
 8005216:	4628      	mov	r0, r5
 8005218:	9301      	str	r3, [sp, #4]
 800521a:	f000 f9cf 	bl	80055bc <_svfiprintf_r>
 800521e:	1c43      	adds	r3, r0, #1
 8005220:	bfbc      	itt	lt
 8005222:	238b      	movlt	r3, #139	@ 0x8b
 8005224:	602b      	strlt	r3, [r5, #0]
 8005226:	2c00      	cmp	r4, #0
 8005228:	d0dd      	beq.n	80051e6 <sniprintf+0x16>
 800522a:	9b02      	ldr	r3, [sp, #8]
 800522c:	2200      	movs	r2, #0
 800522e:	701a      	strb	r2, [r3, #0]
 8005230:	e7d9      	b.n	80051e6 <sniprintf+0x16>
 8005232:	bf00      	nop
 8005234:	20000010 	.word	0x20000010

08005238 <_vsniprintf_r>:
 8005238:	b530      	push	{r4, r5, lr}
 800523a:	4614      	mov	r4, r2
 800523c:	2c00      	cmp	r4, #0
 800523e:	b09b      	sub	sp, #108	@ 0x6c
 8005240:	4605      	mov	r5, r0
 8005242:	461a      	mov	r2, r3
 8005244:	da05      	bge.n	8005252 <_vsniprintf_r+0x1a>
 8005246:	238b      	movs	r3, #139	@ 0x8b
 8005248:	6003      	str	r3, [r0, #0]
 800524a:	f04f 30ff 	mov.w	r0, #4294967295
 800524e:	b01b      	add	sp, #108	@ 0x6c
 8005250:	bd30      	pop	{r4, r5, pc}
 8005252:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005256:	f8ad 300c 	strh.w	r3, [sp, #12]
 800525a:	bf14      	ite	ne
 800525c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005260:	4623      	moveq	r3, r4
 8005262:	9302      	str	r3, [sp, #8]
 8005264:	9305      	str	r3, [sp, #20]
 8005266:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800526a:	9100      	str	r1, [sp, #0]
 800526c:	9104      	str	r1, [sp, #16]
 800526e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005272:	4669      	mov	r1, sp
 8005274:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005276:	f000 f9a1 	bl	80055bc <_svfiprintf_r>
 800527a:	1c43      	adds	r3, r0, #1
 800527c:	bfbc      	itt	lt
 800527e:	238b      	movlt	r3, #139	@ 0x8b
 8005280:	602b      	strlt	r3, [r5, #0]
 8005282:	2c00      	cmp	r4, #0
 8005284:	d0e3      	beq.n	800524e <_vsniprintf_r+0x16>
 8005286:	9b00      	ldr	r3, [sp, #0]
 8005288:	2200      	movs	r2, #0
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	e7df      	b.n	800524e <_vsniprintf_r+0x16>
	...

08005290 <vsniprintf>:
 8005290:	b507      	push	{r0, r1, r2, lr}
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	4613      	mov	r3, r2
 8005296:	460a      	mov	r2, r1
 8005298:	4601      	mov	r1, r0
 800529a:	4803      	ldr	r0, [pc, #12]	@ (80052a8 <vsniprintf+0x18>)
 800529c:	6800      	ldr	r0, [r0, #0]
 800529e:	f7ff ffcb 	bl	8005238 <_vsniprintf_r>
 80052a2:	b003      	add	sp, #12
 80052a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80052a8:	20000010 	.word	0x20000010

080052ac <memset>:
 80052ac:	4402      	add	r2, r0
 80052ae:	4603      	mov	r3, r0
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d100      	bne.n	80052b6 <memset+0xa>
 80052b4:	4770      	bx	lr
 80052b6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ba:	e7f9      	b.n	80052b0 <memset+0x4>

080052bc <__errno>:
 80052bc:	4b01      	ldr	r3, [pc, #4]	@ (80052c4 <__errno+0x8>)
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	20000010 	.word	0x20000010

080052c8 <__libc_init_array>:
 80052c8:	b570      	push	{r4, r5, r6, lr}
 80052ca:	4d0d      	ldr	r5, [pc, #52]	@ (8005300 <__libc_init_array+0x38>)
 80052cc:	4c0d      	ldr	r4, [pc, #52]	@ (8005304 <__libc_init_array+0x3c>)
 80052ce:	1b64      	subs	r4, r4, r5
 80052d0:	10a4      	asrs	r4, r4, #2
 80052d2:	2600      	movs	r6, #0
 80052d4:	42a6      	cmp	r6, r4
 80052d6:	d109      	bne.n	80052ec <__libc_init_array+0x24>
 80052d8:	4d0b      	ldr	r5, [pc, #44]	@ (8005308 <__libc_init_array+0x40>)
 80052da:	4c0c      	ldr	r4, [pc, #48]	@ (800530c <__libc_init_array+0x44>)
 80052dc:	f000 fc66 	bl	8005bac <_init>
 80052e0:	1b64      	subs	r4, r4, r5
 80052e2:	10a4      	asrs	r4, r4, #2
 80052e4:	2600      	movs	r6, #0
 80052e6:	42a6      	cmp	r6, r4
 80052e8:	d105      	bne.n	80052f6 <__libc_init_array+0x2e>
 80052ea:	bd70      	pop	{r4, r5, r6, pc}
 80052ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80052f0:	4798      	blx	r3
 80052f2:	3601      	adds	r6, #1
 80052f4:	e7ee      	b.n	80052d4 <__libc_init_array+0xc>
 80052f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052fa:	4798      	blx	r3
 80052fc:	3601      	adds	r6, #1
 80052fe:	e7f2      	b.n	80052e6 <__libc_init_array+0x1e>
 8005300:	08005d50 	.word	0x08005d50
 8005304:	08005d50 	.word	0x08005d50
 8005308:	08005d50 	.word	0x08005d50
 800530c:	08005d54 	.word	0x08005d54

08005310 <__retarget_lock_acquire_recursive>:
 8005310:	4770      	bx	lr

08005312 <__retarget_lock_release_recursive>:
 8005312:	4770      	bx	lr

08005314 <_free_r>:
 8005314:	b538      	push	{r3, r4, r5, lr}
 8005316:	4605      	mov	r5, r0
 8005318:	2900      	cmp	r1, #0
 800531a:	d041      	beq.n	80053a0 <_free_r+0x8c>
 800531c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005320:	1f0c      	subs	r4, r1, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	bfb8      	it	lt
 8005326:	18e4      	addlt	r4, r4, r3
 8005328:	f000 f8e0 	bl	80054ec <__malloc_lock>
 800532c:	4a1d      	ldr	r2, [pc, #116]	@ (80053a4 <_free_r+0x90>)
 800532e:	6813      	ldr	r3, [r2, #0]
 8005330:	b933      	cbnz	r3, 8005340 <_free_r+0x2c>
 8005332:	6063      	str	r3, [r4, #4]
 8005334:	6014      	str	r4, [r2, #0]
 8005336:	4628      	mov	r0, r5
 8005338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800533c:	f000 b8dc 	b.w	80054f8 <__malloc_unlock>
 8005340:	42a3      	cmp	r3, r4
 8005342:	d908      	bls.n	8005356 <_free_r+0x42>
 8005344:	6820      	ldr	r0, [r4, #0]
 8005346:	1821      	adds	r1, r4, r0
 8005348:	428b      	cmp	r3, r1
 800534a:	bf01      	itttt	eq
 800534c:	6819      	ldreq	r1, [r3, #0]
 800534e:	685b      	ldreq	r3, [r3, #4]
 8005350:	1809      	addeq	r1, r1, r0
 8005352:	6021      	streq	r1, [r4, #0]
 8005354:	e7ed      	b.n	8005332 <_free_r+0x1e>
 8005356:	461a      	mov	r2, r3
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	b10b      	cbz	r3, 8005360 <_free_r+0x4c>
 800535c:	42a3      	cmp	r3, r4
 800535e:	d9fa      	bls.n	8005356 <_free_r+0x42>
 8005360:	6811      	ldr	r1, [r2, #0]
 8005362:	1850      	adds	r0, r2, r1
 8005364:	42a0      	cmp	r0, r4
 8005366:	d10b      	bne.n	8005380 <_free_r+0x6c>
 8005368:	6820      	ldr	r0, [r4, #0]
 800536a:	4401      	add	r1, r0
 800536c:	1850      	adds	r0, r2, r1
 800536e:	4283      	cmp	r3, r0
 8005370:	6011      	str	r1, [r2, #0]
 8005372:	d1e0      	bne.n	8005336 <_free_r+0x22>
 8005374:	6818      	ldr	r0, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	6053      	str	r3, [r2, #4]
 800537a:	4408      	add	r0, r1
 800537c:	6010      	str	r0, [r2, #0]
 800537e:	e7da      	b.n	8005336 <_free_r+0x22>
 8005380:	d902      	bls.n	8005388 <_free_r+0x74>
 8005382:	230c      	movs	r3, #12
 8005384:	602b      	str	r3, [r5, #0]
 8005386:	e7d6      	b.n	8005336 <_free_r+0x22>
 8005388:	6820      	ldr	r0, [r4, #0]
 800538a:	1821      	adds	r1, r4, r0
 800538c:	428b      	cmp	r3, r1
 800538e:	bf04      	itt	eq
 8005390:	6819      	ldreq	r1, [r3, #0]
 8005392:	685b      	ldreq	r3, [r3, #4]
 8005394:	6063      	str	r3, [r4, #4]
 8005396:	bf04      	itt	eq
 8005398:	1809      	addeq	r1, r1, r0
 800539a:	6021      	streq	r1, [r4, #0]
 800539c:	6054      	str	r4, [r2, #4]
 800539e:	e7ca      	b.n	8005336 <_free_r+0x22>
 80053a0:	bd38      	pop	{r3, r4, r5, pc}
 80053a2:	bf00      	nop
 80053a4:	20000c74 	.word	0x20000c74

080053a8 <sbrk_aligned>:
 80053a8:	b570      	push	{r4, r5, r6, lr}
 80053aa:	4e0f      	ldr	r6, [pc, #60]	@ (80053e8 <sbrk_aligned+0x40>)
 80053ac:	460c      	mov	r4, r1
 80053ae:	6831      	ldr	r1, [r6, #0]
 80053b0:	4605      	mov	r5, r0
 80053b2:	b911      	cbnz	r1, 80053ba <sbrk_aligned+0x12>
 80053b4:	f000 fba6 	bl	8005b04 <_sbrk_r>
 80053b8:	6030      	str	r0, [r6, #0]
 80053ba:	4621      	mov	r1, r4
 80053bc:	4628      	mov	r0, r5
 80053be:	f000 fba1 	bl	8005b04 <_sbrk_r>
 80053c2:	1c43      	adds	r3, r0, #1
 80053c4:	d103      	bne.n	80053ce <sbrk_aligned+0x26>
 80053c6:	f04f 34ff 	mov.w	r4, #4294967295
 80053ca:	4620      	mov	r0, r4
 80053cc:	bd70      	pop	{r4, r5, r6, pc}
 80053ce:	1cc4      	adds	r4, r0, #3
 80053d0:	f024 0403 	bic.w	r4, r4, #3
 80053d4:	42a0      	cmp	r0, r4
 80053d6:	d0f8      	beq.n	80053ca <sbrk_aligned+0x22>
 80053d8:	1a21      	subs	r1, r4, r0
 80053da:	4628      	mov	r0, r5
 80053dc:	f000 fb92 	bl	8005b04 <_sbrk_r>
 80053e0:	3001      	adds	r0, #1
 80053e2:	d1f2      	bne.n	80053ca <sbrk_aligned+0x22>
 80053e4:	e7ef      	b.n	80053c6 <sbrk_aligned+0x1e>
 80053e6:	bf00      	nop
 80053e8:	20000c70 	.word	0x20000c70

080053ec <_malloc_r>:
 80053ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053f0:	1ccd      	adds	r5, r1, #3
 80053f2:	f025 0503 	bic.w	r5, r5, #3
 80053f6:	3508      	adds	r5, #8
 80053f8:	2d0c      	cmp	r5, #12
 80053fa:	bf38      	it	cc
 80053fc:	250c      	movcc	r5, #12
 80053fe:	2d00      	cmp	r5, #0
 8005400:	4606      	mov	r6, r0
 8005402:	db01      	blt.n	8005408 <_malloc_r+0x1c>
 8005404:	42a9      	cmp	r1, r5
 8005406:	d904      	bls.n	8005412 <_malloc_r+0x26>
 8005408:	230c      	movs	r3, #12
 800540a:	6033      	str	r3, [r6, #0]
 800540c:	2000      	movs	r0, #0
 800540e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005412:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054e8 <_malloc_r+0xfc>
 8005416:	f000 f869 	bl	80054ec <__malloc_lock>
 800541a:	f8d8 3000 	ldr.w	r3, [r8]
 800541e:	461c      	mov	r4, r3
 8005420:	bb44      	cbnz	r4, 8005474 <_malloc_r+0x88>
 8005422:	4629      	mov	r1, r5
 8005424:	4630      	mov	r0, r6
 8005426:	f7ff ffbf 	bl	80053a8 <sbrk_aligned>
 800542a:	1c43      	adds	r3, r0, #1
 800542c:	4604      	mov	r4, r0
 800542e:	d158      	bne.n	80054e2 <_malloc_r+0xf6>
 8005430:	f8d8 4000 	ldr.w	r4, [r8]
 8005434:	4627      	mov	r7, r4
 8005436:	2f00      	cmp	r7, #0
 8005438:	d143      	bne.n	80054c2 <_malloc_r+0xd6>
 800543a:	2c00      	cmp	r4, #0
 800543c:	d04b      	beq.n	80054d6 <_malloc_r+0xea>
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	4639      	mov	r1, r7
 8005442:	4630      	mov	r0, r6
 8005444:	eb04 0903 	add.w	r9, r4, r3
 8005448:	f000 fb5c 	bl	8005b04 <_sbrk_r>
 800544c:	4581      	cmp	r9, r0
 800544e:	d142      	bne.n	80054d6 <_malloc_r+0xea>
 8005450:	6821      	ldr	r1, [r4, #0]
 8005452:	1a6d      	subs	r5, r5, r1
 8005454:	4629      	mov	r1, r5
 8005456:	4630      	mov	r0, r6
 8005458:	f7ff ffa6 	bl	80053a8 <sbrk_aligned>
 800545c:	3001      	adds	r0, #1
 800545e:	d03a      	beq.n	80054d6 <_malloc_r+0xea>
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	442b      	add	r3, r5
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	f8d8 3000 	ldr.w	r3, [r8]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	bb62      	cbnz	r2, 80054c8 <_malloc_r+0xdc>
 800546e:	f8c8 7000 	str.w	r7, [r8]
 8005472:	e00f      	b.n	8005494 <_malloc_r+0xa8>
 8005474:	6822      	ldr	r2, [r4, #0]
 8005476:	1b52      	subs	r2, r2, r5
 8005478:	d420      	bmi.n	80054bc <_malloc_r+0xd0>
 800547a:	2a0b      	cmp	r2, #11
 800547c:	d917      	bls.n	80054ae <_malloc_r+0xc2>
 800547e:	1961      	adds	r1, r4, r5
 8005480:	42a3      	cmp	r3, r4
 8005482:	6025      	str	r5, [r4, #0]
 8005484:	bf18      	it	ne
 8005486:	6059      	strne	r1, [r3, #4]
 8005488:	6863      	ldr	r3, [r4, #4]
 800548a:	bf08      	it	eq
 800548c:	f8c8 1000 	streq.w	r1, [r8]
 8005490:	5162      	str	r2, [r4, r5]
 8005492:	604b      	str	r3, [r1, #4]
 8005494:	4630      	mov	r0, r6
 8005496:	f000 f82f 	bl	80054f8 <__malloc_unlock>
 800549a:	f104 000b 	add.w	r0, r4, #11
 800549e:	1d23      	adds	r3, r4, #4
 80054a0:	f020 0007 	bic.w	r0, r0, #7
 80054a4:	1ac2      	subs	r2, r0, r3
 80054a6:	bf1c      	itt	ne
 80054a8:	1a1b      	subne	r3, r3, r0
 80054aa:	50a3      	strne	r3, [r4, r2]
 80054ac:	e7af      	b.n	800540e <_malloc_r+0x22>
 80054ae:	6862      	ldr	r2, [r4, #4]
 80054b0:	42a3      	cmp	r3, r4
 80054b2:	bf0c      	ite	eq
 80054b4:	f8c8 2000 	streq.w	r2, [r8]
 80054b8:	605a      	strne	r2, [r3, #4]
 80054ba:	e7eb      	b.n	8005494 <_malloc_r+0xa8>
 80054bc:	4623      	mov	r3, r4
 80054be:	6864      	ldr	r4, [r4, #4]
 80054c0:	e7ae      	b.n	8005420 <_malloc_r+0x34>
 80054c2:	463c      	mov	r4, r7
 80054c4:	687f      	ldr	r7, [r7, #4]
 80054c6:	e7b6      	b.n	8005436 <_malloc_r+0x4a>
 80054c8:	461a      	mov	r2, r3
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	42a3      	cmp	r3, r4
 80054ce:	d1fb      	bne.n	80054c8 <_malloc_r+0xdc>
 80054d0:	2300      	movs	r3, #0
 80054d2:	6053      	str	r3, [r2, #4]
 80054d4:	e7de      	b.n	8005494 <_malloc_r+0xa8>
 80054d6:	230c      	movs	r3, #12
 80054d8:	6033      	str	r3, [r6, #0]
 80054da:	4630      	mov	r0, r6
 80054dc:	f000 f80c 	bl	80054f8 <__malloc_unlock>
 80054e0:	e794      	b.n	800540c <_malloc_r+0x20>
 80054e2:	6005      	str	r5, [r0, #0]
 80054e4:	e7d6      	b.n	8005494 <_malloc_r+0xa8>
 80054e6:	bf00      	nop
 80054e8:	20000c74 	.word	0x20000c74

080054ec <__malloc_lock>:
 80054ec:	4801      	ldr	r0, [pc, #4]	@ (80054f4 <__malloc_lock+0x8>)
 80054ee:	f7ff bf0f 	b.w	8005310 <__retarget_lock_acquire_recursive>
 80054f2:	bf00      	nop
 80054f4:	20000c6c 	.word	0x20000c6c

080054f8 <__malloc_unlock>:
 80054f8:	4801      	ldr	r0, [pc, #4]	@ (8005500 <__malloc_unlock+0x8>)
 80054fa:	f7ff bf0a 	b.w	8005312 <__retarget_lock_release_recursive>
 80054fe:	bf00      	nop
 8005500:	20000c6c 	.word	0x20000c6c

08005504 <__ssputs_r>:
 8005504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005508:	688e      	ldr	r6, [r1, #8]
 800550a:	461f      	mov	r7, r3
 800550c:	42be      	cmp	r6, r7
 800550e:	680b      	ldr	r3, [r1, #0]
 8005510:	4682      	mov	sl, r0
 8005512:	460c      	mov	r4, r1
 8005514:	4690      	mov	r8, r2
 8005516:	d82d      	bhi.n	8005574 <__ssputs_r+0x70>
 8005518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800551c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005520:	d026      	beq.n	8005570 <__ssputs_r+0x6c>
 8005522:	6965      	ldr	r5, [r4, #20]
 8005524:	6909      	ldr	r1, [r1, #16]
 8005526:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800552a:	eba3 0901 	sub.w	r9, r3, r1
 800552e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005532:	1c7b      	adds	r3, r7, #1
 8005534:	444b      	add	r3, r9
 8005536:	106d      	asrs	r5, r5, #1
 8005538:	429d      	cmp	r5, r3
 800553a:	bf38      	it	cc
 800553c:	461d      	movcc	r5, r3
 800553e:	0553      	lsls	r3, r2, #21
 8005540:	d527      	bpl.n	8005592 <__ssputs_r+0x8e>
 8005542:	4629      	mov	r1, r5
 8005544:	f7ff ff52 	bl	80053ec <_malloc_r>
 8005548:	4606      	mov	r6, r0
 800554a:	b360      	cbz	r0, 80055a6 <__ssputs_r+0xa2>
 800554c:	6921      	ldr	r1, [r4, #16]
 800554e:	464a      	mov	r2, r9
 8005550:	f000 fae8 	bl	8005b24 <memcpy>
 8005554:	89a3      	ldrh	r3, [r4, #12]
 8005556:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800555a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800555e:	81a3      	strh	r3, [r4, #12]
 8005560:	6126      	str	r6, [r4, #16]
 8005562:	6165      	str	r5, [r4, #20]
 8005564:	444e      	add	r6, r9
 8005566:	eba5 0509 	sub.w	r5, r5, r9
 800556a:	6026      	str	r6, [r4, #0]
 800556c:	60a5      	str	r5, [r4, #8]
 800556e:	463e      	mov	r6, r7
 8005570:	42be      	cmp	r6, r7
 8005572:	d900      	bls.n	8005576 <__ssputs_r+0x72>
 8005574:	463e      	mov	r6, r7
 8005576:	6820      	ldr	r0, [r4, #0]
 8005578:	4632      	mov	r2, r6
 800557a:	4641      	mov	r1, r8
 800557c:	f000 faa8 	bl	8005ad0 <memmove>
 8005580:	68a3      	ldr	r3, [r4, #8]
 8005582:	1b9b      	subs	r3, r3, r6
 8005584:	60a3      	str	r3, [r4, #8]
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	4433      	add	r3, r6
 800558a:	6023      	str	r3, [r4, #0]
 800558c:	2000      	movs	r0, #0
 800558e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005592:	462a      	mov	r2, r5
 8005594:	f000 fad4 	bl	8005b40 <_realloc_r>
 8005598:	4606      	mov	r6, r0
 800559a:	2800      	cmp	r0, #0
 800559c:	d1e0      	bne.n	8005560 <__ssputs_r+0x5c>
 800559e:	6921      	ldr	r1, [r4, #16]
 80055a0:	4650      	mov	r0, sl
 80055a2:	f7ff feb7 	bl	8005314 <_free_r>
 80055a6:	230c      	movs	r3, #12
 80055a8:	f8ca 3000 	str.w	r3, [sl]
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055b2:	81a3      	strh	r3, [r4, #12]
 80055b4:	f04f 30ff 	mov.w	r0, #4294967295
 80055b8:	e7e9      	b.n	800558e <__ssputs_r+0x8a>
	...

080055bc <_svfiprintf_r>:
 80055bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c0:	4698      	mov	r8, r3
 80055c2:	898b      	ldrh	r3, [r1, #12]
 80055c4:	061b      	lsls	r3, r3, #24
 80055c6:	b09d      	sub	sp, #116	@ 0x74
 80055c8:	4607      	mov	r7, r0
 80055ca:	460d      	mov	r5, r1
 80055cc:	4614      	mov	r4, r2
 80055ce:	d510      	bpl.n	80055f2 <_svfiprintf_r+0x36>
 80055d0:	690b      	ldr	r3, [r1, #16]
 80055d2:	b973      	cbnz	r3, 80055f2 <_svfiprintf_r+0x36>
 80055d4:	2140      	movs	r1, #64	@ 0x40
 80055d6:	f7ff ff09 	bl	80053ec <_malloc_r>
 80055da:	6028      	str	r0, [r5, #0]
 80055dc:	6128      	str	r0, [r5, #16]
 80055de:	b930      	cbnz	r0, 80055ee <_svfiprintf_r+0x32>
 80055e0:	230c      	movs	r3, #12
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	f04f 30ff 	mov.w	r0, #4294967295
 80055e8:	b01d      	add	sp, #116	@ 0x74
 80055ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ee:	2340      	movs	r3, #64	@ 0x40
 80055f0:	616b      	str	r3, [r5, #20]
 80055f2:	2300      	movs	r3, #0
 80055f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80055f6:	2320      	movs	r3, #32
 80055f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005600:	2330      	movs	r3, #48	@ 0x30
 8005602:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80057a0 <_svfiprintf_r+0x1e4>
 8005606:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800560a:	f04f 0901 	mov.w	r9, #1
 800560e:	4623      	mov	r3, r4
 8005610:	469a      	mov	sl, r3
 8005612:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005616:	b10a      	cbz	r2, 800561c <_svfiprintf_r+0x60>
 8005618:	2a25      	cmp	r2, #37	@ 0x25
 800561a:	d1f9      	bne.n	8005610 <_svfiprintf_r+0x54>
 800561c:	ebba 0b04 	subs.w	fp, sl, r4
 8005620:	d00b      	beq.n	800563a <_svfiprintf_r+0x7e>
 8005622:	465b      	mov	r3, fp
 8005624:	4622      	mov	r2, r4
 8005626:	4629      	mov	r1, r5
 8005628:	4638      	mov	r0, r7
 800562a:	f7ff ff6b 	bl	8005504 <__ssputs_r>
 800562e:	3001      	adds	r0, #1
 8005630:	f000 80a7 	beq.w	8005782 <_svfiprintf_r+0x1c6>
 8005634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005636:	445a      	add	r2, fp
 8005638:	9209      	str	r2, [sp, #36]	@ 0x24
 800563a:	f89a 3000 	ldrb.w	r3, [sl]
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 809f 	beq.w	8005782 <_svfiprintf_r+0x1c6>
 8005644:	2300      	movs	r3, #0
 8005646:	f04f 32ff 	mov.w	r2, #4294967295
 800564a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800564e:	f10a 0a01 	add.w	sl, sl, #1
 8005652:	9304      	str	r3, [sp, #16]
 8005654:	9307      	str	r3, [sp, #28]
 8005656:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800565a:	931a      	str	r3, [sp, #104]	@ 0x68
 800565c:	4654      	mov	r4, sl
 800565e:	2205      	movs	r2, #5
 8005660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005664:	484e      	ldr	r0, [pc, #312]	@ (80057a0 <_svfiprintf_r+0x1e4>)
 8005666:	f7fa fdc3 	bl	80001f0 <memchr>
 800566a:	9a04      	ldr	r2, [sp, #16]
 800566c:	b9d8      	cbnz	r0, 80056a6 <_svfiprintf_r+0xea>
 800566e:	06d0      	lsls	r0, r2, #27
 8005670:	bf44      	itt	mi
 8005672:	2320      	movmi	r3, #32
 8005674:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005678:	0711      	lsls	r1, r2, #28
 800567a:	bf44      	itt	mi
 800567c:	232b      	movmi	r3, #43	@ 0x2b
 800567e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005682:	f89a 3000 	ldrb.w	r3, [sl]
 8005686:	2b2a      	cmp	r3, #42	@ 0x2a
 8005688:	d015      	beq.n	80056b6 <_svfiprintf_r+0xfa>
 800568a:	9a07      	ldr	r2, [sp, #28]
 800568c:	4654      	mov	r4, sl
 800568e:	2000      	movs	r0, #0
 8005690:	f04f 0c0a 	mov.w	ip, #10
 8005694:	4621      	mov	r1, r4
 8005696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800569a:	3b30      	subs	r3, #48	@ 0x30
 800569c:	2b09      	cmp	r3, #9
 800569e:	d94b      	bls.n	8005738 <_svfiprintf_r+0x17c>
 80056a0:	b1b0      	cbz	r0, 80056d0 <_svfiprintf_r+0x114>
 80056a2:	9207      	str	r2, [sp, #28]
 80056a4:	e014      	b.n	80056d0 <_svfiprintf_r+0x114>
 80056a6:	eba0 0308 	sub.w	r3, r0, r8
 80056aa:	fa09 f303 	lsl.w	r3, r9, r3
 80056ae:	4313      	orrs	r3, r2
 80056b0:	9304      	str	r3, [sp, #16]
 80056b2:	46a2      	mov	sl, r4
 80056b4:	e7d2      	b.n	800565c <_svfiprintf_r+0xa0>
 80056b6:	9b03      	ldr	r3, [sp, #12]
 80056b8:	1d19      	adds	r1, r3, #4
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	9103      	str	r1, [sp, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	bfbb      	ittet	lt
 80056c2:	425b      	neglt	r3, r3
 80056c4:	f042 0202 	orrlt.w	r2, r2, #2
 80056c8:	9307      	strge	r3, [sp, #28]
 80056ca:	9307      	strlt	r3, [sp, #28]
 80056cc:	bfb8      	it	lt
 80056ce:	9204      	strlt	r2, [sp, #16]
 80056d0:	7823      	ldrb	r3, [r4, #0]
 80056d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80056d4:	d10a      	bne.n	80056ec <_svfiprintf_r+0x130>
 80056d6:	7863      	ldrb	r3, [r4, #1]
 80056d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80056da:	d132      	bne.n	8005742 <_svfiprintf_r+0x186>
 80056dc:	9b03      	ldr	r3, [sp, #12]
 80056de:	1d1a      	adds	r2, r3, #4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	9203      	str	r2, [sp, #12]
 80056e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80056e8:	3402      	adds	r4, #2
 80056ea:	9305      	str	r3, [sp, #20]
 80056ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80057b0 <_svfiprintf_r+0x1f4>
 80056f0:	7821      	ldrb	r1, [r4, #0]
 80056f2:	2203      	movs	r2, #3
 80056f4:	4650      	mov	r0, sl
 80056f6:	f7fa fd7b 	bl	80001f0 <memchr>
 80056fa:	b138      	cbz	r0, 800570c <_svfiprintf_r+0x150>
 80056fc:	9b04      	ldr	r3, [sp, #16]
 80056fe:	eba0 000a 	sub.w	r0, r0, sl
 8005702:	2240      	movs	r2, #64	@ 0x40
 8005704:	4082      	lsls	r2, r0
 8005706:	4313      	orrs	r3, r2
 8005708:	3401      	adds	r4, #1
 800570a:	9304      	str	r3, [sp, #16]
 800570c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005710:	4824      	ldr	r0, [pc, #144]	@ (80057a4 <_svfiprintf_r+0x1e8>)
 8005712:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005716:	2206      	movs	r2, #6
 8005718:	f7fa fd6a 	bl	80001f0 <memchr>
 800571c:	2800      	cmp	r0, #0
 800571e:	d036      	beq.n	800578e <_svfiprintf_r+0x1d2>
 8005720:	4b21      	ldr	r3, [pc, #132]	@ (80057a8 <_svfiprintf_r+0x1ec>)
 8005722:	bb1b      	cbnz	r3, 800576c <_svfiprintf_r+0x1b0>
 8005724:	9b03      	ldr	r3, [sp, #12]
 8005726:	3307      	adds	r3, #7
 8005728:	f023 0307 	bic.w	r3, r3, #7
 800572c:	3308      	adds	r3, #8
 800572e:	9303      	str	r3, [sp, #12]
 8005730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005732:	4433      	add	r3, r6
 8005734:	9309      	str	r3, [sp, #36]	@ 0x24
 8005736:	e76a      	b.n	800560e <_svfiprintf_r+0x52>
 8005738:	fb0c 3202 	mla	r2, ip, r2, r3
 800573c:	460c      	mov	r4, r1
 800573e:	2001      	movs	r0, #1
 8005740:	e7a8      	b.n	8005694 <_svfiprintf_r+0xd8>
 8005742:	2300      	movs	r3, #0
 8005744:	3401      	adds	r4, #1
 8005746:	9305      	str	r3, [sp, #20]
 8005748:	4619      	mov	r1, r3
 800574a:	f04f 0c0a 	mov.w	ip, #10
 800574e:	4620      	mov	r0, r4
 8005750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005754:	3a30      	subs	r2, #48	@ 0x30
 8005756:	2a09      	cmp	r2, #9
 8005758:	d903      	bls.n	8005762 <_svfiprintf_r+0x1a6>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0c6      	beq.n	80056ec <_svfiprintf_r+0x130>
 800575e:	9105      	str	r1, [sp, #20]
 8005760:	e7c4      	b.n	80056ec <_svfiprintf_r+0x130>
 8005762:	fb0c 2101 	mla	r1, ip, r1, r2
 8005766:	4604      	mov	r4, r0
 8005768:	2301      	movs	r3, #1
 800576a:	e7f0      	b.n	800574e <_svfiprintf_r+0x192>
 800576c:	ab03      	add	r3, sp, #12
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	462a      	mov	r2, r5
 8005772:	4b0e      	ldr	r3, [pc, #56]	@ (80057ac <_svfiprintf_r+0x1f0>)
 8005774:	a904      	add	r1, sp, #16
 8005776:	4638      	mov	r0, r7
 8005778:	f3af 8000 	nop.w
 800577c:	1c42      	adds	r2, r0, #1
 800577e:	4606      	mov	r6, r0
 8005780:	d1d6      	bne.n	8005730 <_svfiprintf_r+0x174>
 8005782:	89ab      	ldrh	r3, [r5, #12]
 8005784:	065b      	lsls	r3, r3, #25
 8005786:	f53f af2d 	bmi.w	80055e4 <_svfiprintf_r+0x28>
 800578a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800578c:	e72c      	b.n	80055e8 <_svfiprintf_r+0x2c>
 800578e:	ab03      	add	r3, sp, #12
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	462a      	mov	r2, r5
 8005794:	4b05      	ldr	r3, [pc, #20]	@ (80057ac <_svfiprintf_r+0x1f0>)
 8005796:	a904      	add	r1, sp, #16
 8005798:	4638      	mov	r0, r7
 800579a:	f000 f879 	bl	8005890 <_printf_i>
 800579e:	e7ed      	b.n	800577c <_svfiprintf_r+0x1c0>
 80057a0:	08005d14 	.word	0x08005d14
 80057a4:	08005d1e 	.word	0x08005d1e
 80057a8:	00000000 	.word	0x00000000
 80057ac:	08005505 	.word	0x08005505
 80057b0:	08005d1a 	.word	0x08005d1a

080057b4 <_printf_common>:
 80057b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b8:	4616      	mov	r6, r2
 80057ba:	4698      	mov	r8, r3
 80057bc:	688a      	ldr	r2, [r1, #8]
 80057be:	690b      	ldr	r3, [r1, #16]
 80057c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057c4:	4293      	cmp	r3, r2
 80057c6:	bfb8      	it	lt
 80057c8:	4613      	movlt	r3, r2
 80057ca:	6033      	str	r3, [r6, #0]
 80057cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057d0:	4607      	mov	r7, r0
 80057d2:	460c      	mov	r4, r1
 80057d4:	b10a      	cbz	r2, 80057da <_printf_common+0x26>
 80057d6:	3301      	adds	r3, #1
 80057d8:	6033      	str	r3, [r6, #0]
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	0699      	lsls	r1, r3, #26
 80057de:	bf42      	ittt	mi
 80057e0:	6833      	ldrmi	r3, [r6, #0]
 80057e2:	3302      	addmi	r3, #2
 80057e4:	6033      	strmi	r3, [r6, #0]
 80057e6:	6825      	ldr	r5, [r4, #0]
 80057e8:	f015 0506 	ands.w	r5, r5, #6
 80057ec:	d106      	bne.n	80057fc <_printf_common+0x48>
 80057ee:	f104 0a19 	add.w	sl, r4, #25
 80057f2:	68e3      	ldr	r3, [r4, #12]
 80057f4:	6832      	ldr	r2, [r6, #0]
 80057f6:	1a9b      	subs	r3, r3, r2
 80057f8:	42ab      	cmp	r3, r5
 80057fa:	dc26      	bgt.n	800584a <_printf_common+0x96>
 80057fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005800:	6822      	ldr	r2, [r4, #0]
 8005802:	3b00      	subs	r3, #0
 8005804:	bf18      	it	ne
 8005806:	2301      	movne	r3, #1
 8005808:	0692      	lsls	r2, r2, #26
 800580a:	d42b      	bmi.n	8005864 <_printf_common+0xb0>
 800580c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005810:	4641      	mov	r1, r8
 8005812:	4638      	mov	r0, r7
 8005814:	47c8      	blx	r9
 8005816:	3001      	adds	r0, #1
 8005818:	d01e      	beq.n	8005858 <_printf_common+0xa4>
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	6922      	ldr	r2, [r4, #16]
 800581e:	f003 0306 	and.w	r3, r3, #6
 8005822:	2b04      	cmp	r3, #4
 8005824:	bf02      	ittt	eq
 8005826:	68e5      	ldreq	r5, [r4, #12]
 8005828:	6833      	ldreq	r3, [r6, #0]
 800582a:	1aed      	subeq	r5, r5, r3
 800582c:	68a3      	ldr	r3, [r4, #8]
 800582e:	bf0c      	ite	eq
 8005830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005834:	2500      	movne	r5, #0
 8005836:	4293      	cmp	r3, r2
 8005838:	bfc4      	itt	gt
 800583a:	1a9b      	subgt	r3, r3, r2
 800583c:	18ed      	addgt	r5, r5, r3
 800583e:	2600      	movs	r6, #0
 8005840:	341a      	adds	r4, #26
 8005842:	42b5      	cmp	r5, r6
 8005844:	d11a      	bne.n	800587c <_printf_common+0xc8>
 8005846:	2000      	movs	r0, #0
 8005848:	e008      	b.n	800585c <_printf_common+0xa8>
 800584a:	2301      	movs	r3, #1
 800584c:	4652      	mov	r2, sl
 800584e:	4641      	mov	r1, r8
 8005850:	4638      	mov	r0, r7
 8005852:	47c8      	blx	r9
 8005854:	3001      	adds	r0, #1
 8005856:	d103      	bne.n	8005860 <_printf_common+0xac>
 8005858:	f04f 30ff 	mov.w	r0, #4294967295
 800585c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005860:	3501      	adds	r5, #1
 8005862:	e7c6      	b.n	80057f2 <_printf_common+0x3e>
 8005864:	18e1      	adds	r1, r4, r3
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	2030      	movs	r0, #48	@ 0x30
 800586a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800586e:	4422      	add	r2, r4
 8005870:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005874:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005878:	3302      	adds	r3, #2
 800587a:	e7c7      	b.n	800580c <_printf_common+0x58>
 800587c:	2301      	movs	r3, #1
 800587e:	4622      	mov	r2, r4
 8005880:	4641      	mov	r1, r8
 8005882:	4638      	mov	r0, r7
 8005884:	47c8      	blx	r9
 8005886:	3001      	adds	r0, #1
 8005888:	d0e6      	beq.n	8005858 <_printf_common+0xa4>
 800588a:	3601      	adds	r6, #1
 800588c:	e7d9      	b.n	8005842 <_printf_common+0x8e>
	...

08005890 <_printf_i>:
 8005890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005894:	7e0f      	ldrb	r7, [r1, #24]
 8005896:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005898:	2f78      	cmp	r7, #120	@ 0x78
 800589a:	4691      	mov	r9, r2
 800589c:	4680      	mov	r8, r0
 800589e:	460c      	mov	r4, r1
 80058a0:	469a      	mov	sl, r3
 80058a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80058a6:	d807      	bhi.n	80058b8 <_printf_i+0x28>
 80058a8:	2f62      	cmp	r7, #98	@ 0x62
 80058aa:	d80a      	bhi.n	80058c2 <_printf_i+0x32>
 80058ac:	2f00      	cmp	r7, #0
 80058ae:	f000 80d2 	beq.w	8005a56 <_printf_i+0x1c6>
 80058b2:	2f58      	cmp	r7, #88	@ 0x58
 80058b4:	f000 80b9 	beq.w	8005a2a <_printf_i+0x19a>
 80058b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058c0:	e03a      	b.n	8005938 <_printf_i+0xa8>
 80058c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80058c6:	2b15      	cmp	r3, #21
 80058c8:	d8f6      	bhi.n	80058b8 <_printf_i+0x28>
 80058ca:	a101      	add	r1, pc, #4	@ (adr r1, 80058d0 <_printf_i+0x40>)
 80058cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058d0:	08005929 	.word	0x08005929
 80058d4:	0800593d 	.word	0x0800593d
 80058d8:	080058b9 	.word	0x080058b9
 80058dc:	080058b9 	.word	0x080058b9
 80058e0:	080058b9 	.word	0x080058b9
 80058e4:	080058b9 	.word	0x080058b9
 80058e8:	0800593d 	.word	0x0800593d
 80058ec:	080058b9 	.word	0x080058b9
 80058f0:	080058b9 	.word	0x080058b9
 80058f4:	080058b9 	.word	0x080058b9
 80058f8:	080058b9 	.word	0x080058b9
 80058fc:	08005a3d 	.word	0x08005a3d
 8005900:	08005967 	.word	0x08005967
 8005904:	080059f7 	.word	0x080059f7
 8005908:	080058b9 	.word	0x080058b9
 800590c:	080058b9 	.word	0x080058b9
 8005910:	08005a5f 	.word	0x08005a5f
 8005914:	080058b9 	.word	0x080058b9
 8005918:	08005967 	.word	0x08005967
 800591c:	080058b9 	.word	0x080058b9
 8005920:	080058b9 	.word	0x080058b9
 8005924:	080059ff 	.word	0x080059ff
 8005928:	6833      	ldr	r3, [r6, #0]
 800592a:	1d1a      	adds	r2, r3, #4
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6032      	str	r2, [r6, #0]
 8005930:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005934:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005938:	2301      	movs	r3, #1
 800593a:	e09d      	b.n	8005a78 <_printf_i+0x1e8>
 800593c:	6833      	ldr	r3, [r6, #0]
 800593e:	6820      	ldr	r0, [r4, #0]
 8005940:	1d19      	adds	r1, r3, #4
 8005942:	6031      	str	r1, [r6, #0]
 8005944:	0606      	lsls	r6, r0, #24
 8005946:	d501      	bpl.n	800594c <_printf_i+0xbc>
 8005948:	681d      	ldr	r5, [r3, #0]
 800594a:	e003      	b.n	8005954 <_printf_i+0xc4>
 800594c:	0645      	lsls	r5, r0, #25
 800594e:	d5fb      	bpl.n	8005948 <_printf_i+0xb8>
 8005950:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005954:	2d00      	cmp	r5, #0
 8005956:	da03      	bge.n	8005960 <_printf_i+0xd0>
 8005958:	232d      	movs	r3, #45	@ 0x2d
 800595a:	426d      	negs	r5, r5
 800595c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005960:	4859      	ldr	r0, [pc, #356]	@ (8005ac8 <_printf_i+0x238>)
 8005962:	230a      	movs	r3, #10
 8005964:	e011      	b.n	800598a <_printf_i+0xfa>
 8005966:	6821      	ldr	r1, [r4, #0]
 8005968:	6833      	ldr	r3, [r6, #0]
 800596a:	0608      	lsls	r0, r1, #24
 800596c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005970:	d402      	bmi.n	8005978 <_printf_i+0xe8>
 8005972:	0649      	lsls	r1, r1, #25
 8005974:	bf48      	it	mi
 8005976:	b2ad      	uxthmi	r5, r5
 8005978:	2f6f      	cmp	r7, #111	@ 0x6f
 800597a:	4853      	ldr	r0, [pc, #332]	@ (8005ac8 <_printf_i+0x238>)
 800597c:	6033      	str	r3, [r6, #0]
 800597e:	bf14      	ite	ne
 8005980:	230a      	movne	r3, #10
 8005982:	2308      	moveq	r3, #8
 8005984:	2100      	movs	r1, #0
 8005986:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800598a:	6866      	ldr	r6, [r4, #4]
 800598c:	60a6      	str	r6, [r4, #8]
 800598e:	2e00      	cmp	r6, #0
 8005990:	bfa2      	ittt	ge
 8005992:	6821      	ldrge	r1, [r4, #0]
 8005994:	f021 0104 	bicge.w	r1, r1, #4
 8005998:	6021      	strge	r1, [r4, #0]
 800599a:	b90d      	cbnz	r5, 80059a0 <_printf_i+0x110>
 800599c:	2e00      	cmp	r6, #0
 800599e:	d04b      	beq.n	8005a38 <_printf_i+0x1a8>
 80059a0:	4616      	mov	r6, r2
 80059a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80059a6:	fb03 5711 	mls	r7, r3, r1, r5
 80059aa:	5dc7      	ldrb	r7, [r0, r7]
 80059ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059b0:	462f      	mov	r7, r5
 80059b2:	42bb      	cmp	r3, r7
 80059b4:	460d      	mov	r5, r1
 80059b6:	d9f4      	bls.n	80059a2 <_printf_i+0x112>
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d10b      	bne.n	80059d4 <_printf_i+0x144>
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	07df      	lsls	r7, r3, #31
 80059c0:	d508      	bpl.n	80059d4 <_printf_i+0x144>
 80059c2:	6923      	ldr	r3, [r4, #16]
 80059c4:	6861      	ldr	r1, [r4, #4]
 80059c6:	4299      	cmp	r1, r3
 80059c8:	bfde      	ittt	le
 80059ca:	2330      	movle	r3, #48	@ 0x30
 80059cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059d4:	1b92      	subs	r2, r2, r6
 80059d6:	6122      	str	r2, [r4, #16]
 80059d8:	f8cd a000 	str.w	sl, [sp]
 80059dc:	464b      	mov	r3, r9
 80059de:	aa03      	add	r2, sp, #12
 80059e0:	4621      	mov	r1, r4
 80059e2:	4640      	mov	r0, r8
 80059e4:	f7ff fee6 	bl	80057b4 <_printf_common>
 80059e8:	3001      	adds	r0, #1
 80059ea:	d14a      	bne.n	8005a82 <_printf_i+0x1f2>
 80059ec:	f04f 30ff 	mov.w	r0, #4294967295
 80059f0:	b004      	add	sp, #16
 80059f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	f043 0320 	orr.w	r3, r3, #32
 80059fc:	6023      	str	r3, [r4, #0]
 80059fe:	4833      	ldr	r0, [pc, #204]	@ (8005acc <_printf_i+0x23c>)
 8005a00:	2778      	movs	r7, #120	@ 0x78
 8005a02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	6831      	ldr	r1, [r6, #0]
 8005a0a:	061f      	lsls	r7, r3, #24
 8005a0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a10:	d402      	bmi.n	8005a18 <_printf_i+0x188>
 8005a12:	065f      	lsls	r7, r3, #25
 8005a14:	bf48      	it	mi
 8005a16:	b2ad      	uxthmi	r5, r5
 8005a18:	6031      	str	r1, [r6, #0]
 8005a1a:	07d9      	lsls	r1, r3, #31
 8005a1c:	bf44      	itt	mi
 8005a1e:	f043 0320 	orrmi.w	r3, r3, #32
 8005a22:	6023      	strmi	r3, [r4, #0]
 8005a24:	b11d      	cbz	r5, 8005a2e <_printf_i+0x19e>
 8005a26:	2310      	movs	r3, #16
 8005a28:	e7ac      	b.n	8005984 <_printf_i+0xf4>
 8005a2a:	4827      	ldr	r0, [pc, #156]	@ (8005ac8 <_printf_i+0x238>)
 8005a2c:	e7e9      	b.n	8005a02 <_printf_i+0x172>
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	f023 0320 	bic.w	r3, r3, #32
 8005a34:	6023      	str	r3, [r4, #0]
 8005a36:	e7f6      	b.n	8005a26 <_printf_i+0x196>
 8005a38:	4616      	mov	r6, r2
 8005a3a:	e7bd      	b.n	80059b8 <_printf_i+0x128>
 8005a3c:	6833      	ldr	r3, [r6, #0]
 8005a3e:	6825      	ldr	r5, [r4, #0]
 8005a40:	6961      	ldr	r1, [r4, #20]
 8005a42:	1d18      	adds	r0, r3, #4
 8005a44:	6030      	str	r0, [r6, #0]
 8005a46:	062e      	lsls	r6, r5, #24
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	d501      	bpl.n	8005a50 <_printf_i+0x1c0>
 8005a4c:	6019      	str	r1, [r3, #0]
 8005a4e:	e002      	b.n	8005a56 <_printf_i+0x1c6>
 8005a50:	0668      	lsls	r0, r5, #25
 8005a52:	d5fb      	bpl.n	8005a4c <_printf_i+0x1bc>
 8005a54:	8019      	strh	r1, [r3, #0]
 8005a56:	2300      	movs	r3, #0
 8005a58:	6123      	str	r3, [r4, #16]
 8005a5a:	4616      	mov	r6, r2
 8005a5c:	e7bc      	b.n	80059d8 <_printf_i+0x148>
 8005a5e:	6833      	ldr	r3, [r6, #0]
 8005a60:	1d1a      	adds	r2, r3, #4
 8005a62:	6032      	str	r2, [r6, #0]
 8005a64:	681e      	ldr	r6, [r3, #0]
 8005a66:	6862      	ldr	r2, [r4, #4]
 8005a68:	2100      	movs	r1, #0
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	f7fa fbc0 	bl	80001f0 <memchr>
 8005a70:	b108      	cbz	r0, 8005a76 <_printf_i+0x1e6>
 8005a72:	1b80      	subs	r0, r0, r6
 8005a74:	6060      	str	r0, [r4, #4]
 8005a76:	6863      	ldr	r3, [r4, #4]
 8005a78:	6123      	str	r3, [r4, #16]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a80:	e7aa      	b.n	80059d8 <_printf_i+0x148>
 8005a82:	6923      	ldr	r3, [r4, #16]
 8005a84:	4632      	mov	r2, r6
 8005a86:	4649      	mov	r1, r9
 8005a88:	4640      	mov	r0, r8
 8005a8a:	47d0      	blx	sl
 8005a8c:	3001      	adds	r0, #1
 8005a8e:	d0ad      	beq.n	80059ec <_printf_i+0x15c>
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	079b      	lsls	r3, r3, #30
 8005a94:	d413      	bmi.n	8005abe <_printf_i+0x22e>
 8005a96:	68e0      	ldr	r0, [r4, #12]
 8005a98:	9b03      	ldr	r3, [sp, #12]
 8005a9a:	4298      	cmp	r0, r3
 8005a9c:	bfb8      	it	lt
 8005a9e:	4618      	movlt	r0, r3
 8005aa0:	e7a6      	b.n	80059f0 <_printf_i+0x160>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	4632      	mov	r2, r6
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	4640      	mov	r0, r8
 8005aaa:	47d0      	blx	sl
 8005aac:	3001      	adds	r0, #1
 8005aae:	d09d      	beq.n	80059ec <_printf_i+0x15c>
 8005ab0:	3501      	adds	r5, #1
 8005ab2:	68e3      	ldr	r3, [r4, #12]
 8005ab4:	9903      	ldr	r1, [sp, #12]
 8005ab6:	1a5b      	subs	r3, r3, r1
 8005ab8:	42ab      	cmp	r3, r5
 8005aba:	dcf2      	bgt.n	8005aa2 <_printf_i+0x212>
 8005abc:	e7eb      	b.n	8005a96 <_printf_i+0x206>
 8005abe:	2500      	movs	r5, #0
 8005ac0:	f104 0619 	add.w	r6, r4, #25
 8005ac4:	e7f5      	b.n	8005ab2 <_printf_i+0x222>
 8005ac6:	bf00      	nop
 8005ac8:	08005d25 	.word	0x08005d25
 8005acc:	08005d36 	.word	0x08005d36

08005ad0 <memmove>:
 8005ad0:	4288      	cmp	r0, r1
 8005ad2:	b510      	push	{r4, lr}
 8005ad4:	eb01 0402 	add.w	r4, r1, r2
 8005ad8:	d902      	bls.n	8005ae0 <memmove+0x10>
 8005ada:	4284      	cmp	r4, r0
 8005adc:	4623      	mov	r3, r4
 8005ade:	d807      	bhi.n	8005af0 <memmove+0x20>
 8005ae0:	1e43      	subs	r3, r0, #1
 8005ae2:	42a1      	cmp	r1, r4
 8005ae4:	d008      	beq.n	8005af8 <memmove+0x28>
 8005ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005aee:	e7f8      	b.n	8005ae2 <memmove+0x12>
 8005af0:	4402      	add	r2, r0
 8005af2:	4601      	mov	r1, r0
 8005af4:	428a      	cmp	r2, r1
 8005af6:	d100      	bne.n	8005afa <memmove+0x2a>
 8005af8:	bd10      	pop	{r4, pc}
 8005afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005afe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b02:	e7f7      	b.n	8005af4 <memmove+0x24>

08005b04 <_sbrk_r>:
 8005b04:	b538      	push	{r3, r4, r5, lr}
 8005b06:	4d06      	ldr	r5, [pc, #24]	@ (8005b20 <_sbrk_r+0x1c>)
 8005b08:	2300      	movs	r3, #0
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	4608      	mov	r0, r1
 8005b0e:	602b      	str	r3, [r5, #0]
 8005b10:	f7fb fa72 	bl	8000ff8 <_sbrk>
 8005b14:	1c43      	adds	r3, r0, #1
 8005b16:	d102      	bne.n	8005b1e <_sbrk_r+0x1a>
 8005b18:	682b      	ldr	r3, [r5, #0]
 8005b1a:	b103      	cbz	r3, 8005b1e <_sbrk_r+0x1a>
 8005b1c:	6023      	str	r3, [r4, #0]
 8005b1e:	bd38      	pop	{r3, r4, r5, pc}
 8005b20:	20000c68 	.word	0x20000c68

08005b24 <memcpy>:
 8005b24:	440a      	add	r2, r1
 8005b26:	4291      	cmp	r1, r2
 8005b28:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b2c:	d100      	bne.n	8005b30 <memcpy+0xc>
 8005b2e:	4770      	bx	lr
 8005b30:	b510      	push	{r4, lr}
 8005b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b3a:	4291      	cmp	r1, r2
 8005b3c:	d1f9      	bne.n	8005b32 <memcpy+0xe>
 8005b3e:	bd10      	pop	{r4, pc}

08005b40 <_realloc_r>:
 8005b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b44:	4680      	mov	r8, r0
 8005b46:	4615      	mov	r5, r2
 8005b48:	460c      	mov	r4, r1
 8005b4a:	b921      	cbnz	r1, 8005b56 <_realloc_r+0x16>
 8005b4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b50:	4611      	mov	r1, r2
 8005b52:	f7ff bc4b 	b.w	80053ec <_malloc_r>
 8005b56:	b92a      	cbnz	r2, 8005b64 <_realloc_r+0x24>
 8005b58:	f7ff fbdc 	bl	8005314 <_free_r>
 8005b5c:	2400      	movs	r4, #0
 8005b5e:	4620      	mov	r0, r4
 8005b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b64:	f000 f81a 	bl	8005b9c <_malloc_usable_size_r>
 8005b68:	4285      	cmp	r5, r0
 8005b6a:	4606      	mov	r6, r0
 8005b6c:	d802      	bhi.n	8005b74 <_realloc_r+0x34>
 8005b6e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005b72:	d8f4      	bhi.n	8005b5e <_realloc_r+0x1e>
 8005b74:	4629      	mov	r1, r5
 8005b76:	4640      	mov	r0, r8
 8005b78:	f7ff fc38 	bl	80053ec <_malloc_r>
 8005b7c:	4607      	mov	r7, r0
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d0ec      	beq.n	8005b5c <_realloc_r+0x1c>
 8005b82:	42b5      	cmp	r5, r6
 8005b84:	462a      	mov	r2, r5
 8005b86:	4621      	mov	r1, r4
 8005b88:	bf28      	it	cs
 8005b8a:	4632      	movcs	r2, r6
 8005b8c:	f7ff ffca 	bl	8005b24 <memcpy>
 8005b90:	4621      	mov	r1, r4
 8005b92:	4640      	mov	r0, r8
 8005b94:	f7ff fbbe 	bl	8005314 <_free_r>
 8005b98:	463c      	mov	r4, r7
 8005b9a:	e7e0      	b.n	8005b5e <_realloc_r+0x1e>

08005b9c <_malloc_usable_size_r>:
 8005b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ba0:	1f18      	subs	r0, r3, #4
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	bfbc      	itt	lt
 8005ba6:	580b      	ldrlt	r3, [r1, r0]
 8005ba8:	18c0      	addlt	r0, r0, r3
 8005baa:	4770      	bx	lr

08005bac <_init>:
 8005bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bae:	bf00      	nop
 8005bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bb2:	bc08      	pop	{r3}
 8005bb4:	469e      	mov	lr, r3
 8005bb6:	4770      	bx	lr

08005bb8 <_fini>:
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bba:	bf00      	nop
 8005bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bbe:	bc08      	pop	{r3}
 8005bc0:	469e      	mov	lr, r3
 8005bc2:	4770      	bx	lr
